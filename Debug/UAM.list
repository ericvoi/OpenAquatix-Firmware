
UAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029270  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003138  08029540  08029540  0002a540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802c678  0802c678  0002d678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802c680  0802c680  0002d680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802c684  0802c684  0002d684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000560  24000000  0802c688  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002a754  24000560  0802cbe8  0002e560  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2402acb4  0802cbe8  0002ecb4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002e560  2**0
                  CONTENTS, READONLY
 10 .debug_info   00057e65  00000000  00000000  0002e58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000bfbb  00000000  00000000  000863f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003b20  00000000  00000000  000923b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002c7a  00000000  00000000  00095ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00047e35  00000000  00000000  00098b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005c88f  00000000  00000000  000e097f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00186356  00000000  00000000  0013d20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  002c3564  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00010cd0  00000000  00000000  002c361c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  002d42ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00003aac  00000000  00000000  002d434b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000000d8  00000000  00000000  002d7df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000560 	.word	0x24000560
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08029528 	.word	0x08029528

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000564 	.word	0x24000564
 800030c:	08029528 	.word	0x08029528

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9c0 	b.w	8000ad0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	468e      	mov	lr, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	4688      	mov	r8, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4617      	mov	r7, r2
 80007ec:	d962      	bls.n	80008b4 <__udivmoddi4+0xdc>
 80007ee:	fab2 f682 	clz	r6, r2
 80007f2:	b14e      	cbz	r6, 8000808 <__udivmoddi4+0x30>
 80007f4:	f1c6 0320 	rsb	r3, r6, #32
 80007f8:	fa01 f806 	lsl.w	r8, r1, r6
 80007fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000800:	40b7      	lsls	r7, r6
 8000802:	ea43 0808 	orr.w	r8, r3, r8
 8000806:	40b4      	lsls	r4, r6
 8000808:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800080c:	fa1f fc87 	uxth.w	ip, r7
 8000810:	fbb8 f1fe 	udiv	r1, r8, lr
 8000814:	0c23      	lsrs	r3, r4, #16
 8000816:	fb0e 8811 	mls	r8, lr, r1, r8
 800081a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800081e:	fb01 f20c 	mul.w	r2, r1, ip
 8000822:	429a      	cmp	r2, r3
 8000824:	d909      	bls.n	800083a <__udivmoddi4+0x62>
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	f101 30ff 	add.w	r0, r1, #4294967295
 800082c:	f080 80ea 	bcs.w	8000a04 <__udivmoddi4+0x22c>
 8000830:	429a      	cmp	r2, r3
 8000832:	f240 80e7 	bls.w	8000a04 <__udivmoddi4+0x22c>
 8000836:	3902      	subs	r1, #2
 8000838:	443b      	add	r3, r7
 800083a:	1a9a      	subs	r2, r3, r2
 800083c:	b2a3      	uxth	r3, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800084a:	fb00 fc0c 	mul.w	ip, r0, ip
 800084e:	459c      	cmp	ip, r3
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x8e>
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	f100 32ff 	add.w	r2, r0, #4294967295
 8000858:	f080 80d6 	bcs.w	8000a08 <__udivmoddi4+0x230>
 800085c:	459c      	cmp	ip, r3
 800085e:	f240 80d3 	bls.w	8000a08 <__udivmoddi4+0x230>
 8000862:	443b      	add	r3, r7
 8000864:	3802      	subs	r0, #2
 8000866:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086a:	eba3 030c 	sub.w	r3, r3, ip
 800086e:	2100      	movs	r1, #0
 8000870:	b11d      	cbz	r5, 800087a <__udivmoddi4+0xa2>
 8000872:	40f3      	lsrs	r3, r6
 8000874:	2200      	movs	r2, #0
 8000876:	e9c5 3200 	strd	r3, r2, [r5]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d905      	bls.n	800088e <__udivmoddi4+0xb6>
 8000882:	b10d      	cbz	r5, 8000888 <__udivmoddi4+0xb0>
 8000884:	e9c5 0100 	strd	r0, r1, [r5]
 8000888:	2100      	movs	r1, #0
 800088a:	4608      	mov	r0, r1
 800088c:	e7f5      	b.n	800087a <__udivmoddi4+0xa2>
 800088e:	fab3 f183 	clz	r1, r3
 8000892:	2900      	cmp	r1, #0
 8000894:	d146      	bne.n	8000924 <__udivmoddi4+0x14c>
 8000896:	4573      	cmp	r3, lr
 8000898:	d302      	bcc.n	80008a0 <__udivmoddi4+0xc8>
 800089a:	4282      	cmp	r2, r0
 800089c:	f200 8105 	bhi.w	8000aaa <__udivmoddi4+0x2d2>
 80008a0:	1a84      	subs	r4, r0, r2
 80008a2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008a6:	2001      	movs	r0, #1
 80008a8:	4690      	mov	r8, r2
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d0e5      	beq.n	800087a <__udivmoddi4+0xa2>
 80008ae:	e9c5 4800 	strd	r4, r8, [r5]
 80008b2:	e7e2      	b.n	800087a <__udivmoddi4+0xa2>
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	f000 8090 	beq.w	80009da <__udivmoddi4+0x202>
 80008ba:	fab2 f682 	clz	r6, r2
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f040 80a4 	bne.w	8000a0c <__udivmoddi4+0x234>
 80008c4:	1a8a      	subs	r2, r1, r2
 80008c6:	0c03      	lsrs	r3, r0, #16
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	b280      	uxth	r0, r0
 80008ce:	b2bc      	uxth	r4, r7
 80008d0:	2101      	movs	r1, #1
 80008d2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008d6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008de:	fb04 f20c 	mul.w	r2, r4, ip
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x11e>
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x11c>
 80008ee:	429a      	cmp	r2, r3
 80008f0:	f200 80e0 	bhi.w	8000ab4 <__udivmoddi4+0x2dc>
 80008f4:	46c4      	mov	ip, r8
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008fc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000900:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000904:	fb02 f404 	mul.w	r4, r2, r4
 8000908:	429c      	cmp	r4, r3
 800090a:	d907      	bls.n	800091c <__udivmoddi4+0x144>
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x142>
 8000914:	429c      	cmp	r4, r3
 8000916:	f200 80ca 	bhi.w	8000aae <__udivmoddi4+0x2d6>
 800091a:	4602      	mov	r2, r0
 800091c:	1b1b      	subs	r3, r3, r4
 800091e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000922:	e7a5      	b.n	8000870 <__udivmoddi4+0x98>
 8000924:	f1c1 0620 	rsb	r6, r1, #32
 8000928:	408b      	lsls	r3, r1
 800092a:	fa22 f706 	lsr.w	r7, r2, r6
 800092e:	431f      	orrs	r7, r3
 8000930:	fa0e f401 	lsl.w	r4, lr, r1
 8000934:	fa20 f306 	lsr.w	r3, r0, r6
 8000938:	fa2e fe06 	lsr.w	lr, lr, r6
 800093c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000940:	4323      	orrs	r3, r4
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	fa1f fc87 	uxth.w	ip, r7
 800094a:	fbbe f0f9 	udiv	r0, lr, r9
 800094e:	0c1c      	lsrs	r4, r3, #16
 8000950:	fb09 ee10 	mls	lr, r9, r0, lr
 8000954:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000958:	fb00 fe0c 	mul.w	lr, r0, ip
 800095c:	45a6      	cmp	lr, r4
 800095e:	fa02 f201 	lsl.w	r2, r2, r1
 8000962:	d909      	bls.n	8000978 <__udivmoddi4+0x1a0>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f100 3aff 	add.w	sl, r0, #4294967295
 800096a:	f080 809c 	bcs.w	8000aa6 <__udivmoddi4+0x2ce>
 800096e:	45a6      	cmp	lr, r4
 8000970:	f240 8099 	bls.w	8000aa6 <__udivmoddi4+0x2ce>
 8000974:	3802      	subs	r0, #2
 8000976:	443c      	add	r4, r7
 8000978:	eba4 040e 	sub.w	r4, r4, lr
 800097c:	fa1f fe83 	uxth.w	lr, r3
 8000980:	fbb4 f3f9 	udiv	r3, r4, r9
 8000984:	fb09 4413 	mls	r4, r9, r3, r4
 8000988:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800098c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000990:	45a4      	cmp	ip, r4
 8000992:	d908      	bls.n	80009a6 <__udivmoddi4+0x1ce>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f103 3eff 	add.w	lr, r3, #4294967295
 800099a:	f080 8082 	bcs.w	8000aa2 <__udivmoddi4+0x2ca>
 800099e:	45a4      	cmp	ip, r4
 80009a0:	d97f      	bls.n	8000aa2 <__udivmoddi4+0x2ca>
 80009a2:	3b02      	subs	r3, #2
 80009a4:	443c      	add	r4, r7
 80009a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009aa:	eba4 040c 	sub.w	r4, r4, ip
 80009ae:	fba0 ec02 	umull	lr, ip, r0, r2
 80009b2:	4564      	cmp	r4, ip
 80009b4:	4673      	mov	r3, lr
 80009b6:	46e1      	mov	r9, ip
 80009b8:	d362      	bcc.n	8000a80 <__udivmoddi4+0x2a8>
 80009ba:	d05f      	beq.n	8000a7c <__udivmoddi4+0x2a4>
 80009bc:	b15d      	cbz	r5, 80009d6 <__udivmoddi4+0x1fe>
 80009be:	ebb8 0203 	subs.w	r2, r8, r3
 80009c2:	eb64 0409 	sbc.w	r4, r4, r9
 80009c6:	fa04 f606 	lsl.w	r6, r4, r6
 80009ca:	fa22 f301 	lsr.w	r3, r2, r1
 80009ce:	431e      	orrs	r6, r3
 80009d0:	40cc      	lsrs	r4, r1
 80009d2:	e9c5 6400 	strd	r6, r4, [r5]
 80009d6:	2100      	movs	r1, #0
 80009d8:	e74f      	b.n	800087a <__udivmoddi4+0xa2>
 80009da:	fbb1 fcf2 	udiv	ip, r1, r2
 80009de:	0c01      	lsrs	r1, r0, #16
 80009e0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009e4:	b280      	uxth	r0, r0
 80009e6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ea:	463b      	mov	r3, r7
 80009ec:	4638      	mov	r0, r7
 80009ee:	463c      	mov	r4, r7
 80009f0:	46b8      	mov	r8, r7
 80009f2:	46be      	mov	lr, r7
 80009f4:	2620      	movs	r6, #32
 80009f6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009fa:	eba2 0208 	sub.w	r2, r2, r8
 80009fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a02:	e766      	b.n	80008d2 <__udivmoddi4+0xfa>
 8000a04:	4601      	mov	r1, r0
 8000a06:	e718      	b.n	800083a <__udivmoddi4+0x62>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	e72c      	b.n	8000866 <__udivmoddi4+0x8e>
 8000a0c:	f1c6 0220 	rsb	r2, r6, #32
 8000a10:	fa2e f302 	lsr.w	r3, lr, r2
 8000a14:	40b7      	lsls	r7, r6
 8000a16:	40b1      	lsls	r1, r6
 8000a18:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a20:	430a      	orrs	r2, r1
 8000a22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a26:	b2bc      	uxth	r4, r7
 8000a28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a32:	fb08 f904 	mul.w	r9, r8, r4
 8000a36:	40b0      	lsls	r0, r6
 8000a38:	4589      	cmp	r9, r1
 8000a3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a3e:	b280      	uxth	r0, r0
 8000a40:	d93e      	bls.n	8000ac0 <__udivmoddi4+0x2e8>
 8000a42:	1879      	adds	r1, r7, r1
 8000a44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a48:	d201      	bcs.n	8000a4e <__udivmoddi4+0x276>
 8000a4a:	4589      	cmp	r9, r1
 8000a4c:	d81f      	bhi.n	8000a8e <__udivmoddi4+0x2b6>
 8000a4e:	eba1 0109 	sub.w	r1, r1, r9
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fb09 f804 	mul.w	r8, r9, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a64:	4542      	cmp	r2, r8
 8000a66:	d229      	bcs.n	8000abc <__udivmoddi4+0x2e4>
 8000a68:	18ba      	adds	r2, r7, r2
 8000a6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a6e:	d2c4      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a70:	4542      	cmp	r2, r8
 8000a72:	d2c2      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a74:	f1a9 0102 	sub.w	r1, r9, #2
 8000a78:	443a      	add	r2, r7
 8000a7a:	e7be      	b.n	80009fa <__udivmoddi4+0x222>
 8000a7c:	45f0      	cmp	r8, lr
 8000a7e:	d29d      	bcs.n	80009bc <__udivmoddi4+0x1e4>
 8000a80:	ebbe 0302 	subs.w	r3, lr, r2
 8000a84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a88:	3801      	subs	r0, #1
 8000a8a:	46e1      	mov	r9, ip
 8000a8c:	e796      	b.n	80009bc <__udivmoddi4+0x1e4>
 8000a8e:	eba7 0909 	sub.w	r9, r7, r9
 8000a92:	4449      	add	r1, r9
 8000a94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9c:	fb09 f804 	mul.w	r8, r9, r4
 8000aa0:	e7db      	b.n	8000a5a <__udivmoddi4+0x282>
 8000aa2:	4673      	mov	r3, lr
 8000aa4:	e77f      	b.n	80009a6 <__udivmoddi4+0x1ce>
 8000aa6:	4650      	mov	r0, sl
 8000aa8:	e766      	b.n	8000978 <__udivmoddi4+0x1a0>
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e6fd      	b.n	80008aa <__udivmoddi4+0xd2>
 8000aae:	443b      	add	r3, r7
 8000ab0:	3a02      	subs	r2, #2
 8000ab2:	e733      	b.n	800091c <__udivmoddi4+0x144>
 8000ab4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ab8:	443b      	add	r3, r7
 8000aba:	e71c      	b.n	80008f6 <__udivmoddi4+0x11e>
 8000abc:	4649      	mov	r1, r9
 8000abe:	e79c      	b.n	80009fa <__udivmoddi4+0x222>
 8000ac0:	eba1 0109 	sub.w	r1, r1, r9
 8000ac4:	46c4      	mov	ip, r8
 8000ac6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aca:	fb09 f804 	mul.w	r8, r9, r4
 8000ace:	e7c4      	b.n	8000a5a <__udivmoddi4+0x282>

08000ad0 <__aeabi_idiv0>:
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <CFG_StartTask>:
bool registerCfgParams();

/* Exported function definitions ---------------------------------------------*/

void CFG_StartTask(void* argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  (void)(argument);
  if (Param_RegisterTask(CFG_TASK, "CFG") == false) {
 8000adc:	4918      	ldr	r1, [pc, #96]	@ (8000b40 <CFG_StartTask+0x6c>)
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 fb64 	bl	80011ac <Param_RegisterTask>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f083 0301 	eor.w	r3, r3, #1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <CFG_StartTask+0x22>
    Error_Routine(ERROR_CFG_INIT);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f007 fe08 	bl	8008706 <Error_Routine>
  }

  if (registerCfgParams() == false) {
 8000af6:	f000 f859 	bl	8000bac <registerCfgParams>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f083 0301 	eor.w	r3, r3, #1
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <CFG_StartTask+0x38>
    Error_Routine(ERROR_CFG_INIT);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f007 fdfd 	bl	8008706 <Error_Routine>
  }

  if (Param_TaskRegistrationComplete(CFG_TASK) == false) {
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 fbcb 	bl	80012a8 <Param_TaskRegistrationComplete>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f083 0301 	eor.w	r3, r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <CFG_StartTask+0x50>
    Error_Routine(ERROR_CFG_INIT);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f007 fdf1 	bl	8008706 <Error_Routine>
  }
  // wait until all tasks parameters have been registered
  waitAllTasksRegistered();
 8000b24:	f000 f834 	bl	8000b90 <waitAllTasksRegistered>

  // then update all parameters from flash
  Param_LoadInit();
 8000b28:	f000 f874 	bl	8000c14 <Param_LoadInit>

  // then indicate to tasks that all parameters have been updated from flash memory
  osEventFlagsSet(param_events, EVENT_PARAMS_LOADED);
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <CFG_StartTask+0x70>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2102      	movs	r1, #2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f01d ffb0 	bl	801ea98 <osEventFlagsSet>
  for (;;) {
    osDelay(10);
 8000b38:	200a      	movs	r0, #10
 8000b3a:	f01d ff52 	bl	801e9e2 <osDelay>
 8000b3e:	e7fb      	b.n	8000b38 <CFG_StartTask+0x64>
 8000b40:	08029540 	.word	0x08029540
 8000b44:	2400057c 	.word	0x2400057c

08000b48 <CFG_CreateParamFlags>:
  }
}

bool CFG_CreateParamFlags(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
      .attr_bits = 0,
      .cb_mem = NULL,
      .cb_size = 0
  };

  param_events = osEventFlagsNew(&event_attr);
 8000b4c:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <CFG_CreateParamFlags+0x24>)
 8000b4e:	f01d ff63 	bl	801ea18 <osEventFlagsNew>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4a06      	ldr	r2, [pc, #24]	@ (8000b70 <CFG_CreateParamFlags+0x28>)
 8000b56:	6013      	str	r3, [r2, #0]

  if (param_events == NULL) {
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <CFG_CreateParamFlags+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <CFG_CreateParamFlags+0x1c>
    return false;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e000      	b.n	8000b66 <CFG_CreateParamFlags+0x1e>
  }
  return true;
 8000b64:	2301      	movs	r3, #1
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	0802ae54 	.word	0x0802ae54
 8000b70:	2400057c 	.word	0x2400057c

08000b74 <CFG_WaitLoadComplete>:

void CFG_WaitLoadComplete(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  osEventFlagsWait(param_events, EVENT_PARAMS_LOADED, osFlagsNoClear, osWaitForever);
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <CFG_WaitLoadComplete+0x18>)
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b80:	2202      	movs	r2, #2
 8000b82:	2102      	movs	r1, #2
 8000b84:	f01d fffb 	bl	801eb7e <osEventFlagsWait>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2400057c 	.word	0x2400057c

08000b90 <waitAllTasksRegistered>:

/* Private function definitions ----------------------------------------------*/

void waitAllTasksRegistered(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  osEventFlagsWait(param_events, EVENT_ALL_TASKS_REGISTERED, osFlagsWaitAny, osWaitForever);
 8000b94:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <waitAllTasksRegistered+0x18>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	f01d ffed 	bl	801eb7e <osEventFlagsWait>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2400057c 	.word	0x2400057c

08000bac <registerCfgParams>:

bool registerCfgParams()
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return true;
 8000bb0:	2301      	movs	r3, #1
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <Param_Init>:
static bool isParamInitialized(ParamIds_t id);

/* Exported function definitions ---------------------------------------------*/

bool Param_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
      .attr_bits = osMutexRecursive,
      .cb_mem = NULL,
      .cb_size = 0
  };

  param_mutex = osMutexNew(&mutex_attr);
 8000bc2:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <Param_Init+0x4c>)
 8000bc4:	f01e f840 	bl	801ec48 <osMutexNew>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <Param_Init+0x50>)
 8000bcc:	6013      	str	r3, [r2, #0]
  if (param_mutex == NULL) {
 8000bce:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <Param_Init+0x50>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <Param_Init+0x1e>
    return false;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e012      	b.n	8000c00 <Param_Init+0x44>
  }
  if (NUM_PARAM > MAX_PARAMETERS) {
    return false;
  }

  for (uint8_t i = 0; i < NUM_TASKS; i++) {
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	e00b      	b.n	8000bf8 <Param_Init+0x3c>
    registered_tasks[i].id = NUM_TASKS; // indicates that the spot has not been filed yet
 8000be0:	79fa      	ldrb	r2, [r7, #7]
 8000be2:	490b      	ldr	r1, [pc, #44]	@ (8000c10 <Param_Init+0x54>)
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	440b      	add	r3, r1
 8000bee:	2204      	movs	r2, #4
 8000bf0:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_TASKS; i++) {
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d9f0      	bls.n	8000be0 <Param_Init+0x24>
  }

  return true;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	0802ae64 	.word	0x0802ae64
 8000c0c:	24000964 	.word	0x24000964
 8000c10:	24000580 	.word	0x24000580

08000c14 <Param_LoadInit>:

bool Param_LoadInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  // Load parameters from flash to overwrite defaults set by register
  return true;
 8000c18:	2301      	movs	r3, #1
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <Param_Register>:

// Note: min and max MUST be 32 bytes for uint16, int16, int8 and uint8
bool Param_Register(ParamIds_t id, const char* name, ParamType_t type,
                    void* value_ptr, size_t value_size, void* min, void* max)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	4613      	mov	r3, r2
 8000c34:	73bb      	strb	r3, [r7, #14]

  if (value_ptr == NULL) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <Param_Register+0x1c>
    return false;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e080      	b.n	8000d42 <Param_Register+0x11e>
  }

  if (osMutexAcquire(param_mutex, osWaitForever) == osOK) {
 8000c40:	4b42      	ldr	r3, [pc, #264]	@ (8000d4c <Param_Register+0x128>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f01e f883 	bl	801ed54 <osMutexAcquire>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d175      	bne.n	8000d40 <Param_Register+0x11c>
    Parameter_t* param = &parameters[id];
 8000c54:	7bfa      	ldrb	r2, [r7, #15]
 8000c56:	4613      	mov	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4a3c      	ldr	r2, [pc, #240]	@ (8000d50 <Param_Register+0x12c>)
 8000c60:	4413      	add	r3, r2
 8000c62:	617b      	str	r3, [r7, #20]
    // check if already initialized
    if (param->value_ptr != NULL) {
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d006      	beq.n	8000c7a <Param_Register+0x56>
      osMutexRelease(param_mutex);
 8000c6c:	4b37      	ldr	r3, [pc, #220]	@ (8000d4c <Param_Register+0x128>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f01e f8ba 	bl	801edea <osMutexRelease>
      return false;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e063      	b.n	8000d42 <Param_Register+0x11e>
    }
    param->id = id;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	7bfa      	ldrb	r2, [r7, #15]
 8000c7e:	701a      	strb	r2, [r3, #0]
    strncpy(param->name, name, sizeof(param->name) - 1);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	221f      	movs	r2, #31
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f024 fbc2 	bl	8025412 <strncpy>
    param->type = type;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	7bba      	ldrb	r2, [r7, #14]
 8000c92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    param->value_ptr = value_ptr;
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	625a      	str	r2, [r3, #36]	@ 0x24
    param->value_size = value_size;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	6a3a      	ldr	r2, [r7, #32]
 8000ca0:	629a      	str	r2, [r3, #40]	@ 0x28
    param->is_modified = false;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    switch (type) {
 8000caa:	7bbb      	ldrb	r3, [r7, #14]
 8000cac:	2b06      	cmp	r3, #6
 8000cae:	bf8c      	ite	hi
 8000cb0:	2201      	movhi	r2, #1
 8000cb2:	2200      	movls	r2, #0
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d139      	bne.n	8000d2e <Param_Register+0x10a>
 8000cba:	2201      	movs	r2, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	f003 022a 	and.w	r2, r3, #42	@ 0x2a
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	bf14      	ite	ne
 8000cc8:	2201      	movne	r2, #1
 8000cca:	2200      	moveq	r2, #0
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d11b      	bne.n	8000d0a <Param_Register+0xe6>
 8000cd2:	f003 0215 	and.w	r2, r3, #21
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	bf14      	ite	ne
 8000cda:	2201      	movne	r2, #1
 8000cdc:	2200      	moveq	r2, #0
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d109      	bne.n	8000cf8 <Param_Register+0xd4>
 8000ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	bf14      	ite	ne
 8000cec:	2301      	movne	r3, #1
 8000cee:	2300      	moveq	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d112      	bne.n	8000d1c <Param_Register+0xf8>
 8000cf6:	e01a      	b.n	8000d2e <Param_Register+0x10a>
      case PARAM_TYPE_UINT8:
      case PARAM_TYPE_UINT16:
      case PARAM_TYPE_UINT32:
        param->limits.u32.min = *(uint32_t*) min;
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
        param->limits.u32.max = *(uint32_t*) max;
 8000d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8000d08:	e013      	b.n	8000d32 <Param_Register+0x10e>
      case PARAM_TYPE_INT8:
      case PARAM_TYPE_INT16:
      case PARAM_TYPE_INT32:
        param->limits.i32.min = *(int32_t*) min;
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	62da      	str	r2, [r3, #44]	@ 0x2c
        param->limits.i32.max = *(int32_t*) max;
 8000d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8000d1a:	e00a      	b.n	8000d32 <Param_Register+0x10e>
      case PARAM_TYPE_FLOAT:
        param->limits.f.min = *(float*) min;
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	62da      	str	r2, [r3, #44]	@ 0x2c
        param->limits.f.max = *(float*) max;
 8000d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8000d2c:	e001      	b.n	8000d32 <Param_Register+0x10e>
      default:
        return false;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e007      	b.n	8000d42 <Param_Register+0x11e>
    }

    osMutexRelease(param_mutex);
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <Param_Register+0x128>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f01e f857 	bl	801edea <osMutexRelease>
    return true;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e000      	b.n	8000d42 <Param_Register+0x11e>
  }
  else {
    return false;
 8000d40:	2300      	movs	r3, #0
  }
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	24000964 	.word	0x24000964
 8000d50:	240005ac 	.word	0x240005ac

08000d54 <Param_GetValue>:

bool Param_GetValue(ParamIds_t id, void* value)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  bool success = false;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]

  if (osMutexAcquire(param_mutex, osWaitForever) == osOK) {
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <Param_GetValue+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f01d fff1 	bl	801ed54 <osMutexAcquire>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d11a      	bne.n	8000dae <Param_GetValue+0x5a>
    Parameter_t* param = findParamById(id);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fafe 	bl	800137c <findParamById>
 8000d80:	60b8      	str	r0, [r7, #8]
    if (isParamInitialized(id) == true) {
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fb0d 	bl	80013a4 <isParamInitialized>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d009      	beq.n	8000da4 <Param_GetValue+0x50>
      memcpy(value, param->value_ptr, param->value_size);
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d98:	461a      	mov	r2, r3
 8000d9a:	6838      	ldr	r0, [r7, #0]
 8000d9c:	f024 fc21 	bl	80255e2 <memcpy>
      success = true;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
    }
    osMutexRelease(param_mutex);
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <Param_GetValue+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f01e f81e 	bl	801edea <osMutexRelease>
  }
  return success;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000964 	.word	0x24000964

08000dbc <Param_GetUint8>:

bool Param_GetUint8(ParamIds_t id, uint8_t* value)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  return Param_GetValue(id, value);
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	6839      	ldr	r1, [r7, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ffc1 	bl	8000d54 <Param_GetValue>
 8000dd2:	4603      	mov	r3, r0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <Param_GetUint32>:
{
  return Param_GetValue(id, value);
}

bool Param_GetUint32(ParamIds_t id, uint32_t* value)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  return Param_GetValue(id, value);
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	6839      	ldr	r1, [r7, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ffb1 	bl	8000d54 <Param_GetValue>
 8000df2:	4603      	mov	r3, r0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <Param_GetFloat>:
{
  return Param_GetValue(id, value);
}

bool Param_GetFloat(ParamIds_t id, float* value)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  return Param_GetValue(id, value);
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ffa1 	bl	8000d54 <Param_GetValue>
 8000e12:	4603      	mov	r3, r0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Param_GetName>:

char* Param_GetName (ParamIds_t id)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  char* param_name = NULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  if (osMutexAcquire(param_mutex, osWaitForever) == osOK) {
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <Param_GetName+0x54>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e32:	4618      	mov	r0, r3
 8000e34:	f01d ff8e 	bl	801ed54 <osMutexAcquire>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d113      	bne.n	8000e66 <Param_GetName+0x4a>
    Parameter_t* param = findParamById(id);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fa9b 	bl	800137c <findParamById>
 8000e46:	60b8      	str	r0, [r7, #8]
    if (isParamInitialized(id) == true) {
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 faaa 	bl	80013a4 <isParamInitialized>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <Param_GetName+0x40>
      param_name = param->name;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
    }
    osMutexRelease(param_mutex);
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <Param_GetName+0x54>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f01d ffc2 	bl	801edea <osMutexRelease>
  }
  return param_name;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	24000964 	.word	0x24000964

08000e74 <Param_GetLimits>:

bool Param_GetLimits(ParamIds_t id, void* min, void* max)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	73fb      	strb	r3, [r7, #15]
  bool success = false;
 8000e82:	2300      	movs	r3, #0
 8000e84:	75fb      	strb	r3, [r7, #23]

  if (osMutexAcquire(param_mutex, osWaitForever) == osOK) {
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <Param_GetLimits+0x70>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f01d ff60 	bl	801ed54 <osMutexAcquire>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d11e      	bne.n	8000ed8 <Param_GetLimits+0x64>
    Parameter_t* param = findParamById(id);
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fa6d 	bl	800137c <findParamById>
 8000ea2:	6138      	str	r0, [r7, #16]
    if (isParamInitialized(id) == true) {
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fa7c 	bl	80013a4 <isParamInitialized>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00d      	beq.n	8000ece <Param_GetLimits+0x5a>
      // Always copies fixed-size data regardless of actual parameter type
      memcpy(min, &param->limits.u32.min, sizeof(uint32_t));
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	332c      	adds	r3, #44	@ 0x2c
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	601a      	str	r2, [r3, #0]
      memcpy(max, &param->limits.u32.max, sizeof(uint32_t));
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	3330      	adds	r3, #48	@ 0x30
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
      success = true;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	75fb      	strb	r3, [r7, #23]
    }
    osMutexRelease(param_mutex);
 8000ece:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <Param_GetLimits+0x70>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f01d ff89 	bl	801edea <osMutexRelease>
  }
  return success;
 8000ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24000964 	.word	0x24000964

08000ee8 <Param_GetUint8Limits>:

bool Param_GetUint8Limits (ParamIds_t id, uint8_t* min, uint8_t* max)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t minimum, maximum;
  if (Param_GetLimits(id, &minimum, &maximum) == false) {
 8000ef6:	f107 0210 	add.w	r2, r7, #16
 8000efa:	f107 0114 	add.w	r1, r7, #20
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ffb7 	bl	8000e74 <Param_GetLimits>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f083 0301 	eor.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <Param_GetUint8Limits+0x2e>
    return false;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e008      	b.n	8000f28 <Param_GetUint8Limits+0x40>
  }
  *min = (uint8_t) minimum;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	701a      	strb	r2, [r3, #0]
  *max = (uint8_t) maximum;
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	701a      	strb	r2, [r3, #0]
  return true;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <Param_GetUint32Limits>:
  *min = (int16_t) minimum;
  *max = (int16_t) maximum;
  return true;
}
bool Param_GetUint32Limits(ParamIds_t id, uint32_t* min, uint32_t* max)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	73fb      	strb	r3, [r7, #15]
  return Param_GetLimits(id, min, max);
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff95 	bl	8000e74 <Param_GetLimits>
 8000f4a:	4603      	mov	r3, r0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <Param_GetFloatLimits>:
bool Param_GetInt32Limits (ParamIds_t id, int32_t* min, int32_t* max)
{
  return Param_GetLimits(id, min, max);
}
bool Param_GetFloatLimits (ParamIds_t id, float* min, float* max)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	73fb      	strb	r3, [r7, #15]
  return Param_GetLimits(id, min, max);
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	68b9      	ldr	r1, [r7, #8]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff83 	bl	8000e74 <Param_GetLimits>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <Param_SetValue>:

bool Param_SetValue(ParamIds_t id, const void* value)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  bool success = false;
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]

  if (osMutexAcquire(param_mutex, osWaitForever) == osOK) {
 8000f88:	4b6f      	ldr	r3, [pc, #444]	@ (8001148 <Param_SetValue+0x1d0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	4618      	mov	r0, r3
 8000f92:	f01d fedf 	bl	801ed54 <osMutexAcquire>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f040 80cf 	bne.w	800113c <Param_SetValue+0x1c4>
    Parameter_t* param = findParamById(id);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f9eb 	bl	800137c <findParamById>
 8000fa6:	6138      	str	r0, [r7, #16]
    if (isParamInitialized(id) == true) {
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f9fa 	bl	80013a4 <isParamInitialized>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 80bd 	beq.w	8001132 <Param_SetValue+0x1ba>
      bool valid = false;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	77bb      	strb	r3, [r7, #30]
      switch (param->type) {
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	bf8c      	ite	hi
 8000fc6:	2201      	movhi	r2, #1
 8000fc8:	2200      	movls	r2, #0
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	f040 8093 	bne.w	80010f8 <Param_SetValue+0x180>
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	f003 022a 	and.w	r2, r3, #42	@ 0x2a
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2201      	movne	r2, #1
 8000fe2:	2200      	moveq	r2, #0
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	2a00      	cmp	r2, #0
 8000fe8:	d13c      	bne.n	8001064 <Param_SetValue+0xec>
 8000fea:	f003 0215 	and.w	r2, r3, #21
 8000fee:	2a00      	cmp	r2, #0
 8000ff0:	bf14      	ite	ne
 8000ff2:	2201      	movne	r2, #1
 8000ff4:	2200      	moveq	r2, #0
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d109      	bne.n	8001010 <Param_SetValue+0x98>
 8000ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001000:	2b00      	cmp	r3, #0
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d154      	bne.n	80010b8 <Param_SetValue+0x140>
          valid = (val >= param->limits.f.min &&
                   val <= param->limits.f.max);
          break;
        }
        default:
          break;
 800100e:	e073      	b.n	80010f8 <Param_SetValue+0x180>
          uint32_t val = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
          if (param->type == PARAM_TYPE_UINT8) {
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <Param_SetValue+0xae>
            val = (uint32_t) (*(uint8_t*) value);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	e00b      	b.n	800103e <Param_SetValue+0xc6>
          else if (param->type == PARAM_TYPE_UINT16) {
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800102c:	2b02      	cmp	r3, #2
 800102e:	d103      	bne.n	8001038 <Param_SetValue+0xc0>
            val = (uint32_t) (*(uint16_t*) value);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	e002      	b.n	800103e <Param_SetValue+0xc6>
            val = *(uint32_t*) value;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
          valid = (val >= param->limits.u32.min &&
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	429a      	cmp	r2, r3
 8001046:	d306      	bcc.n	8001056 <Param_SetValue+0xde>
                   val <= param->limits.u32.max);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          valid = (val >= param->limits.u32.min &&
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	429a      	cmp	r2, r3
 8001050:	d801      	bhi.n	8001056 <Param_SetValue+0xde>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <Param_SetValue+0xe0>
 8001056:	2300      	movs	r3, #0
 8001058:	77bb      	strb	r3, [r7, #30]
 800105a:	7fbb      	ldrb	r3, [r7, #30]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	77bb      	strb	r3, [r7, #30]
          break;
 8001062:	e04a      	b.n	80010fa <Param_SetValue+0x182>
          int32_t val = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
          if (param->type == PARAM_TYPE_INT8) {
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800106e:	2b01      	cmp	r3, #1
 8001070:	d103      	bne.n	800107a <Param_SetValue+0x102>
            val = (int32_t) (*(uint8_t*) value);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	e00b      	b.n	8001092 <Param_SetValue+0x11a>
          else if (param->type == PARAM_TYPE_INT16) {
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001080:	2b03      	cmp	r3, #3
 8001082:	d103      	bne.n	800108c <Param_SetValue+0x114>
            val = (int32_t) (*(uint16_t*) value);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e002      	b.n	8001092 <Param_SetValue+0x11a>
            val = *(int32_t*) value;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	617b      	str	r3, [r7, #20]
          valid = (val >= param->limits.i32.min &&
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	db06      	blt.n	80010aa <Param_SetValue+0x132>
                   val <= param->limits.i32.max);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          valid = (val >= param->limits.i32.min &&
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dc01      	bgt.n	80010aa <Param_SetValue+0x132>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <Param_SetValue+0x134>
 80010aa:	2300      	movs	r3, #0
 80010ac:	77bb      	strb	r3, [r7, #30]
 80010ae:	7fbb      	ldrb	r3, [r7, #30]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	77bb      	strb	r3, [r7, #30]
          break;
 80010b6:	e020      	b.n	80010fa <Param_SetValue+0x182>
          float val = *(float*) value;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
          valid = (val >= param->limits.f.min &&
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80010c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	db0b      	blt.n	80010ea <Param_SetValue+0x172>
                   val <= param->limits.f.max);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
          valid = (val >= param->limits.f.min &&
 80010d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d801      	bhi.n	80010ea <Param_SetValue+0x172>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <Param_SetValue+0x174>
 80010ea:	2300      	movs	r3, #0
 80010ec:	77bb      	strb	r3, [r7, #30]
 80010ee:	7fbb      	ldrb	r3, [r7, #30]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	77bb      	strb	r3, [r7, #30]
          break;
 80010f6:	e000      	b.n	80010fa <Param_SetValue+0x182>
          break;
 80010f8:	bf00      	nop
      }

      if (valid) {
 80010fa:	7fbb      	ldrb	r3, [r7, #30]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d018      	beq.n	8001132 <Param_SetValue+0x1ba>
        if (memcmp(param->value_ptr, value, param->value_size) != 0) {
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	461a      	mov	r2, r3
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	f024 f969 	bl	80253e2 <memcmp>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00b      	beq.n	800112e <Param_SetValue+0x1b6>
          memcpy(param->value_ptr, value, param->value_size);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111e:	461a      	mov	r2, r3
 8001120:	6839      	ldr	r1, [r7, #0]
 8001122:	f024 fa5e 	bl	80255e2 <memcpy>
          param->is_modified = true;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          // TODO: trigger save to flash
        }
        success = true;
 800112e:	2301      	movs	r3, #1
 8001130:	77fb      	strb	r3, [r7, #31]
      }
    }
    osMutexRelease(param_mutex);
 8001132:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <Param_SetValue+0x1d0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f01d fe57 	bl	801edea <osMutexRelease>
  }
  return success;
 800113c:	7ffb      	ldrb	r3, [r7, #31]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	24000964 	.word	0x24000964

0800114c <Param_SetUint8>:

bool Param_SetUint8(ParamIds_t id, uint8_t* value)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
  return Param_SetValue(id, value);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff0b 	bl	8000f78 <Param_SetValue>
 8001162:	4603      	mov	r3, r0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Param_SetUint32>:
{
  return Param_SetValue(id, value);
}

bool Param_SetUint32(ParamIds_t id, uint32_t* value)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  return Param_SetValue(id, value);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fefb 	bl	8000f78 <Param_SetValue>
 8001182:	4603      	mov	r3, r0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <Param_SetFloat>:
{
  return Param_SetValue(id, value);
}

bool Param_SetFloat(ParamIds_t id, float* value)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  return Param_SetValue(id, value);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	6839      	ldr	r1, [r7, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff feeb 	bl	8000f78 <Param_SetValue>
 80011a2:	4603      	mov	r3, r0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <Param_RegisterTask>:

bool Param_RegisterTask(TaskIds_t task_id, const char* task_name)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if (registered_tasks_count >= NUM_TASKS) {
 80011b8:	4b38      	ldr	r3, [pc, #224]	@ (800129c <Param_RegisterTask+0xf0>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d901      	bls.n	80011c4 <Param_RegisterTask+0x18>
    return false;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e066      	b.n	8001292 <Param_RegisterTask+0xe6>
  }

  if (osMutexAcquire(param_mutex, osWaitForever) == osOK) {
 80011c4:	4b36      	ldr	r3, [pc, #216]	@ (80012a0 <Param_RegisterTask+0xf4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	4618      	mov	r0, r3
 80011ce:	f01d fdc1 	bl	801ed54 <osMutexAcquire>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d15b      	bne.n	8001290 <Param_RegisterTask+0xe4>
    for (uint8_t i = 0; i < registered_tasks_count; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e014      	b.n	8001208 <Param_RegisterTask+0x5c>
      if (registered_tasks[i].id == task_id) {
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	4930      	ldr	r1, [pc, #192]	@ (80012a4 <Param_RegisterTask+0xf8>)
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	440b      	add	r3, r1
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	79fa      	ldrb	r2, [r7, #7]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d106      	bne.n	8001202 <Param_RegisterTask+0x56>
        osMutexRelease(param_mutex);
 80011f4:	4b2a      	ldr	r3, [pc, #168]	@ (80012a0 <Param_RegisterTask+0xf4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f01d fdf6 	bl	801edea <osMutexRelease>
        return false;
 80011fe:	2300      	movs	r3, #0
 8001200:	e047      	b.n	8001292 <Param_RegisterTask+0xe6>
    for (uint8_t i = 0; i < registered_tasks_count; i++) {
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	3301      	adds	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	4b24      	ldr	r3, [pc, #144]	@ (800129c <Param_RegisterTask+0xf0>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	429a      	cmp	r2, r3
 8001210:	d3e5      	bcc.n	80011de <Param_RegisterTask+0x32>
      }
    }
    registered_tasks[registered_tasks_count].id = task_id;
 8001212:	4b22      	ldr	r3, [pc, #136]	@ (800129c <Param_RegisterTask+0xf0>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	4a22      	ldr	r2, [pc, #136]	@ (80012a4 <Param_RegisterTask+0xf8>)
 800121a:	460b      	mov	r3, r1
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	701a      	strb	r2, [r3, #0]

    strncpy(registered_tasks[registered_tasks_count].name, task_name,
 8001228:	4b1c      	ldr	r3, [pc, #112]	@ (800129c <Param_RegisterTask+0xf0>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <Param_RegisterTask+0xf8>)
 8001238:	4413      	add	r3, r2
 800123a:	3301      	adds	r3, #1
 800123c:	2207      	movs	r2, #7
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f024 f8e6 	bl	8025412 <strncpy>
            TASK_NAME_LEN - 1);
    registered_tasks[registered_tasks_count].name[TASK_NAME_LEN - 1] = '\0';
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <Param_RegisterTask+0xf0>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	4a15      	ldr	r2, [pc, #84]	@ (80012a4 <Param_RegisterTask+0xf8>)
 800124e:	460b      	mov	r3, r1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	3308      	adds	r3, #8
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]

    registered_tasks[registered_tasks_count].is_registered = false;
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <Param_RegisterTask+0xf0>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <Param_RegisterTask+0xf8>)
 8001266:	460b      	mov	r3, r1
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	3309      	adds	r3, #9
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]

    registered_tasks_count++;
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <Param_RegisterTask+0xf0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <Param_RegisterTask+0xf0>)
 8001280:	701a      	strb	r2, [r3, #0]
    osMutexRelease(param_mutex);
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <Param_RegisterTask+0xf4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f01d fdaf 	bl	801edea <osMutexRelease>
    return true;
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <Param_RegisterTask+0xe6>
  }
  return false;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240005a8 	.word	0x240005a8
 80012a0:	24000964 	.word	0x24000964
 80012a4:	24000580 	.word	0x24000580

080012a8 <Param_TaskRegistrationComplete>:

bool Param_TaskRegistrationComplete(TaskIds_t task_id)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  if (osMutexAcquire(param_mutex, osWaitForever) == osOK) {
 80012b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <Param_TaskRegistrationComplete+0xc0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f04f 31ff 	mov.w	r1, #4294967295
 80012ba:	4618      	mov	r0, r3
 80012bc:	f01d fd4a 	bl	801ed54 <osMutexAcquire>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d14b      	bne.n	800135e <Param_TaskRegistrationComplete+0xb6>
    for (uint8_t i = 0; i < registered_tasks_count; i++) {
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	e03c      	b.n	8001346 <Param_TaskRegistrationComplete+0x9e>
      if (registered_tasks[i].id == task_id) {
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	4927      	ldr	r1, [pc, #156]	@ (800136c <Param_TaskRegistrationComplete+0xc4>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	440b      	add	r3, r1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	79fa      	ldrb	r2, [r7, #7]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d12e      	bne.n	8001340 <Param_TaskRegistrationComplete+0x98>
        if (registered_tasks[i].is_registered == false) {
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	4921      	ldr	r1, [pc, #132]	@ (800136c <Param_TaskRegistrationComplete+0xc4>)
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	440b      	add	r3, r1
 80012f0:	3309      	adds	r3, #9
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	f083 0301 	eor.w	r3, r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d029      	beq.n	8001352 <Param_TaskRegistrationComplete+0xaa>
          registered_tasks[i].is_registered = true;
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	491a      	ldr	r1, [pc, #104]	@ (800136c <Param_TaskRegistrationComplete+0xc4>)
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	440b      	add	r3, r1
 800130c:	3309      	adds	r3, #9
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
          complete_registrations_count++;
 8001312:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <Param_TaskRegistrationComplete+0xc8>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <Param_TaskRegistrationComplete+0xc8>)
 800131c:	701a      	strb	r2, [r3, #0]

          if (complete_registrations_count == NUM_TASKS) {
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <Param_TaskRegistrationComplete+0xc8>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b04      	cmp	r3, #4
 8001324:	d105      	bne.n	8001332 <Param_TaskRegistrationComplete+0x8a>
            osEventFlagsSet(param_events, EVENT_ALL_TASKS_REGISTERED);
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <Param_TaskRegistrationComplete+0xcc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2101      	movs	r1, #1
 800132c:	4618      	mov	r0, r3
 800132e:	f01d fbb3 	bl	801ea98 <osEventFlagsSet>
          }

          osMutexRelease(param_mutex);
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <Param_TaskRegistrationComplete+0xc0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f01d fd57 	bl	801edea <osMutexRelease>
          return true;
 800133c:	2301      	movs	r3, #1
 800133e:	e00f      	b.n	8001360 <Param_TaskRegistrationComplete+0xb8>
    for (uint8_t i = 0; i < registered_tasks_count; i++) {
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <Param_TaskRegistrationComplete+0xd0>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	429a      	cmp	r2, r3
 800134e:	d3bd      	bcc.n	80012cc <Param_TaskRegistrationComplete+0x24>
 8001350:	e000      	b.n	8001354 <Param_TaskRegistrationComplete+0xac>
        }
        break;
 8001352:	bf00      	nop
      }
    }
    osMutexRelease(param_mutex);
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <Param_TaskRegistrationComplete+0xc0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f01d fd46 	bl	801edea <osMutexRelease>
  }
  return false;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	24000964 	.word	0x24000964
 800136c:	24000580 	.word	0x24000580
 8001370:	240005a9 	.word	0x240005a9
 8001374:	2400057c 	.word	0x2400057c
 8001378:	240005a8 	.word	0x240005a8

0800137c <findParamById>:


/* Private function definitions ----------------------------------------------*/

Parameter_t* findParamById(ParamIds_t id)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  return &parameters[id];
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4a03      	ldr	r2, [pc, #12]	@ (80013a0 <findParamById+0x24>)
 8001392:	4413      	add	r3, r2
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	240005ac 	.word	0x240005ac

080013a4 <isParamInitialized>:

bool isParamInitialized(ParamIds_t id)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  Parameter_t* param = findParamById(id);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffe3 	bl	800137c <findParamById>
 80013b6:	60f8      	str	r0, [r7, #12]
  if (param == NULL) {
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <isParamInitialized+0x1e>
    return false;
 80013be:	2300      	movs	r3, #0
 80013c0:	e006      	b.n	80013d0 <isParamInitialized+0x2c>
  }

  if (param->value_ptr == NULL) {
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <isParamInitialized+0x2a>
    return false;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <isParamInitialized+0x2c>
  }

  return true;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <COMM_RegisterConfigurationMenu>:
};

/* Exported function definitions ---------------------------------------------*/

bool COMM_RegisterConfigurationMenu()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
  bool ret = registerMenu(&configMenu) && registerMenu(&univConfigMenu) &&
 80013de:	48b8      	ldr	r0, [pc, #736]	@ (80016c0 <COMM_RegisterConfigurationMenu+0x2e8>)
 80013e0:	f003 f88a 	bl	80044f8 <registerMenu>
 80013e4:	4603      	mov	r3, r0
             registerMenu(&demodCalConfigExport) && registerMenu(&dauUartConfigBaud) &&
             registerMenu(&demodConfigStartFcn) && registerMenu(&univFskConfigF0) &&
             registerMenu(&univFskConfigF1) && registerMenu(&univFhbfskConfigFreqSpacing) &&
             registerMenu(&univFhbfskConfigDwell) && registerMenu(&univConfigBandwidth) &&
             registerMenu(&univFhbfskConfigTones) && registerMenu(&setNewId) &&
             registerMenu(&setStationary) && registerMenu(&demodConfigDecisionFcn);
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 815f 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
  bool ret = registerMenu(&configMenu) && registerMenu(&univConfigMenu) &&
 80013ec:	48b5      	ldr	r0, [pc, #724]	@ (80016c4 <COMM_RegisterConfigurationMenu+0x2ec>)
 80013ee:	f003 f883 	bl	80044f8 <registerMenu>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 8158 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modConfigMenu) && registerMenu(&demodConfigMenu) &&
 80013fa:	48b3      	ldr	r0, [pc, #716]	@ (80016c8 <COMM_RegisterConfigurationMenu+0x2f0>)
 80013fc:	f003 f87c 	bl	80044f8 <registerMenu>
 8001400:	4603      	mov	r3, r0
  bool ret = registerMenu(&configMenu) && registerMenu(&univConfigMenu) &&
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8151 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modConfigMenu) && registerMenu(&demodConfigMenu) &&
 8001408:	48b0      	ldr	r0, [pc, #704]	@ (80016cc <COMM_RegisterConfigurationMenu+0x2f4>)
 800140a:	f003 f875 	bl	80044f8 <registerMenu>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 814a 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&dauConfigMenu) && registerMenu(&ledConfigMenu) && 
 8001416:	48ae      	ldr	r0, [pc, #696]	@ (80016d0 <COMM_RegisterConfigurationMenu+0x2f8>)
 8001418:	f003 f86e 	bl	80044f8 <registerMenu>
 800141c:	4603      	mov	r3, r0
             registerMenu(&modConfigMenu) && registerMenu(&demodConfigMenu) &&
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8143 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&dauConfigMenu) && registerMenu(&ledConfigMenu) && 
 8001424:	48ab      	ldr	r0, [pc, #684]	@ (80016d4 <COMM_RegisterConfigurationMenu+0x2fc>)
 8001426:	f003 f867 	bl	80044f8 <registerMenu>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 813c 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univConfigEnc) && registerMenu(&univConfigErr) && 
 8001432:	48a9      	ldr	r0, [pc, #676]	@ (80016d8 <COMM_RegisterConfigurationMenu+0x300>)
 8001434:	f003 f860 	bl	80044f8 <registerMenu>
 8001438:	4603      	mov	r3, r0
             registerMenu(&dauConfigMenu) && registerMenu(&ledConfigMenu) && 
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8135 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univConfigEnc) && registerMenu(&univConfigErr) && 
 8001440:	48a6      	ldr	r0, [pc, #664]	@ (80016dc <COMM_RegisterConfigurationMenu+0x304>)
 8001442:	f003 f859 	bl	80044f8 <registerMenu>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 812e 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univConfigMod) && registerMenu(&univConfigFskMenu) && 
 800144e:	48a4      	ldr	r0, [pc, #656]	@ (80016e0 <COMM_RegisterConfigurationMenu+0x308>)
 8001450:	f003 f852 	bl	80044f8 <registerMenu>
 8001454:	4603      	mov	r3, r0
             registerMenu(&univConfigEnc) && registerMenu(&univConfigErr) && 
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8127 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univConfigMod) && registerMenu(&univConfigFskMenu) && 
 800145c:	48a1      	ldr	r0, [pc, #644]	@ (80016e4 <COMM_RegisterConfigurationMenu+0x30c>)
 800145e:	f003 f84b 	bl	80044f8 <registerMenu>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8120 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univConfigFhbskMenu) && registerMenu(&univConfigBaud) && 
 800146a:	489f      	ldr	r0, [pc, #636]	@ (80016e8 <COMM_RegisterConfigurationMenu+0x310>)
 800146c:	f003 f844 	bl	80044f8 <registerMenu>
 8001470:	4603      	mov	r3, r0
             registerMenu(&univConfigMod) && registerMenu(&univConfigFskMenu) && 
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8119 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univConfigFhbskMenu) && registerMenu(&univConfigBaud) && 
 8001478:	489c      	ldr	r0, [pc, #624]	@ (80016ec <COMM_RegisterConfigurationMenu+0x314>)
 800147a:	f003 f83d 	bl	80044f8 <registerMenu>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 8112 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univConfigFc) && registerMenu(&univConfigBitPeriod) && 
 8001486:	489a      	ldr	r0, [pc, #616]	@ (80016f0 <COMM_RegisterConfigurationMenu+0x318>)
 8001488:	f003 f836 	bl	80044f8 <registerMenu>
 800148c:	4603      	mov	r3, r0
             registerMenu(&univConfigFhbskMenu) && registerMenu(&univConfigBaud) && 
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 810b 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univConfigFc) && registerMenu(&univConfigBitPeriod) && 
 8001494:	4897      	ldr	r0, [pc, #604]	@ (80016f4 <COMM_RegisterConfigurationMenu+0x31c>)
 8001496:	f003 f82f 	bl	80044f8 <registerMenu>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 8104 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univConfigExport) && registerMenu(&univConfigImport) && 
 80014a2:	4895      	ldr	r0, [pc, #596]	@ (80016f8 <COMM_RegisterConfigurationMenu+0x320>)
 80014a4:	f003 f828 	bl	80044f8 <registerMenu>
 80014a8:	4603      	mov	r3, r0
             registerMenu(&univConfigFc) && registerMenu(&univConfigBitPeriod) && 
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80fd 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univConfigExport) && registerMenu(&univConfigImport) && 
 80014b0:	4892      	ldr	r0, [pc, #584]	@ (80016fc <COMM_RegisterConfigurationMenu+0x324>)
 80014b2:	f003 f821 	bl	80044f8 <registerMenu>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80f6 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modConfigSps) && registerMenu(&modConfigDacStep) &&
 80014be:	4890      	ldr	r0, [pc, #576]	@ (8001700 <COMM_RegisterConfigurationMenu+0x328>)
 80014c0:	f003 f81a 	bl	80044f8 <registerMenu>
 80014c4:	4603      	mov	r3, r0
             registerMenu(&univConfigExport) && registerMenu(&univConfigImport) && 
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80ef 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modConfigSps) && registerMenu(&modConfigDacStep) &&
 80014cc:	488d      	ldr	r0, [pc, #564]	@ (8001704 <COMM_RegisterConfigurationMenu+0x32c>)
 80014ce:	f003 f813 	bl	80044f8 <registerMenu>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80e8 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modConfigCalMenu) && registerMenu(&modConfigFeedbackMenu) && 
 80014da:	488b      	ldr	r0, [pc, #556]	@ (8001708 <COMM_RegisterConfigurationMenu+0x330>)
 80014dc:	f003 f80c 	bl	80044f8 <registerMenu>
 80014e0:	4603      	mov	r3, r0
             registerMenu(&modConfigSps) && registerMenu(&modConfigDacStep) &&
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80e1 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modConfigCalMenu) && registerMenu(&modConfigFeedbackMenu) && 
 80014e8:	4888      	ldr	r0, [pc, #544]	@ (800170c <COMM_RegisterConfigurationMenu+0x334>)
 80014ea:	f003 f805 	bl	80044f8 <registerMenu>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80da 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modConfigPwr) && registerMenu(&demodConfigSps) && 
 80014f6:	4886      	ldr	r0, [pc, #536]	@ (8001710 <COMM_RegisterConfigurationMenu+0x338>)
 80014f8:	f002 fffe 	bl	80044f8 <registerMenu>
 80014fc:	4603      	mov	r3, r0
             registerMenu(&modConfigCalMenu) && registerMenu(&modConfigFeedbackMenu) && 
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80d3 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modConfigPwr) && registerMenu(&demodConfigSps) && 
 8001504:	4883      	ldr	r0, [pc, #524]	@ (8001714 <COMM_RegisterConfigurationMenu+0x33c>)
 8001506:	f002 fff7 	bl	80044f8 <registerMenu>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80cc 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&demodConfigCalMenu) && registerMenu(&dauConfigUart) && 
 8001512:	4881      	ldr	r0, [pc, #516]	@ (8001718 <COMM_RegisterConfigurationMenu+0x340>)
 8001514:	f002 fff0 	bl	80044f8 <registerMenu>
 8001518:	4603      	mov	r3, r0
             registerMenu(&modConfigPwr) && registerMenu(&demodConfigSps) && 
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80c5 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&demodConfigCalMenu) && registerMenu(&dauConfigUart) && 
 8001520:	487e      	ldr	r0, [pc, #504]	@ (800171c <COMM_RegisterConfigurationMenu+0x344>)
 8001522:	f002 ffe9 	bl	80044f8 <registerMenu>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80be 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&dauConfigSleep) && registerMenu(&ledConfigBrightness) &&
 800152e:	487c      	ldr	r0, [pc, #496]	@ (8001720 <COMM_RegisterConfigurationMenu+0x348>)
 8001530:	f002 ffe2 	bl	80044f8 <registerMenu>
 8001534:	4603      	mov	r3, r0
             registerMenu(&demodConfigCalMenu) && registerMenu(&dauConfigUart) && 
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 80b7 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&dauConfigSleep) && registerMenu(&ledConfigBrightness) &&
 800153c:	4879      	ldr	r0, [pc, #484]	@ (8001724 <COMM_RegisterConfigurationMenu+0x34c>)
 800153e:	f002 ffdb 	bl	80044f8 <registerMenu>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80b0 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&ledConfigToggle) && registerMenu(&modCalConfigFreq) &&
 800154a:	4877      	ldr	r0, [pc, #476]	@ (8001728 <COMM_RegisterConfigurationMenu+0x350>)
 800154c:	f002 ffd4 	bl	80044f8 <registerMenu>
 8001550:	4603      	mov	r3, r0
             registerMenu(&dauConfigSleep) && registerMenu(&ledConfigBrightness) &&
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 80a9 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&ledConfigToggle) && registerMenu(&modCalConfigFreq) &&
 8001558:	4874      	ldr	r0, [pc, #464]	@ (800172c <COMM_RegisterConfigurationMenu+0x354>)
 800155a:	f002 ffcd 	bl	80044f8 <registerMenu>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80a2 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modCalConfigFreqStep) && registerMenu(&modCalConfigTvr) && 
 8001566:	4872      	ldr	r0, [pc, #456]	@ (8001730 <COMM_RegisterConfigurationMenu+0x358>)
 8001568:	f002 ffc6 	bl	80044f8 <registerMenu>
 800156c:	4603      	mov	r3, r0
             registerMenu(&ledConfigToggle) && registerMenu(&modCalConfigFreq) &&
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 809b 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modCalConfigFreqStep) && registerMenu(&modCalConfigTvr) && 
 8001574:	486f      	ldr	r0, [pc, #444]	@ (8001734 <COMM_RegisterConfigurationMenu+0x35c>)
 8001576:	f002 ffbf 	bl	80044f8 <registerMenu>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 8094 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modCalConfigPerform) && registerMenu(&modCalConfigExport) &&
 8001582:	486d      	ldr	r0, [pc, #436]	@ (8001738 <COMM_RegisterConfigurationMenu+0x360>)
 8001584:	f002 ffb8 	bl	80044f8 <registerMenu>
 8001588:	4603      	mov	r3, r0
             registerMenu(&modCalConfigFreqStep) && registerMenu(&modCalConfigTvr) && 
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 808d 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modCalConfigPerform) && registerMenu(&modCalConfigExport) &&
 8001590:	486a      	ldr	r0, [pc, #424]	@ (800173c <COMM_RegisterConfigurationMenu+0x364>)
 8001592:	f002 ffb1 	bl	80044f8 <registerMenu>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8086 	beq.w	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modCalConfigTune) && registerMenu(&modCalConfigRecv) && 
 800159e:	4868      	ldr	r0, [pc, #416]	@ (8001740 <COMM_RegisterConfigurationMenu+0x368>)
 80015a0:	f002 ffaa 	bl	80044f8 <registerMenu>
 80015a4:	4603      	mov	r3, r0
             registerMenu(&modCalConfigPerform) && registerMenu(&modCalConfigExport) &&
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d07f      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modCalConfigTune) && registerMenu(&modCalConfigRecv) && 
 80015aa:	4866      	ldr	r0, [pc, #408]	@ (8001744 <COMM_RegisterConfigurationMenu+0x36c>)
 80015ac:	f002 ffa4 	bl	80044f8 <registerMenu>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d079      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modCalConfigVmax) && registerMenu(&modFbConfigToggle) &&
 80015b6:	4864      	ldr	r0, [pc, #400]	@ (8001748 <COMM_RegisterConfigurationMenu+0x370>)
 80015b8:	f002 ff9e 	bl	80044f8 <registerMenu>
 80015bc:	4603      	mov	r3, r0
             registerMenu(&modCalConfigTune) && registerMenu(&modCalConfigRecv) && 
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d073      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modCalConfigVmax) && registerMenu(&modFbConfigToggle) &&
 80015c2:	4862      	ldr	r0, [pc, #392]	@ (800174c <COMM_RegisterConfigurationMenu+0x374>)
 80015c4:	f002 ff98 	bl	80044f8 <registerMenu>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d06d      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modFbConfigRatio) && registerMenu(&modFbConfigSps) &&
 80015ce:	4860      	ldr	r0, [pc, #384]	@ (8001750 <COMM_RegisterConfigurationMenu+0x378>)
 80015d0:	f002 ff92 	bl	80044f8 <registerMenu>
 80015d4:	4603      	mov	r3, r0
             registerMenu(&modCalConfigVmax) && registerMenu(&modFbConfigToggle) &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d067      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&modFbConfigRatio) && registerMenu(&modFbConfigSps) &&
 80015da:	485e      	ldr	r0, [pc, #376]	@ (8001754 <COMM_RegisterConfigurationMenu+0x37c>)
 80015dc:	f002 ff8c 	bl	80044f8 <registerMenu>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d061      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&demodCalConfigRatio) && registerMenu(&demodCalConfigPerform) && 
 80015e6:	485c      	ldr	r0, [pc, #368]	@ (8001758 <COMM_RegisterConfigurationMenu+0x380>)
 80015e8:	f002 ff86 	bl	80044f8 <registerMenu>
 80015ec:	4603      	mov	r3, r0
             registerMenu(&modFbConfigRatio) && registerMenu(&modFbConfigSps) &&
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d05b      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&demodCalConfigRatio) && registerMenu(&demodCalConfigPerform) && 
 80015f2:	485a      	ldr	r0, [pc, #360]	@ (800175c <COMM_RegisterConfigurationMenu+0x384>)
 80015f4:	f002 ff80 	bl	80044f8 <registerMenu>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d055      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&demodCalConfigFreq) && registerMenu(&demodCalConfigFreqStep) && 
 80015fe:	4858      	ldr	r0, [pc, #352]	@ (8001760 <COMM_RegisterConfigurationMenu+0x388>)
 8001600:	f002 ff7a 	bl	80044f8 <registerMenu>
 8001604:	4603      	mov	r3, r0
             registerMenu(&demodCalConfigRatio) && registerMenu(&demodCalConfigPerform) && 
 8001606:	2b00      	cmp	r3, #0
 8001608:	d04f      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&demodCalConfigFreq) && registerMenu(&demodCalConfigFreqStep) && 
 800160a:	4856      	ldr	r0, [pc, #344]	@ (8001764 <COMM_RegisterConfigurationMenu+0x38c>)
 800160c:	f002 ff74 	bl	80044f8 <registerMenu>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d049      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&demodCalConfigExport) && registerMenu(&dauUartConfigBaud) &&
 8001616:	4854      	ldr	r0, [pc, #336]	@ (8001768 <COMM_RegisterConfigurationMenu+0x390>)
 8001618:	f002 ff6e 	bl	80044f8 <registerMenu>
 800161c:	4603      	mov	r3, r0
             registerMenu(&demodCalConfigFreq) && registerMenu(&demodCalConfigFreqStep) && 
 800161e:	2b00      	cmp	r3, #0
 8001620:	d043      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&demodCalConfigExport) && registerMenu(&dauUartConfigBaud) &&
 8001622:	4852      	ldr	r0, [pc, #328]	@ (800176c <COMM_RegisterConfigurationMenu+0x394>)
 8001624:	f002 ff68 	bl	80044f8 <registerMenu>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d03d      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&demodConfigStartFcn) && registerMenu(&univFskConfigF0) &&
 800162e:	4850      	ldr	r0, [pc, #320]	@ (8001770 <COMM_RegisterConfigurationMenu+0x398>)
 8001630:	f002 ff62 	bl	80044f8 <registerMenu>
 8001634:	4603      	mov	r3, r0
             registerMenu(&demodCalConfigExport) && registerMenu(&dauUartConfigBaud) &&
 8001636:	2b00      	cmp	r3, #0
 8001638:	d037      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&demodConfigStartFcn) && registerMenu(&univFskConfigF0) &&
 800163a:	484e      	ldr	r0, [pc, #312]	@ (8001774 <COMM_RegisterConfigurationMenu+0x39c>)
 800163c:	f002 ff5c 	bl	80044f8 <registerMenu>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d031      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univFskConfigF1) && registerMenu(&univFhbfskConfigFreqSpacing) &&
 8001646:	484c      	ldr	r0, [pc, #304]	@ (8001778 <COMM_RegisterConfigurationMenu+0x3a0>)
 8001648:	f002 ff56 	bl	80044f8 <registerMenu>
 800164c:	4603      	mov	r3, r0
             registerMenu(&demodConfigStartFcn) && registerMenu(&univFskConfigF0) &&
 800164e:	2b00      	cmp	r3, #0
 8001650:	d02b      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univFskConfigF1) && registerMenu(&univFhbfskConfigFreqSpacing) &&
 8001652:	484a      	ldr	r0, [pc, #296]	@ (800177c <COMM_RegisterConfigurationMenu+0x3a4>)
 8001654:	f002 ff50 	bl	80044f8 <registerMenu>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d025      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univFhbfskConfigDwell) && registerMenu(&univConfigBandwidth) &&
 800165e:	4848      	ldr	r0, [pc, #288]	@ (8001780 <COMM_RegisterConfigurationMenu+0x3a8>)
 8001660:	f002 ff4a 	bl	80044f8 <registerMenu>
 8001664:	4603      	mov	r3, r0
             registerMenu(&univFskConfigF1) && registerMenu(&univFhbfskConfigFreqSpacing) &&
 8001666:	2b00      	cmp	r3, #0
 8001668:	d01f      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univFhbfskConfigDwell) && registerMenu(&univConfigBandwidth) &&
 800166a:	4846      	ldr	r0, [pc, #280]	@ (8001784 <COMM_RegisterConfigurationMenu+0x3ac>)
 800166c:	f002 ff44 	bl	80044f8 <registerMenu>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univFhbfskConfigTones) && registerMenu(&setNewId) &&
 8001676:	4844      	ldr	r0, [pc, #272]	@ (8001788 <COMM_RegisterConfigurationMenu+0x3b0>)
 8001678:	f002 ff3e 	bl	80044f8 <registerMenu>
 800167c:	4603      	mov	r3, r0
             registerMenu(&univFhbfskConfigDwell) && registerMenu(&univConfigBandwidth) &&
 800167e:	2b00      	cmp	r3, #0
 8001680:	d013      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&univFhbfskConfigTones) && registerMenu(&setNewId) &&
 8001682:	4842      	ldr	r0, [pc, #264]	@ (800178c <COMM_RegisterConfigurationMenu+0x3b4>)
 8001684:	f002 ff38 	bl	80044f8 <registerMenu>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00d      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&setStationary) && registerMenu(&demodConfigDecisionFcn);
 800168e:	4840      	ldr	r0, [pc, #256]	@ (8001790 <COMM_RegisterConfigurationMenu+0x3b8>)
 8001690:	f002 ff32 	bl	80044f8 <registerMenu>
 8001694:	4603      	mov	r3, r0
             registerMenu(&univFhbfskConfigTones) && registerMenu(&setNewId) &&
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
             registerMenu(&setStationary) && registerMenu(&demodConfigDecisionFcn);
 800169a:	483e      	ldr	r0, [pc, #248]	@ (8001794 <COMM_RegisterConfigurationMenu+0x3bc>)
 800169c:	f002 ff2c 	bl	80044f8 <registerMenu>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <COMM_RegisterConfigurationMenu+0x2d2>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <COMM_RegisterConfigurationMenu+0x2d4>
 80016aa:	2300      	movs	r3, #0
  bool ret = registerMenu(&configMenu) && registerMenu(&univConfigMenu) &&
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	71fb      	strb	r3, [r7, #7]

  return ret;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	0802ae78 	.word	0x0802ae78
 80016c4:	0802aea0 	.word	0x0802aea0
 80016c8:	0802aec8 	.word	0x0802aec8
 80016cc:	0802aef0 	.word	0x0802aef0
 80016d0:	0802af18 	.word	0x0802af18
 80016d4:	0802af40 	.word	0x0802af40
 80016d8:	0802afb8 	.word	0x0802afb8
 80016dc:	0802afe0 	.word	0x0802afe0
 80016e0:	0802b008 	.word	0x0802b008
 80016e4:	0802b030 	.word	0x0802b030
 80016e8:	0802b058 	.word	0x0802b058
 80016ec:	0802b080 	.word	0x0802b080
 80016f0:	0802b0a8 	.word	0x0802b0a8
 80016f4:	0802b0d0 	.word	0x0802b0d0
 80016f8:	0802b120 	.word	0x0802b120
 80016fc:	0802b148 	.word	0x0802b148
 8001700:	0802b170 	.word	0x0802b170
 8001704:	0802b198 	.word	0x0802b198
 8001708:	0802b1c0 	.word	0x0802b1c0
 800170c:	0802b1e8 	.word	0x0802b1e8
 8001710:	0802b210 	.word	0x0802b210
 8001714:	0802b238 	.word	0x0802b238
 8001718:	0802b260 	.word	0x0802b260
 800171c:	0802b2d8 	.word	0x0802b2d8
 8001720:	0802b300 	.word	0x0802b300
 8001724:	0802b328 	.word	0x0802b328
 8001728:	0802b350 	.word	0x0802b350
 800172c:	0802b440 	.word	0x0802b440
 8001730:	0802b468 	.word	0x0802b468
 8001734:	0802b490 	.word	0x0802b490
 8001738:	0802b4b8 	.word	0x0802b4b8
 800173c:	0802b4e0 	.word	0x0802b4e0
 8001740:	0802b508 	.word	0x0802b508
 8001744:	0802b530 	.word	0x0802b530
 8001748:	0802b558 	.word	0x0802b558
 800174c:	0802b580 	.word	0x0802b580
 8001750:	0802b5a8 	.word	0x0802b5a8
 8001754:	0802b5d0 	.word	0x0802b5d0
 8001758:	0802b5f8 	.word	0x0802b5f8
 800175c:	0802b620 	.word	0x0802b620
 8001760:	0802b648 	.word	0x0802b648
 8001764:	0802b670 	.word	0x0802b670
 8001768:	0802b698 	.word	0x0802b698
 800176c:	0802b6c0 	.word	0x0802b6c0
 8001770:	0802b288 	.word	0x0802b288
 8001774:	0802b378 	.word	0x0802b378
 8001778:	0802b3a0 	.word	0x0802b3a0
 800177c:	0802b3c8 	.word	0x0802b3c8
 8001780:	0802b3f0 	.word	0x0802b3f0
 8001784:	0802b0f8 	.word	0x0802b0f8
 8001788:	0802b418 	.word	0x0802b418
 800178c:	0802af68 	.word	0x0802af68
 8001790:	0802af90 	.word	0x0802af90
 8001794:	0802b2b0 	.word	0x0802b2b0

08001798 <setEncoding>:

/* Private function definitions ----------------------------------------------*/

void setEncoding(void* argument)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2207      	movs	r2, #7
 80017aa:	701a      	strb	r2, [r3, #0]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <setErrorCorrection>:

void setErrorCorrection(void* argument)
{
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  char* descriptors[] = {"CRC-8", "CRC-16", "CRC-32", "Checksum-8", "Checksum-16", "Checksum-32"};
 80017c4:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <setErrorCorrection+0x38>)
 80017c6:	f107 040c 	add.w	r4, r7, #12
 80017ca:	461d      	mov	r5, r3
 80017cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017d4:	e884 0003 	stmia.w	r4, {r0, r1}

  COMMLoops_LoopEnum(context, PARAM_ERROR_CORRECTION, descriptors, sizeof(descriptors) / sizeof(descriptors[0]));
 80017d8:	f107 020c 	add.w	r2, r7, #12
 80017dc:	2306      	movs	r3, #6
 80017de:	210f      	movs	r1, #15
 80017e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017e2:	f001 fd11 	bl	8003208 <COMMLoops_LoopEnum>
}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	@ 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bdb0      	pop	{r4, r5, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08029abc 	.word	0x08029abc

080017f4 <setModulationMethod>:

void setModulationMethod(void* argument)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	617b      	str	r3, [r7, #20]

  char* descriptors[] = {"FSK", "FHBFSK"};
 8001800:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <setModulationMethod+0x30>)
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800180a:	e883 0003 	stmia.w	r3, {r0, r1}
  
  COMMLoops_LoopEnum(context, PARAM_MOD_DEMOD_METHOD, descriptors, sizeof(descriptors) / sizeof(descriptors[0]));
 800180e:	f107 020c 	add.w	r2, r7, #12
 8001812:	2302      	movs	r3, #2
 8001814:	2105      	movs	r1, #5
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f001 fcf6 	bl	8003208 <COMMLoops_LoopEnum>
}
 800181c:	bf00      	nop
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	08029ae0 	.word	0x08029ae0

08001828 <setFskF0>:

void setFskF0(void* argument)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopUint32(context, PARAM_FSK_F0);
 8001834:	2103      	movs	r1, #3
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f001 f9b6 	bl	8002ba8 <COMMLoops_LoopUint32>
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <setFskF1>:

void setFskF1(void* argument)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopUint32(context, PARAM_FSK_F1);
 8001850:	2104      	movs	r1, #4
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f001 f9a8 	bl	8002ba8 <COMMLoops_LoopUint32>
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <setFhbfskFreqSpacing>:

void setFhbfskFreqSpacing(void* argument)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopUint8(context, PARAM_FHBFSK_FREQ_SPACING);
 800186c:	2107      	movs	r1, #7
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f001 fa9c 	bl	8002dac <COMMLoops_LoopUint8>
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <setFhbfskDwell>:

void setFhbfskDwell(void* argument)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopUint8(context, PARAM_FHBFSK_DWELL_TIME);
 8001888:	2108      	movs	r1, #8
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f001 fa8e 	bl	8002dac <COMMLoops_LoopUint8>
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <setFhbfskTones>:

void setFhbfskTones(void* argument)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopUint8(context, PARAM_FHBFSK_NUM_TONES);
 80018a4:	210a      	movs	r1, #10
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f001 fa80 	bl	8002dac <COMMLoops_LoopUint8>
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <setBaudRate>:

void setBaudRate(void* argument)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	@ 0x38
 80018b8:	af04      	add	r7, sp, #16
 80018ba:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24

  ParamIds_t param_id = PARAM_BAUD;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ParamState_t old_state = context->state->state;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  static float new_baud;

  char* parameter_name = Param_GetName(param_id);
 80018d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff faa1 	bl	8000e1c <Param_GetName>
 80018da:	61f8      	str	r0, [r7, #28]

  if (parameter_name == NULL) {
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10c      	bne.n	80018fc <setBaudRate+0x48>
    COMM_TransmitData(uninitialized_parameter_message, CALC_LEN, context->comm_interface);
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80018e8:	461a      	mov	r2, r3
 80018ea:	2100      	movs	r1, #0
 80018ec:	48a9      	ldr	r0, [pc, #676]	@ (8001b94 <setBaudRate+0x2e0>)
 80018ee:	f002 f9dd 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2207      	movs	r2, #7
 80018f8:	701a      	strb	r2, [r3, #0]
    return;
 80018fa:	e147      	b.n	8001b8c <setBaudRate+0x2d8>
  }

  float min, max;
  if (Param_GetFloatLimits(param_id, &min, &max) == false) {
 80018fc:	f107 0214 	add.w	r2, r7, #20
 8001900:	f107 0118 	add.w	r1, r7, #24
 8001904:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fb23 	bl	8000f54 <Param_GetFloatLimits>
 800190e:	4603      	mov	r3, r0
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00c      	beq.n	8001934 <setBaudRate+0x80>
    COMM_TransmitData(error_limits_message, CALC_LEN, context->comm_interface);
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8001920:	461a      	mov	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	489c      	ldr	r0, [pc, #624]	@ (8001b98 <setBaudRate+0x2e4>)
 8001926:	f002 f9c1 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2207      	movs	r2, #7
 8001930:	701a      	strb	r2, [r3, #0]
    return;
 8001932:	e12b      	b.n	8001b8c <setBaudRate+0x2d8>
  }

  do {
    switch (context->state->state) {
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b02      	cmp	r3, #2
 800193c:	f000 80be 	beq.w	8001abc <setBaudRate+0x208>
 8001940:	2b02      	cmp	r3, #2
 8001942:	f300 8116 	bgt.w	8001b72 <setBaudRate+0x2be>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <setBaudRate+0x9c>
 800194a:	2b01      	cmp	r3, #1
 800194c:	d05e      	beq.n	8001a0c <setBaudRate+0x158>
 800194e:	e110      	b.n	8001b72 <setBaudRate+0x2be>
      case PARAM_STATE_0:
        float current_value;
        if (Param_GetFloat(param_id, &current_value) == false) {
 8001950:	f107 0210 	add.w	r2, r7, #16
 8001954:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fa4e 	bl	8000dfc <Param_GetFloat>
 8001960:	4603      	mov	r3, r0
 8001962:	f083 0301 	eor.w	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d016      	beq.n	800199a <setBaudRate+0xe6>
          sprintf((char*) context->output_buffer, "\r\nError obtaining current value for %s\r\n", parameter_name);
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	4989      	ldr	r1, [pc, #548]	@ (8001b9c <setBaudRate+0x2e8>)
 8001976:	4618      	mov	r0, r3
 8001978:	f023 fca0 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8001988:	461a      	mov	r2, r3
 800198a:	2100      	movs	r1, #0
 800198c:	f002 f98e 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2207      	movs	r2, #7
 8001996:	701a      	strb	r2, [r3, #0]
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          sprintf((char*) context->output_buffer, "Please enter a new value from %.2f to %.2f:\r\n", min, max);
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_1;
        }
        break;
 8001998:	e0f0      	b.n	8001b7c <setBaudRate+0x2c8>
          sprintf((char*) context->output_buffer, "\r\n\r\nCurrent value of %s: %.2f\r\n", parameter_name, current_value);
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019a8:	ed8d 7b00 	vstr	d7, [sp]
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	497c      	ldr	r1, [pc, #496]	@ (8001ba0 <setBaudRate+0x2ec>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f023 fc83 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80019bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019be:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80019c2:	461a      	mov	r2, r3
 80019c4:	2100      	movs	r1, #0
 80019c6:	f002 f971 	bl	8003cac <COMM_TransmitData>
          sprintf((char*) context->output_buffer, "Please enter a new value from %.2f to %.2f:\r\n", min, max);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80019d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80019d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80019d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019e0:	ed8d 7b00 	vstr	d7, [sp]
 80019e4:	ec53 2b16 	vmov	r2, r3, d6
 80019e8:	496e      	ldr	r1, [pc, #440]	@ (8001ba4 <setBaudRate+0x2f0>)
 80019ea:	f023 fc67 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80019fa:	461a      	mov	r2, r3
 80019fc:	2100      	movs	r1, #0
 80019fe:	f002 f955 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_1;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
        break;
 8001a0a:	e0b7      	b.n	8001b7c <setBaudRate+0x2c8>
      case PARAM_STATE_1:
        if (checkFloat(context->input, &new_baud, min, max) == true) {
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	3304      	adds	r3, #4
 8001a10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a14:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a18:	eef0 0a47 	vmov.f32	s1, s14
 8001a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a20:	4961      	ldr	r1, [pc, #388]	@ (8001ba8 <setBaudRate+0x2f4>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f006 ff66 	bl	80088f4 <checkFloat>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d01e      	beq.n	8001a6c <setBaudRate+0x1b8>
          MESS_RoundBaud(&new_baud);
 8001a2e:	485e      	ldr	r0, [pc, #376]	@ (8001ba8 <setBaudRate+0x2f4>)
 8001a30:	f005 fe1e 	bl	8007670 <MESS_RoundBaud>
          sprintf((char*) context->output_buffer, "\r\nThe closest allowable baud rate is %.2f. Is this ok? (y/n)\r\n", new_baud);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8001a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba8 <setBaudRate+0x2f4>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a44:	ec53 2b17 	vmov	r2, r3, d7
 8001a48:	4958      	ldr	r1, [pc, #352]	@ (8001bac <setBaudRate+0x2f8>)
 8001a4a:	f023 fc37 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	f002 f925 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_2;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2202      	movs	r2, #2
 8001a68:	701a      	strb	r2, [r3, #0]
          break;
 8001a6a:	e087      	b.n	8001b7c <setBaudRate+0x2c8>
        } else {
          sprintf((char*) context->output_buffer, "\r\nValue %.2f is outside the range of %.2f and %.2f\r\n", new_baud, min, max);
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8001a72:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba8 <setBaudRate+0x2f4>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001a7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a84:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a88:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001a8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001a90:	ed8d 7b00 	vstr	d7, [sp]
 8001a94:	ec53 2b15 	vmov	r2, r3, d5
 8001a98:	4945      	ldr	r1, [pc, #276]	@ (8001bb0 <setBaudRate+0x2fc>)
 8001a9a:	f023 fc0f 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2100      	movs	r1, #0
 8001aae:	f002 f8fd 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001aba:	e05f      	b.n	8001b7c <setBaudRate+0x2c8>
      case PARAM_STATE_2:
        bool confirmed = false;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]
        if (checkYesNo(*context->input, &confirmed) == true) {
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac2:	791b      	ldrb	r3, [r3, #4]
 8001ac4:	f107 020f 	add.w	r2, r7, #15
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f006 ff42 	bl	8008954 <checkYesNo>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d037      	beq.n	8001b46 <setBaudRate+0x292>
          if (confirmed == true) {
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d02f      	beq.n	8001b3c <setBaudRate+0x288>
            if (Param_SetFloat(param_id, &new_baud) == true) {
 8001adc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ae0:	4931      	ldr	r1, [pc, #196]	@ (8001ba8 <setBaudRate+0x2f4>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fb52 	bl	800118c <Param_SetFloat>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d019      	beq.n	8001b22 <setBaudRate+0x26e>
              sprintf((char*) context->output_buffer, "\r\n%s successfully set to new value of %.2f\r\n", parameter_name, new_baud);
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001af4:	4a2c      	ldr	r2, [pc, #176]	@ (8001ba8 <setBaudRate+0x2f4>)
 8001af6:	edd2 7a00 	vldr	s15, [r2]
 8001afa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001afe:	ed8d 7b00 	vstr	d7, [sp]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	492b      	ldr	r1, [pc, #172]	@ (8001bb4 <setBaudRate+0x300>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f023 fbd8 	bl	80252bc <siprintf>
              COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	f002 f8c6 	bl	8003cac <COMM_TransmitData>
 8001b20:	e007      	b.n	8001b32 <setBaudRate+0x27e>
            }
            else {
              COMM_TransmitData(error_updating_message, CALC_LEN, context->comm_interface);
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4822      	ldr	r0, [pc, #136]	@ (8001bb8 <setBaudRate+0x304>)
 8001b2e:	f002 f8bd 	bl	8003cac <COMM_TransmitData>
            }
            context->state->state = PARAM_STATE_COMPLETE;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2207      	movs	r2, #7
 8001b38:	701a      	strb	r2, [r3, #0]
        else {
          sprintf((char*) context->output_buffer, "\r\nInvalid Input!\r\n");
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_1;
        }
        break;
 8001b3a:	e01f      	b.n	8001b7c <setBaudRate+0x2c8>
            context->state->state = PARAM_STATE_COMPLETE;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2207      	movs	r2, #7
 8001b42:	701a      	strb	r2, [r3, #0]
        break;
 8001b44:	e01a      	b.n	8001b7c <setBaudRate+0x2c8>
          sprintf((char*) context->output_buffer, "\r\nInvalid Input!\r\n");
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b4c:	491b      	ldr	r1, [pc, #108]	@ (8001bbc <setBaudRate+0x308>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f023 fbb4 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8001b60:	461a      	mov	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	f002 f8a2 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_1;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
        break;
 8001b70:	e004      	b.n	8001b7c <setBaudRate+0x2c8>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2207      	movs	r2, #7
 8001b78:	701a      	strb	r2, [r3, #0]
        break;
 8001b7a:	bf00      	nop
    }
  } while (old_state > context->state->state);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001b86:	429a      	cmp	r2, r3
 8001b88:	f63f aed4 	bhi.w	8001934 <setBaudRate+0x80>
}
 8001b8c:	3728      	adds	r7, #40	@ 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	24000140 	.word	0x24000140
 8001b98:	24000174 	.word	0x24000174
 8001b9c:	08029ae8 	.word	0x08029ae8
 8001ba0:	08029b14 	.word	0x08029b14
 8001ba4:	08029b34 	.word	0x08029b34
 8001ba8:	24000968 	.word	0x24000968
 8001bac:	08029b64 	.word	0x08029b64
 8001bb0:	08029ba4 	.word	0x08029ba4
 8001bb4:	08029bdc 	.word	0x08029bdc
 8001bb8:	240001a4 	.word	0x240001a4
 8001bbc:	08029c0c 	.word	0x08029c0c

08001bc0 <setCenterFrequency>:

void setCenterFrequency(void* argument)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopUint32(context, PARAM_FC);
 8001bcc:	2106      	movs	r1, #6
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 ffea 	bl	8002ba8 <COMMLoops_LoopUint32>
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <setBitPeriod>:

void setBitPeriod(void* argument)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2207      	movs	r2, #7
 8001bee:	701a      	strb	r2, [r3, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <setBandwidth>:

// TODO: replace with get
void setBandwidth(void* argument)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	60fb      	str	r3, [r7, #12]

  // COMMLoops_LoopUint32(context, PARAM_BANDWIDTH);
  context->state->state = PARAM_STATE_COMPLETE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	701a      	strb	r2, [r3, #0]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <printConfigOptions>:

void printConfigOptions(void* argument)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	701a      	strb	r2, [r3, #0]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <importConfiOptions>:

void importConfiOptions(void* argument)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	701a      	strb	r2, [r3, #0]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <setModSps>:

void setModSps(void* argument)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	701a      	strb	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <setMaxDacStep>:

void setMaxDacStep(void* argument)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	701a      	strb	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <setOutputPower>:

void setOutputPower(void* argument)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2207      	movs	r2, #7
 8001cae:	701a      	strb	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <setDemodSps>:

void setDemodSps(void* argument)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2207      	movs	r2, #7
 8001cce:	701a      	strb	r2, [r3, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <setMessageStartFunction>:

void setMessageStartFunction(void* argument)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	617b      	str	r3, [r7, #20]

  char* descriptors[] = {"Use amplitude threshold", "Use overlapping FFTs"};
 8001ce8:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <setMessageStartFunction+0x30>)
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cf2:	e883 0003 	stmia.w	r3, {r0, r1}

  COMMLoops_LoopEnum(context, PARAM_MSG_START_FCN, descriptors, sizeof(descriptors) / sizeof(descriptors[0]));
 8001cf6:	f107 020c 	add.w	r2, r7, #12
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f001 fa82 	bl	8003208 <COMMLoops_LoopEnum>
}
 8001d04:	bf00      	nop
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	08029c50 	.word	0x08029c50

08001d10 <setBitDecisionFunction>:

void setBitDecisionFunction(void* argument)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	617b      	str	r3, [r7, #20]

  char* descriptors[] = {"Use energy comparison", "Use historical comparison"};
 8001d1c:	4a08      	ldr	r2, [pc, #32]	@ (8001d40 <setBitDecisionFunction+0x30>)
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d26:	e883 0003 	stmia.w	r3, {r0, r1}

  COMMLoops_LoopEnum(context, PARAM_DEMODULATION_DECISION, descriptors, sizeof(descriptors) / sizeof(descriptors[0]));
 8001d2a:	f107 020c 	add.w	r2, r7, #12
 8001d2e:	2302      	movs	r3, #2
 8001d30:	2110      	movs	r1, #16
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f001 fa68 	bl	8003208 <COMMLoops_LoopEnum>
}
 8001d38:	bf00      	nop
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	08029c8c 	.word	0x08029c8c

08001d44 <configureSleep>:

void configureSleep(void* argument)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2207      	movs	r2, #7
 8001d56:	701a      	strb	r2, [r3, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <setLedBrightness>:

void setLedBrightness(void* argument)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2207      	movs	r2, #7
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <toggleLed>:

void toggleLed(void* argument)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2207      	movs	r2, #7
 8001d96:	701a      	strb	r2, [r3, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <setModCalFreq>:

// TODO: change to be a registered parameter
void setModCalFreq(void* argument)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	617b      	str	r3, [r7, #20]

  ParamState_t old_state = context->state->state;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	74fb      	strb	r3, [r7, #19]

  do {
    switch (context->state->state) {
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <setModCalFreq+0x24>
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d016      	beq.n	8001df4 <setModCalFreq+0x50>
 8001dc6:	e059      	b.n	8001e7c <setModCalFreq+0xd8>
      case PARAM_STATE_0:
        sprintf((char*) context->output_buffer, "\r\n\r\nPlease enter a new frequency from 25000 Hz - 38000 Hz:\r\n");
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001dce:	4933      	ldr	r1, [pc, #204]	@ (8001e9c <setModCalFreq+0xf8>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f023 fa73 	bl	80252bc <siprintf>
        COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8001de2:	461a      	mov	r2, r3
 8001de4:	2100      	movs	r1, #0
 8001de6:	f001 ff61 	bl	8003cac <COMM_TransmitData>
        context->state->state = PARAM_STATE_1;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
        break;
 8001df2:	e048      	b.n	8001e86 <setModCalFreq+0xe2>
      case PARAM_STATE_1:
        uint32_t new_freq = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
        if (checkUint32(context->input, context->input_len, &new_freq, 25000, 38000) == true) {
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	1d18      	adds	r0, r3, #4
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f8b3 1104 	ldrh.w	r1, [r3, #260]	@ 0x104
 8001e02:	f107 020c 	add.w	r2, r7, #12
 8001e06:	f249 4370 	movw	r3, #38000	@ 0x9470
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001e10:	f006 fd22 	bl	8008858 <checkUint32>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01a      	beq.n	8001e50 <setModCalFreq+0xac>
          Modulate_SetTestFrequency(new_freq);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f005 ff7b 	bl	8007d18 <Modulate_SetTestFrequency>
          sprintf((char*) context->output_buffer, "\r\nSuccessfully set the feedback frequency to %lu\r\n\r\n", new_freq);
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	491d      	ldr	r1, [pc, #116]	@ (8001ea0 <setModCalFreq+0xfc>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f023 fa45 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2100      	movs	r1, #0
 8001e42:	f001 ff33 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	701a      	strb	r2, [r3, #0]
        else {
          sprintf((char*) context->output_buffer, "\r\nInvalid Input!\r\n");
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_0;
        }
        break;
 8001e4e:	e01a      	b.n	8001e86 <setModCalFreq+0xe2>
          sprintf((char*) context->output_buffer, "\r\nInvalid Input!\r\n");
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001e56:	4913      	ldr	r1, [pc, #76]	@ (8001ea4 <setModCalFreq+0x100>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f023 fa2f 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f001 ff1d 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
        break;
 8001e7a:	e004      	b.n	8001e86 <setModCalFreq+0xe2>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2207      	movs	r2, #7
 8001e82:	701a      	strb	r2, [r3, #0]
        break;
 8001e84:	bf00      	nop
    }
  } while (old_state > context->state->state);
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	7cfa      	ldrb	r2, [r7, #19]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d892      	bhi.n	8001db8 <setModCalFreq+0x14>
}
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	08029c94 	.word	0x08029c94
 8001ea0:	08029cd4 	.word	0x08029cd4
 8001ea4:	08029c0c 	.word	0x08029c0c

08001ea8 <setModCalFreqStep>:

void setModCalFreqStep(void* argument)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2207      	movs	r2, #7
 8001eba:	701a      	strb	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <updateTvr>:

void updateTvr(void* argument)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2207      	movs	r2, #7
 8001eda:	701a      	strb	r2, [r3, #0]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <modCalibration>:

void modCalibration(void* argument)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	60fb      	str	r3, [r7, #12]

  if (print_event_handle == NULL) return;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <modCalibration+0x34>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <modCalibration+0x2a>

  osEventFlagsSet(print_event_handle, MESS_FREQ_RESP);
 8001efc:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <modCalibration+0x34>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2108      	movs	r1, #8
 8001f02:	4618      	mov	r0, r3
 8001f04:	f01c fdc8 	bl	801ea98 <osEventFlagsSet>

  context->state->state = PARAM_STATE_COMPLETE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	e000      	b.n	8001f14 <modCalibration+0x2c>
  if (print_event_handle == NULL) return;
 8001f12:	bf00      	nop
}
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	24018734 	.word	0x24018734

08001f20 <exportModCalibration>:

void exportModCalibration(void* argument)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2207      	movs	r2, #7
 8001f32:	701a      	strb	r2, [r3, #0]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <tuneMatchingNetwork>:

void tuneMatchingNetwork(void* argument)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2207      	movs	r2, #7
 8001f52:	701a      	strb	r2, [r3, #0]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <updateOcrr>:

void updateOcrr(void* argument)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2207      	movs	r2, #7
 8001f72:	701a      	strb	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <updateVmax>:

void updateVmax(void* argument)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2207      	movs	r2, #7
 8001f92:	701a      	strb	r2, [r3, #0]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <toggleModFeedback>:

void toggleModFeedback(void* argument)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	701a      	strb	r2, [r3, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <setModFeedbackRatio>:

void setModFeedbackRatio(void* argument)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	701a      	strb	r2, [r3, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <setModFeedbackSps>:

void setModFeedbackSps(void* argument)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	701a      	strb	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <setDemodCalRatio>:

void setDemodCalRatio(void* argument)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2207      	movs	r2, #7
 8002012:	701a      	strb	r2, [r3, #0]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <performDemodCal>:

void performDemodCal(void* argument)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2207      	movs	r2, #7
 8002032:	701a      	strb	r2, [r3, #0]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <setDemodCalFreq>:

void setDemodCalFreq(void* argument)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2207      	movs	r2, #7
 8002052:	701a      	strb	r2, [r3, #0]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <setDemodCalFreqStep>:

void setDemodCalFreqStep(void* argument)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2207      	movs	r2, #7
 8002072:	701a      	strb	r2, [r3, #0]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <exportDemodCal>:

void exportDemodCal(void* argument)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2207      	movs	r2, #7
 8002092:	701a      	strb	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <setUartBaud>:

void setUartBaud(void* argument)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2207      	movs	r2, #7
 80020b2:	701a      	strb	r2, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <setID>:

void setID(void* argument)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopUint8(context, PARAM_ID);
 80020cc:	210d      	movs	r1, #13
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fe6c 	bl	8002dac <COMMLoops_LoopUint8>
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <setStationaryFlag>:

void setStationaryFlag(void* argument)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopToggle(context, PARAM_STATIONARY_FLAG);
 80020e8:	210e      	movs	r1, #14
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f001 f9f0 	bl	80034d0 <COMMLoops_LoopToggle>
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <COMM_RegisterDebugMenu>:


/* Exported function definitions ---------------------------------------------*/

bool COMM_RegisterDebugMenu(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
  bool ret = registerMenu(&debugMenu) && registerMenu(&debugMenuGPIO) &&
 80020fe:	482d      	ldr	r0, [pc, #180]	@ (80021b4 <COMM_RegisterDebugMenu+0xbc>)
 8002100:	f002 f9fa 	bl	80044f8 <registerMenu>
 8002104:	4603      	mov	r3, r0
             registerMenu(&debugMenuSetLed) && registerMenu(&debugMenuPrint) &&
             registerMenu(&debugMenuNoise) && registerMenu(&debugMenuTemp) &&
             registerMenu(&debugMenuErr) && registerMenu(&debugMenuPwr) &&
             registerMenu(&debugMenuSend) && registerMenu(&debugMenuSendTransducer) &&
             registerMenu(&debugMenuOutAmp) && registerMenu(&debugMenuPgaGain) &&
 8002106:	2b00      	cmp	r3, #0
 8002108:	d049      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
  bool ret = registerMenu(&debugMenu) && registerMenu(&debugMenuGPIO) &&
 800210a:	482b      	ldr	r0, [pc, #172]	@ (80021b8 <COMM_RegisterDebugMenu+0xc0>)
 800210c:	f002 f9f4 	bl	80044f8 <registerMenu>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d043      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
             registerMenu(&debugMenuSetLed) && registerMenu(&debugMenuPrint) &&
 8002116:	4829      	ldr	r0, [pc, #164]	@ (80021bc <COMM_RegisterDebugMenu+0xc4>)
 8002118:	f002 f9ee 	bl	80044f8 <registerMenu>
 800211c:	4603      	mov	r3, r0
  bool ret = registerMenu(&debugMenu) && registerMenu(&debugMenuGPIO) &&
 800211e:	2b00      	cmp	r3, #0
 8002120:	d03d      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
             registerMenu(&debugMenuSetLed) && registerMenu(&debugMenuPrint) &&
 8002122:	4827      	ldr	r0, [pc, #156]	@ (80021c0 <COMM_RegisterDebugMenu+0xc8>)
 8002124:	f002 f9e8 	bl	80044f8 <registerMenu>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d037      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
             registerMenu(&debugMenuNoise) && registerMenu(&debugMenuTemp) &&
 800212e:	4825      	ldr	r0, [pc, #148]	@ (80021c4 <COMM_RegisterDebugMenu+0xcc>)
 8002130:	f002 f9e2 	bl	80044f8 <registerMenu>
 8002134:	4603      	mov	r3, r0
             registerMenu(&debugMenuSetLed) && registerMenu(&debugMenuPrint) &&
 8002136:	2b00      	cmp	r3, #0
 8002138:	d031      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
             registerMenu(&debugMenuNoise) && registerMenu(&debugMenuTemp) &&
 800213a:	4823      	ldr	r0, [pc, #140]	@ (80021c8 <COMM_RegisterDebugMenu+0xd0>)
 800213c:	f002 f9dc 	bl	80044f8 <registerMenu>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d02b      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
             registerMenu(&debugMenuErr) && registerMenu(&debugMenuPwr) &&
 8002146:	4821      	ldr	r0, [pc, #132]	@ (80021cc <COMM_RegisterDebugMenu+0xd4>)
 8002148:	f002 f9d6 	bl	80044f8 <registerMenu>
 800214c:	4603      	mov	r3, r0
             registerMenu(&debugMenuNoise) && registerMenu(&debugMenuTemp) &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d025      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
             registerMenu(&debugMenuErr) && registerMenu(&debugMenuPwr) &&
 8002152:	481f      	ldr	r0, [pc, #124]	@ (80021d0 <COMM_RegisterDebugMenu+0xd8>)
 8002154:	f002 f9d0 	bl	80044f8 <registerMenu>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d01f      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
             registerMenu(&debugMenuSend) && registerMenu(&debugMenuSendTransducer) &&
 800215e:	481d      	ldr	r0, [pc, #116]	@ (80021d4 <COMM_RegisterDebugMenu+0xdc>)
 8002160:	f002 f9ca 	bl	80044f8 <registerMenu>
 8002164:	4603      	mov	r3, r0
             registerMenu(&debugMenuErr) && registerMenu(&debugMenuPwr) &&
 8002166:	2b00      	cmp	r3, #0
 8002168:	d019      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
             registerMenu(&debugMenuSend) && registerMenu(&debugMenuSendTransducer) &&
 800216a:	481b      	ldr	r0, [pc, #108]	@ (80021d8 <COMM_RegisterDebugMenu+0xe0>)
 800216c:	f002 f9c4 	bl	80044f8 <registerMenu>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d013      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
             registerMenu(&debugMenuOutAmp) && registerMenu(&debugMenuPgaGain) &&
 8002176:	4819      	ldr	r0, [pc, #100]	@ (80021dc <COMM_RegisterDebugMenu+0xe4>)
 8002178:	f002 f9be 	bl	80044f8 <registerMenu>
 800217c:	4603      	mov	r3, r0
             registerMenu(&debugMenuSend) && registerMenu(&debugMenuSendTransducer) &&
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00d      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
             registerMenu(&debugMenuOutAmp) && registerMenu(&debugMenuPgaGain) &&
 8002182:	4817      	ldr	r0, [pc, #92]	@ (80021e0 <COMM_RegisterDebugMenu+0xe8>)
 8002184:	f002 f9b8 	bl	80044f8 <registerMenu>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
             registerMenu(&debugMenuSendOut);
 800218e:	4815      	ldr	r0, [pc, #84]	@ (80021e4 <COMM_RegisterDebugMenu+0xec>)
 8002190:	f002 f9b2 	bl	80044f8 <registerMenu>
 8002194:	4603      	mov	r3, r0
             registerMenu(&debugMenuOutAmp) && registerMenu(&debugMenuPgaGain) &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <COMM_RegisterDebugMenu+0xa6>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <COMM_RegisterDebugMenu+0xa8>
 800219e:	2300      	movs	r3, #0
  bool ret = registerMenu(&debugMenu) && registerMenu(&debugMenuGPIO) &&
 80021a0:	71fb      	strb	r3, [r7, #7]
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	71fb      	strb	r3, [r7, #7]
  return ret;
 80021aa:	79fb      	ldrb	r3, [r7, #7]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	0802b6e8 	.word	0x0802b6e8
 80021b8:	0802b710 	.word	0x0802b710
 80021bc:	0802b738 	.word	0x0802b738
 80021c0:	0802b760 	.word	0x0802b760
 80021c4:	0802b788 	.word	0x0802b788
 80021c8:	0802b7b0 	.word	0x0802b7b0
 80021cc:	0802b7d8 	.word	0x0802b7d8
 80021d0:	0802b800 	.word	0x0802b800
 80021d4:	0802b828 	.word	0x0802b828
 80021d8:	0802b850 	.word	0x0802b850
 80021dc:	0802b878 	.word	0x0802b878
 80021e0:	0802b8a0 	.word	0x0802b8a0
 80021e4:	0802b8c8 	.word	0x0802b8c8

080021e8 <getGpioStatus>:

/* Private function definitions ----------------------------------------------*/

void getGpioStatus(void* argument)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2207      	movs	r2, #7
 80021fa:	701a      	strb	r2, [r3, #0]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <setLedColourHandler>:

void setLedColourHandler(void* argument)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af02      	add	r7, sp, #8
 800220e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	60fb      	str	r3, [r7, #12]

  static uint8_t red = 0;
  static uint8_t green = 0;
  static uint8_t blue = 0;

  ParamState_t old_state = context->state->state;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	72fb      	strb	r3, [r7, #11]

  do {
    switch (context->state->state) {
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b05      	cmp	r3, #5
 8002224:	f200 80df 	bhi.w	80023e6 <setLedColourHandler+0x1de>
 8002228:	a201      	add	r2, pc, #4	@ (adr r2, 8002230 <setLedColourHandler+0x28>)
 800222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222e:	bf00      	nop
 8002230:	08002249 	.word	0x08002249
 8002234:	08002275 	.word	0x08002275
 8002238:	080022cb 	.word	0x080022cb
 800223c:	080022f7 	.word	0x080022f7
 8002240:	0800234d 	.word	0x0800234d
 8002244:	08002379 	.word	0x08002379
      case PARAM_STATE_0: // Prompt for red
        sprintf((char*) context->output_buffer, "\r\n\r\nPlease enter a red value from 0-255\r\nRed: ");
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800224e:	496e      	ldr	r1, [pc, #440]	@ (8002408 <setLedColourHandler+0x200>)
 8002250:	4618      	mov	r0, r3
 8002252:	f023 f833 	bl	80252bc <siprintf>
        COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002262:	461a      	mov	r2, r3
 8002264:	2100      	movs	r1, #0
 8002266:	f001 fd21 	bl	8003cac <COMM_TransmitData>
        context->state->state = PARAM_STATE_1;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
        break;
 8002272:	e0bd      	b.n	80023f0 <setLedColourHandler+0x1e8>
      case PARAM_STATE_1: // check red input
        if (checkUint8(context->input, context->input_len, &red, 0, 255) == false) {
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1d18      	adds	r0, r3, #4
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f8b3 1104 	ldrh.w	r1, [r3, #260]	@ 0x104
 800227e:	23ff      	movs	r3, #255	@ 0xff
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2300      	movs	r3, #0
 8002284:	4a61      	ldr	r2, [pc, #388]	@ (800240c <setLedColourHandler+0x204>)
 8002286:	f006 fa95 	bl	80087b4 <checkUint8>
 800228a:	4603      	mov	r3, r0
 800228c:	f083 0301 	eor.w	r3, r3, #1
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d015      	beq.n	80022c2 <setLedColourHandler+0xba>
          sprintf((char*) context->output_buffer, "\r\nInvalid Input: Value must be a valid integer between 0-255");
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800229c:	495c      	ldr	r1, [pc, #368]	@ (8002410 <setLedColourHandler+0x208>)
 800229e:	4618      	mov	r0, r3
 80022a0:	f023 f80c 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80022b0:	461a      	mov	r2, r3
 80022b2:	2100      	movs	r1, #0
 80022b4:	f001 fcfa 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
          break;
 80022c0:	e096      	b.n	80023f0 <setLedColourHandler+0x1e8>
        } else {
          context->state->state = PARAM_STATE_2;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2202      	movs	r2, #2
 80022c8:	701a      	strb	r2, [r3, #0]
        }
      case PARAM_STATE_2: // Prompt for green
        sprintf((char*) context->output_buffer, "\r\n\r\nPlease enter a green value from 0-255\r\nGreen: ");
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80022d0:	4950      	ldr	r1, [pc, #320]	@ (8002414 <setLedColourHandler+0x20c>)
 80022d2:	4618      	mov	r0, r3
 80022d4:	f022 fff2 	bl	80252bc <siprintf>
        COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80022e4:	461a      	mov	r2, r3
 80022e6:	2100      	movs	r1, #0
 80022e8:	f001 fce0 	bl	8003cac <COMM_TransmitData>
        context->state->state = PARAM_STATE_3;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2203      	movs	r2, #3
 80022f2:	701a      	strb	r2, [r3, #0]
        break;
 80022f4:	e07c      	b.n	80023f0 <setLedColourHandler+0x1e8>
      case PARAM_STATE_3: // check green
        if (! checkUint8(context->input, context->input_len, &green, 0, 255)) {
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1d18      	adds	r0, r3, #4
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f8b3 1104 	ldrh.w	r1, [r3, #260]	@ 0x104
 8002300:	23ff      	movs	r3, #255	@ 0xff
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2300      	movs	r3, #0
 8002306:	4a44      	ldr	r2, [pc, #272]	@ (8002418 <setLedColourHandler+0x210>)
 8002308:	f006 fa54 	bl	80087b4 <checkUint8>
 800230c:	4603      	mov	r3, r0
 800230e:	f083 0301 	eor.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <setLedColourHandler+0x13c>
          sprintf((char*) context->output_buffer, "\r\nInvalid Input: Value must be a valid integer between 0-255");
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800231e:	493c      	ldr	r1, [pc, #240]	@ (8002410 <setLedColourHandler+0x208>)
 8002320:	4618      	mov	r0, r3
 8002322:	f022 ffcb 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002332:	461a      	mov	r2, r3
 8002334:	2100      	movs	r1, #0
 8002336:	f001 fcb9 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_2;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2202      	movs	r2, #2
 8002340:	701a      	strb	r2, [r3, #0]
          break;
 8002342:	e055      	b.n	80023f0 <setLedColourHandler+0x1e8>
        } else {
          context->state->state = PARAM_STATE_4;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2204      	movs	r2, #4
 800234a:	701a      	strb	r2, [r3, #0]
        }
      case PARAM_STATE_4: // prompt blue
        sprintf((char*) context->output_buffer, "\r\n\r\nPlease enter a blue value from 0-255\r\nBlue: ");
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002352:	4932      	ldr	r1, [pc, #200]	@ (800241c <setLedColourHandler+0x214>)
 8002354:	4618      	mov	r0, r3
 8002356:	f022 ffb1 	bl	80252bc <siprintf>
        COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002366:	461a      	mov	r2, r3
 8002368:	2100      	movs	r1, #0
 800236a:	f001 fc9f 	bl	8003cac <COMM_TransmitData>
        context->state->state = PARAM_STATE_5;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2205      	movs	r2, #5
 8002374:	701a      	strb	r2, [r3, #0]
        break;
 8002376:	e03b      	b.n	80023f0 <setLedColourHandler+0x1e8>
      case PARAM_STATE_5: // check blue
        if (! checkUint8(context->input, context->input_len, &blue, 0, 255)) {
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1d18      	adds	r0, r3, #4
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f8b3 1104 	ldrh.w	r1, [r3, #260]	@ 0x104
 8002382:	23ff      	movs	r3, #255	@ 0xff
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2300      	movs	r3, #0
 8002388:	4a25      	ldr	r2, [pc, #148]	@ (8002420 <setLedColourHandler+0x218>)
 800238a:	f006 fa13 	bl	80087b4 <checkUint8>
 800238e:	4603      	mov	r3, r0
 8002390:	f083 0301 	eor.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d015      	beq.n	80023c6 <setLedColourHandler+0x1be>
          sprintf((char*) context->output_buffer, "\r\nInvalid Input: Value must be a valid integer between 0-255");
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80023a0:	491b      	ldr	r1, [pc, #108]	@ (8002410 <setLedColourHandler+0x208>)
 80023a2:	4618      	mov	r0, r3
 80023a4:	f022 ff8a 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80023b4:	461a      	mov	r2, r3
 80023b6:	2100      	movs	r1, #0
 80023b8:	f001 fc78 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_4;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2204      	movs	r2, #4
 80023c2:	701a      	strb	r2, [r3, #0]
          WS_SetColour(0, red, green, blue);
          WS_Update();

          context->state->state = PARAM_STATE_COMPLETE;
        }
        break;
 80023c4:	e014      	b.n	80023f0 <setLedColourHandler+0x1e8>
          WS_SetColour(0, red, green, blue);
 80023c6:	4b11      	ldr	r3, [pc, #68]	@ (800240c <setLedColourHandler+0x204>)
 80023c8:	7819      	ldrb	r1, [r3, #0]
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <setLedColourHandler+0x210>)
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <setLedColourHandler+0x218>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2000      	movs	r0, #0
 80023d4:	f006 fe1a 	bl	800900c <WS_SetColour>
          WS_Update();
 80023d8:	f006 fe40 	bl	800905c <WS_Update>
          context->state->state = PARAM_STATE_COMPLETE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2207      	movs	r2, #7
 80023e2:	701a      	strb	r2, [r3, #0]
        break;
 80023e4:	e004      	b.n	80023f0 <setLedColourHandler+0x1e8>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2207      	movs	r2, #7
 80023ec:	701a      	strb	r2, [r3, #0]
        break;
 80023ee:	bf00      	nop
    }
  } while (old_state > context->state->state); // Continues looping if the state has regressed
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	7afa      	ldrb	r2, [r7, #11]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f63f af0f 	bhi.w	800221c <setLedColourHandler+0x14>
}
 80023fe:	bf00      	nop
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	08029ee4 	.word	0x08029ee4
 800240c:	2400096c 	.word	0x2400096c
 8002410:	08029f14 	.word	0x08029f14
 8002414:	08029f54 	.word	0x08029f54
 8002418:	2400096d 	.word	0x2400096d
 800241c:	08029f88 	.word	0x08029f88
 8002420:	2400096e 	.word	0x2400096e

08002424 <printWaveformHandler>:

void printWaveformHandler(void* argument)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2207      	movs	r2, #7
 8002436:	701a      	strb	r2, [r3, #0]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <performNoiseAnalysis>:

void performNoiseAnalysis(void* argument)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	60fb      	str	r3, [r7, #12]

  if (print_event_handle == NULL) return;
 8002450:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <performNoiseAnalysis+0x60>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d021      	beq.n	800249c <performNoiseAnalysis+0x58>

  osEventFlagsSet(print_event_handle, MESS_PRINT_REQUEST);
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <performNoiseAnalysis+0x60>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	4618      	mov	r0, r3
 8002460:	f01c fb1a 	bl	801ea98 <osEventFlagsSet>
  uint32_t flags;

  do {
    // Prevents accidentally corrupting noise analysis data
    flags = osEventFlagsWait(print_event_handle, MESS_PRINT_COMPLETE, osFlagsWaitAny, osWaitForever);
 8002464:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <performNoiseAnalysis+0x60>)
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
 800246c:	2200      	movs	r2, #0
 800246e:	2102      	movs	r1, #2
 8002470:	f01c fb85 	bl	801eb7e <osEventFlagsWait>
 8002474:	60b8      	str	r0, [r7, #8]
    osDelay(1);
 8002476:	2001      	movs	r0, #1
 8002478:	f01c fab3 	bl	801e9e2 <osDelay>
  } while ((flags & MESS_PRINT_COMPLETE) != MESS_PRINT_COMPLETE);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ee      	beq.n	8002464 <performNoiseAnalysis+0x20>

  osEventFlagsClear(print_event_handle, MESS_PRINT_COMPLETE);
 8002486:	4b07      	ldr	r3, [pc, #28]	@ (80024a4 <performNoiseAnalysis+0x60>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2102      	movs	r1, #2
 800248c:	4618      	mov	r0, r3
 800248e:	f01c fb45 	bl	801eb1c <osEventFlagsClear>

  context->state->state = PARAM_STATE_COMPLETE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2207      	movs	r2, #7
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e000      	b.n	800249e <performNoiseAnalysis+0x5a>
  if (print_event_handle == NULL) return;
 800249c:	bf00      	nop
}
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	24018734 	.word	0x24018734

080024a8 <printCurrentTemp>:

void printCurrentTemp(void* argument)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2207      	movs	r2, #7
 80024ba:	701a      	strb	r2, [r3, #0]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <printCurrentErrors>:

void printCurrentErrors(void* argument)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2207      	movs	r2, #7
 80024da:	701a      	strb	r2, [r3, #0]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <printCurrentPowerConsumption>:

void printCurrentPowerConsumption(void* argument)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2207      	movs	r2, #7
 80024fa:	701a      	strb	r2, [r3, #0]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <sendFeedbackSignal>:

void sendFeedbackSignal(void* argument)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0aa      	sub	sp, #168	@ 0xa8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  ParamState_t old_state = context->state->state;
 8002516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  do {
    switch (context->state->state) {
 8002522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <sendFeedbackSignal+0x2c>
 800252e:	2b01      	cmp	r3, #1
 8002530:	d01a      	beq.n	8002568 <sendFeedbackSignal+0x60>
 8002532:	e0a6      	b.n	8002682 <sendFeedbackSignal+0x17a>
      case PARAM_STATE_0:
        sprintf((char*) context->output_buffer, "\r\n\r\nPlease enter a string to send to the feedback network with a maximum length of 8 characters:\r\n");
 8002534:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002538:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800253c:	495b      	ldr	r1, [pc, #364]	@ (80026ac <sendFeedbackSignal+0x1a4>)
 800253e:	4618      	mov	r0, r3
 8002540:	f022 febc 	bl	80252bc <siprintf>
        COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002548:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800254c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002550:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002554:	461a      	mov	r2, r3
 8002556:	2100      	movs	r1, #0
 8002558:	f001 fba8 	bl	8003cac <COMM_TransmitData>
        context->state->state = PARAM_STATE_1;
 800255c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
        break;
 8002566:	e092      	b.n	800268e <sendFeedbackSignal+0x186>
      case PARAM_STATE_1:
        if (context->input_len > 8) {
 8002568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800256c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8002570:	2b08      	cmp	r3, #8
 8002572:	d919      	bls.n	80025a8 <sendFeedbackSignal+0xa0>
          sprintf((char*) context->output_buffer, "\r\nInput string must be less than 8 characters!\r\n");
 8002574:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002578:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800257c:	494c      	ldr	r1, [pc, #304]	@ (80026b0 <sendFeedbackSignal+0x1a8>)
 800257e:	4618      	mov	r0, r3
 8002580:	f022 fe9c 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002584:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002588:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800258c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002590:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002594:	461a      	mov	r2, r3
 8002596:	2100      	movs	r1, #0
 8002598:	f001 fb88 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 800259c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
            sprintf((char*) context->output_buffer, "\r\nError adding message to feedback queue\r\n\r\n");
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          }
          context->state->state = PARAM_STATE_COMPLETE;
        }
        break;
 80025a6:	e072      	b.n	800268e <sendFeedbackSignal+0x186>
          msg.type = MSG_TRANSMIT_FEEDBACK;
 80025a8:	2303      	movs	r3, #3
 80025aa:	733b      	strb	r3, [r7, #12]
          msg.length_bits = TEST_PACKET_LENGTH;
 80025ac:	2340      	movs	r3, #64	@ 0x40
 80025ae:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
          msg.timestamp = osKernelGetTickCount();
 80025b2:	f01c f96f 	bl	801e894 <osKernelGetTickCount>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
          msg.data_type = STRING;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
          for (uint16_t i = 0; i < TEST_PACKET_LENGTH / 8; i++) {
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 80025c8:	e020      	b.n	800260c <sendFeedbackSignal+0x104>
            if (context->input_len > i) {
 80025ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025ce:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80025d2:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d20c      	bcs.n	80025f4 <sendFeedbackSignal+0xec>
              msg.data[i] = context->input[i];
 80025da:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80025de:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80025e2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80025e6:	440a      	add	r2, r1
 80025e8:	7912      	ldrb	r2, [r2, #4]
 80025ea:	33a8      	adds	r3, #168	@ 0xa8
 80025ec:	443b      	add	r3, r7
 80025ee:	f803 2c9b 	strb.w	r2, [r3, #-155]
 80025f2:	e006      	b.n	8002602 <sendFeedbackSignal+0xfa>
              msg.data[i] = ' ';
 80025f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80025f8:	33a8      	adds	r3, #168	@ 0xa8
 80025fa:	443b      	add	r3, r7
 80025fc:	2220      	movs	r2, #32
 80025fe:	f803 2c9b 	strb.w	r2, [r3, #-155]
          for (uint16_t i = 0; i < TEST_PACKET_LENGTH / 8; i++) {
 8002602:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002606:	3301      	adds	r3, #1
 8002608:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800260c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002610:	2b07      	cmp	r3, #7
 8002612:	d9da      	bls.n	80025ca <sendFeedbackSignal+0xc2>
          if (MESS_AddMessageToTxQ(&msg) == pdPASS) {
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	4618      	mov	r0, r3
 800261a:	f004 ffcb 	bl	80075b4 <MESS_AddMessageToTxQ>
 800261e:	4603      	mov	r3, r0
 8002620:	2b01      	cmp	r3, #1
 8002622:	d114      	bne.n	800264e <sendFeedbackSignal+0x146>
            sprintf((char*) context->output_buffer, "\r\nSuccessfully added to feedback queue!\r\n\r\n");
 8002624:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002628:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800262c:	4921      	ldr	r1, [pc, #132]	@ (80026b4 <sendFeedbackSignal+0x1ac>)
 800262e:	4618      	mov	r0, r3
 8002630:	f022 fe44 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002634:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002638:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800263c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002640:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002644:	461a      	mov	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	f001 fb30 	bl	8003cac <COMM_TransmitData>
 800264c:	e013      	b.n	8002676 <sendFeedbackSignal+0x16e>
            sprintf((char*) context->output_buffer, "\r\nError adding message to feedback queue\r\n\r\n");
 800264e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002652:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002656:	4918      	ldr	r1, [pc, #96]	@ (80026b8 <sendFeedbackSignal+0x1b0>)
 8002658:	4618      	mov	r0, r3
 800265a:	f022 fe2f 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 800265e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002662:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800266a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800266e:	461a      	mov	r2, r3
 8002670:	2100      	movs	r1, #0
 8002672:	f001 fb1b 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 8002676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2207      	movs	r2, #7
 800267e:	701a      	strb	r2, [r3, #0]
        break;
 8002680:	e005      	b.n	800268e <sendFeedbackSignal+0x186>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 8002682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2207      	movs	r2, #7
 800268a:	701a      	strb	r2, [r3, #0]
        break;
 800268c:	bf00      	nop
    }
  } while (old_state > context->state->state); // Continues looping if the state has regressed
 800268e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 800269a:	429a      	cmp	r2, r3
 800269c:	f63f af41 	bhi.w	8002522 <sendFeedbackSignal+0x1a>
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	37a8      	adds	r7, #168	@ 0xa8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	08029fbc 	.word	0x08029fbc
 80026b0:	0802a020 	.word	0x0802a020
 80026b4:	0802a054 	.word	0x0802a054
 80026b8:	0802a080 	.word	0x0802a080

080026bc <sendTransducerSignal>:

void sendTransducerSignal(void* argument)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b0aa      	sub	sp, #168	@ 0xa8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  ParamState_t old_state = context->state->state;
 80026ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  do {
    switch (context->state->state) {
 80026d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <sendTransducerSignal+0x2c>
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d01a      	beq.n	800271c <sendTransducerSignal+0x60>
 80026e6:	e0a6      	b.n	8002836 <sendTransducerSignal+0x17a>
      case PARAM_STATE_0:
        sprintf((char*) context->output_buffer, "\r\n\r\nPlease enter a string to send through the transducer with a maximum length of 8 characters:\r\n");
 80026e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80026f0:	495b      	ldr	r1, [pc, #364]	@ (8002860 <sendTransducerSignal+0x1a4>)
 80026f2:	4618      	mov	r0, r3
 80026f4:	f022 fde2 	bl	80252bc <siprintf>
        COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80026f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026fc:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002700:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002704:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002708:	461a      	mov	r2, r3
 800270a:	2100      	movs	r1, #0
 800270c:	f001 face 	bl	8003cac <COMM_TransmitData>
        context->state->state = PARAM_STATE_1;
 8002710:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
        break;
 800271a:	e092      	b.n	8002842 <sendTransducerSignal+0x186>

      case PARAM_STATE_1:
        if (context->input_len > 8) {
 800271c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002720:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8002724:	2b08      	cmp	r3, #8
 8002726:	d919      	bls.n	800275c <sendTransducerSignal+0xa0>
          sprintf((char*) context->output_buffer, "\r\nInput string must be less than 8 characters!\r\n");
 8002728:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800272c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002730:	494c      	ldr	r1, [pc, #304]	@ (8002864 <sendTransducerSignal+0x1a8>)
 8002732:	4618      	mov	r0, r3
 8002734:	f022 fdc2 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002738:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800273c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002740:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002744:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002748:	461a      	mov	r2, r3
 800274a:	2100      	movs	r1, #0
 800274c:	f001 faae 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 8002750:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
            sprintf((char*) context->output_buffer, "\r\nError adding message to output queue\r\n\r\n");
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          }
          context->state->state = PARAM_STATE_COMPLETE;
        }
        break;
 800275a:	e072      	b.n	8002842 <sendTransducerSignal+0x186>
          msg.type = MSG_TRANSMIT_TRANSDUCER;
 800275c:	2301      	movs	r3, #1
 800275e:	733b      	strb	r3, [r7, #12]
          msg.length_bits = TEST_PACKET_LENGTH;
 8002760:	2340      	movs	r3, #64	@ 0x40
 8002762:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
          msg.timestamp = osKernelGetTickCount();
 8002766:	f01c f895 	bl	801e894 <osKernelGetTickCount>
 800276a:	4603      	mov	r3, r0
 800276c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
          msg.data_type = STRING;
 8002770:	2301      	movs	r3, #1
 8002772:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
          for (uint16_t i = 0; i < TEST_PACKET_LENGTH / 8; i++) {
 8002776:	2300      	movs	r3, #0
 8002778:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800277c:	e020      	b.n	80027c0 <sendTransducerSignal+0x104>
            if (context->input_len > i) {
 800277e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002782:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8002786:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800278a:	429a      	cmp	r2, r3
 800278c:	d20c      	bcs.n	80027a8 <sendTransducerSignal+0xec>
              msg.data[i] = context->input[i];
 800278e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8002792:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002796:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800279a:	440a      	add	r2, r1
 800279c:	7912      	ldrb	r2, [r2, #4]
 800279e:	33a8      	adds	r3, #168	@ 0xa8
 80027a0:	443b      	add	r3, r7
 80027a2:	f803 2c9b 	strb.w	r2, [r3, #-155]
 80027a6:	e006      	b.n	80027b6 <sendTransducerSignal+0xfa>
              msg.data[i] = ' ';
 80027a8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80027ac:	33a8      	adds	r3, #168	@ 0xa8
 80027ae:	443b      	add	r3, r7
 80027b0:	2220      	movs	r2, #32
 80027b2:	f803 2c9b 	strb.w	r2, [r3, #-155]
          for (uint16_t i = 0; i < TEST_PACKET_LENGTH / 8; i++) {
 80027b6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80027ba:	3301      	adds	r3, #1
 80027bc:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 80027c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80027c4:	2b07      	cmp	r3, #7
 80027c6:	d9da      	bls.n	800277e <sendTransducerSignal+0xc2>
          if (MESS_AddMessageToTxQ(&msg) == pdPASS) {
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 fef1 	bl	80075b4 <MESS_AddMessageToTxQ>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d114      	bne.n	8002802 <sendTransducerSignal+0x146>
            sprintf((char*) context->output_buffer, "\r\nSuccessfully added to output queue!\r\n\r\n");
 80027d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80027e0:	4921      	ldr	r1, [pc, #132]	@ (8002868 <sendTransducerSignal+0x1ac>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f022 fd6a 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80027e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027ec:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80027f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027f4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80027f8:	461a      	mov	r2, r3
 80027fa:	2100      	movs	r1, #0
 80027fc:	f001 fa56 	bl	8003cac <COMM_TransmitData>
 8002800:	e013      	b.n	800282a <sendTransducerSignal+0x16e>
            sprintf((char*) context->output_buffer, "\r\nError adding message to output queue\r\n\r\n");
 8002802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002806:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800280a:	4918      	ldr	r1, [pc, #96]	@ (800286c <sendTransducerSignal+0x1b0>)
 800280c:	4618      	mov	r0, r3
 800280e:	f022 fd55 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002816:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800281a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800281e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002822:	461a      	mov	r2, r3
 8002824:	2100      	movs	r1, #0
 8002826:	f001 fa41 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 800282a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2207      	movs	r2, #7
 8002832:	701a      	strb	r2, [r3, #0]
        break;
 8002834:	e005      	b.n	8002842 <sendTransducerSignal+0x186>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 8002836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2207      	movs	r2, #7
 800283e:	701a      	strb	r2, [r3, #0]
        break;
 8002840:	bf00      	nop
    }
  } while (old_state > context->state->state); // Continues looping if the state has regressed
 8002842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 800284e:	429a      	cmp	r2, r3
 8002850:	f63f af41 	bhi.w	80026d6 <sendTransducerSignal+0x1a>
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	37a8      	adds	r7, #168	@ 0xa8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	0802a0b0 	.word	0x0802a0b0
 8002864:	0802a020 	.word	0x0802a020
 8002868:	0802a114 	.word	0x0802a114
 800286c:	0802a140 	.word	0x0802a140

08002870 <changeOutputAmplitude>:

void changeOutputAmplitude(void* argument)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopFloat(context, PARAM_OUTPUT_AMPLITUDE);
 800287c:	2101      	movs	r1, #1
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fb9a 	bl	8002fb8 <COMMLoops_LoopFloat>
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <changePgaGain>:

// temporary before automatic gain control
void changePgaGain(void* argument)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af02      	add	r7, sp, #8
 8002892:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	60fb      	str	r3, [r7, #12]

  ParamState_t old_state = context->state->state;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	72fb      	strb	r3, [r7, #11]

  do {
    switch (context->state->state) {
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <changePgaGain+0x24>
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d01b      	beq.n	80028e6 <changePgaGain+0x5a>
 80028ae:	e05c      	b.n	800296a <changePgaGain+0xde>
      case PARAM_STATE_0:
        uint8_t current_gain = PGA_GetGain();
 80028b0:	f006 fb74 	bl	8008f9c <PGA_GetGain>
 80028b4:	4603      	mov	r3, r0
 80028b6:	72bb      	strb	r3, [r7, #10]
        sprintf((char*) context->output_buffer, "\r\n\r\nEnter a gain code from 0-7:\r\n0: 1\r\n1: 2\r\n2: 5\r\n3: 10\r\n4: 20\r\n5: 50\r\n6: 100\r\n7: 200\r\nCurrent gain code is %d\r\n", current_gain);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80028be:	7aba      	ldrb	r2, [r7, #10]
 80028c0:	4932      	ldr	r1, [pc, #200]	@ (800298c <changePgaGain+0x100>)
 80028c2:	4618      	mov	r0, r3
 80028c4:	f022 fcfa 	bl	80252bc <siprintf>
        COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80028d4:	461a      	mov	r2, r3
 80028d6:	2100      	movs	r1, #0
 80028d8:	f001 f9e8 	bl	8003cac <COMM_TransmitData>
        context->state->state = PARAM_STATE_1;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
        break;
 80028e4:	e046      	b.n	8002974 <changePgaGain+0xe8>
      case PARAM_STATE_1:
        uint8_t newGain = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	727b      	strb	r3, [r7, #9]
        if (checkUint8(context->input, context->input_len, &newGain, 0, 7) == true) {
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1d18      	adds	r0, r3, #4
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f8b3 1104 	ldrh.w	r1, [r3, #260]	@ 0x104
 80028f4:	f107 0209 	add.w	r2, r7, #9
 80028f8:	2307      	movs	r3, #7
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2300      	movs	r3, #0
 80028fe:	f005 ff59 	bl	80087b4 <checkUint8>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01a      	beq.n	800293e <changePgaGain+0xb2>
          PGA_SetGain(newGain);
 8002908:	7a7b      	ldrb	r3, [r7, #9]
 800290a:	4618      	mov	r0, r3
 800290c:	f006 faec 	bl	8008ee8 <PGA_SetGain>
          sprintf((char*) context->output_buffer, "\r\nSuccessfully set the PGA gain code to %d\r\n\r\n", newGain);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002916:	7a7a      	ldrb	r2, [r7, #9]
 8002918:	491d      	ldr	r1, [pc, #116]	@ (8002990 <changePgaGain+0x104>)
 800291a:	4618      	mov	r0, r3
 800291c:	f022 fcce 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800292c:	461a      	mov	r2, r3
 800292e:	2100      	movs	r1, #0
 8002930:	f001 f9bc 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2207      	movs	r2, #7
 800293a:	701a      	strb	r2, [r3, #0]
        else {
          sprintf((char*) context->output_buffer, "\r\nInvalid Input!\r\n");
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_0;
        }
        break;
 800293c:	e01a      	b.n	8002974 <changePgaGain+0xe8>
          sprintf((char*) context->output_buffer, "\r\nInvalid Input!\r\n");
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002944:	4913      	ldr	r1, [pc, #76]	@ (8002994 <changePgaGain+0x108>)
 8002946:	4618      	mov	r0, r3
 8002948:	f022 fcb8 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002958:	461a      	mov	r2, r3
 800295a:	2100      	movs	r1, #0
 800295c:	f001 f9a6 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
        break;
 8002968:	e004      	b.n	8002974 <changePgaGain+0xe8>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2207      	movs	r2, #7
 8002970:	701a      	strb	r2, [r3, #0]
        break;
 8002972:	bf00      	nop
    }
  } while (old_state > context->state->state);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	7afa      	ldrb	r2, [r7, #11]
 800297c:	429a      	cmp	r2, r3
 800297e:	d88f      	bhi.n	80028a0 <changePgaGain+0x14>
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	0802a16c 	.word	0x0802a16c
 8002990:	0802a1e0 	.word	0x0802a1e0
 8002994:	0802a210 	.word	0x0802a210

08002998 <sendTestTransducerSignal>:

void sendTestTransducerSignal(void* argument)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	60fb      	str	r3, [r7, #12]

  if (print_event_handle == NULL) return;
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <sendTestTransducerSignal+0x34>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <sendTestTransducerSignal+0x2a>

  osEventFlagsSet(print_event_handle, MESS_TEST_OUTPUT);
 80029ac:	4b07      	ldr	r3, [pc, #28]	@ (80029cc <sendTestTransducerSignal+0x34>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2104      	movs	r1, #4
 80029b2:	4618      	mov	r0, r3
 80029b4:	f01c f870 	bl	801ea98 <osEventFlagsSet>

  context->state->state = PARAM_STATE_COMPLETE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2207      	movs	r2, #7
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e000      	b.n	80029c4 <sendTestTransducerSignal+0x2c>
  if (print_event_handle == NULL) return;
 80029c2:	bf00      	nop
}
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	24018734 	.word	0x24018734

080029d0 <COMM_RegisterEvalMenu>:
};

/* Exported function definitions ---------------------------------------------*/

bool COMM_RegisterEvalMenu(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
  bool ret = registerMenu(&evalMenu) && registerMenu(&evalToggleMode) &&
 80029d6:	4815      	ldr	r0, [pc, #84]	@ (8002a2c <COMM_RegisterEvalMenu+0x5c>)
 80029d8:	f001 fd8e 	bl	80044f8 <registerMenu>
 80029dc:	4603      	mov	r3, r0
             registerMenu(&evalSetMsg) && registerMenu(&evalFeedback) &&
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d019      	beq.n	8002a16 <COMM_RegisterEvalMenu+0x46>
  bool ret = registerMenu(&evalMenu) && registerMenu(&evalToggleMode) &&
 80029e2:	4813      	ldr	r0, [pc, #76]	@ (8002a30 <COMM_RegisterEvalMenu+0x60>)
 80029e4:	f001 fd88 	bl	80044f8 <registerMenu>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d013      	beq.n	8002a16 <COMM_RegisterEvalMenu+0x46>
             registerMenu(&evalSetMsg) && registerMenu(&evalFeedback) &&
 80029ee:	4811      	ldr	r0, [pc, #68]	@ (8002a34 <COMM_RegisterEvalMenu+0x64>)
 80029f0:	f001 fd82 	bl	80044f8 <registerMenu>
 80029f4:	4603      	mov	r3, r0
  bool ret = registerMenu(&evalMenu) && registerMenu(&evalToggleMode) &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <COMM_RegisterEvalMenu+0x46>
             registerMenu(&evalSetMsg) && registerMenu(&evalFeedback) &&
 80029fa:	480f      	ldr	r0, [pc, #60]	@ (8002a38 <COMM_RegisterEvalMenu+0x68>)
 80029fc:	f001 fd7c 	bl	80044f8 <registerMenu>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <COMM_RegisterEvalMenu+0x46>
             registerMenu(&evalTransducer);
 8002a06:	480d      	ldr	r0, [pc, #52]	@ (8002a3c <COMM_RegisterEvalMenu+0x6c>)
 8002a08:	f001 fd76 	bl	80044f8 <registerMenu>
 8002a0c:	4603      	mov	r3, r0
             registerMenu(&evalSetMsg) && registerMenu(&evalFeedback) &&
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <COMM_RegisterEvalMenu+0x46>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <COMM_RegisterEvalMenu+0x48>
 8002a16:	2300      	movs	r3, #0
  bool ret = registerMenu(&evalMenu) && registerMenu(&evalToggleMode) &&
 8002a18:	71fb      	strb	r3, [r7, #7]
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	71fb      	strb	r3, [r7, #7]
  return ret;
 8002a22:	79fb      	ldrb	r3, [r7, #7]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	0802b8f0 	.word	0x0802b8f0
 8002a30:	0802b918 	.word	0x0802b918
 8002a34:	0802b940 	.word	0x0802b940
 8002a38:	0802b968 	.word	0x0802b968
 8002a3c:	0802b990 	.word	0x0802b990

08002a40 <toggleEval>:


/* Private function definitions ----------------------------------------------*/

void toggleEval(void* argument)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopToggle(context, PARAM_EVAL_MODE_ON);
 8002a4c:	210b      	movs	r1, #11
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fd3e 	bl	80034d0 <COMMLoops_LoopToggle>
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <setEvalMsg>:
void setEvalMsg(void* argument)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopUint8(context, PARAM_EVAL_MESSAGE);
 8002a68:	210c      	movs	r1, #12
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f99e 	bl	8002dac <COMMLoops_LoopUint8>
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <sendEvalFeedback>:

void sendEvalFeedback(void* argument)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b0a8      	sub	sp, #160	@ 0xa0
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  Message_t msg;
  msg.type = MSG_TRANSMIT_FEEDBACK;
 8002a86:	2303      	movs	r3, #3
 8002a88:	733b      	strb	r3, [r7, #12]
  msg.timestamp = osKernelGetTickCount();
 8002a8a:	f01b ff03 	bl	801e894 <osKernelGetTickCount>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  msg.data_type = EVAL;
 8002a94:	2305      	movs	r3, #5
 8002a96:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  Evaluate_CopyEvaluationMessage(&msg);
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f003 fbd0 	bl	8006244 <Evaluate_CopyEvaluationMessage>
  msg.eval_info = NULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  if (MESS_AddMessageToTxQ(&msg) == pdPASS) {
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 fd80 	bl	80075b4 <MESS_AddMessageToTxQ>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d108      	bne.n	8002acc <sendEvalFeedback+0x54>
    sprintf((char*) context->output_buffer, "\r\nSuccessfully added to feedback queue!\r\n\r\n");
 8002aba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002abe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ac2:	4911      	ldr	r1, [pc, #68]	@ (8002b08 <sendEvalFeedback+0x90>)
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f022 fbf9 	bl	80252bc <siprintf>
 8002aca:	e007      	b.n	8002adc <sendEvalFeedback+0x64>
  }
  else {
    sprintf((char*) context->output_buffer, "\r\nError adding message to feedback queue\r\n\r\n");
 8002acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ad0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ad4:	490d      	ldr	r1, [pc, #52]	@ (8002b0c <sendEvalFeedback+0x94>)
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f022 fbf0 	bl	80252bc <siprintf>
  }
  COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ae0:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ae8:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002aec:	461a      	mov	r2, r3
 8002aee:	2100      	movs	r1, #0
 8002af0:	f001 f8dc 	bl	8003cac <COMM_TransmitData>

  context->state->state = PARAM_STATE_COMPLETE;
 8002af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2207      	movs	r2, #7
 8002afc:	701a      	strb	r2, [r3, #0]
}
 8002afe:	bf00      	nop
 8002b00:	37a0      	adds	r7, #160	@ 0xa0
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	0802a2c4 	.word	0x0802a2c4
 8002b0c:	0802a2f0 	.word	0x0802a2f0

08002b10 <sendEvalTransducer>:

void sendEvalTransducer(void* argument)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b0a8      	sub	sp, #160	@ 0xa0
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  Message_t msg;
  msg.type = MSG_TRANSMIT_TRANSDUCER;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	733b      	strb	r3, [r7, #12]
  msg.timestamp = osKernelGetTickCount();
 8002b22:	f01b feb7 	bl	801e894 <osKernelGetTickCount>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  msg.data_type = EVAL;
 8002b2c:	2305      	movs	r3, #5
 8002b2e:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  Evaluate_CopyEvaluationMessage(&msg);
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 fb84 	bl	8006244 <Evaluate_CopyEvaluationMessage>
  msg.eval_info = NULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  if (MESS_AddMessageToTxQ(&msg) == pdPASS) {
 8002b42:	f107 030c 	add.w	r3, r7, #12
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 fd34 	bl	80075b4 <MESS_AddMessageToTxQ>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d108      	bne.n	8002b64 <sendEvalTransducer+0x54>
    sprintf((char*) context->output_buffer, "\r\nSuccessfully added to ouput queue!\r\n\r\n");
 8002b52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b5a:	4911      	ldr	r1, [pc, #68]	@ (8002ba0 <sendEvalTransducer+0x90>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f022 fbad 	bl	80252bc <siprintf>
 8002b62:	e007      	b.n	8002b74 <sendEvalTransducer+0x64>
  }
  else {
    sprintf((char*) context->output_buffer, "\r\nError adding message to output queue\r\n\r\n");
 8002b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b68:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b6c:	490d      	ldr	r1, [pc, #52]	@ (8002ba4 <sendEvalTransducer+0x94>)
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f022 fba4 	bl	80252bc <siprintf>
  }
  COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b78:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b80:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002b84:	461a      	mov	r2, r3
 8002b86:	2100      	movs	r1, #0
 8002b88:	f001 f890 	bl	8003cac <COMM_TransmitData>

  context->state->state = PARAM_STATE_COMPLETE;
 8002b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2207      	movs	r2, #7
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	bf00      	nop
 8002b98:	37a0      	adds	r7, #160	@ 0xa0
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	0802a320 	.word	0x0802a320
 8002ba4:	0802a34c 	.word	0x0802a34c

08002ba8 <COMMLoops_LoopUint32>:


/* Exported function definitions ---------------------------------------------*/

void COMMLoops_LoopUint32(FunctionContext_t* context, ParamIds_t param_id)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b08b      	sub	sp, #44	@ 0x2c
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
  ParamState_t old_state = context->state->state;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	77fb      	strb	r3, [r7, #31]

  char* parameter_name = Param_GetName(param_id);
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe f92c 	bl	8000e1c <Param_GetName>
 8002bc4:	61b8      	str	r0, [r7, #24]

  if (parameter_name == NULL) {
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10c      	bne.n	8002be6 <COMMLoops_LoopUint32+0x3e>
    COMM_TransmitData(uninitialized_parameter_message, sizeof(uninitialized_parameter_message) - 1, context->comm_interface);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2130      	movs	r1, #48	@ 0x30
 8002bd6:	486d      	ldr	r0, [pc, #436]	@ (8002d8c <COMMLoops_LoopUint32+0x1e4>)
 8002bd8:	f001 f868 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2207      	movs	r2, #7
 8002be2:	701a      	strb	r2, [r3, #0]
    return;
 8002be4:	e0cf      	b.n	8002d86 <COMMLoops_LoopUint32+0x1de>
  }

  uint32_t min, max;
  if (Param_GetUint32Limits(param_id, &min, &max) == false) {
 8002be6:	f107 0210 	add.w	r2, r7, #16
 8002bea:	f107 0114 	add.w	r1, r7, #20
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe f99d 	bl	8000f30 <Param_GetUint32Limits>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f083 0301 	eor.w	r3, r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <COMMLoops_LoopUint32+0x74>
    COMM_TransmitData(error_limits_message, sizeof(error_limits_message) - 1, context->comm_interface);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002c08:	461a      	mov	r2, r3
 8002c0a:	212e      	movs	r1, #46	@ 0x2e
 8002c0c:	4860      	ldr	r0, [pc, #384]	@ (8002d90 <COMMLoops_LoopUint32+0x1e8>)
 8002c0e:	f001 f84d 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2207      	movs	r2, #7
 8002c18:	701a      	strb	r2, [r3, #0]
    return;
 8002c1a:	e0b4      	b.n	8002d86 <COMMLoops_LoopUint32+0x1de>
  }

  /* This do-while construct allows multiple state transitions in a single call
   * while preventing infinite loops by ensuring we never return to a higher state */
  do {
    switch (context->state->state) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <COMMLoops_LoopUint32+0x84>
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d04d      	beq.n	8002cc6 <COMMLoops_LoopUint32+0x11e>
 8002c2a:	e0a0      	b.n	8002d6e <COMMLoops_LoopUint32+0x1c6>
      case PARAM_STATE_0:
        uint32_t current_value;
        if (Param_GetUint32(param_id, &current_value) == false) {
 8002c2c:	f107 020c 	add.w	r2, r7, #12
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe f8d1 	bl	8000ddc <Param_GetUint32>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f083 0301 	eor.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <COMMLoops_LoopUint32+0xcc>
          sprintf((char*) context->output_buffer, "\r\nError obtaining current value for %s\r\n", parameter_name);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4951      	ldr	r1, [pc, #324]	@ (8002d94 <COMMLoops_LoopUint32+0x1ec>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f022 fb33 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002c62:	461a      	mov	r2, r3
 8002c64:	2100      	movs	r1, #0
 8002c66:	f001 f821 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2207      	movs	r2, #7
 8002c70:	701a      	strb	r2, [r3, #0]
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          sprintf((char*) context->output_buffer, "Please enter a new value from %lu to %lu:\r\n", min, max);
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_1;
        }
        break;
 8002c72:	e081      	b.n	8002d78 <COMMLoops_LoopUint32+0x1d0>
          sprintf((char*) context->output_buffer, "\r\n\r\nCurrent value of %s: %lu\r\n", parameter_name, current_value);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4946      	ldr	r1, [pc, #280]	@ (8002d98 <COMMLoops_LoopUint32+0x1f0>)
 8002c80:	f022 fb1c 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002c90:	461a      	mov	r2, r3
 8002c92:	2100      	movs	r1, #0
 8002c94:	f001 f80a 	bl	8003cac <COMM_TransmitData>
          sprintf((char*) context->output_buffer, "Please enter a new value from %lu to %lu:\r\n", min, max);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	493e      	ldr	r1, [pc, #248]	@ (8002d9c <COMMLoops_LoopUint32+0x1f4>)
 8002ca4:	f022 fb0a 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	f000 fff8 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
        break;
 8002cc4:	e058      	b.n	8002d78 <COMMLoops_LoopUint32+0x1d0>
      case PARAM_STATE_1:
        uint32_t new_value;
        if (checkUint32(context->input, context->input_len, &new_value, min, max) == true) {
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	1d18      	adds	r0, r3, #4
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8b3 1104 	ldrh.w	r1, [r3, #260]	@ 0x104
 8002cd0:	697c      	ldr	r4, [r7, #20]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f107 0208 	add.w	r2, r7, #8
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	4623      	mov	r3, r4
 8002cdc:	f005 fdbc 	bl	8008858 <checkUint32>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d029      	beq.n	8002d3a <COMMLoops_LoopUint32+0x192>
          if (Param_SetUint32(param_id, &new_value) == true) {
 8002ce6:	f107 0208 	add.w	r2, r7, #8
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fa3c 	bl	800116c <Param_SetUint32>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <COMMLoops_LoopUint32+0x178>
            sprintf((char*) context->output_buffer, "\r\n%s successfully set to new value of %lu\r\n", parameter_name, new_value);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4926      	ldr	r1, [pc, #152]	@ (8002da0 <COMMLoops_LoopUint32+0x1f8>)
 8002d06:	f022 fad9 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002d16:	461a      	mov	r2, r3
 8002d18:	2100      	movs	r1, #0
 8002d1a:	f000 ffc7 	bl	8003cac <COMM_TransmitData>
 8002d1e:	e007      	b.n	8002d30 <COMMLoops_LoopUint32+0x188>
          }
          else {
            COMM_TransmitData(error_updating_message, sizeof(error_updating_message) - 1, context->comm_interface);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002d26:	461a      	mov	r2, r3
 8002d28:	211c      	movs	r1, #28
 8002d2a:	481e      	ldr	r0, [pc, #120]	@ (8002da4 <COMMLoops_LoopUint32+0x1fc>)
 8002d2c:	f000 ffbe 	bl	8003cac <COMM_TransmitData>
          }
          context->state->state = PARAM_STATE_COMPLETE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2207      	movs	r2, #7
 8002d36:	701a      	strb	r2, [r3, #0]
        } else {
          sprintf((char*) context->output_buffer, "\r\nValue %lu is outside the range of %lu and %lu\r\n", new_value, min, max);
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_0;
        }
        break;
 8002d38:	e01e      	b.n	8002d78 <COMMLoops_LoopUint32+0x1d0>
          sprintf((char*) context->output_buffer, "\r\nValue %lu is outside the range of %lu and %lu\r\n", new_value, min, max);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	6979      	ldr	r1, [r7, #20]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4917      	ldr	r1, [pc, #92]	@ (8002da8 <COMMLoops_LoopUint32+0x200>)
 8002d4c:	f022 fab6 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2100      	movs	r1, #0
 8002d60:	f000 ffa4 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
        break;
 8002d6c:	e004      	b.n	8002d78 <COMMLoops_LoopUint32+0x1d0>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2207      	movs	r2, #7
 8002d74:	701a      	strb	r2, [r3, #0]
        break;
 8002d76:	bf00      	nop
    }
  } while (old_state > context->state->state);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	7ffa      	ldrb	r2, [r7, #31]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	f63f af4b 	bhi.w	8002c1c <COMMLoops_LoopUint32+0x74>
}
 8002d86:	3724      	adds	r7, #36	@ 0x24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	24000140 	.word	0x24000140
 8002d90:	24000174 	.word	0x24000174
 8002d94:	0802a378 	.word	0x0802a378
 8002d98:	0802a3a4 	.word	0x0802a3a4
 8002d9c:	0802a3c4 	.word	0x0802a3c4
 8002da0:	0802a3f0 	.word	0x0802a3f0
 8002da4:	240001a4 	.word	0x240001a4
 8002da8:	0802a41c 	.word	0x0802a41c

08002dac <COMMLoops_LoopUint8>:
    }
  } while (old_state > context->state->state);
}

void COMMLoops_LoopUint8(FunctionContext_t* context, ParamIds_t param_id)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b089      	sub	sp, #36	@ 0x24
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
  ParamState_t old_state = context->state->state;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	75fb      	strb	r3, [r7, #23]

  char* parameter_name = Param_GetName(param_id);
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe f82a 	bl	8000e1c <Param_GetName>
 8002dc8:	6138      	str	r0, [r7, #16]

  if (parameter_name == NULL) {
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10c      	bne.n	8002dea <COMMLoops_LoopUint8+0x3e>
    COMM_TransmitData(uninitialized_parameter_message, sizeof(uninitialized_parameter_message) - 1, context->comm_interface);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2130      	movs	r1, #48	@ 0x30
 8002dda:	486f      	ldr	r0, [pc, #444]	@ (8002f98 <COMMLoops_LoopUint8+0x1ec>)
 8002ddc:	f000 ff66 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2207      	movs	r2, #7
 8002de6:	701a      	strb	r2, [r3, #0]
    return;
 8002de8:	e0d2      	b.n	8002f90 <COMMLoops_LoopUint8+0x1e4>
  }

  uint8_t min, max;
  if (Param_GetUint8Limits(param_id, &min, &max) == false) {
 8002dea:	f107 020e 	add.w	r2, r7, #14
 8002dee:	f107 010f 	add.w	r1, r7, #15
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe f877 	bl	8000ee8 <Param_GetUint8Limits>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f083 0301 	eor.w	r3, r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <COMMLoops_LoopUint8+0x74>
    COMM_TransmitData(error_limits_message, sizeof(error_limits_message) - 1, context->comm_interface);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	212e      	movs	r1, #46	@ 0x2e
 8002e10:	4862      	ldr	r0, [pc, #392]	@ (8002f9c <COMMLoops_LoopUint8+0x1f0>)
 8002e12:	f000 ff4b 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	701a      	strb	r2, [r3, #0]
    return;
 8002e1e:	e0b7      	b.n	8002f90 <COMMLoops_LoopUint8+0x1e4>
  }

  /* This do-while construct allows multiple state transitions in a single call
   * while preventing infinite loops by ensuring we never return to a higher state */
  do {
    switch (context->state->state) {
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <COMMLoops_LoopUint8+0x84>
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d04e      	beq.n	8002ecc <COMMLoops_LoopUint8+0x120>
 8002e2e:	e0a3      	b.n	8002f78 <COMMLoops_LoopUint8+0x1cc>
      case PARAM_STATE_0:
        uint8_t current_value;
        if (Param_GetUint8(param_id, &current_value) == false) {
 8002e30:	f107 020d 	add.w	r2, r7, #13
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd ffbf 	bl	8000dbc <Param_GetUint8>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f083 0301 	eor.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <COMMLoops_LoopUint8+0xcc>
          sprintf((char*) context->output_buffer, "\r\nError obtaining current value for %s\r\n", parameter_name);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4953      	ldr	r1, [pc, #332]	@ (8002fa0 <COMMLoops_LoopUint8+0x1f4>)
 8002e54:	4618      	mov	r0, r3
 8002e56:	f022 fa31 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002e66:	461a      	mov	r2, r3
 8002e68:	2100      	movs	r1, #0
 8002e6a:	f000 ff1f 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2207      	movs	r2, #7
 8002e74:	701a      	strb	r2, [r3, #0]
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          sprintf((char*) context->output_buffer, "Please enter a new value from %u to %u:\r\n", min, max);
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_1;
        }
        break;
 8002e76:	e084      	b.n	8002f82 <COMMLoops_LoopUint8+0x1d6>
          sprintf((char*) context->output_buffer, "\r\n\r\nCurrent value of %s: %u\r\n", parameter_name, current_value);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002e7e:	7b7b      	ldrb	r3, [r7, #13]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4948      	ldr	r1, [pc, #288]	@ (8002fa4 <COMMLoops_LoopUint8+0x1f8>)
 8002e84:	f022 fa1a 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002e94:	461a      	mov	r2, r3
 8002e96:	2100      	movs	r1, #0
 8002e98:	f000 ff08 	bl	8003cac <COMM_TransmitData>
          sprintf((char*) context->output_buffer, "Please enter a new value from %u to %u:\r\n", min, max);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	7bbb      	ldrb	r3, [r7, #14]
 8002ea8:	493f      	ldr	r1, [pc, #252]	@ (8002fa8 <COMMLoops_LoopUint8+0x1fc>)
 8002eaa:	f022 fa07 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	f000 fef5 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
        break;
 8002eca:	e05a      	b.n	8002f82 <COMMLoops_LoopUint8+0x1d6>
      case PARAM_STATE_1:
        uint8_t new_value;
        if (checkUint8(context->input, context->input_len, &new_value, min, max) == true) {
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1d18      	adds	r0, r3, #4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8b3 1104 	ldrh.w	r1, [r3, #260]	@ 0x104
 8002ed6:	7bfc      	ldrb	r4, [r7, #15]
 8002ed8:	7bbb      	ldrb	r3, [r7, #14]
 8002eda:	f107 020c 	add.w	r2, r7, #12
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4623      	mov	r3, r4
 8002ee2:	f005 fc67 	bl	80087b4 <checkUint8>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d029      	beq.n	8002f40 <COMMLoops_LoopUint8+0x194>
          if (Param_SetUint8(param_id, &new_value) == true) {
 8002eec:	f107 020c 	add.w	r2, r7, #12
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe f929 	bl	800114c <Param_SetUint8>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d012      	beq.n	8002f26 <COMMLoops_LoopUint8+0x17a>
            sprintf((char*) context->output_buffer, "\r\n%s successfully set to new value of %u\r\n", parameter_name, new_value);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002f06:	7b3b      	ldrb	r3, [r7, #12]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4928      	ldr	r1, [pc, #160]	@ (8002fac <COMMLoops_LoopUint8+0x200>)
 8002f0c:	f022 f9d6 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2100      	movs	r1, #0
 8002f20:	f000 fec4 	bl	8003cac <COMM_TransmitData>
 8002f24:	e007      	b.n	8002f36 <COMMLoops_LoopUint8+0x18a>
          }
          else {
            COMM_TransmitData(error_updating_message, sizeof(error_updating_message) - 1, context->comm_interface);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	211c      	movs	r1, #28
 8002f30:	481f      	ldr	r0, [pc, #124]	@ (8002fb0 <COMMLoops_LoopUint8+0x204>)
 8002f32:	f000 febb 	bl	8003cac <COMM_TransmitData>
          }
          context->state->state = PARAM_STATE_COMPLETE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2207      	movs	r2, #7
 8002f3c:	701a      	strb	r2, [r3, #0]
        } else {
          sprintf((char*) context->output_buffer, "\r\nValue %u is outside the range of %u and %u\r\n", new_value, min, max);
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_0;
        }
        break;
 8002f3e:	e020      	b.n	8002f82 <COMMLoops_LoopUint8+0x1d6>
          sprintf((char*) context->output_buffer, "\r\nValue %u is outside the range of %u and %u\r\n", new_value, min, max);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002f46:	7b3b      	ldrb	r3, [r7, #12]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	7bbb      	ldrb	r3, [r7, #14]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	460b      	mov	r3, r1
 8002f54:	4917      	ldr	r1, [pc, #92]	@ (8002fb4 <COMMLoops_LoopUint8+0x208>)
 8002f56:	f022 f9b1 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002f66:	461a      	mov	r2, r3
 8002f68:	2100      	movs	r1, #0
 8002f6a:	f000 fe9f 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
        break;
 8002f76:	e004      	b.n	8002f82 <COMMLoops_LoopUint8+0x1d6>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	701a      	strb	r2, [r3, #0]
        break;
 8002f80:	bf00      	nop
    }
  } while (old_state > context->state->state);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	7dfa      	ldrb	r2, [r7, #23]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	f63f af48 	bhi.w	8002e20 <COMMLoops_LoopUint8+0x74>
}
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd90      	pop	{r4, r7, pc}
 8002f96:	bf00      	nop
 8002f98:	24000140 	.word	0x24000140
 8002f9c:	24000174 	.word	0x24000174
 8002fa0:	0802a378 	.word	0x0802a378
 8002fa4:	0802a450 	.word	0x0802a450
 8002fa8:	0802a470 	.word	0x0802a470
 8002fac:	0802a49c 	.word	0x0802a49c
 8002fb0:	240001a4 	.word	0x240001a4
 8002fb4:	0802a4c8 	.word	0x0802a4c8

08002fb8 <COMMLoops_LoopFloat>:

void COMMLoops_LoopFloat(FunctionContext_t* context, ParamIds_t param_id)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	@ 0x30
 8002fbc:	af04      	add	r7, sp, #16
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	70fb      	strb	r3, [r7, #3]
  ParamState_t old_state = context->state->state;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	77fb      	strb	r3, [r7, #31]

  char* parameter_name = Param_GetName(param_id);
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd ff24 	bl	8000e1c <Param_GetName>
 8002fd4:	61b8      	str	r0, [r7, #24]

  if (parameter_name == NULL) {
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10c      	bne.n	8002ff6 <COMMLoops_LoopFloat+0x3e>
    COMM_TransmitData(uninitialized_parameter_message, sizeof(uninitialized_parameter_message) - 1, context->comm_interface);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2130      	movs	r1, #48	@ 0x30
 8002fe6:	4880      	ldr	r0, [pc, #512]	@ (80031e8 <COMMLoops_LoopFloat+0x230>)
 8002fe8:	f000 fe60 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	701a      	strb	r2, [r3, #0]
    return;
 8002ff4:	e0f5      	b.n	80031e2 <COMMLoops_LoopFloat+0x22a>
  }

  float min, max;
  if (Param_GetFloatLimits(param_id, &min, &max) == false) {
 8002ff6:	f107 0210 	add.w	r2, r7, #16
 8002ffa:	f107 0114 	add.w	r1, r7, #20
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd ffa7 	bl	8000f54 <Param_GetFloatLimits>
 8003006:	4603      	mov	r3, r0
 8003008:	f083 0301 	eor.w	r3, r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00c      	beq.n	800302c <COMMLoops_LoopFloat+0x74>
    COMM_TransmitData(error_limits_message, sizeof(error_limits_message) - 1, context->comm_interface);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003018:	461a      	mov	r2, r3
 800301a:	212e      	movs	r1, #46	@ 0x2e
 800301c:	4873      	ldr	r0, [pc, #460]	@ (80031ec <COMMLoops_LoopFloat+0x234>)
 800301e:	f000 fe45 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2207      	movs	r2, #7
 8003028:	701a      	strb	r2, [r3, #0]
    return;
 800302a:	e0da      	b.n	80031e2 <COMMLoops_LoopFloat+0x22a>
  }

  /* This do-while construct allows multiple state transitions in a single call
   * while preventing infinite loops by ensuring we never return to a higher state */
  do {
    switch (context->state->state) {
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <COMMLoops_LoopFloat+0x84>
 8003036:	2b01      	cmp	r3, #1
 8003038:	d05d      	beq.n	80030f6 <COMMLoops_LoopFloat+0x13e>
 800303a:	e0c6      	b.n	80031ca <COMMLoops_LoopFloat+0x212>
      case PARAM_STATE_0:
        float current_value;
        if (Param_GetFloat(param_id, &current_value) == false) {
 800303c:	f107 020c 	add.w	r2, r7, #12
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fed9 	bl	8000dfc <Param_GetFloat>
 800304a:	4603      	mov	r3, r0
 800304c:	f083 0301 	eor.w	r3, r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <COMMLoops_LoopFloat+0xcc>
          sprintf((char*) context->output_buffer, "\r\nError obtaining current value for %s\r\n", parameter_name);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4964      	ldr	r1, [pc, #400]	@ (80031f0 <COMMLoops_LoopFloat+0x238>)
 8003060:	4618      	mov	r0, r3
 8003062:	f022 f92b 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003072:	461a      	mov	r2, r3
 8003074:	2100      	movs	r1, #0
 8003076:	f000 fe19 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2207      	movs	r2, #7
 8003080:	701a      	strb	r2, [r3, #0]
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          sprintf((char*) context->output_buffer, "Please enter a new value from %.4f to %.4f:\r\n", min, max);
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_1;
        }
        break;
 8003082:	e0a7      	b.n	80031d4 <COMMLoops_LoopFloat+0x21c>
          sprintf((char*) context->output_buffer, "\r\n\r\nCurrent value of %s: %.4f\r\n", parameter_name, current_value);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800308a:	edd7 7a03 	vldr	s15, [r7, #12]
 800308e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003092:	ed8d 7b00 	vstr	d7, [sp]
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4956      	ldr	r1, [pc, #344]	@ (80031f4 <COMMLoops_LoopFloat+0x23c>)
 800309a:	4618      	mov	r0, r3
 800309c:	f022 f90e 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80030ac:	461a      	mov	r2, r3
 80030ae:	2100      	movs	r1, #0
 80030b0:	f000 fdfc 	bl	8003cac <COMM_TransmitData>
          sprintf((char*) context->output_buffer, "Please enter a new value from %.4f to %.4f:\r\n", min, max);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80030ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80030be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80030c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80030c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030ca:	ed8d 7b00 	vstr	d7, [sp]
 80030ce:	ec53 2b16 	vmov	r2, r3, d6
 80030d2:	4949      	ldr	r1, [pc, #292]	@ (80031f8 <COMMLoops_LoopFloat+0x240>)
 80030d4:	f022 f8f2 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80030e4:	461a      	mov	r2, r3
 80030e6:	2100      	movs	r1, #0
 80030e8:	f000 fde0 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_1;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
        break;
 80030f4:	e06e      	b.n	80031d4 <COMMLoops_LoopFloat+0x21c>
      case PARAM_STATE_1:
        float new_value;
        if (checkFloat(context->input, &new_value, min, max) == true) {
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3304      	adds	r3, #4
 80030fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80030fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8003102:	f107 0208 	add.w	r2, r7, #8
 8003106:	eef0 0a47 	vmov.f32	s1, s14
 800310a:	eeb0 0a67 	vmov.f32	s0, s15
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f005 fbef 	bl	80088f4 <checkFloat>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d02f      	beq.n	800317c <COMMLoops_LoopFloat+0x1c4>
          if (Param_SetFloat(param_id, &new_value) == true) {
 800311c:	f107 0208 	add.w	r2, r7, #8
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe f831 	bl	800118c <Param_SetFloat>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d018      	beq.n	8003162 <COMMLoops_LoopFloat+0x1aa>
            sprintf((char*) context->output_buffer, "\r\n%s successfully set to new value of %.4f\r\n", parameter_name, new_value);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003136:	edd7 7a02 	vldr	s15, [r7, #8]
 800313a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800313e:	ed8d 7b00 	vstr	d7, [sp]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	492d      	ldr	r1, [pc, #180]	@ (80031fc <COMMLoops_LoopFloat+0x244>)
 8003146:	4618      	mov	r0, r3
 8003148:	f022 f8b8 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003158:	461a      	mov	r2, r3
 800315a:	2100      	movs	r1, #0
 800315c:	f000 fda6 	bl	8003cac <COMM_TransmitData>
 8003160:	e007      	b.n	8003172 <COMMLoops_LoopFloat+0x1ba>
          }
          else {
            COMM_TransmitData(error_updating_message, sizeof(error_updating_message) - 1, context->comm_interface);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003168:	461a      	mov	r2, r3
 800316a:	211c      	movs	r1, #28
 800316c:	4824      	ldr	r0, [pc, #144]	@ (8003200 <COMMLoops_LoopFloat+0x248>)
 800316e:	f000 fd9d 	bl	8003cac <COMM_TransmitData>
          }
          context->state->state = PARAM_STATE_COMPLETE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2207      	movs	r2, #7
 8003178:	701a      	strb	r2, [r3, #0]
        } else {
          sprintf((char*) context->output_buffer, "\r\nValue %.4f is outside the range of %.4f and %.4f\r\n", new_value, min, max);
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_0;
        }
        break;
 800317a:	e02b      	b.n	80031d4 <COMMLoops_LoopFloat+0x21c>
          sprintf((char*) context->output_buffer, "\r\nValue %.4f is outside the range of %.4f and %.4f\r\n", new_value, min, max);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003182:	edd7 7a02 	vldr	s15, [r7, #8]
 8003186:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800318a:	edd7 7a05 	vldr	s15, [r7, #20]
 800318e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003192:	edd7 6a04 	vldr	s13, [r7, #16]
 8003196:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800319a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800319e:	ed8d 7b00 	vstr	d7, [sp]
 80031a2:	ec53 2b15 	vmov	r2, r3, d5
 80031a6:	4917      	ldr	r1, [pc, #92]	@ (8003204 <COMMLoops_LoopFloat+0x24c>)
 80031a8:	f022 f888 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80031b8:	461a      	mov	r2, r3
 80031ba:	2100      	movs	r1, #0
 80031bc:	f000 fd76 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
        break;
 80031c8:	e004      	b.n	80031d4 <COMMLoops_LoopFloat+0x21c>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2207      	movs	r2, #7
 80031d0:	701a      	strb	r2, [r3, #0]
        break;
 80031d2:	bf00      	nop
    }
  } while (old_state > context->state->state);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	7ffa      	ldrb	r2, [r7, #31]
 80031dc:	429a      	cmp	r2, r3
 80031de:	f63f af25 	bhi.w	800302c <COMMLoops_LoopFloat+0x74>
}
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	24000140 	.word	0x24000140
 80031ec:	24000174 	.word	0x24000174
 80031f0:	0802a378 	.word	0x0802a378
 80031f4:	0802a4f8 	.word	0x0802a4f8
 80031f8:	0802a518 	.word	0x0802a518
 80031fc:	0802a548 	.word	0x0802a548
 8003200:	240001a4 	.word	0x240001a4
 8003204:	0802a578 	.word	0x0802a578

08003208 <COMMLoops_LoopEnum>:

void COMMLoops_LoopEnum(FunctionContext_t* context, ParamIds_t param_id, char** descriptors, uint16_t num_descriptors)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b08b      	sub	sp, #44	@ 0x2c
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	461a      	mov	r2, r3
 8003214:	460b      	mov	r3, r1
 8003216:	72fb      	strb	r3, [r7, #11]
 8003218:	4613      	mov	r3, r2
 800321a:	813b      	strh	r3, [r7, #8]
  ParamState_t old_state = context->state->state;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	77bb      	strb	r3, [r7, #30]

  char* parameter_name = Param_GetName(param_id);
 8003224:	7afb      	ldrb	r3, [r7, #11]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fdf8 	bl	8000e1c <Param_GetName>
 800322c:	61b8      	str	r0, [r7, #24]

  if (parameter_name == NULL) {
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10c      	bne.n	800324e <COMMLoops_LoopEnum+0x46>
    COMM_TransmitData(uninitialized_parameter_message, sizeof(uninitialized_parameter_message) - 1, context->comm_interface);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800323a:	461a      	mov	r2, r3
 800323c:	2130      	movs	r1, #48	@ 0x30
 800323e:	4899      	ldr	r0, [pc, #612]	@ (80034a4 <COMMLoops_LoopEnum+0x29c>)
 8003240:	f000 fd34 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2207      	movs	r2, #7
 800324a:	701a      	strb	r2, [r3, #0]
    return;
 800324c:	e126      	b.n	800349c <COMMLoops_LoopEnum+0x294>
  }

  uint8_t min, max;
  if (Param_GetUint8Limits(param_id, &min, &max) == false) {
 800324e:	f107 0214 	add.w	r2, r7, #20
 8003252:	f107 0115 	add.w	r1, r7, #21
 8003256:	7afb      	ldrb	r3, [r7, #11]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd fe45 	bl	8000ee8 <Param_GetUint8Limits>
 800325e:	4603      	mov	r3, r0
 8003260:	f083 0301 	eor.w	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <COMMLoops_LoopEnum+0x7c>
    COMM_TransmitData(error_limits_message, sizeof(error_limits_message) - 1, context->comm_interface);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003270:	461a      	mov	r2, r3
 8003272:	212e      	movs	r1, #46	@ 0x2e
 8003274:	488c      	ldr	r0, [pc, #560]	@ (80034a8 <COMMLoops_LoopEnum+0x2a0>)
 8003276:	f000 fd19 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2207      	movs	r2, #7
 8003280:	701a      	strb	r2, [r3, #0]
    return;
 8003282:	e10b      	b.n	800349c <COMMLoops_LoopEnum+0x294>
  }

  if (num_descriptors != (max + 1)) {
 8003284:	893a      	ldrh	r2, [r7, #8]
 8003286:	7d3b      	ldrb	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	429a      	cmp	r2, r3
 800328c:	d00c      	beq.n	80032a8 <COMMLoops_LoopEnum+0xa0>
    COMM_TransmitData(internal_error_message, sizeof(internal_error_message) - 1, context->comm_interface);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003294:	461a      	mov	r2, r3
 8003296:	212f      	movs	r1, #47	@ 0x2f
 8003298:	4884      	ldr	r0, [pc, #528]	@ (80034ac <COMMLoops_LoopEnum+0x2a4>)
 800329a:	f000 fd07 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2207      	movs	r2, #7
 80032a4:	701a      	strb	r2, [r3, #0]
    return;
 80032a6:	e0f9      	b.n	800349c <COMMLoops_LoopEnum+0x294>
  }

  /* This do-while construct allows multiple state transitions in a single call
   * while preventing infinite loops by ensuring we never return to a higher state */
  do {
    switch (context->state->state) {
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <COMMLoops_LoopEnum+0xb2>
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	f000 8088 	beq.w	80033c8 <COMMLoops_LoopEnum+0x1c0>
 80032b8:	e0e4      	b.n	8003484 <COMMLoops_LoopEnum+0x27c>
      case PARAM_STATE_0:
        uint8_t current_value;
        if (Param_GetUint8(param_id, &current_value) == false) {
 80032ba:	f107 0213 	add.w	r2, r7, #19
 80032be:	7afb      	ldrb	r3, [r7, #11]
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd fd7a 	bl	8000dbc <Param_GetUint8>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f083 0301 	eor.w	r3, r3, #1
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d016      	beq.n	8003302 <COMMLoops_LoopEnum+0xfa>
          sprintf((char*) context->output_buffer, "\r\nError obtaining current value for %s\r\n", parameter_name);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4974      	ldr	r1, [pc, #464]	@ (80034b0 <COMMLoops_LoopEnum+0x2a8>)
 80032de:	4618      	mov	r0, r3
 80032e0:	f021 ffec 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80032f0:	461a      	mov	r2, r3
 80032f2:	2100      	movs	r1, #0
 80032f4:	f000 fcda 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2207      	movs	r2, #7
 80032fe:	701a      	strb	r2, [r3, #0]
            sprintf((char*) &context->output_buffer[buffer_index], "%s\r\n", descriptors[i]);
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          }
          context->state->state = PARAM_STATE_1;
        }
        break;
 8003300:	e0c5      	b.n	800348e <COMMLoops_LoopEnum+0x286>
          sprintf((char*) context->output_buffer, "\r\n\r\nCurrent value of %s is %u: %s\r\n", parameter_name, current_value, descriptors[current_value]);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	4619      	mov	r1, r3
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	460b      	mov	r3, r1
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4965      	ldr	r1, [pc, #404]	@ (80034b4 <COMMLoops_LoopEnum+0x2ac>)
 800331e:	f021 ffcd 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800332e:	461a      	mov	r2, r3
 8003330:	2100      	movs	r1, #0
 8003332:	f000 fcbb 	bl	8003cac <COMM_TransmitData>
          sprintf((char*) context->output_buffer, "Please enter a new value from %u to %u:\r\n", min, max);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800333c:	7d7b      	ldrb	r3, [r7, #21]
 800333e:	461a      	mov	r2, r3
 8003340:	7d3b      	ldrb	r3, [r7, #20]
 8003342:	495d      	ldr	r1, [pc, #372]	@ (80034b8 <COMMLoops_LoopEnum+0x2b0>)
 8003344:	f021 ffba 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003354:	461a      	mov	r2, r3
 8003356:	2100      	movs	r1, #0
 8003358:	f000 fca8 	bl	8003cac <COMM_TransmitData>
          for (uint8_t i = 0; i <= max; i++) {
 800335c:	2300      	movs	r3, #0
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e029      	b.n	80033b6 <COMMLoops_LoopEnum+0x1ae>
            uint16_t buffer_index = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	82fb      	strh	r3, [r7, #22]
            buffer_index += sprintf((char*) context->output_buffer, "%u: ", i);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800336c:	7ffa      	ldrb	r2, [r7, #31]
 800336e:	4953      	ldr	r1, [pc, #332]	@ (80034bc <COMMLoops_LoopEnum+0x2b4>)
 8003370:	4618      	mov	r0, r3
 8003372:	f021 ffa3 	bl	80252bc <siprintf>
 8003376:	4603      	mov	r3, r0
 8003378:	b29a      	uxth	r2, r3
 800337a:	8afb      	ldrh	r3, [r7, #22]
 800337c:	4413      	add	r3, r2
 800337e:	82fb      	strh	r3, [r7, #22]
            sprintf((char*) &context->output_buffer[buffer_index], "%s\r\n", descriptors[i]);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003386:	8afb      	ldrh	r3, [r7, #22]
 8003388:	18d0      	adds	r0, r2, r3
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	494a      	ldr	r1, [pc, #296]	@ (80034c0 <COMMLoops_LoopEnum+0x2b8>)
 8003398:	f021 ff90 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80033a8:	461a      	mov	r2, r3
 80033aa:	2100      	movs	r1, #0
 80033ac:	f000 fc7e 	bl	8003cac <COMM_TransmitData>
          for (uint8_t i = 0; i <= max; i++) {
 80033b0:	7ffb      	ldrb	r3, [r7, #31]
 80033b2:	3301      	adds	r3, #1
 80033b4:	77fb      	strb	r3, [r7, #31]
 80033b6:	7d3b      	ldrb	r3, [r7, #20]
 80033b8:	7ffa      	ldrb	r2, [r7, #31]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d9d1      	bls.n	8003362 <COMMLoops_LoopEnum+0x15a>
          context->state->state = PARAM_STATE_1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
        break;
 80033c6:	e062      	b.n	800348e <COMMLoops_LoopEnum+0x286>
      case PARAM_STATE_1:
        uint8_t new_value;
        if (checkUint8(context->input, context->input_len, &new_value, min, max) == true) {
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1d18      	adds	r0, r3, #4
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8b3 1104 	ldrh.w	r1, [r3, #260]	@ 0x104
 80033d2:	7d7c      	ldrb	r4, [r7, #21]
 80033d4:	7d3b      	ldrb	r3, [r7, #20]
 80033d6:	f107 0212 	add.w	r2, r7, #18
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4623      	mov	r3, r4
 80033de:	f005 f9e9 	bl	80087b4 <checkUint8>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d031      	beq.n	800344c <COMMLoops_LoopEnum+0x244>
          if (Param_SetUint8(param_id, &new_value) == true) {
 80033e8:	f107 0212 	add.w	r2, r7, #18
 80033ec:	7afb      	ldrb	r3, [r7, #11]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd feab 	bl	800114c <Param_SetUint8>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01a      	beq.n	8003432 <COMMLoops_LoopEnum+0x22a>
            sprintf((char*) context->output_buffer, "\r\n%s successfully set to new value of %u: %s\r\n", parameter_name, new_value, descriptors[new_value]);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003402:	7cbb      	ldrb	r3, [r7, #18]
 8003404:	4619      	mov	r1, r3
 8003406:	7cbb      	ldrb	r3, [r7, #18]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	460b      	mov	r3, r1
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	492b      	ldr	r1, [pc, #172]	@ (80034c4 <COMMLoops_LoopEnum+0x2bc>)
 8003418:	f021 ff50 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003428:	461a      	mov	r2, r3
 800342a:	2100      	movs	r1, #0
 800342c:	f000 fc3e 	bl	8003cac <COMM_TransmitData>
 8003430:	e007      	b.n	8003442 <COMMLoops_LoopEnum+0x23a>
          }
          else {
            COMM_TransmitData(error_updating_message, sizeof(error_updating_message) - 1, context->comm_interface);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003438:	461a      	mov	r2, r3
 800343a:	211c      	movs	r1, #28
 800343c:	4822      	ldr	r0, [pc, #136]	@ (80034c8 <COMMLoops_LoopEnum+0x2c0>)
 800343e:	f000 fc35 	bl	8003cac <COMM_TransmitData>
          }
          context->state->state = PARAM_STATE_COMPLETE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2207      	movs	r2, #7
 8003448:	701a      	strb	r2, [r3, #0]
        } else {
          sprintf((char*) context->output_buffer, "\r\nValue %u is outside the range of %u and %u\r\n", new_value, min, max);
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_0;
        }
        break;
 800344a:	e020      	b.n	800348e <COMMLoops_LoopEnum+0x286>
          sprintf((char*) context->output_buffer, "\r\nValue %u is outside the range of %u and %u\r\n", new_value, min, max);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003452:	7cbb      	ldrb	r3, [r7, #18]
 8003454:	461a      	mov	r2, r3
 8003456:	7d7b      	ldrb	r3, [r7, #21]
 8003458:	4619      	mov	r1, r3
 800345a:	7d3b      	ldrb	r3, [r7, #20]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	460b      	mov	r3, r1
 8003460:	491a      	ldr	r1, [pc, #104]	@ (80034cc <COMMLoops_LoopEnum+0x2c4>)
 8003462:	f021 ff2b 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003472:	461a      	mov	r2, r3
 8003474:	2100      	movs	r1, #0
 8003476:	f000 fc19 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
        break;
 8003482:	e004      	b.n	800348e <COMMLoops_LoopEnum+0x286>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2207      	movs	r2, #7
 800348a:	701a      	strb	r2, [r3, #0]
        break;
 800348c:	bf00      	nop
    }
  } while (old_state > context->state->state);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	7fba      	ldrb	r2, [r7, #30]
 8003496:	429a      	cmp	r2, r3
 8003498:	f63f af06 	bhi.w	80032a8 <COMMLoops_LoopEnum+0xa0>
}
 800349c:	3724      	adds	r7, #36	@ 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd90      	pop	{r4, r7, pc}
 80034a2:	bf00      	nop
 80034a4:	24000140 	.word	0x24000140
 80034a8:	24000174 	.word	0x24000174
 80034ac:	240001c4 	.word	0x240001c4
 80034b0:	0802a378 	.word	0x0802a378
 80034b4:	0802a5b0 	.word	0x0802a5b0
 80034b8:	0802a470 	.word	0x0802a470
 80034bc:	0802a5d4 	.word	0x0802a5d4
 80034c0:	0802a5dc 	.word	0x0802a5dc
 80034c4:	0802a5e4 	.word	0x0802a5e4
 80034c8:	240001a4 	.word	0x240001a4
 80034cc:	0802a4c8 	.word	0x0802a4c8

080034d0 <COMMLoops_LoopToggle>:

void COMMLoops_LoopToggle(FunctionContext_t* context, ParamIds_t param_id)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	70fb      	strb	r3, [r7, #3]
  ParamState_t old_state = context->state->state;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	75fb      	strb	r3, [r7, #23]

  static bool current_state;

  char* parameter_name = Param_GetName(param_id);
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd fc98 	bl	8000e1c <Param_GetName>
 80034ec:	6138      	str	r0, [r7, #16]

  if (parameter_name == NULL) {
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10c      	bne.n	800350e <COMMLoops_LoopToggle+0x3e>
    COMM_TransmitData(uninitialized_parameter_message, sizeof(uninitialized_parameter_message) - 1, context->comm_interface);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80034fa:	461a      	mov	r2, r3
 80034fc:	2130      	movs	r1, #48	@ 0x30
 80034fe:	4867      	ldr	r0, [pc, #412]	@ (800369c <COMMLoops_LoopToggle+0x1cc>)
 8003500:	f000 fbd4 	bl	8003cac <COMM_TransmitData>
    context->state->state = PARAM_STATE_COMPLETE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2207      	movs	r2, #7
 800350a:	701a      	strb	r2, [r3, #0]
    return;
 800350c:	e0c2      	b.n	8003694 <COMMLoops_LoopToggle+0x1c4>
  }

  /* This do-while construct allows multiple state transitions in a single call
   * while preventing infinite loops by ensuring we never return to a higher state */
  do {
    switch (context->state->state) {
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <COMMLoops_LoopToggle+0x4e>
 8003518:	2b01      	cmp	r3, #1
 800351a:	d047      	beq.n	80035ac <COMMLoops_LoopToggle+0xdc>
 800351c:	e0ae      	b.n	800367c <COMMLoops_LoopToggle+0x1ac>
      case PARAM_STATE_0:
        if (Param_GetUint8(param_id, (uint8_t*) &current_state) == false) {
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	495f      	ldr	r1, [pc, #380]	@ (80036a0 <COMMLoops_LoopToggle+0x1d0>)
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fc4a 	bl	8000dbc <Param_GetUint8>
 8003528:	4603      	mov	r3, r0
 800352a:	f083 0301 	eor.w	r3, r3, #1
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d015      	beq.n	8003560 <COMMLoops_LoopToggle+0x90>
          sprintf((char*) context->output_buffer, "\r\nError obtaining current state\r\n");
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800353a:	495a      	ldr	r1, [pc, #360]	@ (80036a4 <COMMLoops_LoopToggle+0x1d4>)
 800353c:	4618      	mov	r0, r3
 800353e:	f021 febd 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800354e:	461a      	mov	r2, r3
 8003550:	2100      	movs	r1, #0
 8003552:	f000 fbab 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2207      	movs	r2, #7
 800355c:	701a      	strb	r2, [r3, #0]
        else {
          sprintf((char*) context->output_buffer, "\r\n%s is currently %s. Would you like to %s it? (y/n):\r\n", parameter_name, current_state ? "enabled" : "disabled", current_state ? "disable" : "enable");
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_1;
        }
        break;
 800355e:	e092      	b.n	8003686 <COMMLoops_LoopToggle+0x1b6>
          sprintf((char*) context->output_buffer, "\r\n%s is currently %s. Would you like to %s it? (y/n):\r\n", parameter_name, current_state ? "enabled" : "disabled", current_state ? "disable" : "enable");
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003566:	4b4e      	ldr	r3, [pc, #312]	@ (80036a0 <COMMLoops_LoopToggle+0x1d0>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <COMMLoops_LoopToggle+0xa2>
 800356e:	4a4e      	ldr	r2, [pc, #312]	@ (80036a8 <COMMLoops_LoopToggle+0x1d8>)
 8003570:	e000      	b.n	8003574 <COMMLoops_LoopToggle+0xa4>
 8003572:	4a4e      	ldr	r2, [pc, #312]	@ (80036ac <COMMLoops_LoopToggle+0x1dc>)
 8003574:	4b4a      	ldr	r3, [pc, #296]	@ (80036a0 <COMMLoops_LoopToggle+0x1d0>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <COMMLoops_LoopToggle+0xb0>
 800357c:	4b4c      	ldr	r3, [pc, #304]	@ (80036b0 <COMMLoops_LoopToggle+0x1e0>)
 800357e:	e000      	b.n	8003582 <COMMLoops_LoopToggle+0xb2>
 8003580:	4b4c      	ldr	r3, [pc, #304]	@ (80036b4 <COMMLoops_LoopToggle+0x1e4>)
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	494b      	ldr	r1, [pc, #300]	@ (80036b8 <COMMLoops_LoopToggle+0x1e8>)
 800358a:	f021 fe97 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800359a:	461a      	mov	r2, r3
 800359c:	2100      	movs	r1, #0
 800359e:	f000 fb85 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
        break;
 80035aa:	e06c      	b.n	8003686 <COMMLoops_LoopToggle+0x1b6>
      case PARAM_STATE_1:
        bool confirmed = false;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
        if (checkYesNo(*context->input, &confirmed) == true) {
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	791b      	ldrb	r3, [r3, #4]
 80035b4:	f107 020f 	add.w	r2, r7, #15
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f005 f9ca 	bl	8008954 <checkYesNo>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d044      	beq.n	8003650 <COMMLoops_LoopToggle+0x180>
          bool new_value = ! current_state;
 80035c6:	4b36      	ldr	r3, [pc, #216]	@ (80036a0 <COMMLoops_LoopToggle+0x1d0>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bf14      	ite	ne
 80035ce:	2301      	movne	r3, #1
 80035d0:	2300      	moveq	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f083 0301 	eor.w	r3, r3, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	73bb      	strb	r3, [r7, #14]
          if (confirmed == true) {
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02e      	beq.n	8003646 <COMMLoops_LoopToggle+0x176>
            if (Param_SetUint8(param_id, (uint8_t*) &new_value) == true) {
 80035e8:	f107 020e 	add.w	r2, r7, #14
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd fdab 	bl	800114c <Param_SetUint8>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d017      	beq.n	800362c <COMMLoops_LoopToggle+0x15c>
              sprintf((char*) context->output_buffer, "\r\nSuccessfully %s %s\r\n", new_value ? "enabled" : "disabled", parameter_name);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003602:	7bbb      	ldrb	r3, [r7, #14]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <COMMLoops_LoopToggle+0x13c>
 8003608:	4a27      	ldr	r2, [pc, #156]	@ (80036a8 <COMMLoops_LoopToggle+0x1d8>)
 800360a:	e000      	b.n	800360e <COMMLoops_LoopToggle+0x13e>
 800360c:	4a27      	ldr	r2, [pc, #156]	@ (80036ac <COMMLoops_LoopToggle+0x1dc>)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	492a      	ldr	r1, [pc, #168]	@ (80036bc <COMMLoops_LoopToggle+0x1ec>)
 8003612:	f021 fe53 	bl	80252bc <siprintf>
              COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003622:	461a      	mov	r2, r3
 8003624:	2100      	movs	r1, #0
 8003626:	f000 fb41 	bl	8003cac <COMM_TransmitData>
 800362a:	e007      	b.n	800363c <COMMLoops_LoopToggle+0x16c>
            }
            else {
              COMM_TransmitData(error_updating_message, sizeof(error_updating_message) - 1, context->comm_interface);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8003632:	461a      	mov	r2, r3
 8003634:	211c      	movs	r1, #28
 8003636:	4822      	ldr	r0, [pc, #136]	@ (80036c0 <COMMLoops_LoopToggle+0x1f0>)
 8003638:	f000 fb38 	bl	8003cac <COMM_TransmitData>
            }
            context->state->state = PARAM_STATE_COMPLETE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2207      	movs	r2, #7
 8003642:	701a      	strb	r2, [r3, #0]
        else {
          sprintf((char*) context->output_buffer, "\r\nInvalid Input!\r\n");
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          context->state->state = PARAM_STATE_0;
        }
        break;
 8003644:	e01f      	b.n	8003686 <COMMLoops_LoopToggle+0x1b6>
            context->state->state = PARAM_STATE_COMPLETE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2207      	movs	r2, #7
 800364c:	701a      	strb	r2, [r3, #0]
        break;
 800364e:	e01a      	b.n	8003686 <COMMLoops_LoopToggle+0x1b6>
          sprintf((char*) context->output_buffer, "\r\nInvalid Input!\r\n");
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003656:	491b      	ldr	r1, [pc, #108]	@ (80036c4 <COMMLoops_LoopToggle+0x1f4>)
 8003658:	4618      	mov	r0, r3
 800365a:	f021 fe2f 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800366a:	461a      	mov	r2, r3
 800366c:	2100      	movs	r1, #0
 800366e:	f000 fb1d 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
        break;
 800367a:	e004      	b.n	8003686 <COMMLoops_LoopToggle+0x1b6>
      default:
      context->state->state = PARAM_STATE_COMPLETE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2207      	movs	r2, #7
 8003682:	701a      	strb	r2, [r3, #0]
      break;
 8003684:	bf00      	nop
    }
  } while (old_state > context->state->state);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	7dfa      	ldrb	r2, [r7, #23]
 800368e:	429a      	cmp	r2, r3
 8003690:	f63f af3d 	bhi.w	800350e <COMMLoops_LoopToggle+0x3e>
}
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	24000140 	.word	0x24000140
 80036a0:	2400096f 	.word	0x2400096f
 80036a4:	0802a614 	.word	0x0802a614
 80036a8:	0802a638 	.word	0x0802a638
 80036ac:	0802a640 	.word	0x0802a640
 80036b0:	0802a64c 	.word	0x0802a64c
 80036b4:	0802a654 	.word	0x0802a654
 80036b8:	0802a65c 	.word	0x0802a65c
 80036bc:	0802a694 	.word	0x0802a694
 80036c0:	240001a4 	.word	0x240001a4
 80036c4:	0802a6ac 	.word	0x0802a6ac

080036c8 <COMM_RegisterHistoryMenu>:


/* Exported function definitions ---------------------------------------------*/

bool COMM_RegisterHistoryMenu()
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
  bool ret = registerMenu(&histMenu) && registerMenu(&pwrHistMenu) &&
 80036ce:	482d      	ldr	r0, [pc, #180]	@ (8003784 <COMM_RegisterHistoryMenu+0xbc>)
 80036d0:	f000 ff12 	bl	80044f8 <registerMenu>
 80036d4:	4603      	mov	r3, r0
             registerMenu(&tempHistMenu) && registerMenu(&receivedHist) &&
             registerMenu(&sentHist) && registerMenu(&errHist) &&
             registerMenu(&peakPwrHist) && registerMenu(&bootPwrHist) &&
             registerMenu(&avgPwrHist) && registerMenu(&currPwrHist) &&
             registerMenu(&currTempHist) && registerMenu(&peakTempHist) &&
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d049      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
  bool ret = registerMenu(&histMenu) && registerMenu(&pwrHistMenu) &&
 80036da:	482b      	ldr	r0, [pc, #172]	@ (8003788 <COMM_RegisterHistoryMenu+0xc0>)
 80036dc:	f000 ff0c 	bl	80044f8 <registerMenu>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d043      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
             registerMenu(&tempHistMenu) && registerMenu(&receivedHist) &&
 80036e6:	4829      	ldr	r0, [pc, #164]	@ (800378c <COMM_RegisterHistoryMenu+0xc4>)
 80036e8:	f000 ff06 	bl	80044f8 <registerMenu>
 80036ec:	4603      	mov	r3, r0
  bool ret = registerMenu(&histMenu) && registerMenu(&pwrHistMenu) &&
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03d      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
             registerMenu(&tempHistMenu) && registerMenu(&receivedHist) &&
 80036f2:	4827      	ldr	r0, [pc, #156]	@ (8003790 <COMM_RegisterHistoryMenu+0xc8>)
 80036f4:	f000 ff00 	bl	80044f8 <registerMenu>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d037      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
             registerMenu(&sentHist) && registerMenu(&errHist) &&
 80036fe:	4825      	ldr	r0, [pc, #148]	@ (8003794 <COMM_RegisterHistoryMenu+0xcc>)
 8003700:	f000 fefa 	bl	80044f8 <registerMenu>
 8003704:	4603      	mov	r3, r0
             registerMenu(&tempHistMenu) && registerMenu(&receivedHist) &&
 8003706:	2b00      	cmp	r3, #0
 8003708:	d031      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
             registerMenu(&sentHist) && registerMenu(&errHist) &&
 800370a:	4823      	ldr	r0, [pc, #140]	@ (8003798 <COMM_RegisterHistoryMenu+0xd0>)
 800370c:	f000 fef4 	bl	80044f8 <registerMenu>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d02b      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
             registerMenu(&peakPwrHist) && registerMenu(&bootPwrHist) &&
 8003716:	4821      	ldr	r0, [pc, #132]	@ (800379c <COMM_RegisterHistoryMenu+0xd4>)
 8003718:	f000 feee 	bl	80044f8 <registerMenu>
 800371c:	4603      	mov	r3, r0
             registerMenu(&sentHist) && registerMenu(&errHist) &&
 800371e:	2b00      	cmp	r3, #0
 8003720:	d025      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
             registerMenu(&peakPwrHist) && registerMenu(&bootPwrHist) &&
 8003722:	481f      	ldr	r0, [pc, #124]	@ (80037a0 <COMM_RegisterHistoryMenu+0xd8>)
 8003724:	f000 fee8 	bl	80044f8 <registerMenu>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d01f      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
             registerMenu(&avgPwrHist) && registerMenu(&currPwrHist) &&
 800372e:	481d      	ldr	r0, [pc, #116]	@ (80037a4 <COMM_RegisterHistoryMenu+0xdc>)
 8003730:	f000 fee2 	bl	80044f8 <registerMenu>
 8003734:	4603      	mov	r3, r0
             registerMenu(&peakPwrHist) && registerMenu(&bootPwrHist) &&
 8003736:	2b00      	cmp	r3, #0
 8003738:	d019      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
             registerMenu(&avgPwrHist) && registerMenu(&currPwrHist) &&
 800373a:	481b      	ldr	r0, [pc, #108]	@ (80037a8 <COMM_RegisterHistoryMenu+0xe0>)
 800373c:	f000 fedc 	bl	80044f8 <registerMenu>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d013      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
             registerMenu(&currTempHist) && registerMenu(&peakTempHist) &&
 8003746:	4819      	ldr	r0, [pc, #100]	@ (80037ac <COMM_RegisterHistoryMenu+0xe4>)
 8003748:	f000 fed6 	bl	80044f8 <registerMenu>
 800374c:	4603      	mov	r3, r0
             registerMenu(&avgPwrHist) && registerMenu(&currPwrHist) &&
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
             registerMenu(&currTempHist) && registerMenu(&peakTempHist) &&
 8003752:	4817      	ldr	r0, [pc, #92]	@ (80037b0 <COMM_RegisterHistoryMenu+0xe8>)
 8003754:	f000 fed0 	bl	80044f8 <registerMenu>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
             registerMenu(&avgTempHist);
 800375e:	4815      	ldr	r0, [pc, #84]	@ (80037b4 <COMM_RegisterHistoryMenu+0xec>)
 8003760:	f000 feca 	bl	80044f8 <registerMenu>
 8003764:	4603      	mov	r3, r0
             registerMenu(&currTempHist) && registerMenu(&peakTempHist) &&
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <COMM_RegisterHistoryMenu+0xa6>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <COMM_RegisterHistoryMenu+0xa8>
 800376e:	2300      	movs	r3, #0
  bool ret = registerMenu(&histMenu) && registerMenu(&pwrHistMenu) &&
 8003770:	71fb      	strb	r3, [r7, #7]
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	71fb      	strb	r3, [r7, #7]
  return ret;
 800377a:	79fb      	ldrb	r3, [r7, #7]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	0802b9b8 	.word	0x0802b9b8
 8003788:	0802b9e0 	.word	0x0802b9e0
 800378c:	0802ba08 	.word	0x0802ba08
 8003790:	0802ba30 	.word	0x0802ba30
 8003794:	0802ba58 	.word	0x0802ba58
 8003798:	0802ba80 	.word	0x0802ba80
 800379c:	0802baa8 	.word	0x0802baa8
 80037a0:	0802bad0 	.word	0x0802bad0
 80037a4:	0802baf8 	.word	0x0802baf8
 80037a8:	0802bb20 	.word	0x0802bb20
 80037ac:	0802bb48 	.word	0x0802bb48
 80037b0:	0802bb70 	.word	0x0802bb70
 80037b4:	0802bb98 	.word	0x0802bb98

080037b8 <printReceivedMessages>:

/* Private function definitions ----------------------------------------------*/

void printReceivedMessages(void* argument)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2207      	movs	r2, #7
 80037ca:	701a      	strb	r2, [r3, #0]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <printSentMessages>:

void printSentMessages(void* argument)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2207      	movs	r2, #7
 80037ea:	701a      	strb	r2, [r3, #0]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <printErrorLog>:

void printErrorLog(void* argument)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2207      	movs	r2, #7
 800380a:	701a      	strb	r2, [r3, #0]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <printPeakPwr>:

void printPeakPwr(void* argument)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2207      	movs	r2, #7
 800382a:	701a      	strb	r2, [r3, #0]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <printPwrSinceBoot>:

void printPwrSinceBoot(void* argument)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2207      	movs	r2, #7
 800384a:	701a      	strb	r2, [r3, #0]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <printAvgPwr>:

void printAvgPwr(void* argument)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2207      	movs	r2, #7
 800386a:	701a      	strb	r2, [r3, #0]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <printCurrPwr>:

void printCurrPwr(void* argument)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2207      	movs	r2, #7
 800388a:	701a      	strb	r2, [r3, #0]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <printCurrTemp>:

void printCurrTemp(void* argument)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2207      	movs	r2, #7
 80038aa:	701a      	strb	r2, [r3, #0]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <printPeakTemp>:

void printPeakTemp(void* argument)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2207      	movs	r2, #7
 80038ca:	701a      	strb	r2, [r3, #0]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <printAvgTemp>:

void printAvgTemp(void* argument)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2207      	movs	r2, #7
 80038ea:	701a      	strb	r2, [r3, #0]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <COMM_StartTask>:
static bool registerCommParams(void);

/* Exported function definitions ---------------------------------------------*/

void COMM_StartTask(void *argument)
{
 80038f8:	b5b0      	push	{r4, r5, r7, lr}
 80038fa:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 80038fe:	af20      	add	r7, sp, #128	@ 0x80
 8003900:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003904:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8003908:	6018      	str	r0, [r3, #0]
  (void)(argument);
  USB_Init();
 800390a:	f005 fe3b 	bl	8009584 <USB_Init>
  DAU_Init();
 800390e:	f005 fc19 	bl	8009144 <DAU_Init>
  uint8_t msg_buffer[MAX_COMM_IN_BUFFER_SIZE];
  uint16_t msg_buf_len = 0;
 8003912:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003916:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800391a:	2200      	movs	r2, #0
 800391c:	801a      	strh	r2, [r3, #0]
  uint16_t menu_number = 0;
 800391e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003926:	2200      	movs	r2, #0
 8003928:	801a      	strh	r2, [r3, #0]
  uint8_t test_msg[] = "Welcome to the UAM HMI!\r\n";
 800392a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800392e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003932:	4ac3      	ldr	r2, [pc, #780]	@ (8003c40 <COMM_StartTask+0x348>)
 8003934:	461c      	mov	r4, r3
 8003936:	4615      	mov	r5, r2
 8003938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800393a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800393c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003940:	c403      	stmia	r4!, {r0, r1}
 8003942:	8022      	strh	r2, [r4, #0]
  menu_context.interface = COMM_BOTH;
 8003944:	4bbf      	ldr	r3, [pc, #764]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003946:	2202      	movs	r2, #2
 8003948:	711a      	strb	r2, [r3, #4]


  if (Param_RegisterTask(COMM_TASK, "COMM") == false) {
 800394a:	49bf      	ldr	r1, [pc, #764]	@ (8003c48 <COMM_StartTask+0x350>)
 800394c:	2001      	movs	r0, #1
 800394e:	f7fd fc2d 	bl	80011ac <Param_RegisterTask>
 8003952:	4603      	mov	r3, r0
 8003954:	f083 0301 	eor.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <COMM_StartTask+0x6c>
    Error_Routine(ERROR_COMM_INIT);
 800395e:	2001      	movs	r0, #1
 8003960:	f004 fed1 	bl	8008706 <Error_Routine>
  }

  if (registerCommParams() == false) {
 8003964:	f000 fd94 	bl	8004490 <registerCommParams>
 8003968:	4603      	mov	r3, r0
 800396a:	f083 0301 	eor.w	r3, r3, #1
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <COMM_StartTask+0x82>
    Error_Routine(ERROR_COMM_INIT);
 8003974:	2001      	movs	r0, #1
 8003976:	f004 fec6 	bl	8008706 <Error_Routine>
  }

  if (Param_TaskRegistrationComplete(COMM_TASK) == false) {
 800397a:	2001      	movs	r0, #1
 800397c:	f7fd fc94 	bl	80012a8 <Param_TaskRegistrationComplete>
 8003980:	4603      	mov	r3, r0
 8003982:	f083 0301 	eor.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <COMM_StartTask+0x9a>
    Error_Routine(ERROR_COMM_INIT);
 800398c:	2001      	movs	r0, #1
 800398e:	f004 feba 	bl	8008706 <Error_Routine>
  }

  CFG_WaitLoadComplete();
 8003992:	f7fd f8ef 	bl	8000b74 <CFG_WaitLoadComplete>

  osDelay(1000);
 8003996:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800399a:	f01b f822 	bl	801e9e2 <osDelay>

  COMM_TransmitData(test_msg, sizeof(test_msg) - 1, menu_context.interface);
 800399e:	4ba9      	ldr	r3, [pc, #676]	@ (8003c44 <COMM_StartTask+0x34c>)
 80039a0:	791a      	ldrb	r2, [r3, #4]
 80039a2:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 80039a6:	2119      	movs	r1, #25
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 f97f 	bl	8003cac <COMM_TransmitData>
  if (COMM_RegisterMainMenu() == false) {
 80039ae:	f000 fd93 	bl	80044d8 <COMM_RegisterMainMenu>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f083 0301 	eor.w	r3, r3, #1
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <COMM_StartTask+0xcc>
    Error_Routine(ERROR_COMM_INIT);
 80039be:	2001      	movs	r0, #1
 80039c0:	f004 fea1 	bl	8008706 <Error_Routine>
  }
  if (COMM_RegisterConfigurationMenu() == false) {
 80039c4:	f7fd fd08 	bl	80013d8 <COMM_RegisterConfigurationMenu>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f083 0301 	eor.w	r3, r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <COMM_StartTask+0xe2>
    Error_Routine(ERROR_COMM_INIT);
 80039d4:	2001      	movs	r0, #1
 80039d6:	f004 fe96 	bl	8008706 <Error_Routine>
  }
  if (COMM_RegisterDebugMenu() == false) {
 80039da:	f7fe fb8d 	bl	80020f8 <COMM_RegisterDebugMenu>
 80039de:	4603      	mov	r3, r0
 80039e0:	f083 0301 	eor.w	r3, r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <COMM_StartTask+0xf8>
    Error_Routine(ERROR_COMM_INIT);
 80039ea:	2001      	movs	r0, #1
 80039ec:	f004 fe8b 	bl	8008706 <Error_Routine>
  }
  if (COMM_RegisterHistoryMenu() == false) {
 80039f0:	f7ff fe6a 	bl	80036c8 <COMM_RegisterHistoryMenu>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f083 0301 	eor.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <COMM_StartTask+0x10e>
    Error_Routine(ERROR_COMM_INIT);
 8003a00:	2001      	movs	r0, #1
 8003a02:	f004 fe80 	bl	8008706 <Error_Routine>
  }
  if (COMM_RegisterTxRxMenu() == false) {
 8003a06:	f000 fdaf 	bl	8004568 <COMM_RegisterTxRxMenu>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f083 0301 	eor.w	r3, r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <COMM_StartTask+0x124>
    Error_Routine(ERROR_COMM_INIT);
 8003a16:	2001      	movs	r0, #1
 8003a18:	f004 fe75 	bl	8008706 <Error_Routine>
  }
  if (COMM_RegisterEvalMenu() == false) {
 8003a1c:	f7fe ffd8 	bl	80029d0 <COMM_RegisterEvalMenu>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f083 0301 	eor.w	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <COMM_StartTask+0x13a>
    Error_Routine(ERROR_COMM_INIT);
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f004 fe6a 	bl	8008706 <Error_Routine>
  }

  menu_context.current_menu = getMenu(MENU_ID_MAIN);
 8003a32:	2000      	movs	r0, #0
 8003a34:	f000 fd82 	bl	800453c <getMenu>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4a82      	ldr	r2, [pc, #520]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003a3c:	6013      	str	r3, [r2, #0]
  displaySubMenus();
 8003a3e:	f000 f96d 	bl	8003d1c <displaySubMenus>
  // Main task loop - processes messages and handles menu navigation
  for(;;) {
    Message_t rx_msg;
    if (MESS_GetMessageFromRxQ(&rx_msg) == pdPASS) {
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 fdd0 	bl	80075ec <MESS_GetMessageFromRxQ>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d10e      	bne.n	8003a70 <COMM_StartTask+0x178>
      printReceivedMessage(rx_msg);
 8003a52:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003a56:	f5a3 7431 	sub.w	r4, r3, #708	@ 0x2c4
 8003a5a:	4668      	mov	r0, sp
 8003a5c:	f104 0310 	add.w	r3, r4, #16
 8003a60:	2280      	movs	r2, #128	@ 0x80
 8003a62:	4619      	mov	r1, r3
 8003a64:	f021 fdbd 	bl	80255e2 <memcpy>
 8003a68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a6c:	f000 fad0 	bl	8004010 <printReceivedMessage>
    }

    RxState_t state = USB_GetMessage(msg_buffer, &msg_buf_len);
 8003a70:	f507 72e5 	add.w	r2, r7, #458	@ 0x1ca
 8003a74:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f005 fe54 	bl	8009728 <USB_GetMessage>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f887 32cf 	strb.w	r3, [r7, #719]	@ 0x2cf
    if (state == NO_CHANGE) {
 8003a86:	f897 32cf 	ldrb.w	r3, [r7, #719]	@ 0x2cf
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d112      	bne.n	8003ab4 <COMM_StartTask+0x1bc>
      state = DAU_GetMessage(msg_buffer, &msg_buf_len);
 8003a8e:	f507 72e5 	add.w	r2, r7, #458	@ 0x1ca
 8003a92:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f005 fd25 	bl	80094e8 <DAU_GetMessage>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f887 32cf 	strb.w	r3, [r7, #719]	@ 0x2cf
      if (state != NO_CHANGE) {
 8003aa4:	f897 32cf 	ldrb.w	r3, [r7, #719]	@ 0x2cf
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d006      	beq.n	8003aba <COMM_StartTask+0x1c2>
        menu_context.interface = COMM_UART;
 8003aac:	4b65      	ldr	r3, [pc, #404]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	711a      	strb	r2, [r3, #4]
 8003ab2:	e002      	b.n	8003aba <COMM_StartTask+0x1c2>
      }
    }
    else {
      menu_context.interface = COMM_USB;
 8003ab4:	4b63      	ldr	r3, [pc, #396]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	711a      	strb	r2, [r3, #4]
    }
    switch (state) {
 8003aba:	f897 32cf 	ldrb.w	r3, [r7, #719]	@ 0x2cf
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	f000 80e6 	beq.w	8003c90 <COMM_StartTask+0x398>
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	f300 80e5 	bgt.w	8003c94 <COMM_StartTask+0x39c>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80c0 	beq.w	8003c50 <COMM_StartTask+0x358>
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	f040 80df 	bne.w	8003c94 <COMM_StartTask+0x39c>
      case DATA_READY:
        if (msg_buf_len > 0) {
 8003ad6:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003ada:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d017      	beq.n	8003b14 <COMM_StartTask+0x21c>
          if (msg_buffer[0] == '\e') {
 8003ae4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b1b      	cmp	r3, #27
 8003af0:	d110      	bne.n	8003b14 <COMM_StartTask+0x21c>
            menu_context.current_menu->parameters->state = PARAM_STATE_0;
 8003af2:	4b54      	ldr	r3, [pc, #336]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
            menu_context.current_menu = getMenu(menu_context.current_menu->parent_id);
 8003afc:	4b51      	ldr	r3, [pc, #324]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	7e1b      	ldrb	r3, [r3, #24]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fd1a 	bl	800453c <getMenu>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4a4e      	ldr	r2, [pc, #312]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003b0c:	6013      	str	r3, [r2, #0]
            displaySubMenus();
 8003b0e:	f000 f905 	bl	8003d1c <displaySubMenus>
            break;
 8003b12:	e0c4      	b.n	8003c9e <COMM_StartTask+0x3a6>
          }
        }

        if (menu_context.current_menu->num_children != 0) {
 8003b14:	4b4b      	ldr	r3, [pc, #300]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d030      	beq.n	8003b82 <COMM_StartTask+0x28a>
          // change menu
          if (checkMenuNumberInput(msg_buffer, msg_buf_len, &menu_number) == true) {
 8003b20:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003b24:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8003b28:	8819      	ldrh	r1, [r3, #0]
 8003b2a:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8003b2e:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f972 	bl	8003e1c <checkMenuNumberInput>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d018      	beq.n	8003b70 <COMM_StartTask+0x278>
            // Valid menu option
            menu_context.current_menu = getMenu(menu_context.current_menu->children_ids[menu_number - 1]);
 8003b3e:	4b41      	ldr	r3, [pc, #260]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	4413      	add	r3, r2
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fcf1 	bl	800453c <getMenu>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4a39      	ldr	r2, [pc, #228]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003b5e:	6013      	str	r3, [r2, #0]
            menu_context.current_menu->parameters->state = PARAM_STATE_0;
 8003b60:	4b38      	ldr	r3, [pc, #224]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
            displaySubMenus();
 8003b6a:	f000 f8d7 	bl	8003d1c <displaySubMenus>
 8003b6e:	e008      	b.n	8003b82 <COMM_StartTask+0x28a>
          }
          else {
            COMM_TransmitData("\r\nInvalid option!\r\n", CALC_LEN, menu_context.interface);
 8003b70:	4b34      	ldr	r3, [pc, #208]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003b72:	791b      	ldrb	r3, [r3, #4]
 8003b74:	461a      	mov	r2, r3
 8003b76:	2100      	movs	r1, #0
 8003b78:	4834      	ldr	r0, [pc, #208]	@ (8003c4c <COMM_StartTask+0x354>)
 8003b7a:	f000 f897 	bl	8003cac <COMM_TransmitData>
            displaySubMenus();
 8003b7e:	f000 f8cd 	bl	8003d1c <displaySubMenus>
          }
        }

        if (menu_context.current_menu->num_children == 0) {
 8003b82:	4b30      	ldr	r3, [pc, #192]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f040 8084 	bne.w	8003c98 <COMM_StartTask+0x3a0>
          // no children so handle function
          // Prepare function argument
          resetInputEcho();
 8003b90:	f000 fa34 	bl	8003ffc <resetInputEcho>
          FunctionContext_t context = {
 8003b94:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003b98:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	f021 fc2c 	bl	8025402 <memset>
              .state = menu_context.current_menu->parameters,
 8003baa:	4b26      	ldr	r3, [pc, #152]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
          FunctionContext_t context = {
 8003bb0:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003bb4:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003bbe:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8003bc2:	881a      	ldrh	r2, [r3, #0]
 8003bc4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003bc8:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003bcc:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
 8003bd0:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003bd4:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003bd8:	f507 72e6 	add.w	r2, r7, #460	@ 0x1cc
 8003bdc:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
              .input_len = msg_buf_len,
              .output_buffer = msg_buffer,
              .comm_interface = menu_context.interface
 8003be0:	4b18      	ldr	r3, [pc, #96]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003be2:	791a      	ldrb	r2, [r3, #4]
          FunctionContext_t context = {
 8003be4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003be8:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003bec:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
          };
          strncpy(context.input, (char*) msg_buffer, MAX_COMM_IN_BUFFER_SIZE);
 8003bf0:	f507 71e6 	add.w	r1, r7, #460	@ 0x1cc
 8003bf4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f021 fc07 	bl	8025412 <strncpy>
          (*menu_context.current_menu->handler)(&context);
 8003c04:	4b0f      	ldr	r3, [pc, #60]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8003c0e:	4610      	mov	r0, r2
 8003c10:	4798      	blx	r3

          if (menu_context.current_menu->parameters->state == PARAM_STATE_COMPLETE) {
 8003c12:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b07      	cmp	r3, #7
 8003c1c:	d13c      	bne.n	8003c98 <COMM_StartTask+0x3a0>
            menu_context.current_menu->parameters->state = PARAM_STATE_0;
 8003c1e:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
            menu_context.current_menu = getMenu(menu_context.current_menu->parent_id);
 8003c28:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	7e1b      	ldrb	r3, [r3, #24]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fc84 	bl	800453c <getMenu>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4a03      	ldr	r2, [pc, #12]	@ (8003c44 <COMM_StartTask+0x34c>)
 8003c38:	6013      	str	r3, [r2, #0]
            displaySubMenus();
 8003c3a:	f000 f86f 	bl	8003d1c <displaySubMenus>
          }
        }
        break;
 8003c3e:	e02b      	b.n	8003c98 <COMM_StartTask+0x3a0>
 8003c40:	0802a7e0 	.word	0x0802a7e0
 8003c44:	24000970 	.word	0x24000970
 8003c48:	0802a7c4 	.word	0x0802a7c4
 8003c4c:	0802a7cc 	.word	0x0802a7cc
      case NEW_CONTENT:
        if (menu_context.interface == COMM_USB) {
 8003c50:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <COMM_StartTask+0x3b0>)
 8003c52:	791b      	ldrb	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <COMM_StartTask+0x378>
          updateInputEcho(msg_buffer, msg_buf_len);
 8003c58:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003c5c:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8003c60:	881a      	ldrh	r2, [r3, #0]
 8003c62:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 f90b 	bl	8003e84 <updateInputEcho>
        }
        else if (menu_context.interface == COMM_UART) {
          updateInputEcho(msg_buffer, msg_buf_len);
        }
        break;
 8003c6e:	e015      	b.n	8003c9c <COMM_StartTask+0x3a4>
        else if (menu_context.interface == COMM_UART) {
 8003c70:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca8 <COMM_StartTask+0x3b0>)
 8003c72:	791b      	ldrb	r3, [r3, #4]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d111      	bne.n	8003c9c <COMM_StartTask+0x3a4>
          updateInputEcho(msg_buffer, msg_buf_len);
 8003c78:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003c7c:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8003c80:	881a      	ldrh	r2, [r3, #0]
 8003c82:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 f8fb 	bl	8003e84 <updateInputEcho>
        break;
 8003c8e:	e005      	b.n	8003c9c <COMM_StartTask+0x3a4>
      case NO_CHANGE:
        break;
 8003c90:	bf00      	nop
 8003c92:	e004      	b.n	8003c9e <COMM_StartTask+0x3a6>
      default:
        break;
 8003c94:	bf00      	nop
 8003c96:	e002      	b.n	8003c9e <COMM_StartTask+0x3a6>
        break;
 8003c98:	bf00      	nop
 8003c9a:	e000      	b.n	8003c9e <COMM_StartTask+0x3a6>
        break;
 8003c9c:	bf00      	nop
    }
    osDelay(10);
 8003c9e:	200a      	movs	r0, #10
 8003ca0:	f01a fe9f 	bl	801e9e2 <osDelay>
  for(;;) {
 8003ca4:	e6cd      	b.n	8003a42 <COMM_StartTask+0x14a>
 8003ca6:	bf00      	nop
 8003ca8:	24000970 	.word	0x24000970

08003cac <COMM_TransmitData>:
  }
}


void COMM_TransmitData(const void *data, uint32_t data_len, CommInterface_t interface)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	71fb      	strb	r3, [r7, #7]
  if (data_len == CALC_LEN) {
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <COMM_TransmitData+0x1c>
    data_len = strlen((char*) data);
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f7fc fb75 	bl	80003b0 <strlen>
 8003cc6:	60b8      	str	r0, [r7, #8]
  }
  switch (interface) {
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d014      	beq.n	8003cf8 <COMM_TransmitData+0x4c>
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	dc1f      	bgt.n	8003d12 <COMM_TransmitData+0x66>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <COMM_TransmitData+0x30>
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d007      	beq.n	8003cea <COMM_TransmitData+0x3e>
    case COMM_BOTH:
      USB_TransmitData((uint8_t*) data, (uint16_t) data_len);
      DAU_TransmitData((uint8_t*) data, (uint16_t) data_len);
      break;
    default:
      break;
 8003cda:	e01a      	b.n	8003d12 <COMM_TransmitData+0x66>
      USB_TransmitData((uint8_t*) data, (uint16_t) data_len);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f005 fc72 	bl	80095cc <USB_TransmitData>
      break;
 8003ce8:	e014      	b.n	8003d14 <COMM_TransmitData+0x68>
      DAU_TransmitData((uint8_t*) data, (uint16_t) data_len);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f005 fa59 	bl	80091a8 <DAU_TransmitData>
      break;
 8003cf6:	e00d      	b.n	8003d14 <COMM_TransmitData+0x68>
      USB_TransmitData((uint8_t*) data, (uint16_t) data_len);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f005 fc64 	bl	80095cc <USB_TransmitData>
      DAU_TransmitData((uint8_t*) data, (uint16_t) data_len);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	4619      	mov	r1, r3
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f005 fa4c 	bl	80091a8 <DAU_TransmitData>
      break;
 8003d10:	e000      	b.n	8003d14 <COMM_TransmitData+0x68>
      break;
 8003d12:	bf00      	nop
  }
}
 8003d14:	bf00      	nop
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <displaySubMenus>:

/* Private function definitions ----------------------------------------------*/

void displaySubMenus(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
  if (menu_context.current_menu->num_children == 0) return;
 8003d22:	4b26      	ldr	r3, [pc, #152]	@ (8003dbc <displaySubMenus+0xa0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d041      	beq.n	8003db2 <displaySubMenus+0x96>
  COMM_TransmitData("\r\n", 2, menu_context.interface);
 8003d2e:	4b23      	ldr	r3, [pc, #140]	@ (8003dbc <displaySubMenus+0xa0>)
 8003d30:	791b      	ldrb	r3, [r3, #4]
 8003d32:	461a      	mov	r2, r3
 8003d34:	2102      	movs	r1, #2
 8003d36:	4822      	ldr	r0, [pc, #136]	@ (8003dc0 <displaySubMenus+0xa4>)
 8003d38:	f7ff ffb8 	bl	8003cac <COMM_TransmitData>
  COMM_TransmitData(menu_context.current_menu->description, CALC_LEN, menu_context.interface);
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dbc <displaySubMenus+0xa0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	4a1e      	ldr	r2, [pc, #120]	@ (8003dbc <displaySubMenus+0xa0>)
 8003d44:	7912      	ldrb	r2, [r2, #4]
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ffaf 	bl	8003cac <COMM_TransmitData>
  COMM_TransmitData("\r\n", 2, menu_context.interface);
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <displaySubMenus+0xa0>)
 8003d50:	791b      	ldrb	r3, [r3, #4]
 8003d52:	461a      	mov	r2, r3
 8003d54:	2102      	movs	r1, #2
 8003d56:	481a      	ldr	r0, [pc, #104]	@ (8003dc0 <displaySubMenus+0xa4>)
 8003d58:	f7ff ffa8 	bl	8003cac <COMM_TransmitData>
  for (int i = 0; i < menu_context.current_menu->num_children; i++) {
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e01e      	b.n	8003da0 <displaySubMenus+0x84>
    uint16_t child_id = menu_context.current_menu->children_ids[i];
 8003d62:	4b16      	ldr	r3, [pc, #88]	@ (8003dbc <displaySubMenus+0xa0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	817b      	strh	r3, [r7, #10]
    // TODO: add error checking
    MenuNode_t* child_menu = getMenu(child_id);
 8003d70:	897b      	ldrh	r3, [r7, #10]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fbe1 	bl	800453c <getMenu>
 8003d7a:	6078      	str	r0, [r7, #4]
    sprintf((char*) out_buffer, "%d: %s\r\n", i + 1, child_menu->description);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	490f      	ldr	r1, [pc, #60]	@ (8003dc4 <displaySubMenus+0xa8>)
 8003d86:	4810      	ldr	r0, [pc, #64]	@ (8003dc8 <displaySubMenus+0xac>)
 8003d88:	f021 fa98 	bl	80252bc <siprintf>
    COMM_TransmitData(out_buffer, CALC_LEN, menu_context.interface);
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dbc <displaySubMenus+0xa0>)
 8003d8e:	791b      	ldrb	r3, [r3, #4]
 8003d90:	461a      	mov	r2, r3
 8003d92:	2100      	movs	r1, #0
 8003d94:	480c      	ldr	r0, [pc, #48]	@ (8003dc8 <displaySubMenus+0xac>)
 8003d96:	f7ff ff89 	bl	8003cac <COMM_TransmitData>
  for (int i = 0; i < menu_context.current_menu->num_children; i++) {
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <displaySubMenus+0xa0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003da8:	461a      	mov	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4293      	cmp	r3, r2
 8003dae:	dbd8      	blt.n	8003d62 <displaySubMenus+0x46>
 8003db0:	e000      	b.n	8003db4 <displaySubMenus+0x98>
  if (menu_context.current_menu->num_children == 0) return;
 8003db2:	bf00      	nop
  }
}
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	24000970 	.word	0x24000970
 8003dc0:	0802a7fc 	.word	0x0802a7fc
 8003dc4:	0802a800 	.word	0x0802a800
 8003dc8:	24000978 	.word	0x24000978

08003dcc <isNumber>:

bool isNumber(uint8_t* buf, uint16_t len)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	807b      	strh	r3, [r7, #2]
  for (int i = 0; i < len; i++) {
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	e010      	b.n	8003e00 <isNumber+0x34>
    if (! isdigit(buf[i])) return false;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4413      	add	r3, r2
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	3301      	adds	r3, #1
 8003de8:	4a0b      	ldr	r2, [pc, #44]	@ (8003e18 <isNumber+0x4c>)
 8003dea:	4413      	add	r3, r2
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <isNumber+0x2e>
 8003df6:	2300      	movs	r3, #0
 8003df8:	e007      	b.n	8003e0a <isNumber+0x3e>
  for (int i = 0; i < len; i++) {
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	887b      	ldrh	r3, [r7, #2]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	dbea      	blt.n	8003dde <isNumber+0x12>
  }
  return true;
 8003e08:	2301      	movs	r3, #1
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	0802c0f8 	.word	0x0802c0f8

08003e1c <checkMenuNumberInput>:

bool checkMenuNumberInput(uint8_t* buf, uint16_t len, uint16_t* number)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	460b      	mov	r3, r1
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	817b      	strh	r3, [r7, #10]
  if (! isNumber(buf, len)) return false;
 8003e2a:	897b      	ldrh	r3, [r7, #10]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff ffcc 	bl	8003dcc <isNumber>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f083 0301 	eor.w	r3, r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <checkMenuNumberInput+0x28>
 8003e40:	2300      	movs	r3, #0
 8003e42:	e018      	b.n	8003e76 <checkMenuNumberInput+0x5a>
  if (len > MAX_MENU_NUMBER_LENGTH) return false;
 8003e44:	897b      	ldrh	r3, [r7, #10]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <checkMenuNumberInput+0x32>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e013      	b.n	8003e76 <checkMenuNumberInput+0x5a>

  *number = (uint16_t) atoi((char*)buf);
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f020 fa32 	bl	80242b8 <atoi>
 8003e54:	4603      	mov	r3, r0
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	801a      	strh	r2, [r3, #0]
  uint16_t num_children = menu_context.current_menu->num_children;
 8003e5c:	4b08      	ldr	r3, [pc, #32]	@ (8003e80 <checkMenuNumberInput+0x64>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e64:	82fb      	strh	r3, [r7, #22]

  if (*number > num_children) return false;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	8afa      	ldrh	r2, [r7, #22]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d201      	bcs.n	8003e74 <checkMenuNumberInput+0x58>
 8003e70:	2300      	movs	r3, #0
 8003e72:	e000      	b.n	8003e76 <checkMenuNumberInput+0x5a>
  return true;
 8003e74:	2301      	movs	r3, #1
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	24000970 	.word	0x24000970

08003e84 <updateInputEcho>:

void updateInputEcho(uint8_t* msg_buffer, uint16_t len)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
  static uint16_t old_len = 0;

  if (len == LEN_RESET) {
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	f647 62c3 	movw	r2, #32451	@ 0x7ec3
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d103      	bne.n	8003ea2 <updateInputEcho+0x1e>
    old_len = 0;
 8003e9a:	4b55      	ldr	r3, [pc, #340]	@ (8003ff0 <updateInputEcho+0x16c>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	801a      	strh	r2, [r3, #0]

    return;
 8003ea0:	e0a2      	b.n	8003fe8 <updateInputEcho+0x164>
  }

  int16_t len_difference = (int16_t) len - (int16_t) old_len;
 8003ea2:	4b53      	ldr	r3, [pc, #332]	@ (8003ff0 <updateInputEcho+0x16c>)
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	887a      	ldrh	r2, [r7, #2]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	81fb      	strh	r3, [r7, #14]
  uint16_t start_index;
  if (len_difference > BUFFER_BACK_TRACK_AMOUNT) {
 8003eae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	dd03      	ble.n	8003ebe <updateInputEcho+0x3a>
    start_index = old_len;
 8003eb6:	4b4e      	ldr	r3, [pc, #312]	@ (8003ff0 <updateInputEcho+0x16c>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	83fb      	strh	r3, [r7, #30]
 8003ebc:	e006      	b.n	8003ecc <updateInputEcho+0x48>
  }
  else {
    start_index = (len > BUFFER_BACK_TRACK_AMOUNT) ? (len - BUFFER_BACK_TRACK_AMOUNT) : 0;
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	bf38      	it	cc
 8003ec4:	2305      	movcc	r3, #5
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b05      	subs	r3, #5
 8003eca:	83fb      	strh	r3, [r7, #30]
  }
  uint16_t back_amount = (uint16_t) MIN((int16_t) old_len,
 8003ecc:	4b48      	ldr	r3, [pc, #288]	@ (8003ff0 <updateInputEcho+0x16c>)
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b21b      	sxth	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	dc05      	bgt.n	8003ee8 <updateInputEcho+0x64>
 8003edc:	89fb      	ldrh	r3, [r7, #14]
 8003ede:	f1c3 0305 	rsb	r3, r3, #5
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	b21b      	sxth	r3, r3
 8003ee6:	e000      	b.n	8003eea <updateInputEcho+0x66>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	4293      	cmp	r3, r2
 8003eec:	dc0a      	bgt.n	8003f04 <updateInputEcho+0x80>
 8003eee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	dc04      	bgt.n	8003f00 <updateInputEcho+0x7c>
 8003ef6:	89fb      	ldrh	r3, [r7, #14]
 8003ef8:	f1c3 0305 	rsb	r3, r3, #5
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	e003      	b.n	8003f08 <updateInputEcho+0x84>
 8003f00:	2300      	movs	r3, #0
 8003f02:	e001      	b.n	8003f08 <updateInputEcho+0x84>
 8003f04:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff0 <updateInputEcho+0x16c>)
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	81bb      	strh	r3, [r7, #12]
      (int16_t) (BUFFER_BACK_TRACK_AMOUNT - MIN(len_difference, BUFFER_BACK_TRACK_AMOUNT)));
  uint16_t out_buffer_len = back_amount;
 8003f0a:	89bb      	ldrh	r3, [r7, #12]
 8003f0c:	83bb      	strh	r3, [r7, #28]
  if (back_amount > 0) {
 8003f0e:	89bb      	ldrh	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <updateInputEcho+0x9c>
    memset(out_buffer, '\b', back_amount);
 8003f14:	89bb      	ldrh	r3, [r7, #12]
 8003f16:	461a      	mov	r2, r3
 8003f18:	2108      	movs	r1, #8
 8003f1a:	4836      	ldr	r0, [pc, #216]	@ (8003ff4 <updateInputEcho+0x170>)
 8003f1c:	f021 fa71 	bl	8025402 <memset>
  }
  uint16_t new_data_len = MIN(len, MAX(BUFFER_BACK_TRACK_AMOUNT, len_difference));
 8003f20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f24:	2b05      	cmp	r3, #5
 8003f26:	bfb8      	it	lt
 8003f28:	2305      	movlt	r3, #5
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	887b      	ldrh	r3, [r7, #2]
 8003f30:	4293      	cmp	r3, r2
 8003f32:	bfa8      	it	ge
 8003f34:	4613      	movge	r3, r2
 8003f36:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < new_data_len; i++) {
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e011      	b.n	8003f62 <updateInputEcho+0xde>
    out_buffer[back_amount + i] = msg_buffer[start_index + i];
 8003f3e:	8bfa      	ldrh	r2, [r7, #30]
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	4413      	add	r3, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	441a      	add	r2, r3
 8003f4a:	89b9      	ldrh	r1, [r7, #12]
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	440b      	add	r3, r1
 8003f50:	7811      	ldrb	r1, [r2, #0]
 8003f52:	4a28      	ldr	r2, [pc, #160]	@ (8003ff4 <updateInputEcho+0x170>)
 8003f54:	54d1      	strb	r1, [r2, r3]
    out_buffer_len++;
 8003f56:	8bbb      	ldrh	r3, [r7, #28]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	83bb      	strh	r3, [r7, #28]
  for (int i = 0; i < new_data_len; i++) {
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	897b      	ldrh	r3, [r7, #10]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	dbe9      	blt.n	8003f3e <updateInputEcho+0xba>
  }
  if (old_len > len) {
 8003f6a:	4b21      	ldr	r3, [pc, #132]	@ (8003ff0 <updateInputEcho+0x16c>)
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d229      	bcs.n	8003fc8 <updateInputEcho+0x144>
    for (int i = 0; i < old_len - len; i++) {
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e009      	b.n	8003f8e <updateInputEcho+0x10a>
      out_buffer[out_buffer_len++] = ' ';
 8003f7a:	8bbb      	ldrh	r3, [r7, #28]
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	83ba      	strh	r2, [r7, #28]
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff4 <updateInputEcho+0x170>)
 8003f84:	2120      	movs	r1, #32
 8003f86:	5499      	strb	r1, [r3, r2]
    for (int i = 0; i < old_len - len; i++) {
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	4b18      	ldr	r3, [pc, #96]	@ (8003ff0 <updateInputEcho+0x16c>)
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	dbed      	blt.n	8003f7a <updateInputEcho+0xf6>
    }
    for (int i = 0; i < old_len - len; i++) {
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e009      	b.n	8003fb8 <updateInputEcho+0x134>
      out_buffer[out_buffer_len++] = '\b';
 8003fa4:	8bbb      	ldrh	r3, [r7, #28]
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	83ba      	strh	r2, [r7, #28]
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b11      	ldr	r3, [pc, #68]	@ (8003ff4 <updateInputEcho+0x170>)
 8003fae:	2108      	movs	r1, #8
 8003fb0:	5499      	strb	r1, [r3, r2]
    for (int i = 0; i < old_len - len; i++) {
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <updateInputEcho+0x16c>)
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	887b      	ldrh	r3, [r7, #2]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	dbed      	blt.n	8003fa4 <updateInputEcho+0x120>
    }
  }

  COMM_TransmitData(out_buffer, MAX(out_buffer_len, len_difference), menu_context.interface);
 8003fc8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003fcc:	8bbb      	ldrh	r3, [r7, #28]
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	bfb8      	it	lt
 8003fd2:	4613      	movlt	r3, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <updateInputEcho+0x174>)
 8003fd8:	791b      	ldrb	r3, [r3, #4]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4805      	ldr	r0, [pc, #20]	@ (8003ff4 <updateInputEcho+0x170>)
 8003fde:	f7ff fe65 	bl	8003cac <COMM_TransmitData>

  old_len = len;
 8003fe2:	4a03      	ldr	r2, [pc, #12]	@ (8003ff0 <updateInputEcho+0x16c>)
 8003fe4:	887b      	ldrh	r3, [r7, #2]
 8003fe6:	8013      	strh	r3, [r2, #0]
}
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	24000b78 	.word	0x24000b78
 8003ff4:	24000978 	.word	0x24000978
 8003ff8:	24000970 	.word	0x24000970

08003ffc <resetInputEcho>:

void resetInputEcho(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  updateInputEcho(NULL, LEN_RESET);
 8004000:	f647 61c3 	movw	r1, #32451	@ 0x7ec3
 8004004:	2000      	movs	r0, #0
 8004006:	f7ff ff3d 	bl	8003e84 <updateInputEcho>
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <printReceivedMessage>:

void printReceivedMessage(Message_t msg)
{
 8004010:	b084      	sub	sp, #16
 8004012:	b580      	push	{r7, lr}
 8004014:	b0a2      	sub	sp, #136	@ 0x88
 8004016:	af20      	add	r7, sp, #128	@ 0x80
 8004018:	f107 0c10 	add.w	ip, r7, #16
 800401c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (print_received_messages == false) {
 8004020:	4b89      	ldr	r3, [pc, #548]	@ (8004248 <printReceivedMessage+0x238>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	f083 0301 	eor.w	r3, r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 8105 	bne.w	800423a <printReceivedMessage+0x22a>
    return;
  }

  sprintf((char*) out_buffer, "Received a new message at %ds\r\n", (int) msg.timestamp / 1000);
 8004030:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004034:	4a85      	ldr	r2, [pc, #532]	@ (800424c <printReceivedMessage+0x23c>)
 8004036:	fb82 1203 	smull	r1, r2, r2, r3
 800403a:	1192      	asrs	r2, r2, #6
 800403c:	17db      	asrs	r3, r3, #31
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	461a      	mov	r2, r3
 8004042:	4983      	ldr	r1, [pc, #524]	@ (8004250 <printReceivedMessage+0x240>)
 8004044:	4883      	ldr	r0, [pc, #524]	@ (8004254 <printReceivedMessage+0x244>)
 8004046:	f021 f939 	bl	80252bc <siprintf>
  COMM_TransmitData(out_buffer, CALC_LEN, menu_context.interface);
 800404a:	4b83      	ldr	r3, [pc, #524]	@ (8004258 <printReceivedMessage+0x248>)
 800404c:	791b      	ldrb	r3, [r3, #4]
 800404e:	461a      	mov	r2, r3
 8004050:	2100      	movs	r1, #0
 8004052:	4880      	ldr	r0, [pc, #512]	@ (8004254 <printReceivedMessage+0x244>)
 8004054:	f7ff fe2a 	bl	8003cac <COMM_TransmitData>

  switch (msg.data_type) {
 8004058:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800405c:	2b05      	cmp	r3, #5
 800405e:	d830      	bhi.n	80040c2 <printReceivedMessage+0xb2>
 8004060:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <printReceivedMessage+0x58>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	08004095 	.word	0x08004095
 800406c:	08004081 	.word	0x08004081
 8004070:	0800409f 	.word	0x0800409f
 8004074:	0800408b 	.word	0x0800408b
 8004078:	080040c3 	.word	0x080040c3
 800407c:	080040a9 	.word	0x080040a9
    case STRING:
      sprintf((char*) out_buffer, "String: ");
 8004080:	4976      	ldr	r1, [pc, #472]	@ (800425c <printReceivedMessage+0x24c>)
 8004082:	4874      	ldr	r0, [pc, #464]	@ (8004254 <printReceivedMessage+0x244>)
 8004084:	f021 f91a 	bl	80252bc <siprintf>
      break;
 8004088:	e020      	b.n	80040cc <printReceivedMessage+0xbc>
    case BITS:
      sprintf((char*) out_buffer, "Bits: ");
 800408a:	4975      	ldr	r1, [pc, #468]	@ (8004260 <printReceivedMessage+0x250>)
 800408c:	4871      	ldr	r0, [pc, #452]	@ (8004254 <printReceivedMessage+0x244>)
 800408e:	f021 f915 	bl	80252bc <siprintf>
      break;
 8004092:	e01b      	b.n	80040cc <printReceivedMessage+0xbc>
    case INTEGER:
      sprintf((char*) out_buffer, "Integer: ");
 8004094:	4973      	ldr	r1, [pc, #460]	@ (8004264 <printReceivedMessage+0x254>)
 8004096:	486f      	ldr	r0, [pc, #444]	@ (8004254 <printReceivedMessage+0x244>)
 8004098:	f021 f910 	bl	80252bc <siprintf>
      break;
 800409c:	e016      	b.n	80040cc <printReceivedMessage+0xbc>
    case FLOAT:
      sprintf((char*) out_buffer, "Float: ");
 800409e:	4972      	ldr	r1, [pc, #456]	@ (8004268 <printReceivedMessage+0x258>)
 80040a0:	486c      	ldr	r0, [pc, #432]	@ (8004254 <printReceivedMessage+0x244>)
 80040a2:	f021 f90b 	bl	80252bc <siprintf>
      break;
 80040a6:	e011      	b.n	80040cc <printReceivedMessage+0xbc>
    case EVAL:
      printEvalMessage(msg);
 80040a8:	4668      	mov	r0, sp
 80040aa:	f107 0320 	add.w	r3, r7, #32
 80040ae:	2280      	movs	r2, #128	@ 0x80
 80040b0:	4619      	mov	r1, r3
 80040b2:	f021 fa96 	bl	80255e2 <memcpy>
 80040b6:	f107 0310 	add.w	r3, r7, #16
 80040ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040bc:	f000 f8ec 	bl	8004298 <printEvalMessage>
      return; // All printing handled by function
 80040c0:	e0bc      	b.n	800423c <printReceivedMessage+0x22c>
    default:
      sprintf((char*) out_buffer, "Unknown data type: ");
 80040c2:	496a      	ldr	r1, [pc, #424]	@ (800426c <printReceivedMessage+0x25c>)
 80040c4:	4863      	ldr	r0, [pc, #396]	@ (8004254 <printReceivedMessage+0x244>)
 80040c6:	f021 f8f9 	bl	80252bc <siprintf>
      break;
 80040ca:	bf00      	nop
  }
  COMM_TransmitData(out_buffer, CALC_LEN, menu_context.interface);
 80040cc:	4b62      	ldr	r3, [pc, #392]	@ (8004258 <printReceivedMessage+0x248>)
 80040ce:	791b      	ldrb	r3, [r3, #4]
 80040d0:	461a      	mov	r2, r3
 80040d2:	2100      	movs	r1, #0
 80040d4:	485f      	ldr	r0, [pc, #380]	@ (8004254 <printReceivedMessage+0x244>)
 80040d6:	f7ff fde9 	bl	8003cac <COMM_TransmitData>

  switch (msg.data_type) {
 80040da:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d869      	bhi.n	80041b6 <printReceivedMessage+0x1a6>
 80040e2:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <printReceivedMessage+0xd8>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	08004189 	.word	0x08004189
 80040ec:	080040f9 	.word	0x080040f9
 80040f0:	0800419b 	.word	0x0800419b
 80040f4:	08004119 	.word	0x08004119
    case STRING:
      msg.data[msg.length_bits / 8] = '\0';
 80040f8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80040fc:	08db      	lsrs	r3, r3, #3
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3310      	adds	r3, #16
 8004102:	443b      	add	r3, r7
 8004104:	2200      	movs	r2, #0
 8004106:	705a      	strb	r2, [r3, #1]
      sprintf((char*) out_buffer, "%s", (char*) msg.data);
 8004108:	f107 0311 	add.w	r3, r7, #17
 800410c:	461a      	mov	r2, r3
 800410e:	4958      	ldr	r1, [pc, #352]	@ (8004270 <printReceivedMessage+0x260>)
 8004110:	4850      	ldr	r0, [pc, #320]	@ (8004254 <printReceivedMessage+0x244>)
 8004112:	f021 f8d3 	bl	80252bc <siprintf>
      break;
 8004116:	e052      	b.n	80041be <printReceivedMessage+0x1ae>
    case BITS:
      for (uint16_t i = 0; i < msg.length_bits / 8; i++) {
 8004118:	2300      	movs	r3, #0
 800411a:	80fb      	strh	r3, [r7, #6]
 800411c:	e02c      	b.n	8004178 <printReceivedMessage+0x168>
        for (uint8_t j = 0; j < 8; j++) {
 800411e:	2300      	movs	r3, #0
 8004120:	717b      	strb	r3, [r7, #5]
 8004122:	e01b      	b.n	800415c <printReceivedMessage+0x14c>
          out_buffer[i * 9 + j] = ((msg.data[i] & (1 << (7 - j))) != 0) ? '1' : '0';
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	3310      	adds	r3, #16
 8004128:	443b      	add	r3, r7
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	461a      	mov	r2, r3
 800412e:	797b      	ldrb	r3, [r7, #5]
 8004130:	f1c3 0307 	rsb	r3, r3, #7
 8004134:	fa42 f303 	asr.w	r3, r2, r3
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <printReceivedMessage+0x134>
 8004140:	2131      	movs	r1, #49	@ 0x31
 8004142:	e000      	b.n	8004146 <printReceivedMessage+0x136>
 8004144:	2130      	movs	r1, #48	@ 0x30
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	441a      	add	r2, r3
 800414e:	797b      	ldrb	r3, [r7, #5]
 8004150:	4413      	add	r3, r2
 8004152:	4a40      	ldr	r2, [pc, #256]	@ (8004254 <printReceivedMessage+0x244>)
 8004154:	54d1      	strb	r1, [r2, r3]
        for (uint8_t j = 0; j < 8; j++) {
 8004156:	797b      	ldrb	r3, [r7, #5]
 8004158:	3301      	adds	r3, #1
 800415a:	717b      	strb	r3, [r7, #5]
 800415c:	797b      	ldrb	r3, [r7, #5]
 800415e:	2b07      	cmp	r3, #7
 8004160:	d9e0      	bls.n	8004124 <printReceivedMessage+0x114>
        }
        out_buffer[i * 9 - 1] = ' ';
 8004162:	88fa      	ldrh	r2, [r7, #6]
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	3b01      	subs	r3, #1
 800416c:	4a39      	ldr	r2, [pc, #228]	@ (8004254 <printReceivedMessage+0x244>)
 800416e:	2120      	movs	r1, #32
 8004170:	54d1      	strb	r1, [r2, r3]
      for (uint16_t i = 0; i < msg.length_bits / 8; i++) {
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	3301      	adds	r3, #1
 8004176:	80fb      	strh	r3, [r7, #6]
 8004178:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800417c:	08db      	lsrs	r3, r3, #3
 800417e:	b29b      	uxth	r3, r3
 8004180:	88fa      	ldrh	r2, [r7, #6]
 8004182:	429a      	cmp	r2, r3
 8004184:	d3cb      	bcc.n	800411e <printReceivedMessage+0x10e>
      }
      break;
 8004186:	e01a      	b.n	80041be <printReceivedMessage+0x1ae>
    case INTEGER:
      sprintf((char*) out_buffer, "%u", *((unsigned int*) &msg.data[0]));
 8004188:	f107 0311 	add.w	r3, r7, #17
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	4938      	ldr	r1, [pc, #224]	@ (8004274 <printReceivedMessage+0x264>)
 8004192:	4830      	ldr	r0, [pc, #192]	@ (8004254 <printReceivedMessage+0x244>)
 8004194:	f021 f892 	bl	80252bc <siprintf>
      break;
 8004198:	e011      	b.n	80041be <printReceivedMessage+0x1ae>
    case FLOAT:
      float temp_float;
      memcpy(&temp_float, &msg.data[0], sizeof(float));
 800419a:	f8d7 3011 	ldr.w	r3, [r7, #17]
 800419e:	603b      	str	r3, [r7, #0]
      sprintf((char*) out_buffer, "%f", temp_float);
 80041a0:	edd7 7a00 	vldr	s15, [r7]
 80041a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80041a8:	ec53 2b17 	vmov	r2, r3, d7
 80041ac:	4932      	ldr	r1, [pc, #200]	@ (8004278 <printReceivedMessage+0x268>)
 80041ae:	4829      	ldr	r0, [pc, #164]	@ (8004254 <printReceivedMessage+0x244>)
 80041b0:	f021 f884 	bl	80252bc <siprintf>
      break;
 80041b4:	e003      	b.n	80041be <printReceivedMessage+0x1ae>
    default:
      sprintf((char*) out_buffer, "N/A");
 80041b6:	4931      	ldr	r1, [pc, #196]	@ (800427c <printReceivedMessage+0x26c>)
 80041b8:	4826      	ldr	r0, [pc, #152]	@ (8004254 <printReceivedMessage+0x244>)
 80041ba:	f021 f87f 	bl	80252bc <siprintf>
  }
  COMM_TransmitData(out_buffer, CALC_LEN, menu_context.interface);
 80041be:	4b26      	ldr	r3, [pc, #152]	@ (8004258 <printReceivedMessage+0x248>)
 80041c0:	791b      	ldrb	r3, [r3, #4]
 80041c2:	461a      	mov	r2, r3
 80041c4:	2100      	movs	r1, #0
 80041c6:	4823      	ldr	r0, [pc, #140]	@ (8004254 <printReceivedMessage+0x244>)
 80041c8:	f7ff fd70 	bl	8003cac <COMM_TransmitData>

  sprintf((char*) out_buffer, "\r\nErrors Present: %s", msg.error_correction_error ? "Yes" : "No");
 80041cc:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <printReceivedMessage+0x1c8>
 80041d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004280 <printReceivedMessage+0x270>)
 80041d6:	e000      	b.n	80041da <printReceivedMessage+0x1ca>
 80041d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004284 <printReceivedMessage+0x274>)
 80041da:	461a      	mov	r2, r3
 80041dc:	492a      	ldr	r1, [pc, #168]	@ (8004288 <printReceivedMessage+0x278>)
 80041de:	481d      	ldr	r0, [pc, #116]	@ (8004254 <printReceivedMessage+0x244>)
 80041e0:	f021 f86c 	bl	80252bc <siprintf>
  COMM_TransmitData(out_buffer, CALC_LEN, menu_context.interface);
 80041e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004258 <printReceivedMessage+0x248>)
 80041e6:	791b      	ldrb	r3, [r3, #4]
 80041e8:	461a      	mov	r2, r3
 80041ea:	2100      	movs	r1, #0
 80041ec:	4819      	ldr	r0, [pc, #100]	@ (8004254 <printReceivedMessage+0x244>)
 80041ee:	f7ff fd5d 	bl	8003cac <COMM_TransmitData>

  sprintf((char*) out_buffer, "\r\nSender id: %u", msg.sender_id);
 80041f2:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80041f6:	461a      	mov	r2, r3
 80041f8:	4924      	ldr	r1, [pc, #144]	@ (800428c <printReceivedMessage+0x27c>)
 80041fa:	4816      	ldr	r0, [pc, #88]	@ (8004254 <printReceivedMessage+0x244>)
 80041fc:	f021 f85e 	bl	80252bc <siprintf>
  COMM_TransmitData(out_buffer, CALC_LEN, menu_context.interface);
 8004200:	4b15      	ldr	r3, [pc, #84]	@ (8004258 <printReceivedMessage+0x248>)
 8004202:	791b      	ldrb	r3, [r3, #4]
 8004204:	461a      	mov	r2, r3
 8004206:	2100      	movs	r1, #0
 8004208:	4812      	ldr	r0, [pc, #72]	@ (8004254 <printReceivedMessage+0x244>)
 800420a:	f7ff fd4f 	bl	8003cac <COMM_TransmitData>

  sprintf((char*) out_buffer, "\r\nMessage Length (bits): %u", msg.length_bits);
 800420e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004212:	461a      	mov	r2, r3
 8004214:	491e      	ldr	r1, [pc, #120]	@ (8004290 <printReceivedMessage+0x280>)
 8004216:	480f      	ldr	r0, [pc, #60]	@ (8004254 <printReceivedMessage+0x244>)
 8004218:	f021 f850 	bl	80252bc <siprintf>
  COMM_TransmitData(out_buffer, CALC_LEN, menu_context.interface);
 800421c:	4b0e      	ldr	r3, [pc, #56]	@ (8004258 <printReceivedMessage+0x248>)
 800421e:	791b      	ldrb	r3, [r3, #4]
 8004220:	461a      	mov	r2, r3
 8004222:	2100      	movs	r1, #0
 8004224:	480b      	ldr	r0, [pc, #44]	@ (8004254 <printReceivedMessage+0x244>)
 8004226:	f7ff fd41 	bl	8003cac <COMM_TransmitData>

  COMM_TransmitData("\r\n\r\n", CALC_LEN, menu_context.interface);
 800422a:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <printReceivedMessage+0x248>)
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	461a      	mov	r2, r3
 8004230:	2100      	movs	r1, #0
 8004232:	4818      	ldr	r0, [pc, #96]	@ (8004294 <printReceivedMessage+0x284>)
 8004234:	f7ff fd3a 	bl	8003cac <COMM_TransmitData>
 8004238:	e000      	b.n	800423c <printReceivedMessage+0x22c>
    return;
 800423a:	bf00      	nop
}
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004244:	b004      	add	sp, #16
 8004246:	4770      	bx	lr
 8004248:	2400022c 	.word	0x2400022c
 800424c:	10624dd3 	.word	0x10624dd3
 8004250:	0802a80c 	.word	0x0802a80c
 8004254:	24000978 	.word	0x24000978
 8004258:	24000970 	.word	0x24000970
 800425c:	0802a82c 	.word	0x0802a82c
 8004260:	0802a838 	.word	0x0802a838
 8004264:	0802a840 	.word	0x0802a840
 8004268:	0802a84c 	.word	0x0802a84c
 800426c:	0802a854 	.word	0x0802a854
 8004270:	0802a868 	.word	0x0802a868
 8004274:	0802a86c 	.word	0x0802a86c
 8004278:	0802a870 	.word	0x0802a870
 800427c:	0802a874 	.word	0x0802a874
 8004280:	0802a878 	.word	0x0802a878
 8004284:	0802a87c 	.word	0x0802a87c
 8004288:	0802a880 	.word	0x0802a880
 800428c:	0802a898 	.word	0x0802a898
 8004290:	0802a8a8 	.word	0x0802a8a8
 8004294:	0802a8c4 	.word	0x0802a8c4

08004298 <printEvalMessage>:

void printEvalMessage(Message_t msg)
{
 8004298:	b084      	sub	sp, #16
 800429a:	b590      	push	{r4, r7, lr}
 800429c:	b08d      	sub	sp, #52	@ 0x34
 800429e:	af08      	add	r7, sp, #32
 80042a0:	f107 0420 	add.w	r4, r7, #32
 80042a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (msg.eval_info == NULL) {
 80042a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <printEvalMessage+0x30>
    sprintf((char*) out_buffer, "\r\nReceived uninitialized evaluation information!\r\n");
 80042b0:	4970      	ldr	r1, [pc, #448]	@ (8004474 <printEvalMessage+0x1dc>)
 80042b2:	4871      	ldr	r0, [pc, #452]	@ (8004478 <printEvalMessage+0x1e0>)
 80042b4:	f021 f802 	bl	80252bc <siprintf>
    COMM_TransmitData(out_buffer, CALC_LEN, menu_context.interface);
 80042b8:	4b70      	ldr	r3, [pc, #448]	@ (800447c <printEvalMessage+0x1e4>)
 80042ba:	791b      	ldrb	r3, [r3, #4]
 80042bc:	461a      	mov	r2, r3
 80042be:	2100      	movs	r1, #0
 80042c0:	486d      	ldr	r0, [pc, #436]	@ (8004478 <printEvalMessage+0x1e0>)
 80042c2:	f7ff fcf3 	bl	8003cac <COMM_TransmitData>
    return;
 80042c6:	e0cf      	b.n	8004468 <printEvalMessage+0x1d0>
  }

  sprintf((char*) out_buffer, "\r\nTruth_bit Decoded_bit f0 f1 Energy_f0 Energy_f1 \"Probability\"\r\n\r\n");
 80042c8:	496d      	ldr	r1, [pc, #436]	@ (8004480 <printEvalMessage+0x1e8>)
 80042ca:	486b      	ldr	r0, [pc, #428]	@ (8004478 <printEvalMessage+0x1e0>)
 80042cc:	f020 fff6 	bl	80252bc <siprintf>
  COMM_TransmitData(out_buffer, CALC_LEN, menu_context.interface);
 80042d0:	4b6a      	ldr	r3, [pc, #424]	@ (800447c <printEvalMessage+0x1e4>)
 80042d2:	791b      	ldrb	r3, [r3, #4]
 80042d4:	461a      	mov	r2, r3
 80042d6:	2100      	movs	r1, #0
 80042d8:	4867      	ldr	r0, [pc, #412]	@ (8004478 <printEvalMessage+0x1e0>)
 80042da:	f7ff fce7 	bl	8003cac <COMM_TransmitData>

  for (uint16_t i = 0; i < msg.eval_info->len_bits; i++) {
 80042de:	2300      	movs	r3, #0
 80042e0:	81fb      	strh	r3, [r7, #14]
 80042e2:	e08d      	b.n	8004400 <printEvalMessage+0x168>
    bool truth_bit;
    bool calc_bit;
    if (Evaluate_GetBit(msg.eval_info->eval_msg, i, &truth_bit) == false) {
 80042e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042e8:	7a1b      	ldrb	r3, [r3, #8]
 80042ea:	1cfa      	adds	r2, r7, #3
 80042ec:	89f9      	ldrh	r1, [r7, #14]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 fef4 	bl	80060dc <Evaluate_GetBit>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f083 0301 	eor.w	r3, r3, #1
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f040 80ae 	bne.w	800445e <printEvalMessage+0x1c6>
      return;
    }
    if (Evaluate_GetMessageBit(&msg, i, &calc_bit) == false) {
 8004302:	1cba      	adds	r2, r7, #2
 8004304:	89fb      	ldrh	r3, [r7, #14]
 8004306:	4619      	mov	r1, r3
 8004308:	f107 0020 	add.w	r0, r7, #32
 800430c:	f001 ff6c 	bl	80061e8 <Evaluate_GetMessageBit>
 8004310:	4603      	mov	r3, r0
 8004312:	f083 0301 	eor.w	r3, r3, #1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f040 80a2 	bne.w	8004462 <printEvalMessage+0x1ca>
      return;
    }

    float outf0 = sqrtf(msg.eval_info->energy_f0[i]);
 800431e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	3302      	adds	r3, #2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	3304      	adds	r3, #4
 800432c:	edd3 7a00 	vldr	s15, [r3]
 8004330:	eeb0 0a67 	vmov.f32	s0, s15
 8004334:	f024 ff06 	bl	8029144 <sqrtf>
 8004338:	ed87 0a02 	vstr	s0, [r7, #8]
    float outf1 = sqrtf(msg.eval_info->energy_f1[i]);
 800433c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004340:	89fb      	ldrh	r3, [r7, #14]
 8004342:	3366      	adds	r3, #102	@ 0x66
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	3304      	adds	r3, #4
 800434a:	edd3 7a00 	vldr	s15, [r3]
 800434e:	eeb0 0a67 	vmov.f32	s0, s15
 8004352:	f024 fef7 	bl	8029144 <sqrtf>
 8004356:	ed87 0a01 	vstr	s0, [r7, #4]
    sprintf((char*) out_buffer, "%u %u %lu %lu %.0f %.0f %.2f\r\n", truth_bit ? 1 : 0, calc_bit ? 1 : 0,
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	4618      	mov	r0, r3
 800435e:	78bb      	ldrb	r3, [r7, #2]
 8004360:	461c      	mov	r4, r3
        msg.eval_info->f0[i], msg.eval_info->f1[i], outf0, outf1, ((outf1 - outf0) / MAX(outf0, outf1) + 1.0f) / 2.0f);
 8004362:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
    sprintf((char*) out_buffer, "%u %u %lu %lu %.0f %.0f %.2f\r\n", truth_bit ? 1 : 0, calc_bit ? 1 : 0,
 8004366:	89fb      	ldrh	r3, [r7, #14]
 8004368:	33ca      	adds	r3, #202	@ 0xca
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	685a      	ldr	r2, [r3, #4]
        msg.eval_info->f0[i], msg.eval_info->f1[i], outf0, outf1, ((outf1 - outf0) / MAX(outf0, outf1) + 1.0f) / 2.0f);
 8004370:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
    sprintf((char*) out_buffer, "%u %u %lu %lu %.0f %.0f %.2f\r\n", truth_bit ? 1 : 0, calc_bit ? 1 : 0,
 8004374:	89fb      	ldrh	r3, [r7, #14]
 8004376:	f503 7397 	add.w	r3, r3, #302	@ 0x12e
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	edd7 7a02 	vldr	s15, [r7, #8]
 8004384:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004388:	edd7 6a01 	vldr	s13, [r7, #4]
 800438c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
        msg.eval_info->f0[i], msg.eval_info->f1[i], outf0, outf1, ((outf1 - outf0) / MAX(outf0, outf1) + 1.0f) / 2.0f);
 8004390:	ed97 5a01 	vldr	s10, [r7, #4]
 8004394:	edd7 5a02 	vldr	s11, [r7, #8]
 8004398:	ee75 4a65 	vsub.f32	s9, s10, s11
 800439c:	ed97 5a02 	vldr	s10, [r7, #8]
 80043a0:	edd7 5a01 	vldr	s11, [r7, #4]
 80043a4:	eeb4 5ae5 	vcmpe.f32	s10, s11
 80043a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ac:	dd02      	ble.n	80043b4 <printEvalMessage+0x11c>
 80043ae:	edd7 5a02 	vldr	s11, [r7, #8]
 80043b2:	e001      	b.n	80043b8 <printEvalMessage+0x120>
 80043b4:	edd7 5a01 	vldr	s11, [r7, #4]
 80043b8:	ee84 5aa5 	vdiv.f32	s10, s9, s11
 80043bc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80043c0:	ee35 5a25 	vadd.f32	s10, s10, s11
 80043c4:	eef0 4a00 	vmov.f32	s9, #0	@ 0x40000000  2.0
 80043c8:	eec5 5a24 	vdiv.f32	s11, s10, s9
    sprintf((char*) out_buffer, "%u %u %lu %lu %.0f %.0f %.2f\r\n", truth_bit ? 1 : 0, calc_bit ? 1 : 0,
 80043cc:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80043d0:	ed8d 5b06 	vstr	d5, [sp, #24]
 80043d4:	ed8d 6b04 	vstr	d6, [sp, #16]
 80043d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	9200      	str	r2, [sp, #0]
 80043e0:	4623      	mov	r3, r4
 80043e2:	4602      	mov	r2, r0
 80043e4:	4927      	ldr	r1, [pc, #156]	@ (8004484 <printEvalMessage+0x1ec>)
 80043e6:	4824      	ldr	r0, [pc, #144]	@ (8004478 <printEvalMessage+0x1e0>)
 80043e8:	f020 ff68 	bl	80252bc <siprintf>
    COMM_TransmitData(out_buffer, CALC_LEN, menu_context.interface);
 80043ec:	4b23      	ldr	r3, [pc, #140]	@ (800447c <printEvalMessage+0x1e4>)
 80043ee:	791b      	ldrb	r3, [r3, #4]
 80043f0:	461a      	mov	r2, r3
 80043f2:	2100      	movs	r1, #0
 80043f4:	4820      	ldr	r0, [pc, #128]	@ (8004478 <printEvalMessage+0x1e0>)
 80043f6:	f7ff fc59 	bl	8003cac <COMM_TransmitData>
  for (uint16_t i = 0; i < msg.eval_info->len_bits; i++) {
 80043fa:	89fb      	ldrh	r3, [r7, #14]
 80043fc:	3301      	adds	r3, #1
 80043fe:	81fb      	strh	r3, [r7, #14]
 8004400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	89fa      	ldrh	r2, [r7, #14]
 8004408:	429a      	cmp	r2, r3
 800440a:	f4ff af6b 	bcc.w	80042e4 <printEvalMessage+0x4c>
  }

  if (Evaluate_CalculateBitErrorRate(msg.eval_info, &msg, msg.eval_info->eval_msg) == false) {
 800440e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004416:	7a1b      	ldrb	r3, [r3, #8]
 8004418:	461a      	mov	r2, r3
 800441a:	f107 0120 	add.w	r1, r7, #32
 800441e:	f001 fe99 	bl	8006154 <Evaluate_CalculateBitErrorRate>
 8004422:	4603      	mov	r3, r0
 8004424:	f083 0301 	eor.w	r3, r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11b      	bne.n	8004466 <printEvalMessage+0x1ce>
    return;
  }

  sprintf((char*) out_buffer, "\r\nBER: %.2f%%\r\n", msg.eval_info->bit_error_rate * 100.0f);
 800442e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004432:	edd3 7a01 	vldr	s15, [r3, #4]
 8004436:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004488 <printEvalMessage+0x1f0>
 800443a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800443e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004442:	ec53 2b17 	vmov	r2, r3, d7
 8004446:	4911      	ldr	r1, [pc, #68]	@ (800448c <printEvalMessage+0x1f4>)
 8004448:	480b      	ldr	r0, [pc, #44]	@ (8004478 <printEvalMessage+0x1e0>)
 800444a:	f020 ff37 	bl	80252bc <siprintf>
  COMM_TransmitData(out_buffer, CALC_LEN, menu_context.interface);
 800444e:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <printEvalMessage+0x1e4>)
 8004450:	791b      	ldrb	r3, [r3, #4]
 8004452:	461a      	mov	r2, r3
 8004454:	2100      	movs	r1, #0
 8004456:	4808      	ldr	r0, [pc, #32]	@ (8004478 <printEvalMessage+0x1e0>)
 8004458:	f7ff fc28 	bl	8003cac <COMM_TransmitData>
 800445c:	e004      	b.n	8004468 <printEvalMessage+0x1d0>
      return;
 800445e:	bf00      	nop
 8004460:	e002      	b.n	8004468 <printEvalMessage+0x1d0>
      return;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <printEvalMessage+0x1d0>
    return;
 8004466:	bf00      	nop
}
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004470:	b004      	add	sp, #16
 8004472:	4770      	bx	lr
 8004474:	0802a8cc 	.word	0x0802a8cc
 8004478:	24000978 	.word	0x24000978
 800447c:	24000970 	.word	0x24000970
 8004480:	0802a900 	.word	0x0802a900
 8004484:	0802a944 	.word	0x0802a944
 8004488:	42c80000 	.word	0x42c80000
 800448c:	0802a964 	.word	0x0802a964

08004490 <registerCommParams>:

bool registerCommParams(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af04      	add	r7, sp, #16
  uint32_t min_u32 = (uint32_t) MIN_PRINT_ENABLED;
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
  uint32_t max_u32 = (uint32_t) MAX_PRINT_ENABLED;
 800449a:	2301      	movs	r3, #1
 800449c:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_PRINT_ENABLED, "printing received messages", PARAM_TYPE_UINT8,
 800449e:	463b      	mov	r3, r7
 80044a0:	9302      	str	r3, [sp, #8]
 80044a2:	1d3b      	adds	r3, r7, #4
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	2301      	movs	r3, #1
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <registerCommParams+0x40>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	4909      	ldr	r1, [pc, #36]	@ (80044d4 <registerCommParams+0x44>)
 80044b0:	2009      	movs	r0, #9
 80044b2:	f7fc fbb7 	bl	8000c24 <Param_Register>
 80044b6:	4603      	mov	r3, r0
                     &print_received_messages, sizeof(bool), &min_u32, &max_u32) == false) {
 80044b8:	f083 0301 	eor.w	r3, r3, #1
 80044bc:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_PRINT_ENABLED, "printing received messages", PARAM_TYPE_UINT8,
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <registerCommParams+0x36>
    return false;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e000      	b.n	80044c8 <registerCommParams+0x38>
  }

  return true;
 80044c6:	2301      	movs	r3, #1
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	2400022c 	.word	0x2400022c
 80044d4:	0802a974 	.word	0x0802a974

080044d8 <COMM_RegisterMainMenu>:


/* Exported function definitions ---------------------------------------------*/

bool COMM_RegisterMainMenu(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
  bool ret = registerMenu(&mainMenu);
 80044de:	4805      	ldr	r0, [pc, #20]	@ (80044f4 <COMM_RegisterMainMenu+0x1c>)
 80044e0:	f000 f80a 	bl	80044f8 <registerMenu>
 80044e4:	4603      	mov	r3, r0
 80044e6:	71fb      	strb	r3, [r7, #7]
  return ret;
 80044e8:	79fb      	ldrb	r3, [r7, #7]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	0802bbc0 	.word	0x0802bbc0

080044f8 <registerMenu>:


/* Exported function definitions ---------------------------------------------*/

bool registerMenu(const MenuNode_t* menu)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  if (menu->id < MENU_ID_COUNT) {
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	2b5f      	cmp	r3, #95	@ 0x5f
 8004506:	d810      	bhi.n	800452a <registerMenu+0x32>
    if (registered_menus[menu->id] == NULL) {
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	4b0a      	ldr	r3, [pc, #40]	@ (8004538 <registerMenu+0x40>)
 8004510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d108      	bne.n	800452a <registerMenu+0x32>
      registered_menus[menu->id] = (MenuNode_t*) menu;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	4619      	mov	r1, r3
 800451e:	4a06      	ldr	r2, [pc, #24]	@ (8004538 <registerMenu+0x40>)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      
      return true;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <registerMenu+0x34>
    }
  }
  return false;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	24000b7c 	.word	0x24000b7c

0800453c <getMenu>:

MenuNode_t* getMenu(MenuID_t id)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  if (id < MENU_ID_COUNT) {
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	2b5f      	cmp	r3, #95	@ 0x5f
 800454a:	d804      	bhi.n	8004556 <getMenu+0x1a>
    return registered_menus[id];
 800454c:	79fb      	ldrb	r3, [r7, #7]
 800454e:	4a05      	ldr	r2, [pc, #20]	@ (8004564 <getMenu+0x28>)
 8004550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004554:	e000      	b.n	8004558 <getMenu+0x1c>
  }
  return NULL;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	24000b7c 	.word	0x24000b7c

08004568 <COMM_RegisterTxRxMenu>:


/* Exported function definitions ---------------------------------------------*/

bool COMM_RegisterTxRxMenu()
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
  bool ret = registerMenu(&txrxMenu) && registerMenu(&txrxBitsTransducer) &&
 800456e:	4824      	ldr	r0, [pc, #144]	@ (8004600 <COMM_RegisterTxRxMenu+0x98>)
 8004570:	f7ff ffc2 	bl	80044f8 <registerMenu>
 8004574:	4603      	mov	r3, r0
             registerMenu(&txrxStrTransducer) && registerMenu(&txrxIntTransducer) &&
             registerMenu(&txrxFloatTransducer) && registerMenu(&txrxTogglePrint) &&
             registerMenu(&txrxStrFeedback) && registerMenu(&txrxBitsFeedback) &&
             registerMenu(&txrxIntFeedback) && registerMenu(&txrxFloatFeedback);
 8004576:	2b00      	cmp	r3, #0
 8004578:	d037      	beq.n	80045ea <COMM_RegisterTxRxMenu+0x82>
  bool ret = registerMenu(&txrxMenu) && registerMenu(&txrxBitsTransducer) &&
 800457a:	4822      	ldr	r0, [pc, #136]	@ (8004604 <COMM_RegisterTxRxMenu+0x9c>)
 800457c:	f7ff ffbc 	bl	80044f8 <registerMenu>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d031      	beq.n	80045ea <COMM_RegisterTxRxMenu+0x82>
             registerMenu(&txrxStrTransducer) && registerMenu(&txrxIntTransducer) &&
 8004586:	4820      	ldr	r0, [pc, #128]	@ (8004608 <COMM_RegisterTxRxMenu+0xa0>)
 8004588:	f7ff ffb6 	bl	80044f8 <registerMenu>
 800458c:	4603      	mov	r3, r0
  bool ret = registerMenu(&txrxMenu) && registerMenu(&txrxBitsTransducer) &&
 800458e:	2b00      	cmp	r3, #0
 8004590:	d02b      	beq.n	80045ea <COMM_RegisterTxRxMenu+0x82>
             registerMenu(&txrxStrTransducer) && registerMenu(&txrxIntTransducer) &&
 8004592:	481e      	ldr	r0, [pc, #120]	@ (800460c <COMM_RegisterTxRxMenu+0xa4>)
 8004594:	f7ff ffb0 	bl	80044f8 <registerMenu>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d025      	beq.n	80045ea <COMM_RegisterTxRxMenu+0x82>
             registerMenu(&txrxFloatTransducer) && registerMenu(&txrxTogglePrint) &&
 800459e:	481c      	ldr	r0, [pc, #112]	@ (8004610 <COMM_RegisterTxRxMenu+0xa8>)
 80045a0:	f7ff ffaa 	bl	80044f8 <registerMenu>
 80045a4:	4603      	mov	r3, r0
             registerMenu(&txrxStrTransducer) && registerMenu(&txrxIntTransducer) &&
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01f      	beq.n	80045ea <COMM_RegisterTxRxMenu+0x82>
             registerMenu(&txrxFloatTransducer) && registerMenu(&txrxTogglePrint) &&
 80045aa:	481a      	ldr	r0, [pc, #104]	@ (8004614 <COMM_RegisterTxRxMenu+0xac>)
 80045ac:	f7ff ffa4 	bl	80044f8 <registerMenu>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d019      	beq.n	80045ea <COMM_RegisterTxRxMenu+0x82>
             registerMenu(&txrxStrFeedback) && registerMenu(&txrxBitsFeedback) &&
 80045b6:	4818      	ldr	r0, [pc, #96]	@ (8004618 <COMM_RegisterTxRxMenu+0xb0>)
 80045b8:	f7ff ff9e 	bl	80044f8 <registerMenu>
 80045bc:	4603      	mov	r3, r0
             registerMenu(&txrxFloatTransducer) && registerMenu(&txrxTogglePrint) &&
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d013      	beq.n	80045ea <COMM_RegisterTxRxMenu+0x82>
             registerMenu(&txrxStrFeedback) && registerMenu(&txrxBitsFeedback) &&
 80045c2:	4816      	ldr	r0, [pc, #88]	@ (800461c <COMM_RegisterTxRxMenu+0xb4>)
 80045c4:	f7ff ff98 	bl	80044f8 <registerMenu>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <COMM_RegisterTxRxMenu+0x82>
             registerMenu(&txrxIntFeedback) && registerMenu(&txrxFloatFeedback);
 80045ce:	4814      	ldr	r0, [pc, #80]	@ (8004620 <COMM_RegisterTxRxMenu+0xb8>)
 80045d0:	f7ff ff92 	bl	80044f8 <registerMenu>
 80045d4:	4603      	mov	r3, r0
             registerMenu(&txrxStrFeedback) && registerMenu(&txrxBitsFeedback) &&
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <COMM_RegisterTxRxMenu+0x82>
             registerMenu(&txrxIntFeedback) && registerMenu(&txrxFloatFeedback);
 80045da:	4812      	ldr	r0, [pc, #72]	@ (8004624 <COMM_RegisterTxRxMenu+0xbc>)
 80045dc:	f7ff ff8c 	bl	80044f8 <registerMenu>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <COMM_RegisterTxRxMenu+0x82>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <COMM_RegisterTxRxMenu+0x84>
 80045ea:	2300      	movs	r3, #0
  bool ret = registerMenu(&txrxMenu) && registerMenu(&txrxBitsTransducer) &&
 80045ec:	71fb      	strb	r3, [r7, #7]
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	71fb      	strb	r3, [r7, #7]
  return ret;
 80045f6:	79fb      	ldrb	r3, [r7, #7]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	0802bbe8 	.word	0x0802bbe8
 8004604:	0802bc10 	.word	0x0802bc10
 8004608:	0802bc60 	.word	0x0802bc60
 800460c:	0802bcb0 	.word	0x0802bcb0
 8004610:	0802bd00 	.word	0x0802bd00
 8004614:	0802bd50 	.word	0x0802bd50
 8004618:	0802bc88 	.word	0x0802bc88
 800461c:	0802bc38 	.word	0x0802bc38
 8004620:	0802bcd8 	.word	0x0802bcd8
 8004624:	0802bd28 	.word	0x0802bd28

08004628 <transmitBitsOut>:

/* Private function definitions ----------------------------------------------*/

void transmitBitsOut(void* argument)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2207      	movs	r2, #7
 800463a:	701a      	strb	r2, [r3, #0]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <transmitBitsFb>:
 
void transmitBitsFb(void* argument) {
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	60fb      	str	r3, [r7, #12]
  context->state->state = PARAM_STATE_COMPLETE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2207      	movs	r2, #7
 800465a:	701a      	strb	r2, [r3, #0]
}
 800465c:	bf00      	nop
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <transmitStringOut>:

void transmitStringOut(void* argument)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	60fb      	str	r3, [r7, #12]
  
  transmitString(context, false);
 8004674:	2100      	movs	r1, #0
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f858 	bl	800472c <transmitString>
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <transmitStringFb>:

void transmitStringFb(void* argument)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60fb      	str	r3, [r7, #12]
  
  transmitString(context, true);
 8004690:	2101      	movs	r1, #1
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f84a 	bl	800472c <transmitString>
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <transmitIntOut>:

void transmitIntOut(void* argument)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60fb      	str	r3, [r7, #12]
  
  transmitInt(context, false);
 80046ac:	2100      	movs	r1, #0
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f91e 	bl	80048f0 <transmitInt>
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <transmitIntFb>:

void transmitIntFb(void* argument)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	60fb      	str	r3, [r7, #12]
  
  transmitInt(context, true);
 80046c8:	2101      	movs	r1, #1
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f910 	bl	80048f0 <transmitInt>
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <transmitFloatOut>:

void transmitFloatOut(void* argument)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	60fb      	str	r3, [r7, #12]
  
  transmitFloat(context, false);
 80046e4:	2100      	movs	r1, #0
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f9be 	bl	8004a68 <transmitFloat>
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <transmitFloatFb>:

void transmitFloatFb(void* argument)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	60fb      	str	r3, [r7, #12]
  
  transmitFloat(context, true);
 8004700:	2101      	movs	r1, #1
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f9b0 	bl	8004a68 <transmitFloat>
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <togglePrint>:

void togglePrint(void* argument)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  FunctionContext_t* context = (FunctionContext_t*) argument;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60fb      	str	r3, [r7, #12]

  COMMLoops_LoopToggle(context, PARAM_PRINT_ENABLED);
 800471c:	2109      	movs	r1, #9
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7fe fed6 	bl	80034d0 <COMMLoops_LoopToggle>
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <transmitString>:
{
  // TODO: implement
}

void transmitString(FunctionContext_t* context, bool is_feedback)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b0a8      	sub	sp, #160	@ 0xa0
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  ParamState_t old_state = context->state->state;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d

  do {
    switch (context->state->state) {
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <transmitString+0x26>
 800474c:	2b01      	cmp	r3, #1
 800474e:	d01c      	beq.n	800478a <transmitString+0x5e>
 8004750:	e0af      	b.n	80048b2 <transmitString+0x186>
      case PARAM_STATE_0:
        sprintf((char*) context->output_buffer, "\r\n\r\nPlease enter a string to "
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <transmitString+0x36>
 800475e:	4b5e      	ldr	r3, [pc, #376]	@ (80048d8 <transmitString+0x1ac>)
 8004760:	e000      	b.n	8004764 <transmitString+0x38>
 8004762:	4b5e      	ldr	r3, [pc, #376]	@ (80048dc <transmitString+0x1b0>)
 8004764:	461a      	mov	r2, r3
 8004766:	495e      	ldr	r1, [pc, #376]	@ (80048e0 <transmitString+0x1b4>)
 8004768:	f020 fda8 	bl	80252bc <siprintf>
            "send to the %s with a maximum length of 128 characters:\r\n", 
            is_feedback ? "feedback network" : "transducer");
        COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8004778:	461a      	mov	r2, r3
 800477a:	2100      	movs	r1, #0
 800477c:	f7ff fa96 	bl	8003cac <COMM_TransmitData>
        context->state->state = PARAM_STATE_1;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
        break;
 8004788:	e098      	b.n	80048bc <transmitString+0x190>
      case PARAM_STATE_1:
        if (context->input_len > 128) {
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8004790:	2b80      	cmp	r3, #128	@ 0x80
 8004792:	d915      	bls.n	80047c0 <transmitString+0x94>
          sprintf((char*) context->output_buffer, "\r\nInput string must be"
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800479a:	4952      	ldr	r1, [pc, #328]	@ (80048e4 <transmitString+0x1b8>)
 800479c:	4618      	mov	r0, r3
 800479e:	f020 fd8d 	bl	80252bc <siprintf>
              "less than 128 characters!\r\n");
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80047ae:	461a      	mov	r2, r3
 80047b0:	2100      	movs	r1, #0
 80047b2:	f7ff fa7b 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2200      	movs	r2, #0
 80047bc:	701a      	strb	r2, [r3, #0]
            sprintf((char*) context->output_buffer, "\r\nError adding message to feedback queue\r\n\r\n");
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          }
          context->state->state = PARAM_STATE_COMPLETE;
        }
        break;
 80047be:	e07d      	b.n	80048bc <transmitString+0x190>
          msg.type = is_feedback ? MSG_TRANSMIT_FEEDBACK : MSG_TRANSMIT_TRANSDUCER;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <transmitString+0x9e>
 80047c6:	2303      	movs	r3, #3
 80047c8:	e000      	b.n	80047cc <transmitString+0xa0>
 80047ca:	2301      	movs	r3, #1
 80047cc:	733b      	strb	r3, [r7, #12]
          msg.timestamp = osKernelGetTickCount();
 80047ce:	f01a f861 	bl	801e894 <osKernelGetTickCount>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
          msg.data_type = STRING;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
          msg.length_bits = 8 * Packet_MinimumSize(context->input_len);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80047e4:	4618      	mov	r0, r3
 80047e6:	f003 fd43 	bl	8008270 <Packet_MinimumSize>
 80047ea:	4603      	mov	r3, r0
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
          for (uint16_t i = 0; i < msg.length_bits / 8; i++) {
 80047f4:	2300      	movs	r3, #0
 80047f6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 80047fa:	e022      	b.n	8004842 <transmitString+0x116>
            if (context->input_len > i) {
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8004802:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 8004806:	429a      	cmp	r2, r3
 8004808:	d20b      	bcs.n	8004822 <transmitString+0xf6>
              msg.data[i] = context->input[i];
 800480a:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 800480e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	440a      	add	r2, r1
 8004816:	7912      	ldrb	r2, [r2, #4]
 8004818:	33a0      	adds	r3, #160	@ 0xa0
 800481a:	443b      	add	r3, r7
 800481c:	f803 2c93 	strb.w	r2, [r3, #-147]
 8004820:	e00a      	b.n	8004838 <transmitString+0x10c>
              msg.data[i] = context->input[i];
 8004822:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 8004826:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	440a      	add	r2, r1
 800482e:	7912      	ldrb	r2, [r2, #4]
 8004830:	33a0      	adds	r3, #160	@ 0xa0
 8004832:	443b      	add	r3, r7
 8004834:	f803 2c93 	strb.w	r2, [r3, #-147]
          for (uint16_t i = 0; i < msg.length_bits / 8; i++) {
 8004838:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800483c:	3301      	adds	r3, #1
 800483e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8004842:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004846:	08db      	lsrs	r3, r3, #3
 8004848:	b29b      	uxth	r3, r3
 800484a:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 800484e:	429a      	cmp	r2, r3
 8004850:	d3d4      	bcc.n	80047fc <transmitString+0xd0>
          if (MESS_AddMessageToTxQ(&msg) == pdPASS) {
 8004852:	f107 030c 	add.w	r3, r7, #12
 8004856:	4618      	mov	r0, r3
 8004858:	f002 feac 	bl	80075b4 <MESS_AddMessageToTxQ>
 800485c:	4603      	mov	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d111      	bne.n	8004886 <transmitString+0x15a>
            sprintf((char*) context->output_buffer, "\r\nSuccessfully added to feedback queue!\r\n\r\n");
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004868:	491f      	ldr	r1, [pc, #124]	@ (80048e8 <transmitString+0x1bc>)
 800486a:	4618      	mov	r0, r3
 800486c:	f020 fd26 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800487c:	461a      	mov	r2, r3
 800487e:	2100      	movs	r1, #0
 8004880:	f7ff fa14 	bl	8003cac <COMM_TransmitData>
 8004884:	e010      	b.n	80048a8 <transmitString+0x17c>
            sprintf((char*) context->output_buffer, "\r\nError adding message to feedback queue\r\n\r\n");
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800488c:	4917      	ldr	r1, [pc, #92]	@ (80048ec <transmitString+0x1c0>)
 800488e:	4618      	mov	r0, r3
 8004890:	f020 fd14 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80048a0:	461a      	mov	r2, r3
 80048a2:	2100      	movs	r1, #0
 80048a4:	f7ff fa02 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2207      	movs	r2, #7
 80048ae:	701a      	strb	r2, [r3, #0]
        break;
 80048b0:	e004      	b.n	80048bc <transmitString+0x190>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2207      	movs	r2, #7
 80048b8:	701a      	strb	r2, [r3, #0]
        break;
 80048ba:	bf00      	nop
    }
  } while (old_state > context->state->state);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 80048c6:	429a      	cmp	r2, r3
 80048c8:	f63f af3b 	bhi.w	8004742 <transmitString+0x16>
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	37a0      	adds	r7, #160	@ 0xa0
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	0802aabc 	.word	0x0802aabc
 80048dc:	0802aad0 	.word	0x0802aad0
 80048e0:	0802aadc 	.word	0x0802aadc
 80048e4:	0802ab34 	.word	0x0802ab34
 80048e8:	0802ab68 	.word	0x0802ab68
 80048ec:	0802ab94 	.word	0x0802ab94

080048f0 <transmitInt>:

void transmitInt(FunctionContext_t* context, bool is_feedback)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b0aa      	sub	sp, #168	@ 0xa8
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  ParamState_t old_state = context->state->state;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  do {
    switch (context->state->state) {
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <transmitInt+0x26>
 8004910:	2b01      	cmp	r3, #1
 8004912:	d01c      	beq.n	800494e <transmitInt+0x5e>
 8004914:	e08a      	b.n	8004a2c <transmitInt+0x13c>
      case PARAM_STATE_0:
        sprintf((char*) context->output_buffer, "\r\n\r\nPlease enter an integer to "
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <transmitInt+0x36>
 8004922:	4b4b      	ldr	r3, [pc, #300]	@ (8004a50 <transmitInt+0x160>)
 8004924:	e000      	b.n	8004928 <transmitInt+0x38>
 8004926:	4b4b      	ldr	r3, [pc, #300]	@ (8004a54 <transmitInt+0x164>)
 8004928:	461a      	mov	r2, r3
 800492a:	494b      	ldr	r1, [pc, #300]	@ (8004a58 <transmitInt+0x168>)
 800492c:	f020 fcc6 	bl	80252bc <siprintf>
            "send to the %s between 0 and 4,294,967,295:\r\n", 
            is_feedback ? "feedback network" : "transducer");
        COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800493c:	461a      	mov	r2, r3
 800493e:	2100      	movs	r1, #0
 8004940:	f7ff f9b4 	bl	8003cac <COMM_TransmitData>
        context->state->state = PARAM_STATE_1;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2201      	movs	r2, #1
 800494a:	701a      	strb	r2, [r3, #0]
        break;
 800494c:	e073      	b.n	8004a36 <transmitInt+0x146>
      case PARAM_STATE_1:
        uint32_t input;
        if (checkUint32(context->input, context->input_len, &input, 0, 4294967295) == false) {
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	1d18      	adds	r0, r3, #4
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8b3 1104 	ldrh.w	r1, [r3, #260]	@ 0x104
 8004958:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800495c:	f04f 33ff 	mov.w	r3, #4294967295
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	2300      	movs	r3, #0
 8004964:	f003 ff78 	bl	8008858 <checkUint32>
 8004968:	4603      	mov	r3, r0
 800496a:	f083 0301 	eor.w	r3, r3, #1
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d015      	beq.n	80049a0 <transmitInt+0xb0>
          sprintf((char*) context->output_buffer, "\r\nInvalid input!\r\n");
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800497a:	4938      	ldr	r1, [pc, #224]	@ (8004a5c <transmitInt+0x16c>)
 800497c:	4618      	mov	r0, r3
 800497e:	f020 fc9d 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800498e:	461a      	mov	r2, r3
 8004990:	2100      	movs	r1, #0
 8004992:	f7ff f98b 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
            sprintf((char*) context->output_buffer, "\r\nError adding message to feedback queue\r\n\r\n");
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          }
          context->state->state = PARAM_STATE_COMPLETE;
        }
        break;
 800499e:	e04a      	b.n	8004a36 <transmitInt+0x146>
          msg.type = is_feedback ? MSG_TRANSMIT_FEEDBACK : MSG_TRANSMIT_TRANSDUCER;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <transmitInt+0xba>
 80049a6:	2303      	movs	r3, #3
 80049a8:	e000      	b.n	80049ac <transmitInt+0xbc>
 80049aa:	2301      	movs	r3, #1
 80049ac:	723b      	strb	r3, [r7, #8]
          msg.timestamp = osKernelGetTickCount();
 80049ae:	f019 ff71 	bl	801e894 <osKernelGetTickCount>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          msg.data_type = INTEGER;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
          msg.length_bits = 8 * sizeof(uint32_t);
 80049be:	2320      	movs	r3, #32
 80049c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
          memcpy(&msg.data[0], &input, sizeof(uint32_t));
 80049c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049c8:	f8c7 3009 	str.w	r3, [r7, #9]
          if (MESS_AddMessageToTxQ(&msg) == pdPASS) {
 80049cc:	f107 0308 	add.w	r3, r7, #8
 80049d0:	4618      	mov	r0, r3
 80049d2:	f002 fdef 	bl	80075b4 <MESS_AddMessageToTxQ>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d111      	bne.n	8004a00 <transmitInt+0x110>
            sprintf((char*) context->output_buffer, "\r\nSuccessfully added to feedback queue!\r\n\r\n");
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80049e2:	491f      	ldr	r1, [pc, #124]	@ (8004a60 <transmitInt+0x170>)
 80049e4:	4618      	mov	r0, r3
 80049e6:	f020 fc69 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80049f6:	461a      	mov	r2, r3
 80049f8:	2100      	movs	r1, #0
 80049fa:	f7ff f957 	bl	8003cac <COMM_TransmitData>
 80049fe:	e010      	b.n	8004a22 <transmitInt+0x132>
            sprintf((char*) context->output_buffer, "\r\nError adding message to feedback queue\r\n\r\n");
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004a06:	4917      	ldr	r1, [pc, #92]	@ (8004a64 <transmitInt+0x174>)
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f020 fc57 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	f7ff f945 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2207      	movs	r2, #7
 8004a28:	701a      	strb	r2, [r3, #0]
        break;
 8004a2a:	e004      	b.n	8004a36 <transmitInt+0x146>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2207      	movs	r2, #7
 8004a32:	701a      	strb	r2, [r3, #0]
        break;
 8004a34:	bf00      	nop
    }
  } while (old_state > context->state->state);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8004a40:	429a      	cmp	r2, r3
 8004a42:	f63f af60 	bhi.w	8004906 <transmitInt+0x16>
}
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
 8004a4a:	37a0      	adds	r7, #160	@ 0xa0
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	0802aabc 	.word	0x0802aabc
 8004a54:	0802aad0 	.word	0x0802aad0
 8004a58:	0802abc4 	.word	0x0802abc4
 8004a5c:	0802ac14 	.word	0x0802ac14
 8004a60:	0802ab68 	.word	0x0802ab68
 8004a64:	0802ab94 	.word	0x0802ab94

08004a68 <transmitFloat>:

void transmitFloat(FunctionContext_t* context, bool is_feedback)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b0a8      	sub	sp, #160	@ 0xa0
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
  ParamState_t old_state = context->state->state;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  do {
    switch (context->state->state) {
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <transmitFloat+0x26>
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d01c      	beq.n	8004ac6 <transmitFloat+0x5e>
 8004a8c:	e089      	b.n	8004ba2 <transmitFloat+0x13a>
      case PARAM_STATE_0:
        sprintf((char*) context->output_buffer, "\r\n\r\nPlease enter a float to "
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <transmitFloat+0x36>
 8004a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004bc8 <transmitFloat+0x160>)
 8004a9c:	e000      	b.n	8004aa0 <transmitFloat+0x38>
 8004a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004bcc <transmitFloat+0x164>)
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	494b      	ldr	r1, [pc, #300]	@ (8004bd0 <transmitFloat+0x168>)
 8004aa4:	f020 fc0a 	bl	80252bc <siprintf>
            "send to the %s:\r\n", 
            is_feedback ? "feedback network" : "transducer");
        COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	f7ff f8f8 	bl	8003cac <COMM_TransmitData>
        context->state->state = PARAM_STATE_1;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]
        break;
 8004ac4:	e072      	b.n	8004bac <transmitFloat+0x144>
      case PARAM_STATE_1:
        float input;
        if (checkFloat(context->input, &input, -1e30f, 1e30f) == false) {
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8004ace:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8004bd4 <transmitFloat+0x16c>
 8004ad2:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8004bd8 <transmitFloat+0x170>
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f003 ff0b 	bl	80088f4 <checkFloat>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f083 0301 	eor.w	r3, r3, #1
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d015      	beq.n	8004b16 <transmitFloat+0xae>
          sprintf((char*) context->output_buffer, "\r\nInvalid input!\r\n");
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004af0:	493a      	ldr	r1, [pc, #232]	@ (8004bdc <transmitFloat+0x174>)
 8004af2:	4618      	mov	r0, r3
 8004af4:	f020 fbe2 	bl	80252bc <siprintf>
          COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8004b04:	461a      	mov	r2, r3
 8004b06:	2100      	movs	r1, #0
 8004b08:	f7ff f8d0 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_0;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
            sprintf((char*) context->output_buffer, "\r\nError adding message to feedback queue\r\n\r\n");
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
          }
          context->state->state = PARAM_STATE_COMPLETE;
        }
        break;
 8004b14:	e04a      	b.n	8004bac <transmitFloat+0x144>
          msg.type = is_feedback ? MSG_TRANSMIT_FEEDBACK : MSG_TRANSMIT_TRANSDUCER;
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <transmitFloat+0xb8>
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e000      	b.n	8004b22 <transmitFloat+0xba>
 8004b20:	2301      	movs	r3, #1
 8004b22:	723b      	strb	r3, [r7, #8]
          msg.timestamp = osKernelGetTickCount();
 8004b24:	f019 feb6 	bl	801e894 <osKernelGetTickCount>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          msg.data_type = FLOAT;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
          msg.length_bits = 8 * sizeof(float);
 8004b34:	2320      	movs	r3, #32
 8004b36:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
          memcpy(&msg.data[0], &input, sizeof(float));
 8004b3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b3e:	f8c7 3009 	str.w	r3, [r7, #9]
          if (MESS_AddMessageToTxQ(&msg) == pdPASS) {
 8004b42:	f107 0308 	add.w	r3, r7, #8
 8004b46:	4618      	mov	r0, r3
 8004b48:	f002 fd34 	bl	80075b4 <MESS_AddMessageToTxQ>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d111      	bne.n	8004b76 <transmitFloat+0x10e>
            sprintf((char*) context->output_buffer, "\r\nSuccessfully added to feedback queue!\r\n\r\n");
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b58:	4921      	ldr	r1, [pc, #132]	@ (8004be0 <transmitFloat+0x178>)
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f020 fbae 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2100      	movs	r1, #0
 8004b70:	f7ff f89c 	bl	8003cac <COMM_TransmitData>
 8004b74:	e010      	b.n	8004b98 <transmitFloat+0x130>
            sprintf((char*) context->output_buffer, "\r\nError adding message to feedback queue\r\n\r\n");
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b7c:	4919      	ldr	r1, [pc, #100]	@ (8004be4 <transmitFloat+0x17c>)
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f020 fb9c 	bl	80252bc <siprintf>
            COMM_TransmitData(context->output_buffer, CALC_LEN, context->comm_interface);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8004b90:	461a      	mov	r2, r3
 8004b92:	2100      	movs	r1, #0
 8004b94:	f7ff f88a 	bl	8003cac <COMM_TransmitData>
          context->state->state = PARAM_STATE_COMPLETE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2207      	movs	r2, #7
 8004b9e:	701a      	strb	r2, [r3, #0]
        break;
 8004ba0:	e004      	b.n	8004bac <transmitFloat+0x144>
      default:
        context->state->state = PARAM_STATE_COMPLETE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2207      	movs	r2, #7
 8004ba8:	701a      	strb	r2, [r3, #0]
        break;
 8004baa:	bf00      	nop
    }
  } while (old_state > context->state->state);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	f63f af61 	bhi.w	8004a7e <transmitFloat+0x16>
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	37a0      	adds	r7, #160	@ 0xa0
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	0802aabc 	.word	0x0802aabc
 8004bcc:	0802aad0 	.word	0x0802aad0
 8004bd0:	0802ac28 	.word	0x0802ac28
 8004bd4:	7149f2ca 	.word	0x7149f2ca
 8004bd8:	f149f2ca 	.word	0xf149f2ca
 8004bdc:	0802ac14 	.word	0x0802ac14
 8004be0:	0802ab68 	.word	0x0802ab68
 8004be4:	0802ab94 	.word	0x0802ab94

08004be8 <ADC_Init>:
void addToFeedbackBuffer(bool firstHalf);

/* Exported function definitions ---------------------------------------------*/

bool ADC_Init()
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret1 = HAL_TIM_Base_Start(&htim8);
 8004bee:	480d      	ldr	r0, [pc, #52]	@ (8004c24 <ADC_Init+0x3c>)
 8004bf0:	f012 fb58 	bl	80172a4 <HAL_TIM_Base_Start>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	71fb      	strb	r3, [r7, #7]

  input_buffer_index = 0;
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <ADC_Init+0x40>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	801a      	strh	r2, [r3, #0]
  feedback_buffer_index = 0;
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <ADC_Init+0x44>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	801a      	strh	r2, [r3, #0]

  memset(adc_buffer, 0, ADC_BUFFER_SIZE * sizeof(uint16_t));
 8004c04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4809      	ldr	r0, [pc, #36]	@ (8004c30 <ADC_Init+0x48>)
 8004c0c:	f020 fbf9 	bl	8025402 <memset>

  return ret1 == HAL_OK;
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bf0c      	ite	eq
 8004c16:	2301      	moveq	r3, #1
 8004c18:	2300      	movne	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	240184d0 	.word	0x240184d0
 8004c28:	24001504 	.word	0x24001504
 8004c2c:	24001506 	.word	0x24001506
 8004c30:	24000cfc 	.word	0x24000cfc

08004c34 <ADC_RegisterInputBuffer>:

bool ADC_RegisterInputBuffer(uint16_t* in_buffer)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  if (input_buffer != NULL) return false;
 8004c3c:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <ADC_RegisterInputBuffer+0x28>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <ADC_RegisterInputBuffer+0x14>
 8004c44:	2300      	movs	r3, #0
 8004c46:	e003      	b.n	8004c50 <ADC_RegisterInputBuffer+0x1c>

  input_buffer = in_buffer;
 8004c48:	4a04      	ldr	r2, [pc, #16]	@ (8004c5c <ADC_RegisterInputBuffer+0x28>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6013      	str	r3, [r2, #0]
  return true;
 8004c4e:	2301      	movs	r3, #1
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	240014fc 	.word	0x240014fc

08004c60 <ADC_RegisterFeedbackBuffer>:

bool ADC_RegisterFeedbackBuffer(uint16_t* fb_buffer)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if (feedback_buffer != NULL) return false;
 8004c68:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <ADC_RegisterFeedbackBuffer+0x28>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <ADC_RegisterFeedbackBuffer+0x14>
 8004c70:	2300      	movs	r3, #0
 8004c72:	e003      	b.n	8004c7c <ADC_RegisterFeedbackBuffer+0x1c>

  feedback_buffer = fb_buffer;
 8004c74:	4a04      	ldr	r2, [pc, #16]	@ (8004c88 <ADC_RegisterFeedbackBuffer+0x28>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6013      	str	r3, [r2, #0]
  return true;
 8004c7a:	2301      	movs	r3, #1
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	24001500 	.word	0x24001500

08004c8c <ADC_StartInput>:

bool ADC_StartInput()
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
  input_buffer_index = 0;
 8004c92:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc4 <ADC_StartInput+0x38>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim8);
 8004c98:	480b      	ldr	r0, [pc, #44]	@ (8004cc8 <ADC_StartInput+0x3c>)
 8004c9a:	f012 fb03 	bl	80172a4 <HAL_TIM_Base_Start>
  HAL_StatusTypeDef ret = HAL_ADC_Start_DMA(&INPUT_ADC, (uint32_t*) adc_buffer, ADC_BUFFER_SIZE);
 8004c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ca2:	490a      	ldr	r1, [pc, #40]	@ (8004ccc <ADC_StartInput+0x40>)
 8004ca4:	480a      	ldr	r0, [pc, #40]	@ (8004cd0 <ADC_StartInput+0x44>)
 8004ca6:	f007 fa61 	bl	800c16c <HAL_ADC_Start_DMA>
 8004caa:	4603      	mov	r3, r0
 8004cac:	71fb      	strb	r3, [r7, #7]
  return ret == HAL_OK;
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	24001504 	.word	0x24001504
 8004cc8:	240184d0 	.word	0x240184d0
 8004ccc:	24000cfc 	.word	0x24000cfc
 8004cd0:	24017fe4 	.word	0x24017fe4

08004cd4 <ADC_StartFeedback>:

bool ADC_StartFeedback()
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
  feedback_buffer_index = 0;
 8004cda:	4b0d      	ldr	r3, [pc, #52]	@ (8004d10 <ADC_StartFeedback+0x3c>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	801a      	strh	r2, [r3, #0]
  if (feedback_buffer == NULL) return false;
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d14 <ADC_StartFeedback+0x40>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <ADC_StartFeedback+0x18>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e00d      	b.n	8004d08 <ADC_StartFeedback+0x34>
  HAL_StatusTypeDef ret = HAL_ADC_Start_DMA(&FEEDBACK_ADC, (uint32_t*) adc_buffer, ADC_BUFFER_SIZE);
 8004cec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cf0:	4909      	ldr	r1, [pc, #36]	@ (8004d18 <ADC_StartFeedback+0x44>)
 8004cf2:	480a      	ldr	r0, [pc, #40]	@ (8004d1c <ADC_StartFeedback+0x48>)
 8004cf4:	f007 fa3a 	bl	800c16c <HAL_ADC_Start_DMA>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	71fb      	strb	r3, [r7, #7]
  return ret == HAL_OK;
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	24001506 	.word	0x24001506
 8004d14:	24001500 	.word	0x24001500
 8004d18:	24000cfc 	.word	0x24000cfc
 8004d1c:	24017f74 	.word	0x24017f74

08004d20 <ADC_StopFeedback>:

bool ADC_StopFeedback()
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  return HAL_ADC_Stop_DMA(&FEEDBACK_ADC) == HAL_OK;
 8004d24:	4805      	ldr	r0, [pc, #20]	@ (8004d3c <ADC_StopFeedback+0x1c>)
 8004d26:	f007 fafd 	bl	800c324 <HAL_ADC_Stop_DMA>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	24017f74 	.word	0x24017f74

08004d40 <ADC_StopInput>:

bool ADC_StopInput()
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  return HAL_ADC_Stop_DMA(&INPUT_ADC) == HAL_OK;
 8004d44:	4805      	ldr	r0, [pc, #20]	@ (8004d5c <ADC_StopInput+0x1c>)
 8004d46:	f007 faed 	bl	800c324 <HAL_ADC_Stop_DMA>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	24017fe4 	.word	0x24017fe4

08004d60 <ADC_StopAll>:

bool ADC_StopAll()
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  if (ADC_StopFeedback() == false) {
 8004d64:	f7ff ffdc 	bl	8004d20 <ADC_StopFeedback>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f083 0301 	eor.w	r3, r3, #1
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <ADC_StopAll+0x18>
    return false;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e010      	b.n	8004d9a <ADC_StopAll+0x3a>
  }
  if (ADC_StopInput() == false) {
 8004d78:	f7ff ffe2 	bl	8004d40 <ADC_StopInput>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f083 0301 	eor.w	r3, r3, #1
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <ADC_StopAll+0x2c>
    return false;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e006      	b.n	8004d9a <ADC_StopAll+0x3a>
  }
  feedback_buffer_index = 0;
 8004d8c:	4b04      	ldr	r3, [pc, #16]	@ (8004da0 <ADC_StopAll+0x40>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	801a      	strh	r2, [r3, #0]
  input_buffer_index = 0;
 8004d92:	4b04      	ldr	r3, [pc, #16]	@ (8004da4 <ADC_StopAll+0x44>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	801a      	strh	r2, [r3, #0]
  return true;
 8004d98:	2301      	movs	r3, #1
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	24001506 	.word	0x24001506
 8004da4:	24001504 	.word	0x24001504

08004da8 <addToInputBuffer>:

/* Private function definitions ----------------------------------------------*/

void addToInputBuffer(bool firstHalf)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	71fb      	strb	r3, [r7, #7]
  if (input_buffer == NULL) return;
 8004db2:	4b33      	ldr	r3, [pc, #204]	@ (8004e80 <addToInputBuffer+0xd8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d05e      	beq.n	8004e78 <addToInputBuffer+0xd0>

  uint16_t dma_buf_start_index = (firstHalf == true) ? (0) : (ADC_BUFFER_SIZE / 2);
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <addToInputBuffer+0x1c>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e001      	b.n	8004dc8 <addToInputBuffer+0x20>
 8004dc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dc8:	81fb      	strh	r3, [r7, #14]

  if (input_buffer_index >= PROCESSING_BUFFER_SIZE) {
 8004dca:	4b2e      	ldr	r3, [pc, #184]	@ (8004e84 <addToInputBuffer+0xdc>)
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dd2:	d306      	bcc.n	8004de2 <addToInputBuffer+0x3a>
    input_buffer_index = input_buffer_index % PROCESSING_BUFFER_SIZE;
 8004dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e84 <addToInputBuffer+0xdc>)
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	4b29      	ldr	r3, [pc, #164]	@ (8004e84 <addToInputBuffer+0xdc>)
 8004de0:	801a      	strh	r2, [r3, #0]
  }

  if (input_buffer_index + ADC_BUFFER_SIZE / 2 > PROCESSING_BUFFER_SIZE) {
 8004de2:	4b28      	ldr	r3, [pc, #160]	@ (8004e84 <addToInputBuffer+0xdc>)
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	f5b3 5f78 	cmp.w	r3, #15872	@ 0x3e00
 8004dea:	d925      	bls.n	8004e38 <addToInputBuffer+0x90>
    uint16_t first_block_size = PROCESSING_BUFFER_SIZE - input_buffer_index;
 8004dec:	4b25      	ldr	r3, [pc, #148]	@ (8004e84 <addToInputBuffer+0xdc>)
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	f5c3 4380 	rsb	r3, r3, #16384	@ 0x4000
 8004df4:	81bb      	strh	r3, [r7, #12]
    memcpy(&input_buffer[input_buffer_index], &adc_buffer[dma_buf_start_index], first_block_size * sizeof(uint16_t));
 8004df6:	4b22      	ldr	r3, [pc, #136]	@ (8004e80 <addToInputBuffer+0xd8>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b22      	ldr	r3, [pc, #136]	@ (8004e84 <addToInputBuffer+0xdc>)
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	18d0      	adds	r0, r2, r3
 8004e02:	89fb      	ldrh	r3, [r7, #14]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	4a20      	ldr	r2, [pc, #128]	@ (8004e88 <addToInputBuffer+0xe0>)
 8004e08:	1899      	adds	r1, r3, r2
 8004e0a:	89bb      	ldrh	r3, [r7, #12]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f020 fbe7 	bl	80255e2 <memcpy>
    uint16_t second_block_size = ADC_BUFFER_SIZE / 2 - first_block_size;
 8004e14:	89bb      	ldrh	r3, [r7, #12]
 8004e16:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004e1a:	817b      	strh	r3, [r7, #10]
    memcpy(&input_buffer[0], &adc_buffer[first_block_size + dma_buf_start_index], second_block_size * sizeof(uint16_t));
 8004e1c:	4b18      	ldr	r3, [pc, #96]	@ (8004e80 <addToInputBuffer+0xd8>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	89ba      	ldrh	r2, [r7, #12]
 8004e22:	89fb      	ldrh	r3, [r7, #14]
 8004e24:	4413      	add	r3, r2
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	4a17      	ldr	r2, [pc, #92]	@ (8004e88 <addToInputBuffer+0xe0>)
 8004e2a:	1899      	adds	r1, r3, r2
 8004e2c:	897b      	ldrh	r3, [r7, #10]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	461a      	mov	r2, r3
 8004e32:	f020 fbd6 	bl	80255e2 <memcpy>
 8004e36:	e00e      	b.n	8004e56 <addToInputBuffer+0xae>
  }
  else {
    memcpy(&input_buffer[input_buffer_index], &adc_buffer[dma_buf_start_index], (ADC_BUFFER_SIZE / 2) * sizeof(uint16_t));
 8004e38:	4b11      	ldr	r3, [pc, #68]	@ (8004e80 <addToInputBuffer+0xd8>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b11      	ldr	r3, [pc, #68]	@ (8004e84 <addToInputBuffer+0xdc>)
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	18d0      	adds	r0, r2, r3
 8004e44:	89fb      	ldrh	r3, [r7, #14]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	4a0f      	ldr	r2, [pc, #60]	@ (8004e88 <addToInputBuffer+0xe0>)
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e50:	4619      	mov	r1, r3
 8004e52:	f020 fbc6 	bl	80255e2 <memcpy>
  }

  input_buffer_index = (input_buffer_index + ADC_BUFFER_SIZE / 2) % PROCESSING_BUFFER_SIZE;
 8004e56:	4b0b      	ldr	r3, [pc, #44]	@ (8004e84 <addToInputBuffer+0xdc>)
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004e5e:	425a      	negs	r2, r3
 8004e60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004e64:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8004e68:	bf58      	it	pl
 8004e6a:	4253      	negpl	r3, r2
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <addToInputBuffer+0xdc>)
 8004e70:	801a      	strh	r2, [r3, #0]

  Input_IncrementEndIndex();
 8004e72:	f001 fad9 	bl	8006428 <Input_IncrementEndIndex>
 8004e76:	e000      	b.n	8004e7a <addToInputBuffer+0xd2>
  if (input_buffer == NULL) return;
 8004e78:	bf00      	nop
}
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	240014fc 	.word	0x240014fc
 8004e84:	24001504 	.word	0x24001504
 8004e88:	24000cfc 	.word	0x24000cfc

08004e8c <addToFeedbackBuffer>:

void addToFeedbackBuffer(bool firstHalf)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	71fb      	strb	r3, [r7, #7]
  if (feedback_buffer == NULL) return;
 8004e96:	4b35      	ldr	r3, [pc, #212]	@ (8004f6c <addToFeedbackBuffer+0xe0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d062      	beq.n	8004f64 <addToFeedbackBuffer+0xd8>

  uint16_t dma_buf_start_index = (firstHalf == true) ? (0) : (ADC_BUFFER_SIZE / 2);
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <addToFeedbackBuffer+0x1c>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e001      	b.n	8004eac <addToFeedbackBuffer+0x20>
 8004ea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eac:	81fb      	strh	r3, [r7, #14]

  if (feedback_buffer_index >= PROCESSING_BUFFER_SIZE) {
 8004eae:	4b30      	ldr	r3, [pc, #192]	@ (8004f70 <addToFeedbackBuffer+0xe4>)
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eb6:	d306      	bcc.n	8004ec6 <addToFeedbackBuffer+0x3a>
    feedback_buffer_index = feedback_buffer_index % PROCESSING_BUFFER_SIZE;
 8004eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8004f70 <addToFeedbackBuffer+0xe4>)
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8004f70 <addToFeedbackBuffer+0xe4>)
 8004ec4:	801a      	strh	r2, [r3, #0]
  }

  if (feedback_buffer_index + ADC_BUFFER_SIZE > PROCESSING_BUFFER_SIZE) {
 8004ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f70 <addToFeedbackBuffer+0xe4>)
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 8004ece:	d929      	bls.n	8004f24 <addToFeedbackBuffer+0x98>
    uint16_t first_block_size = PROCESSING_BUFFER_SIZE - feedback_buffer_index;
 8004ed0:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <addToFeedbackBuffer+0xe4>)
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	f5c3 4380 	rsb	r3, r3, #16384	@ 0x4000
 8004ed8:	81bb      	strh	r3, [r7, #12]
    memcpy(&feedback_buffer[feedback_buffer_index], &adc_buffer[dma_buf_start_index], first_block_size * sizeof(uint16_t));
 8004eda:	4b24      	ldr	r3, [pc, #144]	@ (8004f6c <addToFeedbackBuffer+0xe0>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <addToFeedbackBuffer+0xe4>)
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	18d0      	adds	r0, r2, r3
 8004ee6:	89fb      	ldrh	r3, [r7, #14]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	4a22      	ldr	r2, [pc, #136]	@ (8004f74 <addToFeedbackBuffer+0xe8>)
 8004eec:	1899      	adds	r1, r3, r2
 8004eee:	89bb      	ldrh	r3, [r7, #12]
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f020 fb75 	bl	80255e2 <memcpy>
    uint16_t second_block_size = ADC_BUFFER_SIZE / 2 - first_block_size;
 8004ef8:	89bb      	ldrh	r3, [r7, #12]
 8004efa:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004efe:	817b      	strh	r3, [r7, #10]
    memcpy(&feedback_buffer[feedback_buffer_index], &adc_buffer[first_block_size + dma_buf_start_index], second_block_size * sizeof(uint16_t));
 8004f00:	4b1a      	ldr	r3, [pc, #104]	@ (8004f6c <addToFeedbackBuffer+0xe0>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b1a      	ldr	r3, [pc, #104]	@ (8004f70 <addToFeedbackBuffer+0xe4>)
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	18d0      	adds	r0, r2, r3
 8004f0c:	89ba      	ldrh	r2, [r7, #12]
 8004f0e:	89fb      	ldrh	r3, [r7, #14]
 8004f10:	4413      	add	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4a17      	ldr	r2, [pc, #92]	@ (8004f74 <addToFeedbackBuffer+0xe8>)
 8004f16:	1899      	adds	r1, r3, r2
 8004f18:	897b      	ldrh	r3, [r7, #10]
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	f020 fb60 	bl	80255e2 <memcpy>
 8004f22:	e00e      	b.n	8004f42 <addToFeedbackBuffer+0xb6>
  }
  else {
    memcpy(&feedback_buffer[feedback_buffer_index], &adc_buffer[dma_buf_start_index], (ADC_BUFFER_SIZE / 2) * sizeof(uint16_t));
 8004f24:	4b11      	ldr	r3, [pc, #68]	@ (8004f6c <addToFeedbackBuffer+0xe0>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b11      	ldr	r3, [pc, #68]	@ (8004f70 <addToFeedbackBuffer+0xe4>)
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	18d0      	adds	r0, r2, r3
 8004f30:	89fb      	ldrh	r3, [r7, #14]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4a0f      	ldr	r2, [pc, #60]	@ (8004f74 <addToFeedbackBuffer+0xe8>)
 8004f36:	4413      	add	r3, r2
 8004f38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f020 fb50 	bl	80255e2 <memcpy>
  }

  feedback_buffer_index = (feedback_buffer_index + ADC_BUFFER_SIZE / 2) % PROCESSING_BUFFER_SIZE;
 8004f42:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <addToFeedbackBuffer+0xe4>)
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004f4a:	425a      	negs	r2, r3
 8004f4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004f50:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8004f54:	bf58      	it	pl
 8004f56:	4253      	negpl	r3, r2
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	4b05      	ldr	r3, [pc, #20]	@ (8004f70 <addToFeedbackBuffer+0xe4>)
 8004f5c:	801a      	strh	r2, [r3, #0]

  Feedback_IncrementEndIndex();
 8004f5e:	f001 f9ff 	bl	8006360 <Feedback_IncrementEndIndex>
 8004f62:	e000      	b.n	8004f66 <addToFeedbackBuffer+0xda>
  if (feedback_buffer == NULL) return;
 8004f64:	bf00      	nop
}
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	24001500 	.word	0x24001500
 8004f70:	24001506 	.word	0x24001506
 8004f74:	24000cfc 	.word	0x24000cfc

08004f78 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  if (hadc == &INPUT_ADC) {
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a09      	ldr	r2, [pc, #36]	@ (8004fa8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d103      	bne.n	8004f90 <HAL_ADC_ConvHalfCpltCallback+0x18>
    addToInputBuffer(true);
 8004f88:	2001      	movs	r0, #1
 8004f8a:	f7ff ff0d 	bl	8004da8 <addToInputBuffer>
  }
  else if (hadc == &FEEDBACK_ADC) {
    addToFeedbackBuffer(true);
  }
}
 8004f8e:	e006      	b.n	8004f9e <HAL_ADC_ConvHalfCpltCallback+0x26>
  else if (hadc == &FEEDBACK_ADC) {
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a06      	ldr	r2, [pc, #24]	@ (8004fac <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d102      	bne.n	8004f9e <HAL_ADC_ConvHalfCpltCallback+0x26>
    addToFeedbackBuffer(true);
 8004f98:	2001      	movs	r0, #1
 8004f9a:	f7ff ff77 	bl	8004e8c <addToFeedbackBuffer>
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	24017fe4 	.word	0x24017fe4
 8004fac:	24017f74 	.word	0x24017f74

08004fb0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  if (hadc == &INPUT_ADC) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a09      	ldr	r2, [pc, #36]	@ (8004fe0 <HAL_ADC_ConvCpltCallback+0x30>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d103      	bne.n	8004fc8 <HAL_ADC_ConvCpltCallback+0x18>
    addToInputBuffer(false);
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	f7ff fef1 	bl	8004da8 <addToInputBuffer>
    addToFeedbackBuffer(false);
  }
  else {
    return;
  }
  return;
 8004fc6:	e008      	b.n	8004fda <HAL_ADC_ConvCpltCallback+0x2a>
  else if (hadc == &FEEDBACK_ADC) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a06      	ldr	r2, [pc, #24]	@ (8004fe4 <HAL_ADC_ConvCpltCallback+0x34>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d103      	bne.n	8004fd8 <HAL_ADC_ConvCpltCallback+0x28>
    addToFeedbackBuffer(false);
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f7ff ff5b 	bl	8004e8c <addToFeedbackBuffer>
  return;
 8004fd6:	e000      	b.n	8004fda <HAL_ADC_ConvCpltCallback+0x2a>
    return;
 8004fd8:	bf00      	nop
}
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	24017fe4 	.word	0x24017fe4
 8004fe4:	24017f74 	.word	0x24017f74

08004fe8 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  if (hadc == &INPUT_ADC) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a03      	ldr	r2, [pc, #12]	@ (8005000 <HAL_ADC_ErrorCallback+0x18>)
 8004ff4:	4293      	cmp	r3, r2
    return;
  }
}
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	24017fe4 	.word	0x24017fe4
 8005004:	00000000 	.word	0x00000000

08005008 <Demodulate_Perform>:
static bool goertzel(DemodulationInfo_t* data);

/* Exported function definitions ---------------------------------------------*/

bool Demodulate_Perform(DemodulationInfo_t* data)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b08f      	sub	sp, #60	@ 0x3c
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  switch (mod_demod_method) {
 8005010:	4b9b      	ldr	r3, [pc, #620]	@ (8005280 <Demodulate_Perform+0x278>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <Demodulate_Perform+0x16>
 8005018:	2b01      	cmp	r3, #1
 800501a:	d013      	beq.n	8005044 <Demodulate_Perform+0x3c>
 800501c:	e02f      	b.n	800507e <Demodulate_Perform+0x76>
    case MOD_DEMOD_FSK:
      data->f0 = fsk_f0;
 800501e:	4b99      	ldr	r3, [pc, #612]	@ (8005284 <Demodulate_Perform+0x27c>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	611a      	str	r2, [r3, #16]
      data->f1 = fsk_f1;
 8005026:	4b98      	ldr	r3, [pc, #608]	@ (8005288 <Demodulate_Perform+0x280>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	615a      	str	r2, [r3, #20]
      if (goertzel(data) == false) {
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f932 	bl	8005298 <goertzel>
 8005034:	4603      	mov	r3, r0
 8005036:	f083 0301 	eor.w	r3, r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d020      	beq.n	8005082 <Demodulate_Perform+0x7a>
        return false;
 8005040:	2300      	movs	r3, #0
 8005042:	e114      	b.n	800526e <Demodulate_Perform+0x266>
      }
      break;
    case MOD_DEMOD_FHBFSK: {
      data->f0 = Modulate_GetFhbfskFrequency(false, data->bit_index);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	895b      	ldrh	r3, [r3, #10]
 8005048:	4619      	mov	r1, r3
 800504a:	2000      	movs	r0, #0
 800504c:	f002 fe8e 	bl	8007d6c <Modulate_GetFhbfskFrequency>
 8005050:	4602      	mov	r2, r0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	611a      	str	r2, [r3, #16]
      data->f1 = Modulate_GetFhbfskFrequency(true, data->bit_index);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	895b      	ldrh	r3, [r3, #10]
 800505a:	4619      	mov	r1, r3
 800505c:	2001      	movs	r0, #1
 800505e:	f002 fe85 	bl	8007d6c <Modulate_GetFhbfskFrequency>
 8005062:	4602      	mov	r2, r0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	615a      	str	r2, [r3, #20]
      if (goertzel(data) == false) {
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f915 	bl	8005298 <goertzel>
 800506e:	4603      	mov	r3, r0
 8005070:	f083 0301 	eor.w	r3, r3, #1
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <Demodulate_Perform+0x7e>
        return false;
 800507a:	2300      	movs	r3, #0
 800507c:	e0f7      	b.n	800526e <Demodulate_Perform+0x266>
      }
      break;
    }
    default:
      return false;
 800507e:	2300      	movs	r3, #0
 8005080:	e0f5      	b.n	800526e <Demodulate_Perform+0x266>
      break;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <Demodulate_Perform+0x80>
      break;
 8005086:	bf00      	nop
  }

  switch (decision_method) {
 8005088:	4b80      	ldr	r3, [pc, #512]	@ (800528c <Demodulate_Perform+0x284>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <Demodulate_Perform+0x8e>
 8005090:	2b01      	cmp	r3, #1
 8005092:	d002      	beq.n	800509a <Demodulate_Perform+0x92>
 8005094:	e0ea      	b.n	800526c <Demodulate_Perform+0x264>
    case AMPLITUDE_COMPARISON:
      return true;
 8005096:	2301      	movs	r3, #1
 8005098:	e0e9      	b.n	800526e <Demodulate_Perform+0x266>
     */
    case HISTORICAL_COMPARISON:
      // Expects nominally that the basic goertzel is correct, but switches predicted bit if there is a large swing
      // calculate current index

      uint16_t num_tones = (mod_demod_method == MOD_DEMOD_FSK) ? 1 : fhbfsk_num_tones;
 800509a:	4b79      	ldr	r3, [pc, #484]	@ (8005280 <Demodulate_Perform+0x278>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <Demodulate_Perform+0xa0>
 80050a2:	4b7b      	ldr	r3, [pc, #492]	@ (8005290 <Demodulate_Perform+0x288>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	e000      	b.n	80050aa <Demodulate_Perform+0xa2>
 80050a8:	2301      	movs	r3, #1
 80050aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
      uint16_t frequency_index = data->bit_index % num_tones;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	895b      	ldrh	r3, [r3, #10]
 80050b0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80050b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80050b6:	fb01 f202 	mul.w	r2, r1, r2
 80050ba:	1a9b      	subs	r3, r3, r2
 80050bc:	86bb      	strh	r3, [r7, #52]	@ 0x34

      uint16_t buffer_raw_length = data->bit_index / num_tones;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	895a      	ldrh	r2, [r3, #10]
 80050c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	867b      	strh	r3, [r7, #50]	@ 0x32
      uint16_t buffer_length = MIN(NUM_DEMODULATION_HISTORY, buffer_raw_length);
 80050ca:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	bf28      	it	cs
 80050d0:	2308      	movcs	r3, #8
 80050d2:	863b      	strh	r3, [r7, #48]	@ 0x30
      uint16_t buffer_index = buffer_raw_length % NUM_DEMODULATION_HISTORY;
 80050d4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      // check conditions

      float delta_energy_f0, delta_energy_f1;
      float abs_normalized_delta_energy_f0, abs_normalized_delta_energy_f1;

      if (buffer_length >= 1) {
 80050dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80a6 	beq.w	8005230 <Demodulate_Perform+0x228>
        // Look at the previous bit and check for large changes
        DemodulationHistory_t previous_result =
            demodulation_history[(buffer_index - 1) % NUM_DEMODULATION_HISTORY][frequency_index];
 80050e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80050e6:	3b01      	subs	r3, #1
 80050e8:	4259      	negs	r1, r3
 80050ea:	f003 0207 	and.w	r2, r3, #7
 80050ee:	f001 0307 	and.w	r3, r1, #7
 80050f2:	bf58      	it	pl
 80050f4:	425a      	negpl	r2, r3
 80050f6:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
        DemodulationHistory_t previous_result =
 80050f8:	4866      	ldr	r0, [pc, #408]	@ (8005294 <Demodulate_Perform+0x28c>)
 80050fa:	4613      	mov	r3, r2
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	440b      	add	r3, r1
 8005104:	f107 020c 	add.w	r2, r7, #12
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4403      	add	r3, r0
 800510c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005110:	e882 0003 	stmia.w	r2, {r0, r1}

        delta_energy_f0 = data->energy_f0 - previous_result.energy_f0;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	ed93 7a06 	vldr	s14, [r3, #24]
 800511a:	edd7 7a03 	vldr	s15, [r7, #12]
 800511e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005122:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        delta_energy_f1 = data->energy_f1 - previous_result.energy_f1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	ed93 7a07 	vldr	s14, [r3, #28]
 800512c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005134:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        abs_normalized_delta_energy_f0 = fabsf(delta_energy_f0) /
 8005138:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800513c:	eef0 6ae7 	vabs.f32	s13, s15
                                         MAX(data->energy_f0, data->energy_f1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	ed93 7a06 	vldr	s14, [r3, #24]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	edd3 7a07 	vldr	s15, [r3, #28]
 800514c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005154:	dd03      	ble.n	800515e <Demodulate_Perform+0x156>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	edd3 7a06 	vldr	s15, [r3, #24]
 800515c:	e002      	b.n	8005164 <Demodulate_Perform+0x15c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	edd3 7a07 	vldr	s15, [r3, #28]
        abs_normalized_delta_energy_f0 = fabsf(delta_energy_f0) /
 8005164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005168:	ed87 7a08 	vstr	s14, [r7, #32]

        abs_normalized_delta_energy_f1 = fabsf(delta_energy_f1) /
 800516c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005170:	eef0 6ae7 	vabs.f32	s13, s15
                                         MAX(data->energy_f0, data->energy_f1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	ed93 7a06 	vldr	s14, [r3, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005188:	dd03      	ble.n	8005192 <Demodulate_Perform+0x18a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005190:	e002      	b.n	8005198 <Demodulate_Perform+0x190>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	edd3 7a07 	vldr	s15, [r3, #28]
        abs_normalized_delta_energy_f1 = fabsf(delta_energy_f1) /
 8005198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519c:	ed87 7a07 	vstr	s14, [r7, #28]

        float abs_normalized_delta_energy_sum = abs_normalized_delta_energy_f0 +
 80051a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80051a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80051a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ac:	edc7 7a06 	vstr	s15, [r7, #24]
                                                abs_normalized_delta_energy_f1;


        bool delta_energy_f0_pos = delta_energy_f0 > 0.0f;
 80051b0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80051b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051bc:	bfcc      	ite	gt
 80051be:	2301      	movgt	r3, #1
 80051c0:	2300      	movle	r3, #0
 80051c2:	75fb      	strb	r3, [r7, #23]
        bool delta_energy_f1_pos = delta_energy_f1 > 0.0f;
 80051c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80051c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d0:	bfcc      	ite	gt
 80051d2:	2301      	movgt	r3, #1
 80051d4:	2300      	movle	r3, #0
 80051d6:	75bb      	strb	r3, [r7, #22]
        bool significant_delta_energy =
            abs_normalized_delta_energy_sum > SIGNFIICANT_SHIFT_THRESHOLD;
 80051d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80051dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
        bool significant_delta_energy =
 80051e0:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8005278 <Demodulate_Perform+0x270>
 80051e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	bfcc      	ite	gt
 80051ee:	2301      	movgt	r3, #1
 80051f0:	2300      	movle	r3, #0
 80051f2:	757b      	strb	r3, [r7, #21]

        // significant shift towards f0
        if (delta_energy_f0_pos == true && delta_energy_f1_pos == false &&
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00b      	beq.n	8005212 <Demodulate_Perform+0x20a>
 80051fa:	7dbb      	ldrb	r3, [r7, #22]
 80051fc:	f083 0301 	eor.w	r3, r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <Demodulate_Perform+0x20a>
 8005206:	7d7b      	ldrb	r3, [r7, #21]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <Demodulate_Perform+0x20a>
            significant_delta_energy == true) {
          data->decoded_bit = false;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	731a      	strb	r2, [r3, #12]
        }
        // significant shift towards f1
        if (delta_energy_f0_pos == false && delta_energy_f1_pos == true &&
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	f083 0301 	eor.w	r3, r3, #1
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d008      	beq.n	8005230 <Demodulate_Perform+0x228>
 800521e:	7dbb      	ldrb	r3, [r7, #22]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <Demodulate_Perform+0x228>
 8005224:	7d7b      	ldrb	r3, [r7, #21]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <Demodulate_Perform+0x228>
            significant_delta_energy == true) {
          data->decoded_bit = true;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	731a      	strb	r2, [r3, #12]
        }
      }

      // Add to the buffer
      demodulation_history[buffer_index][frequency_index].energy_f0 = data->energy_f0;
 8005230:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005232:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6999      	ldr	r1, [r3, #24]
 8005238:	4c16      	ldr	r4, [pc, #88]	@ (8005294 <Demodulate_Perform+0x28c>)
 800523a:	4613      	mov	r3, r2
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4403      	add	r3, r0
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4423      	add	r3, r4
 8005248:	6019      	str	r1, [r3, #0]
      demodulation_history[buffer_index][frequency_index].energy_f1 = data->energy_f1;
 800524a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800524c:	8eb8      	ldrh	r0, [r7, #52]	@ 0x34
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69d9      	ldr	r1, [r3, #28]
 8005252:	4c10      	ldr	r4, [pc, #64]	@ (8005294 <Demodulate_Perform+0x28c>)
 8005254:	4613      	mov	r3, r2
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	4403      	add	r3, r0
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	4423      	add	r3, r4
 8005262:	3304      	adds	r3, #4
 8005264:	6019      	str	r1, [r3, #0]
      break;
 8005266:	bf00      	nop
    default:
      return false;
  }
  return true;
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <Demodulate_Perform+0x266>
      return false;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	373c      	adds	r7, #60	@ 0x3c
 8005272:	46bd      	mov	sp, r7
 8005274:	bd90      	pop	{r4, r7, pc}
 8005276:	bf00      	nop
 8005278:	33333333 	.word	0x33333333
 800527c:	3fc33333 	.word	0x3fc33333
 8005280:	24015b94 	.word	0x24015b94
 8005284:	24000270 	.word	0x24000270
 8005288:	24000274 	.word	0x24000274
 800528c:	24000268 	.word	0x24000268
 8005290:	2400027c 	.word	0x2400027c
 8005294:	24001508 	.word	0x24001508

08005298 <goertzel>:
}

/* Private function definitions ----------------------------------------------*/

bool goertzel(DemodulationInfo_t* data)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b092      	sub	sp, #72	@ 0x48
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  if (data == NULL) return false;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <goertzel+0x12>
 80052a6:	2300      	movs	r3, #0
 80052a8:	e0e9      	b.n	800547e <goertzel+0x1e6>

  float energy_f0 = 0.0;
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	633b      	str	r3, [r7, #48]	@ 0x30
  float energy_f1 = 0.0;
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  float omega_f0 = 2.0 * M_PI * data->f0 / ADC_SAMPLING_RATE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80052c2:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 8005488 <goertzel+0x1f0>
 80052c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80052ca:	ed9f 5b71 	vldr	d5, [pc, #452]	@ 8005490 <goertzel+0x1f8>
 80052ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80052d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80052d6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float omega_f1 = 2.0 * M_PI * data->f1 / ADC_SAMPLING_RATE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80052e6:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8005488 <goertzel+0x1f0>
 80052ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80052ee:	ed9f 5b68 	vldr	d5, [pc, #416]	@ 8005490 <goertzel+0x1f8>
 80052f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80052f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80052fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

  float coeff_f0 = 2.0 * cosf(omega_f0);
 80052fe:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8005302:	f024 f82d 	bl	8029360 <cosf>
 8005306:	eef0 7a40 	vmov.f32	s15, s0
 800530a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800530e:	edc7 7a08 	vstr	s15, [r7, #32]
  float coeff_f1 = 2.0 * cosf(omega_f1);
 8005312:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8005316:	f024 f823 	bl	8029360 <cosf>
 800531a:	eef0 7a40 	vmov.f32	s15, s0
 800531e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005322:	edc7 7a07 	vstr	s15, [r7, #28]

  uint16_t mask = data->buf_len - 1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	889b      	ldrh	r3, [r3, #4]
 800532a:	3b01      	subs	r3, #1
 800532c:	837b      	strh	r3, [r7, #26]

  float q0_f0 = 0, q1_f0 = 0, q2_f0 = 0;
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	647b      	str	r3, [r7, #68]	@ 0x44
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	643b      	str	r3, [r7, #64]	@ 0x40
  float q0_f1 = 0, q1_f1 = 0, q2_f1 = 0;
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	63bb      	str	r3, [r7, #56]	@ 0x38

  for (uint16_t i = 0; i < data->data_len; i++) {
 8005352:	2300      	movs	r3, #0
 8005354:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005356:	e045      	b.n	80053e4 <goertzel+0x14c>
    uint16_t index = (i + data->data_start_index) & mask;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	891a      	ldrh	r2, [r3, #8]
 800535c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800535e:	4413      	add	r3, r2
 8005360:	b29b      	uxth	r3, r3
 8005362:	b21a      	sxth	r2, r3
 8005364:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005368:	4013      	ands	r3, r2
 800536a:	b21b      	sxth	r3, r3
 800536c:	81fb      	strh	r3, [r7, #14]

    // Foertzel algorithm for F0
    q0_f0 = coeff_f0 * q1_f0 - q2_f0 + data->data_buf[index];
 800536e:	ed97 7a08 	vldr	s14, [r7, #32]
 8005372:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800537a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800537e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	89fb      	ldrh	r3, [r7, #14]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4413      	add	r3, r2
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800539a:	edc7 7a05 	vstr	s15, [r7, #20]
    q2_f0 = q1_f0;
 800539e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a0:	643b      	str	r3, [r7, #64]	@ 0x40
    q1_f0 = q0_f0;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	647b      	str	r3, [r7, #68]	@ 0x44

    // Goertzel algorithm for F1
    q0_f1 = coeff_f1 * q1_f1 - q2_f1 + data->data_buf[index];
 80053a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80053aa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80053ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053b2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80053b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	89fb      	ldrh	r3, [r7, #14]
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	4413      	add	r3, r2
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d2:	edc7 7a04 	vstr	s15, [r7, #16]
    q2_f1 = q1_f1;
 80053d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    q1_f1 = q0_f1;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (uint16_t i = 0; i < data->data_len; i++) {
 80053de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80053e0:	3301      	adds	r3, #1
 80053e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	88db      	ldrh	r3, [r3, #6]
 80053e8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d3b4      	bcc.n	8005358 <goertzel+0xc0>
  }

  energy_f0 = q1_f0 * q1_f0 + q2_f0 * q2_f0 - coeff_f0 * q1_f0 * q2_f0;
 80053ee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80053f2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80053f6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80053fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80053fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005402:	edd7 6a08 	vldr	s13, [r7, #32]
 8005406:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800540a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800540e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800541a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
  energy_f1 = q1_f1 * q1_f1 + q2_f1 * q2_f1 - coeff_f1 * q1_f1 * q2_f1;
 800541e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005422:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005426:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800542a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800542e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005432:	edd7 6a07 	vldr	s13, [r7, #28]
 8005436:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800543a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800543e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800544a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  data->energy_f0 = energy_f0;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005452:	619a      	str	r2, [r3, #24]
  data->energy_f1 = energy_f1;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005458:	61da      	str	r2, [r3, #28]

  data->decoded_bit = (energy_f1 > energy_f0) ? true : false;
 800545a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800545e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546a:	bfcc      	ite	gt
 800546c:	2301      	movgt	r3, #1
 800546e:	2300      	movle	r3, #0
 8005470:	b2da      	uxtb	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	731a      	strb	r2, [r3, #12]
  data->analysis_done = true;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	735a      	strb	r2, [r3, #13]

  return true;
 800547c:	2301      	movs	r3, #1
}
 800547e:	4618      	mov	r0, r3
 8005480:	3748      	adds	r7, #72	@ 0x48
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	54442d18 	.word	0x54442d18
 800548c:	401921fb 	.word	0x401921fb
 8005490:	00000000 	.word	0x00000000
 8005494:	40fd4c00 	.word	0x40fd4c00

08005498 <ErrorCorrection_AddCorrection>:
bool checkChecksum32(BitMessage_t* bit_msg, bool* error);

/* Exported function definitions ---------------------------------------------*/

bool ErrorCorrection_AddCorrection(BitMessage_t* bit_msg)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  switch (error_correction_method) {
 80054a0:	4b63      	ldr	r3, [pc, #396]	@ (8005630 <ErrorCorrection_AddCorrection+0x198>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	f200 80bd 	bhi.w	8005624 <ErrorCorrection_AddCorrection+0x18c>
 80054aa:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <ErrorCorrection_AddCorrection+0x18>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054c9 	.word	0x080054c9
 80054b4:	08005503 	.word	0x08005503
 80054b8:	0800553d 	.word	0x0800553d
 80054bc:	08005577 	.word	0x08005577
 80054c0:	080055b1 	.word	0x080055b1
 80054c4:	080055eb 	.word	0x080055eb
    case CRC_8:
      uint8_t crc_8;
      if (calculateCrc8(bit_msg, &crc_8) == false) {
 80054c8:	f107 0317 	add.w	r3, r7, #23
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f95c 	bl	800578c <calculateCrc8>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f083 0301 	eor.w	r3, r3, #1
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <ErrorCorrection_AddCorrection+0x4c>
        return false;
 80054e0:	2300      	movs	r3, #0
 80054e2:	e0a0      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
      }
      bit_msg->final_length += 8;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 80054ea:	3308      	adds	r3, #8
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      return Packet_Add8(bit_msg, crc_8);
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f002 fe54 	bl	80081a6 <Packet_Add8>
 80054fe:	4603      	mov	r3, r0
 8005500:	e091      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
    case CRC_16:
      uint16_t crc_16;
      if (calculateCrc16(bit_msg, &crc_16) == false) {
 8005502:	f107 0314 	add.w	r3, r7, #20
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f9dc 	bl	80058c6 <calculateCrc16>
 800550e:	4603      	mov	r3, r0
 8005510:	f083 0301 	eor.w	r3, r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <ErrorCorrection_AddCorrection+0x86>
        return false;
 800551a:	2300      	movs	r3, #0
 800551c:	e083      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
      }
      bit_msg->final_length += 16;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005524:	3310      	adds	r3, #16
 8005526:	b29a      	uxth	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      return Packet_Add16(bit_msg, crc_16);
 800552e:	8abb      	ldrh	r3, [r7, #20]
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f002 fe48 	bl	80081c8 <Packet_Add16>
 8005538:	4603      	mov	r3, r0
 800553a:	e074      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
    case CRC_32:
      uint32_t crc_32;
      if (calculateCrc32(bit_msg, &crc_32) == false) {
 800553c:	f107 0310 	add.w	r3, r7, #16
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fa68 	bl	8005a18 <calculateCrc32>
 8005548:	4603      	mov	r3, r0
 800554a:	f083 0301 	eor.w	r3, r3, #1
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <ErrorCorrection_AddCorrection+0xc0>
        return false;
 8005554:	2300      	movs	r3, #0
 8005556:	e066      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
      }
      bit_msg->final_length += 32;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 800555e:	3320      	adds	r3, #32
 8005560:	b29a      	uxth	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      return Packet_Add32(bit_msg, crc_32);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f002 fe3c 	bl	80081ea <Packet_Add32>
 8005572:	4603      	mov	r3, r0
 8005574:	e057      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
    case CHECKSUM_8:
      uint8_t checksum_8;
      if (calculateChecksum8(bit_msg, &checksum_8) == false) {
 8005576:	f107 030f 	add.w	r3, r7, #15
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fae1 	bl	8005b44 <calculateChecksum8>
 8005582:	4603      	mov	r3, r0
 8005584:	f083 0301 	eor.w	r3, r3, #1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <ErrorCorrection_AddCorrection+0xfa>
        return false;
 800558e:	2300      	movs	r3, #0
 8005590:	e049      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
      }
      bit_msg->final_length += 8;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005598:	3308      	adds	r3, #8
 800559a:	b29a      	uxth	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      return Packet_Add8(bit_msg, checksum_8);
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f002 fdfd 	bl	80081a6 <Packet_Add8>
 80055ac:	4603      	mov	r3, r0
 80055ae:	e03a      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
    case CHECKSUM_16:
      uint16_t checksum_16;
      if (calculateChecksum16(bit_msg, &checksum_16) == false) {
 80055b0:	f107 030c 	add.w	r3, r7, #12
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fb14 	bl	8005be4 <calculateChecksum16>
 80055bc:	4603      	mov	r3, r0
 80055be:	f083 0301 	eor.w	r3, r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <ErrorCorrection_AddCorrection+0x134>
        return false;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e02c      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
      }
      bit_msg->final_length += 16;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 80055d2:	3310      	adds	r3, #16
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      return Packet_Add16(bit_msg, checksum_16);
 80055dc:	89bb      	ldrh	r3, [r7, #12]
 80055de:	4619      	mov	r1, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f002 fdf1 	bl	80081c8 <Packet_Add16>
 80055e6:	4603      	mov	r3, r0
 80055e8:	e01d      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
    case CHECKSUM_32:
      uint32_t checksum_32;
      if (calculateChecksum32(bit_msg, &checksum_32) == false) {
 80055ea:	f107 0308 	add.w	r3, r7, #8
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fb56 	bl	8005ca2 <calculateChecksum32>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f083 0301 	eor.w	r3, r3, #1
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <ErrorCorrection_AddCorrection+0x16e>
        return false;
 8005602:	2300      	movs	r3, #0
 8005604:	e00f      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
      }
      bit_msg->final_length += 32;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 800560c:	3320      	adds	r3, #32
 800560e:	b29a      	uxth	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      return Packet_Add32(bit_msg, checksum_32);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f002 fde5 	bl	80081ea <Packet_Add32>
 8005620:	4603      	mov	r3, r0
 8005622:	e000      	b.n	8005626 <ErrorCorrection_AddCorrection+0x18e>
    default:
      return false;
 8005624:	2300      	movs	r3, #0
  }
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	24000269 	.word	0x24000269

08005634 <ErrorCorrection_CheckCorrection>:

bool ErrorCorrection_CheckCorrection(BitMessage_t* bit_msg, bool* error)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  switch (error_correction_method) {
 800563e:	4b1e      	ldr	r3, [pc, #120]	@ (80056b8 <ErrorCorrection_CheckCorrection+0x84>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b05      	cmp	r3, #5
 8005644:	d832      	bhi.n	80056ac <ErrorCorrection_CheckCorrection+0x78>
 8005646:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <ErrorCorrection_CheckCorrection+0x18>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	08005665 	.word	0x08005665
 8005650:	08005671 	.word	0x08005671
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005689 	.word	0x08005689
 800565c:	08005695 	.word	0x08005695
 8005660:	080056a1 	.word	0x080056a1
    case CRC_8:
      return checkCrc8(bit_msg, error);
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fb90 	bl	8005d8c <checkCrc8>
 800566c:	4603      	mov	r3, r0
 800566e:	e01e      	b.n	80056ae <ErrorCorrection_CheckCorrection+0x7a>
    case CRC_16:
      return checkCrc16(bit_msg, error);
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fbc4 	bl	8005e00 <checkCrc16>
 8005678:	4603      	mov	r3, r0
 800567a:	e018      	b.n	80056ae <ErrorCorrection_CheckCorrection+0x7a>
    case CRC_32:
      return checkCrc32(bit_msg, error);
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fbf8 	bl	8005e74 <checkCrc32>
 8005684:	4603      	mov	r3, r0
 8005686:	e012      	b.n	80056ae <ErrorCorrection_CheckCorrection+0x7a>
    case CHECKSUM_8:
      return checkChecksum8(bit_msg, error);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fc2c 	bl	8005ee8 <checkChecksum8>
 8005690:	4603      	mov	r3, r0
 8005692:	e00c      	b.n	80056ae <ErrorCorrection_CheckCorrection+0x7a>
    case CHECKSUM_16:
      return checkChecksum16(bit_msg, error);
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fc60 	bl	8005f5c <checkChecksum16>
 800569c:	4603      	mov	r3, r0
 800569e:	e006      	b.n	80056ae <ErrorCorrection_CheckCorrection+0x7a>
    case CHECKSUM_32:
      return checkChecksum32(bit_msg, error);
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fc94 	bl	8005fd0 <checkChecksum32>
 80056a8:	4603      	mov	r3, r0
 80056aa:	e000      	b.n	80056ae <ErrorCorrection_CheckCorrection+0x7a>
    default:
      return false;
 80056ac:	2300      	movs	r3, #0
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	24000269 	.word	0x24000269

080056bc <ErrorCorrection_CheckLength>:

bool ErrorCorrection_CheckLength(uint16_t* length)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  switch (error_correction_method) {
 80056c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005740 <ErrorCorrection_CheckLength+0x84>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	bf8c      	ite	hi
 80056cc:	2201      	movhi	r2, #1
 80056ce:	2200      	movls	r2, #0
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	d12c      	bne.n	8005730 <ErrorCorrection_CheckLength+0x74>
 80056d6:	2201      	movs	r2, #1
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	f003 0224 	and.w	r2, r3, #36	@ 0x24
 80056e0:	2a00      	cmp	r2, #0
 80056e2:	bf14      	ite	ne
 80056e4:	2201      	movne	r2, #1
 80056e6:	2200      	moveq	r2, #0
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	d11b      	bne.n	8005726 <ErrorCorrection_CheckLength+0x6a>
 80056ee:	f003 0212 	and.w	r2, r3, #18
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	bf14      	ite	ne
 80056f6:	2201      	movne	r2, #1
 80056f8:	2200      	moveq	r2, #0
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	2a00      	cmp	r2, #0
 80056fe:	d10d      	bne.n	800571c <ErrorCorrection_CheckLength+0x60>
 8005700:	f003 0309 	and.w	r3, r3, #9
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00e      	beq.n	8005730 <ErrorCorrection_CheckLength+0x74>
    case CRC_8:
    case CHECKSUM_8:
      *length = 8;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2208      	movs	r2, #8
 8005716:	801a      	strh	r2, [r3, #0]
      return true;
 8005718:	2301      	movs	r3, #1
 800571a:	e00a      	b.n	8005732 <ErrorCorrection_CheckLength+0x76>
    case CRC_16:
    case CHECKSUM_16:
      *length = 16;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2210      	movs	r2, #16
 8005720:	801a      	strh	r2, [r3, #0]
      return true;
 8005722:	2301      	movs	r3, #1
 8005724:	e005      	b.n	8005732 <ErrorCorrection_CheckLength+0x76>
    case CRC_32:
    case CHECKSUM_32:
      *length = 32;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	801a      	strh	r2, [r3, #0]
      return true;
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <ErrorCorrection_CheckLength+0x76>
    default:
      return false;
 8005730:	2300      	movs	r3, #0
  }
}
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	24000269 	.word	0x24000269

08005744 <ErrorCorrection_RegisterParams>:

bool ErrorCorrection_RegisterParams(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af04      	add	r7, sp, #16
  uint32_t min_u32 = MIN_ERROR_CORRECTION;
 800574a:	2300      	movs	r3, #0
 800574c:	607b      	str	r3, [r7, #4]
  uint32_t max_u32 = MAX_ERROR_CORRECTION;
 800574e:	2305      	movs	r3, #5
 8005750:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_ERROR_CORRECTION, "error correction method", PARAM_TYPE_UINT8,
 8005752:	463b      	mov	r3, r7
 8005754:	9302      	str	r3, [sp, #8]
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	2301      	movs	r3, #1
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	4b09      	ldr	r3, [pc, #36]	@ (8005784 <ErrorCorrection_RegisterParams+0x40>)
 8005760:	2200      	movs	r2, #0
 8005762:	4909      	ldr	r1, [pc, #36]	@ (8005788 <ErrorCorrection_RegisterParams+0x44>)
 8005764:	200f      	movs	r0, #15
 8005766:	f7fb fa5d 	bl	8000c24 <Param_Register>
 800576a:	4603      	mov	r3, r0
      &error_correction_method, sizeof(uint8_t), &min_u32, &max_u32) == false) {
 800576c:	f083 0301 	eor.w	r3, r3, #1
 8005770:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_ERROR_CORRECTION, "error correction method", PARAM_TYPE_UINT8,
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <ErrorCorrection_RegisterParams+0x36>
    return false;
 8005776:	2300      	movs	r3, #0
 8005778:	e000      	b.n	800577c <ErrorCorrection_RegisterParams+0x38>
  }

  return true;
 800577a:	2301      	movs	r3, #1
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	24000269 	.word	0x24000269
 8005788:	0802ac58 	.word	0x0802ac58

0800578c <calculateCrc8>:

/* Private function definitions ----------------------------------------------*/

bool calculateCrc8(BitMessage_t* bit_msg, uint8_t* crc)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  if (bit_msg == NULL || crc == NULL) {
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <calculateCrc8+0x16>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <calculateCrc8+0x1a>
    return false;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e089      	b.n	80058ba <calculateCrc8+0x12e>
  }

  uint8_t polynomial = 0x07;
 80057a6:	2307      	movs	r3, #7
 80057a8:	74bb      	strb	r3, [r7, #18]
  *crc = 0;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]

  uint16_t byte_count = (bit_msg->final_length - 8) / 8;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 80057b6:	3b08      	subs	r3, #8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da00      	bge.n	80057be <calculateCrc8+0x32>
 80057bc:	3307      	adds	r3, #7
 80057be:	10db      	asrs	r3, r3, #3
 80057c0:	823b      	strh	r3, [r7, #16]
  uint16_t remaining_bits = (bit_msg->final_length - 8) % 8;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 80057c8:	3b08      	subs	r3, #8
 80057ca:	425a      	negs	r2, r3
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	f002 0207 	and.w	r2, r2, #7
 80057d4:	bf58      	it	pl
 80057d6:	4253      	negpl	r3, r2
 80057d8:	81fb      	strh	r3, [r7, #14]

  for (uint16_t i = 0; i < byte_count; i++) {
 80057da:	2300      	movs	r3, #0
 80057dc:	82fb      	strh	r3, [r7, #22]
 80057de:	e02c      	b.n	800583a <calculateCrc8+0xae>
    *crc ^= bit_msg->data[i];
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781a      	ldrb	r2, [r3, #0]
 80057e4:	8afb      	ldrh	r3, [r7, #22]
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	5ccb      	ldrb	r3, [r1, r3]
 80057ea:	4053      	eors	r3, r2
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	701a      	strb	r2, [r3, #0]

    for (uint16_t j = 0; j < 8; j++) {
 80057f2:	2300      	movs	r3, #0
 80057f4:	82bb      	strh	r3, [r7, #20]
 80057f6:	e01a      	b.n	800582e <calculateCrc8+0xa2>
      if (*crc & 0x80) {
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b25b      	sxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	da0c      	bge.n	800581c <calculateCrc8+0x90>
        *crc = (*crc << 1) ^ polynomial;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	b25b      	sxtb	r3, r3
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	b25a      	sxtb	r2, r3
 800580c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005810:	4053      	eors	r3, r2
 8005812:	b25b      	sxtb	r3, r3
 8005814:	b2da      	uxtb	r2, r3
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	e005      	b.n	8005828 <calculateCrc8+0x9c>
      }
      else {
        *crc = *crc << 1;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	b2da      	uxtb	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	701a      	strb	r2, [r3, #0]
    for (uint16_t j = 0; j < 8; j++) {
 8005828:	8abb      	ldrh	r3, [r7, #20]
 800582a:	3301      	adds	r3, #1
 800582c:	82bb      	strh	r3, [r7, #20]
 800582e:	8abb      	ldrh	r3, [r7, #20]
 8005830:	2b07      	cmp	r3, #7
 8005832:	d9e1      	bls.n	80057f8 <calculateCrc8+0x6c>
  for (uint16_t i = 0; i < byte_count; i++) {
 8005834:	8afb      	ldrh	r3, [r7, #22]
 8005836:	3301      	adds	r3, #1
 8005838:	82fb      	strh	r3, [r7, #22]
 800583a:	8afa      	ldrh	r2, [r7, #22]
 800583c:	8a3b      	ldrh	r3, [r7, #16]
 800583e:	429a      	cmp	r2, r3
 8005840:	d3ce      	bcc.n	80057e0 <calculateCrc8+0x54>
      }
    }
  }

  if (remaining_bits > 0) {
 8005842:	89fb      	ldrh	r3, [r7, #14]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d037      	beq.n	80058b8 <calculateCrc8+0x12c>
    uint8_t last_byte = bit_msg->data[byte_count] & (0xFF << (8 - remaining_bits));
 8005848:	8a3b      	ldrh	r3, [r7, #16]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	5cd3      	ldrb	r3, [r2, r3]
 800584e:	b25a      	sxtb	r2, r3
 8005850:	89fb      	ldrh	r3, [r7, #14]
 8005852:	f1c3 0308 	rsb	r3, r3, #8
 8005856:	21ff      	movs	r1, #255	@ 0xff
 8005858:	fa01 f303 	lsl.w	r3, r1, r3
 800585c:	b25b      	sxtb	r3, r3
 800585e:	4013      	ands	r3, r2
 8005860:	b25b      	sxtb	r3, r3
 8005862:	737b      	strb	r3, [r7, #13]
    *crc ^= last_byte;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781a      	ldrb	r2, [r3, #0]
 8005868:	7b7b      	ldrb	r3, [r7, #13]
 800586a:	4053      	eors	r3, r2
 800586c:	b2da      	uxtb	r2, r3
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < remaining_bits; i++) {
 8005872:	2300      	movs	r3, #0
 8005874:	74fb      	strb	r3, [r7, #19]
 8005876:	e01a      	b.n	80058ae <calculateCrc8+0x122>
      if (*crc & 0x80) {
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b25b      	sxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	da0c      	bge.n	800589c <calculateCrc8+0x110>
        *crc = (*crc << 1) ^ polynomial;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	b25b      	sxtb	r3, r3
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	b25a      	sxtb	r2, r3
 800588c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005890:	4053      	eors	r3, r2
 8005892:	b25b      	sxtb	r3, r3
 8005894:	b2da      	uxtb	r2, r3
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e005      	b.n	80058a8 <calculateCrc8+0x11c>
      }
      else {
        *crc = *crc << 1;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < remaining_bits; i++) {
 80058a8:	7cfb      	ldrb	r3, [r7, #19]
 80058aa:	3301      	adds	r3, #1
 80058ac:	74fb      	strb	r3, [r7, #19]
 80058ae:	7cfb      	ldrb	r3, [r7, #19]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	89fa      	ldrh	r2, [r7, #14]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d8df      	bhi.n	8005878 <calculateCrc8+0xec>
      }
    }
  }
  return true;
 80058b8:	2301      	movs	r3, #1
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <calculateCrc16>:

bool calculateCrc16(BitMessage_t* bit_msg, uint16_t* crc)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b087      	sub	sp, #28
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  if (bit_msg == NULL || crc == NULL) {
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <calculateCrc16+0x16>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <calculateCrc16+0x1a>
    return false;
 80058dc:	2300      	movs	r3, #0
 80058de:	e094      	b.n	8005a0a <calculateCrc16+0x144>
  }

  uint16_t polynomial = 0x1021;
 80058e0:	f241 0321 	movw	r3, #4129	@ 0x1021
 80058e4:	823b      	strh	r3, [r7, #16]
  *crc = 0xFFFF;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058ec:	801a      	strh	r2, [r3, #0]

  uint16_t byte_count = (bit_msg->final_length - 16) / 8;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 80058f4:	3b10      	subs	r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	da00      	bge.n	80058fc <calculateCrc16+0x36>
 80058fa:	3307      	adds	r3, #7
 80058fc:	10db      	asrs	r3, r3, #3
 80058fe:	81fb      	strh	r3, [r7, #14]
  uint16_t remaining_bits = (bit_msg->final_length - 16) % 8;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005906:	3b10      	subs	r3, #16
 8005908:	425a      	negs	r2, r3
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	f002 0207 	and.w	r2, r2, #7
 8005912:	bf58      	it	pl
 8005914:	4253      	negpl	r3, r2
 8005916:	81bb      	strh	r3, [r7, #12]

  for (uint16_t i = 0; i < byte_count; i++) {
 8005918:	2300      	movs	r3, #0
 800591a:	82fb      	strh	r3, [r7, #22]
 800591c:	e031      	b.n	8005982 <calculateCrc16+0xbc>
    *crc ^= (uint16_t) bit_msg->data[i] << 8;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b21a      	sxth	r2, r3
 8005924:	8afb      	ldrh	r3, [r7, #22]
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	5ccb      	ldrb	r3, [r1, r3]
 800592a:	b21b      	sxth	r3, r3
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	b21b      	sxth	r3, r3
 8005930:	4053      	eors	r3, r2
 8005932:	b21b      	sxth	r3, r3
 8005934:	b29a      	uxth	r2, r3
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	801a      	strh	r2, [r3, #0]

    for (uint16_t j = 0; j < 8; j++) {
 800593a:	2300      	movs	r3, #0
 800593c:	82bb      	strh	r3, [r7, #20]
 800593e:	e01a      	b.n	8005976 <calculateCrc16+0xb0>
      if (*crc & 0x8000) {
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b21b      	sxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	da0c      	bge.n	8005964 <calculateCrc16+0x9e>
        *crc = (*crc << 1) ^ polynomial;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b21b      	sxth	r3, r3
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	b21a      	sxth	r2, r3
 8005954:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005958:	4053      	eors	r3, r2
 800595a:	b21b      	sxth	r3, r3
 800595c:	b29a      	uxth	r2, r3
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	801a      	strh	r2, [r3, #0]
 8005962:	e005      	b.n	8005970 <calculateCrc16+0xaa>
      }
      else {
        *crc = *crc << 1;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	801a      	strh	r2, [r3, #0]
    for (uint16_t j = 0; j < 8; j++) {
 8005970:	8abb      	ldrh	r3, [r7, #20]
 8005972:	3301      	adds	r3, #1
 8005974:	82bb      	strh	r3, [r7, #20]
 8005976:	8abb      	ldrh	r3, [r7, #20]
 8005978:	2b07      	cmp	r3, #7
 800597a:	d9e1      	bls.n	8005940 <calculateCrc16+0x7a>
  for (uint16_t i = 0; i < byte_count; i++) {
 800597c:	8afb      	ldrh	r3, [r7, #22]
 800597e:	3301      	adds	r3, #1
 8005980:	82fb      	strh	r3, [r7, #22]
 8005982:	8afa      	ldrh	r2, [r7, #22]
 8005984:	89fb      	ldrh	r3, [r7, #14]
 8005986:	429a      	cmp	r2, r3
 8005988:	d3c9      	bcc.n	800591e <calculateCrc16+0x58>
      }
    }
  }

  if (remaining_bits > 0) {
 800598a:	89bb      	ldrh	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d03b      	beq.n	8005a08 <calculateCrc16+0x142>
    uint8_t last_byte = bit_msg->data[byte_count] & (0xFF << (8 - remaining_bits));
 8005990:	89fb      	ldrh	r3, [r7, #14]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	5cd3      	ldrb	r3, [r2, r3]
 8005996:	b25a      	sxtb	r2, r3
 8005998:	89bb      	ldrh	r3, [r7, #12]
 800599a:	f1c3 0308 	rsb	r3, r3, #8
 800599e:	21ff      	movs	r1, #255	@ 0xff
 80059a0:	fa01 f303 	lsl.w	r3, r1, r3
 80059a4:	b25b      	sxtb	r3, r3
 80059a6:	4013      	ands	r3, r2
 80059a8:	b25b      	sxtb	r3, r3
 80059aa:	72fb      	strb	r3, [r7, #11]
    *crc ^= (uint16_t)last_byte << 8;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b21a      	sxth	r2, r3
 80059b2:	7afb      	ldrb	r3, [r7, #11]
 80059b4:	b21b      	sxth	r3, r3
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	b21b      	sxth	r3, r3
 80059ba:	4053      	eors	r3, r2
 80059bc:	b21b      	sxth	r3, r3
 80059be:	b29a      	uxth	r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	801a      	strh	r2, [r3, #0]

    for (uint16_t j = 0; j < remaining_bits; j++) {
 80059c4:	2300      	movs	r3, #0
 80059c6:	827b      	strh	r3, [r7, #18]
 80059c8:	e01a      	b.n	8005a00 <calculateCrc16+0x13a>
      if (*crc & 0x8000) {
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b21b      	sxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	da0c      	bge.n	80059ee <calculateCrc16+0x128>
        *crc = (*crc << 1) ^ polynomial;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b21b      	sxth	r3, r3
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	b21a      	sxth	r2, r3
 80059de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80059e2:	4053      	eors	r3, r2
 80059e4:	b21b      	sxth	r3, r3
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	e005      	b.n	80059fa <calculateCrc16+0x134>
      }
      else {
        *crc = *crc << 1;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	801a      	strh	r2, [r3, #0]
    for (uint16_t j = 0; j < remaining_bits; j++) {
 80059fa:	8a7b      	ldrh	r3, [r7, #18]
 80059fc:	3301      	adds	r3, #1
 80059fe:	827b      	strh	r3, [r7, #18]
 8005a00:	8a7a      	ldrh	r2, [r7, #18]
 8005a02:	89bb      	ldrh	r3, [r7, #12]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d3e0      	bcc.n	80059ca <calculateCrc16+0x104>
      }
    }
  }
  return true;
 8005a08:	2301      	movs	r3, #1
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <calculateCrc32>:

bool calculateCrc32(BitMessage_t* bit_msg, uint32_t* crc)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b089      	sub	sp, #36	@ 0x24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  if (bit_msg == NULL || crc == NULL) {
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <calculateCrc32+0x16>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <calculateCrc32+0x1a>
    return false;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e080      	b.n	8005b34 <calculateCrc32+0x11c>
  }

  uint32_t polynomial = 0x04C11DB7;
 8005a32:	4b43      	ldr	r3, [pc, #268]	@ (8005b40 <calculateCrc32+0x128>)
 8005a34:	617b      	str	r3, [r7, #20]
  *crc = 0xFFFFFFFF;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3c:	601a      	str	r2, [r3, #0]

  uint16_t byte_count = (bit_msg->final_length - 32) / 8;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005a44:	3b20      	subs	r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	da00      	bge.n	8005a4c <calculateCrc32+0x34>
 8005a4a:	3307      	adds	r3, #7
 8005a4c:	10db      	asrs	r3, r3, #3
 8005a4e:	827b      	strh	r3, [r7, #18]
  uint16_t remaining_bits = (bit_msg->final_length - 32) % 8;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005a56:	3b20      	subs	r3, #32
 8005a58:	425a      	negs	r2, r3
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	f002 0207 	and.w	r2, r2, #7
 8005a62:	bf58      	it	pl
 8005a64:	4253      	negpl	r3, r2
 8005a66:	823b      	strh	r3, [r7, #16]

  for (uint16_t i = 0; i < byte_count; i++) {
 8005a68:	2300      	movs	r3, #0
 8005a6a:	83fb      	strh	r3, [r7, #30]
 8005a6c:	e025      	b.n	8005aba <calculateCrc32+0xa2>
    *crc ^= (uint32_t) bit_msg->data[i] << 24;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	8bfb      	ldrh	r3, [r7, #30]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	061b      	lsls	r3, r3, #24
 8005a7a:	405a      	eors	r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	601a      	str	r2, [r3, #0]

    for (uint16_t j = 0; j < 8; j++) {
 8005a80:	2300      	movs	r3, #0
 8005a82:	83bb      	strh	r3, [r7, #28]
 8005a84:	e013      	b.n	8005aae <calculateCrc32+0x96>
      if (*crc & 0x80000000) {
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	da07      	bge.n	8005a9e <calculateCrc32+0x86>
        *crc = (*crc << 1) ^ polynomial;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	005a      	lsls	r2, r3, #1
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	405a      	eors	r2, r3
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e004      	b.n	8005aa8 <calculateCrc32+0x90>
      }
      else {
        *crc = *crc << 1;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	005a      	lsls	r2, r3, #1
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	601a      	str	r2, [r3, #0]
    for (uint16_t j = 0; j < 8; j++) {
 8005aa8:	8bbb      	ldrh	r3, [r7, #28]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	83bb      	strh	r3, [r7, #28]
 8005aae:	8bbb      	ldrh	r3, [r7, #28]
 8005ab0:	2b07      	cmp	r3, #7
 8005ab2:	d9e8      	bls.n	8005a86 <calculateCrc32+0x6e>
  for (uint16_t i = 0; i < byte_count; i++) {
 8005ab4:	8bfb      	ldrh	r3, [r7, #30]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	83fb      	strh	r3, [r7, #30]
 8005aba:	8bfa      	ldrh	r2, [r7, #30]
 8005abc:	8a7b      	ldrh	r3, [r7, #18]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d3d5      	bcc.n	8005a6e <calculateCrc32+0x56>
      }
    }
  }

  if (remaining_bits > 0) {
 8005ac2:	8a3b      	ldrh	r3, [r7, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d02f      	beq.n	8005b28 <calculateCrc32+0x110>
    uint8_t last_byte = bit_msg->data[byte_count] & (0xFF << (8 - remaining_bits));
 8005ac8:	8a7b      	ldrh	r3, [r7, #18]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	5cd3      	ldrb	r3, [r2, r3]
 8005ace:	b25a      	sxtb	r2, r3
 8005ad0:	8a3b      	ldrh	r3, [r7, #16]
 8005ad2:	f1c3 0308 	rsb	r3, r3, #8
 8005ad6:	21ff      	movs	r1, #255	@ 0xff
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	b25b      	sxtb	r3, r3
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	73fb      	strb	r3, [r7, #15]
    *crc ^= ((uint32_t)last_byte << 24);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	061b      	lsls	r3, r3, #24
 8005aec:	405a      	eors	r2, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	601a      	str	r2, [r3, #0]

    for (size_t j = 0; j < remaining_bits; j++) {
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e013      	b.n	8005b20 <calculateCrc32+0x108>
      if (*crc & 0x80000000) {
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da07      	bge.n	8005b10 <calculateCrc32+0xf8>
        *crc = (*crc << 1) ^ 0x04C11DB7;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	005a      	lsls	r2, r3, #1
 8005b06:	4b0e      	ldr	r3, [pc, #56]	@ (8005b40 <calculateCrc32+0x128>)
 8005b08:	4053      	eors	r3, r2
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	e004      	b.n	8005b1a <calculateCrc32+0x102>
      } else {
        *crc = *crc << 1;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	005a      	lsls	r2, r3, #1
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < remaining_bits; j++) {
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	8a3b      	ldrh	r3, [r7, #16]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d3e7      	bcc.n	8005af8 <calculateCrc32+0xe0>
      }
    }
  }
  *crc = ~*crc;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	43da      	mvns	r2, r3
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	601a      	str	r2, [r3, #0]
  return true;
 8005b32:	2301      	movs	r3, #1
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3724      	adds	r7, #36	@ 0x24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	04c11db7 	.word	0x04c11db7

08005b44 <calculateChecksum8>:

bool calculateChecksum8(BitMessage_t* bit_msg, uint8_t* checksum)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  if (bit_msg == NULL || checksum == NULL) {
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <calculateChecksum8+0x16>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <calculateChecksum8+0x1a>
    return false;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e03c      	b.n	8005bd8 <calculateChecksum8+0x94>
  }

  *checksum = 0;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2200      	movs	r2, #0
 8005b62:	701a      	strb	r2, [r3, #0]

  uint16_t chunk_count = (bit_msg->final_length - 8) / 8;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005b6a:	3b08      	subs	r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da00      	bge.n	8005b72 <calculateChecksum8+0x2e>
 8005b70:	3307      	adds	r3, #7
 8005b72:	10db      	asrs	r3, r3, #3
 8005b74:	81bb      	strh	r3, [r7, #12]
  uint16_t remaining_bits = (bit_msg->final_length - 8) % 8;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005b7c:	3b08      	subs	r3, #8
 8005b7e:	425a      	negs	r2, r3
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	f002 0207 	and.w	r2, r2, #7
 8005b88:	bf58      	it	pl
 8005b8a:	4253      	negpl	r3, r2
 8005b8c:	817b      	strh	r3, [r7, #10]

  for (uint16_t i = 0; i < chunk_count; i++) {
 8005b8e:	2300      	movs	r3, #0
 8005b90:	81fb      	strh	r3, [r7, #14]
 8005b92:	e00e      	b.n	8005bb2 <calculateChecksum8+0x6e>
    uint8_t chunk = *(((uint8_t*) bit_msg->data) + i);
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	89fb      	ldrh	r3, [r7, #14]
 8005b98:	4413      	add	r3, r2
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	723b      	strb	r3, [r7, #8]
    *checksum += chunk;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	7a3b      	ldrb	r3, [r7, #8]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	701a      	strb	r2, [r3, #0]
  for (uint16_t i = 0; i < chunk_count; i++) {
 8005bac:	89fb      	ldrh	r3, [r7, #14]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	81fb      	strh	r3, [r7, #14]
 8005bb2:	89fa      	ldrh	r2, [r7, #14]
 8005bb4:	89bb      	ldrh	r3, [r7, #12]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d3ec      	bcc.n	8005b94 <calculateChecksum8+0x50>
  }

  if (remaining_bits > 0) {
 8005bba:	897b      	ldrh	r3, [r7, #10]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <calculateChecksum8+0x92>
    uint8_t chunk = bit_msg->data[chunk_count];
 8005bc0:	89bb      	ldrh	r3, [r7, #12]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	5cd3      	ldrb	r3, [r2, r3]
 8005bc6:	727b      	strb	r3, [r7, #9]
    *checksum += chunk;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781a      	ldrb	r2, [r3, #0]
 8005bcc:	7a7b      	ldrb	r3, [r7, #9]
 8005bce:	4413      	add	r3, r2
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	701a      	strb	r2, [r3, #0]
  }
  return true;
 8005bd6:	2301      	movs	r3, #1
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <calculateChecksum16>:

bool calculateChecksum16(BitMessage_t* bit_msg, uint16_t* checksum)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  if (bit_msg == NULL || checksum == NULL) {
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <calculateChecksum16+0x16>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <calculateChecksum16+0x1a>
    return false;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e04b      	b.n	8005c96 <calculateChecksum16+0xb2>
  }

  *checksum = 0;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2200      	movs	r2, #0
 8005c02:	801a      	strh	r2, [r3, #0]

  uint16_t chunk_count = (bit_msg->final_length - 16) / 16;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005c0a:	3b10      	subs	r3, #16
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	da00      	bge.n	8005c12 <calculateChecksum16+0x2e>
 8005c10:	330f      	adds	r3, #15
 8005c12:	111b      	asrs	r3, r3, #4
 8005c14:	827b      	strh	r3, [r7, #18]
  uint16_t remaining_bits = (bit_msg->final_length - 16) % 16;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005c1c:	3b10      	subs	r3, #16
 8005c1e:	425a      	negs	r2, r3
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	f002 020f 	and.w	r2, r2, #15
 8005c28:	bf58      	it	pl
 8005c2a:	4253      	negpl	r3, r2
 8005c2c:	823b      	strh	r3, [r7, #16]

  for (uint16_t i = 0; i < chunk_count; i++) {
 8005c2e:	2300      	movs	r3, #0
 8005c30:	82fb      	strh	r3, [r7, #22]
 8005c32:	e00f      	b.n	8005c54 <calculateChecksum16+0x70>
    uint16_t chunk = *(((uint16_t*) bit_msg->data) + i);
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	8afb      	ldrh	r3, [r7, #22]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	4413      	add	r3, r2
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	81fb      	strh	r3, [r7, #14]
    *checksum += chunk;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	881a      	ldrh	r2, [r3, #0]
 8005c44:	89fb      	ldrh	r3, [r7, #14]
 8005c46:	4413      	add	r3, r2
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	801a      	strh	r2, [r3, #0]
  for (uint16_t i = 0; i < chunk_count; i++) {
 8005c4e:	8afb      	ldrh	r3, [r7, #22]
 8005c50:	3301      	adds	r3, #1
 8005c52:	82fb      	strh	r3, [r7, #22]
 8005c54:	8afa      	ldrh	r2, [r7, #22]
 8005c56:	8a7b      	ldrh	r3, [r7, #18]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d3eb      	bcc.n	8005c34 <calculateChecksum16+0x50>
  }

  if (remaining_bits > 0) {
 8005c5c:	8a3b      	ldrh	r3, [r7, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d018      	beq.n	8005c94 <calculateChecksum16+0xb0>
    uint16_t chunk = bit_msg->data[chunk_count * 2] << 8;
 8005c62:	8a7b      	ldrh	r3, [r7, #18]
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	5cd3      	ldrb	r3, [r2, r3]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	82bb      	strh	r3, [r7, #20]
    if (remaining_bits > 8) {
 8005c6e:	8a3b      	ldrh	r3, [r7, #16]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d908      	bls.n	8005c86 <calculateChecksum16+0xa2>
      chunk |= bit_msg->data[chunk_count * 2 + 1];
 8005c74:	8a7b      	ldrh	r3, [r7, #18]
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	3301      	adds	r3, #1
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	5cd3      	ldrb	r3, [r2, r3]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	8abb      	ldrh	r3, [r7, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	82bb      	strh	r3, [r7, #20]
    }
    *checksum += chunk;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	881a      	ldrh	r2, [r3, #0]
 8005c8a:	8abb      	ldrh	r3, [r7, #20]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	801a      	strh	r2, [r3, #0]
  }
  return true;
 8005c94:	2301      	movs	r3, #1
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <calculateChecksum32>:

bool calculateChecksum32(BitMessage_t* bit_msg, uint32_t* checksum)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b087      	sub	sp, #28
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
  if (bit_msg == NULL || checksum == NULL) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <calculateChecksum32+0x16>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <calculateChecksum32+0x1a>
    return false;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e061      	b.n	8005d80 <calculateChecksum32+0xde>
  }

  *checksum = 0;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]

  uint16_t chunk_count = (bit_msg->final_length - 32) / 32;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005cc8:	3b20      	subs	r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	da00      	bge.n	8005cd0 <calculateChecksum32+0x2e>
 8005cce:	331f      	adds	r3, #31
 8005cd0:	115b      	asrs	r3, r3, #5
 8005cd2:	81fb      	strh	r3, [r7, #14]
  uint16_t remaining_bits = (bit_msg->final_length - 32) % 32;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005cda:	3b20      	subs	r3, #32
 8005cdc:	425a      	negs	r2, r3
 8005cde:	f003 031f 	and.w	r3, r3, #31
 8005ce2:	f002 021f 	and.w	r2, r2, #31
 8005ce6:	bf58      	it	pl
 8005ce8:	4253      	negpl	r3, r2
 8005cea:	81bb      	strh	r3, [r7, #12]

  for (uint16_t i = 0; i < chunk_count; i++) {
 8005cec:	2300      	movs	r3, #0
 8005cee:	82fb      	strh	r3, [r7, #22]
 8005cf0:	e00e      	b.n	8005d10 <calculateChecksum32+0x6e>
    uint32_t chunk = *(((uint32_t*) bit_msg->data) + i);
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	8afb      	ldrh	r3, [r7, #22]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60bb      	str	r3, [r7, #8]
    *checksum += chunk;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	441a      	add	r2, r3
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	601a      	str	r2, [r3, #0]
  for (uint16_t i = 0; i < chunk_count; i++) {
 8005d0a:	8afb      	ldrh	r3, [r7, #22]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	82fb      	strh	r3, [r7, #22]
 8005d10:	8afa      	ldrh	r2, [r7, #22]
 8005d12:	89fb      	ldrh	r3, [r7, #14]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d3ec      	bcc.n	8005cf2 <calculateChecksum32+0x50>
  }

  if (remaining_bits > 0) {
 8005d18:	89bb      	ldrh	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02f      	beq.n	8005d7e <calculateChecksum32+0xdc>
    uint32_t chunk = bit_msg->data[chunk_count * 4] << 24;
 8005d1e:	89fb      	ldrh	r3, [r7, #14]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	5cd3      	ldrb	r3, [r2, r3]
 8005d26:	061b      	lsls	r3, r3, #24
 8005d28:	613b      	str	r3, [r7, #16]
    if (remaining_bits > 8) {
 8005d2a:	89bb      	ldrh	r3, [r7, #12]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d920      	bls.n	8005d72 <calculateChecksum32+0xd0>
      chunk |= bit_msg->data[chunk_count * 4 + 1] << 16;
 8005d30:	89fb      	ldrh	r3, [r7, #14]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	3301      	adds	r3, #1
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	5cd3      	ldrb	r3, [r2, r3]
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
      if (remaining_bits > 16) {
 8005d42:	89bb      	ldrh	r3, [r7, #12]
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d914      	bls.n	8005d72 <calculateChecksum32+0xd0>
        chunk |= bit_msg->data[chunk_count * 4 + 2] << 8;
 8005d48:	89fb      	ldrh	r3, [r7, #14]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	5cd3      	ldrb	r3, [r2, r3]
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
        if (remaining_bits > 24) {
 8005d5a:	89bb      	ldrh	r3, [r7, #12]
 8005d5c:	2b18      	cmp	r3, #24
 8005d5e:	d908      	bls.n	8005d72 <calculateChecksum32+0xd0>
          chunk |= bit_msg->data[chunk_count * 4 + 3];
 8005d60:	89fb      	ldrh	r3, [r7, #14]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	3303      	adds	r3, #3
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	5cd3      	ldrb	r3, [r2, r3]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
        }
      }
    }
    *checksum += chunk;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	441a      	add	r2, r3
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	601a      	str	r2, [r3, #0]
  }
  return true;
 8005d7e:	2301      	movs	r3, #1
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <checkCrc8>:



bool checkCrc8(BitMessage_t* bit_msg, bool* error)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  *error = true;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	701a      	strb	r2, [r3, #0]

  uint8_t theoretical_crc;
  if (calculateCrc8(bit_msg, &theoretical_crc) == false) {
 8005d9c:	f107 030f 	add.w	r3, r7, #15
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fcf2 	bl	800578c <calculateCrc8>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f083 0301 	eor.w	r3, r3, #1
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <checkCrc8+0x2c>
    return false;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e01f      	b.n	8005df8 <checkCrc8+0x6c>
  }
  uint8_t actual_crc;
  uint16_t start_position = bit_msg->final_length - 8;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005dbe:	3b08      	subs	r3, #8
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	81bb      	strh	r3, [r7, #12]
  if (Packet_Get8(bit_msg, &start_position, &actual_crc) == false) {
 8005dc4:	f107 020e 	add.w	r2, r7, #14
 8005dc8:	f107 030c 	add.w	r3, r7, #12
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f002 fa1b 	bl	800820a <Packet_Get8>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f083 0301 	eor.w	r3, r3, #1
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <checkCrc8+0x58>
    return false;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e009      	b.n	8005df8 <checkCrc8+0x6c>
  }

  *error = actual_crc == theoretical_crc;
 8005de4:	7bba      	ldrb	r2, [r7, #14]
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	bf0c      	ite	eq
 8005dec:	2301      	moveq	r3, #1
 8005dee:	2300      	movne	r3, #0
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	701a      	strb	r2, [r3, #0]
  return true;
 8005df6:	2301      	movs	r3, #1
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <checkCrc16>:

bool checkCrc16(BitMessage_t* bit_msg, bool* error)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  *error = true;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	701a      	strb	r2, [r3, #0]

  uint16_t theoretical_crc;
  if (calculateCrc16(bit_msg, &theoretical_crc) == false) {
 8005e10:	f107 030e 	add.w	r3, r7, #14
 8005e14:	4619      	mov	r1, r3
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff fd55 	bl	80058c6 <calculateCrc16>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f083 0301 	eor.w	r3, r3, #1
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <checkCrc16+0x2c>
    return false;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	e01f      	b.n	8005e6c <checkCrc16+0x6c>
  }
  uint16_t actual_crc;
  uint16_t start_position = bit_msg->final_length - 16;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005e32:	3b10      	subs	r3, #16
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	817b      	strh	r3, [r7, #10]
  if (Packet_Get16(bit_msg, &start_position, &actual_crc) == false) {
 8005e38:	f107 020c 	add.w	r2, r7, #12
 8005e3c:	f107 030a 	add.w	r3, r7, #10
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f002 f9f2 	bl	800822c <Packet_Get16>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f083 0301 	eor.w	r3, r3, #1
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <checkCrc16+0x58>
    return false;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e009      	b.n	8005e6c <checkCrc16+0x6c>
  }

  *error = actual_crc != theoretical_crc;
 8005e58:	89ba      	ldrh	r2, [r7, #12]
 8005e5a:	89fb      	ldrh	r3, [r7, #14]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	bf14      	ite	ne
 8005e60:	2301      	movne	r3, #1
 8005e62:	2300      	moveq	r3, #0
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	701a      	strb	r2, [r3, #0]
  return true;
 8005e6a:	2301      	movs	r3, #1
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <checkCrc32>:

bool checkCrc32(BitMessage_t* bit_msg, bool* error)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  *error = true;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]

  uint32_t theoretical_crc;
  if (calculateCrc32(bit_msg, &theoretical_crc) == false) {
 8005e84:	f107 0314 	add.w	r3, r7, #20
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fdc4 	bl	8005a18 <calculateCrc32>
 8005e90:	4603      	mov	r3, r0
 8005e92:	f083 0301 	eor.w	r3, r3, #1
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <checkCrc32+0x2c>
    return false;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e01f      	b.n	8005ee0 <checkCrc32+0x6c>
  }
  uint32_t actual_crc;
  uint16_t start_position = bit_msg->final_length - 32;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005ea6:	3b20      	subs	r3, #32
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	81fb      	strh	r3, [r7, #14]
  if (Packet_Get32(bit_msg, &start_position, &actual_crc) == false) {
 8005eac:	f107 0210 	add.w	r2, r7, #16
 8005eb0:	f107 030e 	add.w	r3, r7, #14
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f002 f9c9 	bl	800824e <Packet_Get32>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f083 0301 	eor.w	r3, r3, #1
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <checkCrc32+0x58>
    return false;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e009      	b.n	8005ee0 <checkCrc32+0x6c>
  }

  *error = actual_crc != theoretical_crc;
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	bf14      	ite	ne
 8005ed4:	2301      	movne	r3, #1
 8005ed6:	2300      	moveq	r3, #0
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	701a      	strb	r2, [r3, #0]
  return true;
 8005ede:	2301      	movs	r3, #1
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <checkChecksum8>:

bool checkChecksum8(BitMessage_t* bit_msg, bool* error)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  *error = true;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]

  uint8_t theoretical_checksum;
  if (calculateChecksum8(bit_msg, &theoretical_checksum) == false) {
 8005ef8:	f107 030f 	add.w	r3, r7, #15
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff fe20 	bl	8005b44 <calculateChecksum8>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f083 0301 	eor.w	r3, r3, #1
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <checkChecksum8+0x2c>
    return false;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e01f      	b.n	8005f54 <checkChecksum8+0x6c>
  }
  uint8_t actual_checksum;
  uint16_t start_position = bit_msg->final_length - 8;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005f1a:	3b08      	subs	r3, #8
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	81bb      	strh	r3, [r7, #12]
  if (Packet_Get8(bit_msg, &start_position, &actual_checksum) == false) {
 8005f20:	f107 020e 	add.w	r2, r7, #14
 8005f24:	f107 030c 	add.w	r3, r7, #12
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f002 f96d 	bl	800820a <Packet_Get8>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f083 0301 	eor.w	r3, r3, #1
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <checkChecksum8+0x58>
    return false;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e009      	b.n	8005f54 <checkChecksum8+0x6c>
  }

  *error = actual_checksum != theoretical_checksum;
 8005f40:	7bba      	ldrb	r2, [r7, #14]
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	bf14      	ite	ne
 8005f48:	2301      	movne	r3, #1
 8005f4a:	2300      	moveq	r3, #0
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	701a      	strb	r2, [r3, #0]
  return true;
 8005f52:	2301      	movs	r3, #1
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <checkChecksum16>:

bool checkChecksum16(BitMessage_t* bit_msg, bool* error)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  *error = true;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	701a      	strb	r2, [r3, #0]

  uint16_t theoretical_checksum;
  if (calculateChecksum16(bit_msg, &theoretical_checksum) == false) {
 8005f6c:	f107 030e 	add.w	r3, r7, #14
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff fe36 	bl	8005be4 <calculateChecksum16>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f083 0301 	eor.w	r3, r3, #1
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <checkChecksum16+0x2c>
    return false;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e01f      	b.n	8005fc8 <checkChecksum16+0x6c>
  }
  uint16_t actual_checksum;
  uint16_t start_position = bit_msg->final_length - 16;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005f8e:	3b10      	subs	r3, #16
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	817b      	strh	r3, [r7, #10]
  if (Packet_Get16(bit_msg, &start_position, &actual_checksum) == false) {
 8005f94:	f107 020c 	add.w	r2, r7, #12
 8005f98:	f107 030a 	add.w	r3, r7, #10
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f002 f944 	bl	800822c <Packet_Get16>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f083 0301 	eor.w	r3, r3, #1
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <checkChecksum16+0x58>
    return false;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e009      	b.n	8005fc8 <checkChecksum16+0x6c>
  }

  *error = actual_checksum != theoretical_checksum;
 8005fb4:	89ba      	ldrh	r2, [r7, #12]
 8005fb6:	89fb      	ldrh	r3, [r7, #14]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	701a      	strb	r2, [r3, #0]
  return true;
 8005fc6:	2301      	movs	r3, #1
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <checkChecksum32>:

bool checkChecksum32(BitMessage_t* bit_msg, bool* error)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  *error = true;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	701a      	strb	r2, [r3, #0]

  uint32_t theoretical_checksum;
  if (calculateChecksum32(bit_msg, &theoretical_checksum) == false) {
 8005fe0:	f107 0314 	add.w	r3, r7, #20
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff fe5b 	bl	8005ca2 <calculateChecksum32>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f083 0301 	eor.w	r3, r3, #1
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <checkChecksum32+0x2c>
    return false;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	e01f      	b.n	800603c <checkChecksum32+0x6c>
  }
  uint32_t actual_checksum;
  uint16_t start_position = bit_msg->final_length - 32;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8006002:	3b20      	subs	r3, #32
 8006004:	b29b      	uxth	r3, r3
 8006006:	81fb      	strh	r3, [r7, #14]
  if (Packet_Get32(bit_msg, &start_position, &actual_checksum) == false) {
 8006008:	f107 0210 	add.w	r2, r7, #16
 800600c:	f107 030e 	add.w	r3, r7, #14
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f002 f91b 	bl	800824e <Packet_Get32>
 8006018:	4603      	mov	r3, r0
 800601a:	f083 0301 	eor.w	r3, r3, #1
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <checkChecksum32+0x58>
    return false;
 8006024:	2300      	movs	r3, #0
 8006026:	e009      	b.n	800603c <checkChecksum32+0x6c>
  }

  *error = actual_checksum != theoretical_checksum;
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	429a      	cmp	r2, r3
 800602e:	bf14      	ite	ne
 8006030:	2301      	movne	r3, #1
 8006032:	2300      	moveq	r3, #0
 8006034:	b2da      	uxtb	r2, r3
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	701a      	strb	r2, [r3, #0]
  return true;
 800603a:	2301      	movs	r3, #1
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <Evaluate_Init>:
bool getEvaluationMessage(uint8_t** eval_message, uint8_t message_index);

/* Exported function definitions ---------------------------------------------*/

bool Evaluate_Init(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
  memset(msg1, MSG_1_SEQUENCE, EVAL_MESSAGE_MEMORY_BYTES);
 800604a:	220d      	movs	r2, #13
 800604c:	2155      	movs	r1, #85	@ 0x55
 800604e:	481d      	ldr	r0, [pc, #116]	@ (80060c4 <Evaluate_Init+0x80>)
 8006050:	f01f f9d7 	bl	8025402 <memset>
  memset(msg2, MSG_2_SEQUENCE, EVAL_MESSAGE_MEMORY_BYTES);
 8006054:	220d      	movs	r2, #13
 8006056:	21cc      	movs	r1, #204	@ 0xcc
 8006058:	481b      	ldr	r0, [pc, #108]	@ (80060c8 <Evaluate_Init+0x84>)
 800605a:	f01f f9d2 	bl	8025402 <memset>
  memset(msg3, MSG_3_SEQUENCE, EVAL_MESSAGE_MEMORY_BYTES);
 800605e:	220d      	movs	r2, #13
 8006060:	210f      	movs	r1, #15
 8006062:	481a      	ldr	r0, [pc, #104]	@ (80060cc <Evaluate_Init+0x88>)
 8006064:	f01f f9cd 	bl	8025402 <memset>
  /* Unpack multi-byte sequences to individual bytes for msg4 and msg5 */
  for (uint8_t i = 0; i < EVAL_MESSAGE_MEMORY_BYTES; i++) {
 8006068:	2300      	movs	r3, #0
 800606a:	71fb      	strb	r3, [r7, #7]
 800606c:	e00d      	b.n	800608a <Evaluate_Init+0x46>
    msg4[i] = (uint8_t) (MSG_4_SEQUENCE >> ((1 - (i % sizeof(uint16_t))) * 8));
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <Evaluate_Init+0x38>
 8006078:	2100      	movs	r1, #0
 800607a:	e000      	b.n	800607e <Evaluate_Init+0x3a>
 800607c:	21ff      	movs	r1, #255	@ 0xff
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	4a13      	ldr	r2, [pc, #76]	@ (80060d0 <Evaluate_Init+0x8c>)
 8006082:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < EVAL_MESSAGE_MEMORY_BYTES; i++) {
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	3301      	adds	r3, #1
 8006088:	71fb      	strb	r3, [r7, #7]
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	2b0c      	cmp	r3, #12
 800608e:	d9ee      	bls.n	800606e <Evaluate_Init+0x2a>
  }
  for (uint8_t i = 0; i < EVAL_MESSAGE_MEMORY_BYTES; i++) {
 8006090:	2300      	movs	r3, #0
 8006092:	71bb      	strb	r3, [r7, #6]
 8006094:	e00d      	b.n	80060b2 <Evaluate_Init+0x6e>
    msg5[i] = (uint8_t) (MSG_5_SEQUENCE >> ((3 - (i % sizeof(uint32_t))) * 8));
 8006096:	79bb      	ldrb	r3, [r7, #6]
 8006098:	43db      	mvns	r3, r3
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4a0c      	ldr	r2, [pc, #48]	@ (80060d4 <Evaluate_Init+0x90>)
 80060a2:	40da      	lsrs	r2, r3
 80060a4:	79bb      	ldrb	r3, [r7, #6]
 80060a6:	b2d1      	uxtb	r1, r2
 80060a8:	4a0b      	ldr	r2, [pc, #44]	@ (80060d8 <Evaluate_Init+0x94>)
 80060aa:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < EVAL_MESSAGE_MEMORY_BYTES; i++) {
 80060ac:	79bb      	ldrb	r3, [r7, #6]
 80060ae:	3301      	adds	r3, #1
 80060b0:	71bb      	strb	r3, [r7, #6]
 80060b2:	79bb      	ldrb	r3, [r7, #6]
 80060b4:	2b0c      	cmp	r3, #12
 80060b6:	d9ee      	bls.n	8006096 <Evaluate_Init+0x52>
  }

  return true;
 80060b8:	2301      	movs	r3, #1
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	24001c88 	.word	0x24001c88
 80060c8:	24001c98 	.word	0x24001c98
 80060cc:	24001ca8 	.word	0x24001ca8
 80060d0:	24001cb8 	.word	0x24001cb8
 80060d4:	399c7a73 	.word	0x399c7a73
 80060d8:	24001cc8 	.word	0x24001cc8

080060dc <Evaluate_GetBit>:

bool Evaluate_GetBit(uint8_t message_index, uint16_t bit_index, bool* bit)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	603a      	str	r2, [r7, #0]
 80060e6:	71fb      	strb	r3, [r7, #7]
 80060e8:	460b      	mov	r3, r1
 80060ea:	80bb      	strh	r3, [r7, #4]
  if (bit_index >= EVAL_MESSAGE_LENGTH) {
 80060ec:	88bb      	ldrh	r3, [r7, #4]
 80060ee:	2b63      	cmp	r3, #99	@ 0x63
 80060f0:	d901      	bls.n	80060f6 <Evaluate_GetBit+0x1a>
    return false;
 80060f2:	2300      	movs	r3, #0
 80060f4:	e02a      	b.n	800614c <Evaluate_GetBit+0x70>
  }

  uint16_t byte_index = bit_index / 8;
 80060f6:	88bb      	ldrh	r3, [r7, #4]
 80060f8:	08db      	lsrs	r3, r3, #3
 80060fa:	81fb      	strh	r3, [r7, #14]
  uint8_t bit_position = bit_index % 8;
 80060fc:	88bb      	ldrh	r3, [r7, #4]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	737b      	strb	r3, [r7, #13]

  uint8_t* eval_message;

  if (getEvaluationMessage(&eval_message, message_index) == false) {
 8006106:	79fa      	ldrb	r2, [r7, #7]
 8006108:	f107 0308 	add.w	r3, r7, #8
 800610c:	4611      	mov	r1, r2
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f8ca 	bl	80062a8 <getEvaluationMessage>
 8006114:	4603      	mov	r3, r0
 8006116:	f083 0301 	eor.w	r3, r3, #1
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <Evaluate_GetBit+0x48>
    return false;
 8006120:	2300      	movs	r3, #0
 8006122:	e013      	b.n	800614c <Evaluate_GetBit+0x70>
  }

  *bit = (eval_message[byte_index] & (1 << (7 - bit_position))) != 0;
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	89fb      	ldrh	r3, [r7, #14]
 8006128:	4413      	add	r3, r2
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	7b7b      	ldrb	r3, [r7, #13]
 8006130:	f1c3 0307 	rsb	r3, r3, #7
 8006134:	fa42 f303 	asr.w	r3, r2, r3
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf14      	ite	ne
 8006140:	2301      	movne	r3, #1
 8006142:	2300      	moveq	r3, #0
 8006144:	b2da      	uxtb	r2, r3
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	701a      	strb	r2, [r3, #0]

  return true;
 800614a:	2301      	movs	r3, #1
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <Evaluate_CalculateBitErrorRate>:

bool Evaluate_CalculateBitErrorRate(EvalMessageInfo_t* data, Message_t* msg, uint8_t message_index)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	71fb      	strb	r3, [r7, #7]
  uint16_t errors = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	82fb      	strh	r3, [r7, #22]

  for (uint16_t i = 0; i < EVAL_MESSAGE_LENGTH; i++) {
 8006166:	2300      	movs	r3, #0
 8006168:	82bb      	strh	r3, [r7, #20]
 800616a:	e027      	b.n	80061bc <Evaluate_CalculateBitErrorRate+0x68>
    bool truth_bit;
    bool calc_bit;
    if (Evaluate_GetBit(message_index, i, &truth_bit) == false) {
 800616c:	f107 0213 	add.w	r2, r7, #19
 8006170:	8ab9      	ldrh	r1, [r7, #20]
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff ffb1 	bl	80060dc <Evaluate_GetBit>
 800617a:	4603      	mov	r3, r0
 800617c:	f083 0301 	eor.w	r3, r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <Evaluate_CalculateBitErrorRate+0x36>
      return false;
 8006186:	2300      	movs	r3, #0
 8006188:	e028      	b.n	80061dc <Evaluate_CalculateBitErrorRate+0x88>
    }
    if (Evaluate_GetMessageBit(msg, i, &calc_bit) == false) {
 800618a:	f107 0212 	add.w	r2, r7, #18
 800618e:	8abb      	ldrh	r3, [r7, #20]
 8006190:	4619      	mov	r1, r3
 8006192:	68b8      	ldr	r0, [r7, #8]
 8006194:	f000 f828 	bl	80061e8 <Evaluate_GetMessageBit>
 8006198:	4603      	mov	r3, r0
 800619a:	f083 0301 	eor.w	r3, r3, #1
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <Evaluate_CalculateBitErrorRate+0x54>
      return false;
 80061a4:	2300      	movs	r3, #0
 80061a6:	e019      	b.n	80061dc <Evaluate_CalculateBitErrorRate+0x88>
    }
    if (truth_bit != calc_bit) {
 80061a8:	7cfa      	ldrb	r2, [r7, #19]
 80061aa:	7cbb      	ldrb	r3, [r7, #18]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d002      	beq.n	80061b6 <Evaluate_CalculateBitErrorRate+0x62>
      errors++;
 80061b0:	8afb      	ldrh	r3, [r7, #22]
 80061b2:	3301      	adds	r3, #1
 80061b4:	82fb      	strh	r3, [r7, #22]
  for (uint16_t i = 0; i < EVAL_MESSAGE_LENGTH; i++) {
 80061b6:	8abb      	ldrh	r3, [r7, #20]
 80061b8:	3301      	adds	r3, #1
 80061ba:	82bb      	strh	r3, [r7, #20]
 80061bc:	8abb      	ldrh	r3, [r7, #20]
 80061be:	2b63      	cmp	r3, #99	@ 0x63
 80061c0:	d9d4      	bls.n	800616c <Evaluate_CalculateBitErrorRate+0x18>
    }
  }
  data->bit_error_rate = (float) errors / (float) EVAL_MESSAGE_LENGTH;
 80061c2:	8afb      	ldrh	r3, [r7, #22]
 80061c4:	ee07 3a90 	vmov	s15, r3
 80061c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061cc:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80061e4 <Evaluate_CalculateBitErrorRate+0x90>
 80061d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	edc3 7a01 	vstr	s15, [r3, #4]
  return true;
 80061da:	2301      	movs	r3, #1
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	42c80000 	.word	0x42c80000

080061e8 <Evaluate_GetMessageBit>:


bool Evaluate_GetMessageBit(Message_t* msg, uint16_t bit_index, bool* bit)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	460b      	mov	r3, r1
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	817b      	strh	r3, [r7, #10]
  if (bit_index >= EVAL_MESSAGE_LENGTH) {
 80061f6:	897b      	ldrh	r3, [r7, #10]
 80061f8:	2b63      	cmp	r3, #99	@ 0x63
 80061fa:	d901      	bls.n	8006200 <Evaluate_GetMessageBit+0x18>
    return false;
 80061fc:	2300      	movs	r3, #0
 80061fe:	e01b      	b.n	8006238 <Evaluate_GetMessageBit+0x50>
  }

  uint16_t byte_index = bit_index / 8;
 8006200:	897b      	ldrh	r3, [r7, #10]
 8006202:	08db      	lsrs	r3, r3, #3
 8006204:	82fb      	strh	r3, [r7, #22]
  uint8_t bit_position = bit_index % 8;
 8006206:	897b      	ldrh	r3, [r7, #10]
 8006208:	b2db      	uxtb	r3, r3
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	757b      	strb	r3, [r7, #21]

  *bit = (msg->data[byte_index] & (1 << (7 - bit_position))) != 0;
 8006210:	8afb      	ldrh	r3, [r7, #22]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	461a      	mov	r2, r3
 800621a:	7d7b      	ldrb	r3, [r7, #21]
 800621c:	f1c3 0307 	rsb	r3, r3, #7
 8006220:	fa42 f303 	asr.w	r3, r2, r3
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	bf14      	ite	ne
 800622c:	2301      	movne	r3, #1
 800622e:	2300      	moveq	r3, #0
 8006230:	b2da      	uxtb	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	701a      	strb	r2, [r3, #0]

  return true;
 8006236:	2301      	movs	r3, #1
}
 8006238:	4618      	mov	r0, r3
 800623a:	371c      	adds	r7, #28
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <Evaluate_CopyEvaluationMessage>:

bool Evaluate_CopyEvaluationMessage(Message_t* msg)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint8_t message_index;
  if (Param_GetUint8(PARAM_EVAL_MESSAGE, &message_index) == false) {
 800624c:	f107 030f 	add.w	r3, r7, #15
 8006250:	4619      	mov	r1, r3
 8006252:	200c      	movs	r0, #12
 8006254:	f7fa fdb2 	bl	8000dbc <Param_GetUint8>
 8006258:	4603      	mov	r3, r0
 800625a:	f083 0301 	eor.w	r3, r3, #1
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <Evaluate_CopyEvaluationMessage+0x24>
    return false;
 8006264:	2300      	movs	r3, #0
 8006266:	e01a      	b.n	800629e <Evaluate_CopyEvaluationMessage+0x5a>
  }

  uint8_t* eval_message;

  if (getEvaluationMessage(&eval_message, message_index) == false) {
 8006268:	7bfa      	ldrb	r2, [r7, #15]
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	4611      	mov	r1, r2
 8006270:	4618      	mov	r0, r3
 8006272:	f000 f819 	bl	80062a8 <getEvaluationMessage>
 8006276:	4603      	mov	r3, r0
 8006278:	f083 0301 	eor.w	r3, r3, #1
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <Evaluate_CopyEvaluationMessage+0x42>
    return false;
 8006282:	2300      	movs	r3, #0
 8006284:	e00b      	b.n	800629e <Evaluate_CopyEvaluationMessage+0x5a>
  }

  memcpy(msg->data, eval_message, EVAL_MESSAGE_MEMORY_BYTES);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3301      	adds	r3, #1
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	220d      	movs	r2, #13
 800628e:	4618      	mov	r0, r3
 8006290:	f01f f9a7 	bl	80255e2 <memcpy>

  msg->length_bits = EVAL_MESSAGE_LENGTH;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2264      	movs	r2, #100	@ 0x64
 8006298:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82

  return true;
 800629c:	2301      	movs	r3, #1
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <getEvaluationMessage>:

/* Private function definitions ----------------------------------------------*/

bool getEvaluationMessage(uint8_t** eval_message, uint8_t message_index)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  switch (message_index) {
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d821      	bhi.n	8006300 <getEvaluationMessage+0x58>
 80062bc:	a201      	add	r2, pc, #4	@ (adr r2, 80062c4 <getEvaluationMessage+0x1c>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080062d9 	.word	0x080062d9
 80062c8:	080062e1 	.word	0x080062e1
 80062cc:	080062e9 	.word	0x080062e9
 80062d0:	080062f1 	.word	0x080062f1
 80062d4:	080062f9 	.word	0x080062f9
    case 1:
      *eval_message = msg1;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a0e      	ldr	r2, [pc, #56]	@ (8006314 <getEvaluationMessage+0x6c>)
 80062dc:	601a      	str	r2, [r3, #0]
      break;
 80062de:	e011      	b.n	8006304 <getEvaluationMessage+0x5c>
    case 2:
      *eval_message = msg2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006318 <getEvaluationMessage+0x70>)
 80062e4:	601a      	str	r2, [r3, #0]
      break;
 80062e6:	e00d      	b.n	8006304 <getEvaluationMessage+0x5c>
    case 3:
      *eval_message = msg3;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a0c      	ldr	r2, [pc, #48]	@ (800631c <getEvaluationMessage+0x74>)
 80062ec:	601a      	str	r2, [r3, #0]
      break;
 80062ee:	e009      	b.n	8006304 <getEvaluationMessage+0x5c>
    case 4:
      *eval_message = msg4;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a0b      	ldr	r2, [pc, #44]	@ (8006320 <getEvaluationMessage+0x78>)
 80062f4:	601a      	str	r2, [r3, #0]
      break;
 80062f6:	e005      	b.n	8006304 <getEvaluationMessage+0x5c>
    case 5:
      *eval_message = msg5;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006324 <getEvaluationMessage+0x7c>)
 80062fc:	601a      	str	r2, [r3, #0]
      break;
 80062fe:	e001      	b.n	8006304 <getEvaluationMessage+0x5c>
    default:
      return false;
 8006300:	2300      	movs	r3, #0
 8006302:	e000      	b.n	8006306 <getEvaluationMessage+0x5e>
  }
  return true;
 8006304:	2301      	movs	r3, #1
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	24001c88 	.word	0x24001c88
 8006318:	24001c98 	.word	0x24001c98
 800631c:	24001ca8 	.word	0x24001ca8
 8006320:	24001cb8 	.word	0x24001cb8
 8006324:	24001cc8 	.word	0x24001cc8

08006328 <Feedback_Init>:


/* Exported function definitions ---------------------------------------------*/

bool Feedback_Init()
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  feedback_buffer_start_index = 0;
 800632c:	4b09      	ldr	r3, [pc, #36]	@ (8006354 <Feedback_Init+0x2c>)
 800632e:	2200      	movs	r2, #0
 8006330:	801a      	strh	r2, [r3, #0]
  feedback_buffer_end_index = 0;
 8006332:	4b09      	ldr	r3, [pc, #36]	@ (8006358 <Feedback_Init+0x30>)
 8006334:	2200      	movs	r2, #0
 8006336:	801a      	strh	r2, [r3, #0]
  if (ADC_RegisterFeedbackBuffer(feedback_buffer) == false) return false;
 8006338:	4808      	ldr	r0, [pc, #32]	@ (800635c <Feedback_Init+0x34>)
 800633a:	f7fe fc91 	bl	8004c60 <ADC_RegisterFeedbackBuffer>
 800633e:	4603      	mov	r3, r0
 8006340:	f083 0301 	eor.w	r3, r3, #1
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <Feedback_Init+0x26>
 800634a:	2300      	movs	r3, #0
 800634c:	e000      	b.n	8006350 <Feedback_Init+0x28>

  return true;
 800634e:	2301      	movs	r3, #1
}
 8006350:	4618      	mov	r0, r3
 8006352:	bd80      	pop	{r7, pc}
 8006354:	24009cd8 	.word	0x24009cd8
 8006358:	24009cda 	.word	0x24009cda
 800635c:	24001cd8 	.word	0x24001cd8

08006360 <Feedback_IncrementEndIndex>:

void Feedback_IncrementEndIndex()
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  feedback_buffer_end_index = (feedback_buffer_end_index + ADC_BUFFER_SIZE / 2) % PROCESSING_BUFFER_SIZE;
 8006364:	4b09      	ldr	r3, [pc, #36]	@ (800638c <Feedback_IncrementEndIndex+0x2c>)
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800636e:	425a      	negs	r2, r3
 8006370:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006374:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8006378:	bf58      	it	pl
 800637a:	4253      	negpl	r3, r2
 800637c:	b29a      	uxth	r2, r3
 800637e:	4b03      	ldr	r3, [pc, #12]	@ (800638c <Feedback_IncrementEndIndex+0x2c>)
 8006380:	801a      	strh	r2, [r3, #0]
}
 8006382:	bf00      	nop
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	24009cda 	.word	0x24009cda

08006390 <Input_Init>:
static uint16_t findStartPosition(const uint16_t analysis_index, const uint16_t check_length);

/* Exported function definitions ---------------------------------------------*/

bool Input_Init()
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
  buffer_start_index = 0;
 8006396:	4b1e      	ldr	r3, [pc, #120]	@ (8006410 <Input_Init+0x80>)
 8006398:	2200      	movs	r2, #0
 800639a:	801a      	strh	r2, [r3, #0]
  buffer_end_index = 0;
 800639c:	4b1d      	ldr	r3, [pc, #116]	@ (8006414 <Input_Init+0x84>)
 800639e:	2200      	movs	r2, #0
 80063a0:	801a      	strh	r2, [r3, #0]
  bit_index = 0;
 80063a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006418 <Input_Init+0x88>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	801a      	strh	r2, [r3, #0]
  for (uint8_t i = 0; i < MAX_ANALYSIS_BUFFER_SIZE; i++) {
 80063a8:	2300      	movs	r3, #0
 80063aa:	71fb      	strb	r3, [r7, #7]
 80063ac:	e009      	b.n	80063c2 <Input_Init+0x32>
    analysis_blocks[i].analysis_done = true;
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	4a1a      	ldr	r2, [pc, #104]	@ (800641c <Input_Init+0x8c>)
 80063b2:	015b      	lsls	r3, r3, #5
 80063b4:	4413      	add	r3, r2
 80063b6:	330d      	adds	r3, #13
 80063b8:	2201      	movs	r2, #1
 80063ba:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < MAX_ANALYSIS_BUFFER_SIZE; i++) {
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	3301      	adds	r3, #1
 80063c0:	71fb      	strb	r3, [r7, #7]
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	2b1f      	cmp	r3, #31
 80063c6:	d9f2      	bls.n	80063ae <Input_Init+0x1e>
  }
  if (ADC_RegisterInputBuffer(input_buffer) == false) return false;
 80063c8:	4815      	ldr	r0, [pc, #84]	@ (8006420 <Input_Init+0x90>)
 80063ca:	f7fe fc33 	bl	8004c34 <ADC_RegisterInputBuffer>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f083 0301 	eor.w	r3, r3, #1
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <Input_Init+0x4e>
 80063da:	2300      	movs	r3, #0
 80063dc:	e014      	b.n	8006408 <Input_Init+0x78>

  memset(input_buffer, 0, PROCESSING_BUFFER_SIZE * sizeof(uint16_t));
 80063de:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80063e2:	2100      	movs	r1, #0
 80063e4:	480e      	ldr	r0, [pc, #56]	@ (8006420 <Input_Init+0x90>)
 80063e6:	f01f f80c 	bl	8025402 <memset>

  fft_handle.fftLenRFFT = FFT_SIZE;
 80063ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006424 <Input_Init+0x94>)
 80063ec:	2240      	movs	r2, #64	@ 0x40
 80063ee:	821a      	strh	r2, [r3, #16]

  arm_status ret = arm_rfft_64_fast_init_f32(&fft_handle);
 80063f0:	480c      	ldr	r0, [pc, #48]	@ (8006424 <Input_Init+0x94>)
 80063f2:	f01c ffeb 	bl	80233cc <arm_rfft_64_fast_init_f32>
 80063f6:	4603      	mov	r3, r0
 80063f8:	71bb      	strb	r3, [r7, #6]

  return ret == ARM_MATH_SUCCESS;
 80063fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bf0c      	ite	eq
 8006402:	2301      	moveq	r3, #1
 8006404:	2300      	movne	r3, #0
 8006406:	b2db      	uxtb	r3, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	240120dc 	.word	0x240120dc
 8006414:	240120de 	.word	0x240120de
 8006418:	240120e6 	.word	0x240120e6
 800641c:	24009cdc 	.word	0x24009cdc
 8006420:	2400a0dc 	.word	0x2400a0dc
 8006424:	24015b6c 	.word	0x24015b6c

08006428 <Input_IncrementEndIndex>:

//TODO: add check for overflowing buffer
void Input_IncrementEndIndex()
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  buffer_end_index = (buffer_end_index + ADC_BUFFER_SIZE / 2) % PROCESSING_BUFFER_SIZE;
 800642c:	4b09      	ldr	r3, [pc, #36]	@ (8006454 <Input_IncrementEndIndex+0x2c>)
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006436:	425a      	negs	r2, r3
 8006438:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800643c:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8006440:	bf58      	it	pl
 8006442:	4253      	negpl	r3, r2
 8006444:	b29a      	uxth	r2, r3
 8006446:	4b03      	ldr	r3, [pc, #12]	@ (8006454 <Input_IncrementEndIndex+0x2c>)
 8006448:	801a      	strh	r2, [r3, #0]
}
 800644a:	bf00      	nop
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	240120de 	.word	0x240120de

08006458 <Input_DetectMessageStart>:

bool Input_DetectMessageStart()
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  switch (message_start_function) {
 800645c:	4b09      	ldr	r3, [pc, #36]	@ (8006484 <Input_DetectMessageStart+0x2c>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <Input_DetectMessageStart+0x12>
 8006464:	2b01      	cmp	r3, #1
 8006466:	d004      	beq.n	8006472 <Input_DetectMessageStart+0x1a>
 8006468:	e007      	b.n	800647a <Input_DetectMessageStart+0x22>
    case MSG_START_AMPLITUDE:
      return messageStartWithThreshold();
 800646a:	f000 fb1b 	bl	8006aa4 <messageStartWithThreshold>
 800646e:	4603      	mov	r3, r0
 8006470:	e006      	b.n	8006480 <Input_DetectMessageStart+0x28>
      break;
    case MSG_START_FREQUENCY:
      return messageStartWithFrequency();
 8006472:	f000 fb57 	bl	8006b24 <messageStartWithFrequency>
 8006476:	4603      	mov	r3, r0
 8006478:	e002      	b.n	8006480 <Input_DetectMessageStart+0x28>
      break;
    default:
      return messageStartWithFrequency();
 800647a:	f000 fb53 	bl	8006b24 <messageStartWithFrequency>
 800647e:	4603      	mov	r3, r0
  }
}
 8006480:	4618      	mov	r0, r3
 8006482:	bd80      	pop	{r7, pc}
 8006484:	2400026a 	.word	0x2400026a

08006488 <Input_SegmentBlocks>:

// Segments blocks and adds them to array of blocks to be processed
bool Input_SegmentBlocks()
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
  uint32_t analysis_buffer_length = ADC_SAMPLING_RATE / baud_rate;
 800648e:	4b40      	ldr	r3, [pc, #256]	@ (8006590 <Input_SegmentBlocks+0x108>)
 8006490:	ed93 7a00 	vldr	s14, [r3]
 8006494:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8006594 <Input_SegmentBlocks+0x10c>
 8006498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800649c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a0:	ee17 3a90 	vmov	r3, s15
 80064a4:	607b      	str	r3, [r7, #4]
  while (getBufferLength() >= analysis_buffer_length) {
 80064a6:	e066      	b.n	8006576 <Input_SegmentBlocks+0xee>

    analysis_count1++;
 80064a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006598 <Input_SegmentBlocks+0x110>)
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3301      	adds	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	4b39      	ldr	r3, [pc, #228]	@ (8006598 <Input_SegmentBlocks+0x110>)
 80064b4:	801a      	strh	r2, [r3, #0]

    uint16_t analysis_index = (analysis_start_index + analysis_length) % MAX_ANALYSIS_BUFFER_SIZE;
 80064b6:	4b39      	ldr	r3, [pc, #228]	@ (800659c <Input_SegmentBlocks+0x114>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	4b38      	ldr	r3, [pc, #224]	@ (80065a0 <Input_SegmentBlocks+0x118>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	4413      	add	r3, r2
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	807b      	strh	r3, [r7, #2]
    analysis_blocks[analysis_index].data_buf = input_buffer;
 80064cc:	887b      	ldrh	r3, [r7, #2]
 80064ce:	4a35      	ldr	r2, [pc, #212]	@ (80065a4 <Input_SegmentBlocks+0x11c>)
 80064d0:	015b      	lsls	r3, r3, #5
 80064d2:	4413      	add	r3, r2
 80064d4:	4a34      	ldr	r2, [pc, #208]	@ (80065a8 <Input_SegmentBlocks+0x120>)
 80064d6:	601a      	str	r2, [r3, #0]
    analysis_blocks[analysis_index].buf_len = PROCESSING_BUFFER_SIZE;
 80064d8:	887b      	ldrh	r3, [r7, #2]
 80064da:	4a32      	ldr	r2, [pc, #200]	@ (80065a4 <Input_SegmentBlocks+0x11c>)
 80064dc:	015b      	lsls	r3, r3, #5
 80064de:	4413      	add	r3, r2
 80064e0:	3304      	adds	r3, #4
 80064e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80064e6:	801a      	strh	r2, [r3, #0]
    analysis_blocks[analysis_index].data_len = analysis_buffer_length;
 80064e8:	887b      	ldrh	r3, [r7, #2]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	b291      	uxth	r1, r2
 80064ee:	4a2d      	ldr	r2, [pc, #180]	@ (80065a4 <Input_SegmentBlocks+0x11c>)
 80064f0:	015b      	lsls	r3, r3, #5
 80064f2:	4413      	add	r3, r2
 80064f4:	3306      	adds	r3, #6
 80064f6:	460a      	mov	r2, r1
 80064f8:	801a      	strh	r2, [r3, #0]
    analysis_blocks[analysis_index].data_start_index = buffer_start_index;
 80064fa:	887b      	ldrh	r3, [r7, #2]
 80064fc:	4a2b      	ldr	r2, [pc, #172]	@ (80065ac <Input_SegmentBlocks+0x124>)
 80064fe:	8812      	ldrh	r2, [r2, #0]
 8006500:	b291      	uxth	r1, r2
 8006502:	4a28      	ldr	r2, [pc, #160]	@ (80065a4 <Input_SegmentBlocks+0x11c>)
 8006504:	015b      	lsls	r3, r3, #5
 8006506:	4413      	add	r3, r2
 8006508:	3308      	adds	r3, #8
 800650a:	460a      	mov	r2, r1
 800650c:	801a      	strh	r2, [r3, #0]
    analysis_blocks[analysis_index].bit_index = bit_index++;
 800650e:	4b28      	ldr	r3, [pc, #160]	@ (80065b0 <Input_SegmentBlocks+0x128>)
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	b291      	uxth	r1, r2
 8006516:	4a26      	ldr	r2, [pc, #152]	@ (80065b0 <Input_SegmentBlocks+0x128>)
 8006518:	8011      	strh	r1, [r2, #0]
 800651a:	887a      	ldrh	r2, [r7, #2]
 800651c:	4921      	ldr	r1, [pc, #132]	@ (80065a4 <Input_SegmentBlocks+0x11c>)
 800651e:	0152      	lsls	r2, r2, #5
 8006520:	440a      	add	r2, r1
 8006522:	320a      	adds	r2, #10
 8006524:	8013      	strh	r3, [r2, #0]
    analysis_blocks[analysis_index].decoded_bit = false;
 8006526:	887b      	ldrh	r3, [r7, #2]
 8006528:	4a1e      	ldr	r2, [pc, #120]	@ (80065a4 <Input_SegmentBlocks+0x11c>)
 800652a:	015b      	lsls	r3, r3, #5
 800652c:	4413      	add	r3, r2
 800652e:	330c      	adds	r3, #12
 8006530:	2200      	movs	r2, #0
 8006532:	701a      	strb	r2, [r3, #0]
    analysis_blocks[analysis_index].analysis_done = false;
 8006534:	887b      	ldrh	r3, [r7, #2]
 8006536:	4a1b      	ldr	r2, [pc, #108]	@ (80065a4 <Input_SegmentBlocks+0x11c>)
 8006538:	015b      	lsls	r3, r3, #5
 800653a:	4413      	add	r3, r2
 800653c:	330d      	adds	r3, #13
 800653e:	2200      	movs	r2, #0
 8006540:	701a      	strb	r2, [r3, #0]

    analysis_length++;
 8006542:	4b17      	ldr	r3, [pc, #92]	@ (80065a0 <Input_SegmentBlocks+0x118>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	3301      	adds	r3, #1
 800654a:	b2da      	uxtb	r2, r3
 800654c:	4b14      	ldr	r3, [pc, #80]	@ (80065a0 <Input_SegmentBlocks+0x118>)
 800654e:	701a      	strb	r2, [r3, #0]

    if (analysis_length >= MAX_ANALYSIS_BUFFER_SIZE) {
 8006550:	4b13      	ldr	r3, [pc, #76]	@ (80065a0 <Input_SegmentBlocks+0x118>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b1f      	cmp	r3, #31
 8006558:	d901      	bls.n	800655e <Input_SegmentBlocks+0xd6>
      return false; // overflow of analysis buffers
 800655a:	2300      	movs	r3, #0
 800655c:	e013      	b.n	8006586 <Input_SegmentBlocks+0xfe>
    }

    buffer_start_index = (buffer_start_index + analysis_buffer_length) % PROCESSING_BUFFER_SIZE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	b29a      	uxth	r2, r3
 8006562:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <Input_SegmentBlocks+0x124>)
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b29b      	uxth	r3, r3
 8006568:	4413      	add	r3, r2
 800656a:	b29b      	uxth	r3, r3
 800656c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006570:	b29a      	uxth	r2, r3
 8006572:	4b0e      	ldr	r3, [pc, #56]	@ (80065ac <Input_SegmentBlocks+0x124>)
 8006574:	801a      	strh	r2, [r3, #0]
  while (getBufferLength() >= analysis_buffer_length) {
 8006576:	f000 fa6b 	bl	8006a50 <getBufferLength>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4293      	cmp	r3, r2
 8006582:	d991      	bls.n	80064a8 <Input_SegmentBlocks+0x20>
  }
  return true;
 8006584:	2301      	movs	r3, #1
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	2400026c 	.word	0x2400026c
 8006594:	47ea6000 	.word	0x47ea6000
 8006598:	240120e0 	.word	0x240120e0
 800659c:	240120e4 	.word	0x240120e4
 80065a0:	240120e5 	.word	0x240120e5
 80065a4:	24009cdc 	.word	0x24009cdc
 80065a8:	2400a0dc 	.word	0x2400a0dc
 80065ac:	240120dc 	.word	0x240120dc
 80065b0:	240120e6 	.word	0x240120e6

080065b4 <Input_ProcessBlocks>:
// looks for an analysis block that have not been analyzed
// TODO: Address possibility for overflow in eval_info
// The eval_info arrays need bounds checking against bit_msg->bit_count
// to prevent buffer overrun when processing long messages
bool Input_ProcessBlocks(BitMessage_t* bit_msg, EvalMessageInfo_t* eval_info)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  if (bit_msg == NULL || eval_info == NULL) {
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <Input_ProcessBlocks+0x16>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <Input_ProcessBlocks+0x1a>
    return false;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e0a1      	b.n	8006712 <Input_ProcessBlocks+0x15e>
  }
  if (bit_msg->fully_received == true) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8095 	beq.w	8006704 <Input_ProcessBlocks+0x150>
    return true;
 80065da:	2301      	movs	r3, #1
 80065dc:	e099      	b.n	8006712 <Input_ProcessBlocks+0x15e>
  }

  while (analysis_length != 0) {
    analysis_count2++;
 80065de:	4b4f      	ldr	r3, [pc, #316]	@ (800671c <Input_ProcessBlocks+0x168>)
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3301      	adds	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	4b4c      	ldr	r3, [pc, #304]	@ (800671c <Input_ProcessBlocks+0x168>)
 80065ea:	801a      	strh	r2, [r3, #0]
    if (Demodulate_Perform(&analysis_blocks[analysis_start_index]) == false) {
 80065ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006720 <Input_ProcessBlocks+0x16c>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	015b      	lsls	r3, r3, #5
 80065f4:	4a4b      	ldr	r2, [pc, #300]	@ (8006724 <Input_ProcessBlocks+0x170>)
 80065f6:	4413      	add	r3, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe fd05 	bl	8005008 <Demodulate_Perform>
 80065fe:	4603      	mov	r3, r0
 8006600:	f083 0301 	eor.w	r3, r3, #1
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <Input_ProcessBlocks+0x5a>
      return false;
 800660a:	2300      	movs	r3, #0
 800660c:	e081      	b.n	8006712 <Input_ProcessBlocks+0x15e>
    }
    if (Packet_AddBit(bit_msg, analysis_blocks[analysis_start_index].decoded_bit) == false) {
 800660e:	4b44      	ldr	r3, [pc, #272]	@ (8006720 <Input_ProcessBlocks+0x16c>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	4a43      	ldr	r2, [pc, #268]	@ (8006724 <Input_ProcessBlocks+0x170>)
 8006616:	015b      	lsls	r3, r3, #5
 8006618:	4413      	add	r3, r2
 800661a:	330c      	adds	r3, #12
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fce7 	bl	8007ff4 <Packet_AddBit>
 8006626:	4603      	mov	r3, r0
 8006628:	f083 0301 	eor.w	r3, r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <Input_ProcessBlocks+0x82>
      return false;
 8006632:	2300      	movs	r3, #0
 8006634:	e06d      	b.n	8006712 <Input_ProcessBlocks+0x15e>
    }
    eval_info->energy_f0[bit_msg->bit_count - 1] = analysis_blocks[analysis_start_index].energy_f0;
 8006636:	4b3a      	ldr	r3, [pc, #232]	@ (8006720 <Input_ProcessBlocks+0x16c>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	b2db      	uxtb	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8006644:	3b01      	subs	r3, #1
 8006646:	4937      	ldr	r1, [pc, #220]	@ (8006724 <Input_ProcessBlocks+0x170>)
 8006648:	0152      	lsls	r2, r2, #5
 800664a:	440a      	add	r2, r1
 800664c:	3218      	adds	r2, #24
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	3302      	adds	r3, #2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	3304      	adds	r3, #4
 800665a:	601a      	str	r2, [r3, #0]
    eval_info->energy_f1[bit_msg->bit_count - 1] = analysis_blocks[analysis_start_index].energy_f1;
 800665c:	4b30      	ldr	r3, [pc, #192]	@ (8006720 <Input_ProcessBlocks+0x16c>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800666a:	3b01      	subs	r3, #1
 800666c:	492d      	ldr	r1, [pc, #180]	@ (8006724 <Input_ProcessBlocks+0x170>)
 800666e:	0152      	lsls	r2, r2, #5
 8006670:	440a      	add	r2, r1
 8006672:	321c      	adds	r2, #28
 8006674:	6812      	ldr	r2, [r2, #0]
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	3366      	adds	r3, #102	@ 0x66
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	440b      	add	r3, r1
 800667e:	3304      	adds	r3, #4
 8006680:	601a      	str	r2, [r3, #0]
    eval_info->f0[bit_msg->bit_count - 1] = analysis_blocks[analysis_start_index].f0;
 8006682:	4b27      	ldr	r3, [pc, #156]	@ (8006720 <Input_ProcessBlocks+0x16c>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8006690:	3b01      	subs	r3, #1
 8006692:	4924      	ldr	r1, [pc, #144]	@ (8006724 <Input_ProcessBlocks+0x170>)
 8006694:	0152      	lsls	r2, r2, #5
 8006696:	440a      	add	r2, r1
 8006698:	3210      	adds	r2, #16
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	33ca      	adds	r3, #202	@ 0xca
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	605a      	str	r2, [r3, #4]
    eval_info->f1[bit_msg->bit_count - 1] = analysis_blocks[analysis_start_index].f1;
 80066a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006720 <Input_ProcessBlocks+0x16c>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80066b4:	3b01      	subs	r3, #1
 80066b6:	491b      	ldr	r1, [pc, #108]	@ (8006724 <Input_ProcessBlocks+0x170>)
 80066b8:	0152      	lsls	r2, r2, #5
 80066ba:	440a      	add	r2, r1
 80066bc:	3214      	adds	r2, #20
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	f503 7397 	add.w	r3, r3, #302	@ 0x12e
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	605a      	str	r2, [r3, #4]

    analysis_start_index = (analysis_start_index + 1) % MAX_ANALYSIS_BUFFER_SIZE;
 80066cc:	4b14      	ldr	r3, [pc, #80]	@ (8006720 <Input_ProcessBlocks+0x16c>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	3301      	adds	r3, #1
 80066d4:	425a      	negs	r2, r3
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	f002 021f 	and.w	r2, r2, #31
 80066de:	bf58      	it	pl
 80066e0:	4253      	negpl	r3, r2
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <Input_ProcessBlocks+0x16c>)
 80066e6:	701a      	strb	r2, [r3, #0]
    if (analysis_length == 0) {
 80066e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006728 <Input_ProcessBlocks+0x174>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <Input_ProcessBlocks+0x142>
      return false;
 80066f2:	2300      	movs	r3, #0
 80066f4:	e00d      	b.n	8006712 <Input_ProcessBlocks+0x15e>
    }
    analysis_length--;
 80066f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006728 <Input_ProcessBlocks+0x174>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	4b09      	ldr	r3, [pc, #36]	@ (8006728 <Input_ProcessBlocks+0x174>)
 8006702:	701a      	strb	r2, [r3, #0]
  while (analysis_length != 0) {
 8006704:	4b08      	ldr	r3, [pc, #32]	@ (8006728 <Input_ProcessBlocks+0x174>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	f47f af67 	bne.w	80065de <Input_ProcessBlocks+0x2a>
  }

  return true;
 8006710:	2301      	movs	r3, #1
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	240120e2 	.word	0x240120e2
 8006720:	240120e4 	.word	0x240120e4
 8006724:	24009cdc 	.word	0x24009cdc
 8006728:	240120e5 	.word	0x240120e5

0800672c <Input_DecodeBits>:

// Goes through message to see if enough bits have been received to decode the
// length and data type
bool Input_DecodeBits(BitMessage_t* bit_msg, bool evaluation_mode)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  if (bit_msg == NULL) {
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <Input_DecodeBits+0x16>
    return false;
 800673e:	2300      	movs	r3, #0
 8006740:	e088      	b.n	8006854 <Input_DecodeBits+0x128>
  }
  // There is no header or preamble in evaluation mode.
  if (evaluation_mode == true) {
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <Input_DecodeBits+0x20>
    return true;
 8006748:	2301      	movs	r3, #1
 800674a:	e083      	b.n	8006854 <Input_DecodeBits+0x128>
  }

  if (bit_msg->preamble_received == false) { // Still looking for preamble
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8006752:	f083 0301 	eor.w	r3, r3, #1
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d07a      	beq.n	8006852 <Input_DecodeBits+0x126>
    if (bit_msg->bit_count >= PACKET_PREAMBLE_LENGTH_BITS) {
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8006762:	2b0b      	cmp	r3, #11
 8006764:	d975      	bls.n	8006852 <Input_DecodeBits+0x126>
      // Keeps track of where in the preamble we are
      uint16_t bit_index = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	81fb      	strh	r3, [r7, #14]
      // The first set of bytes in the message correspond to the sender's id
      if (Packet_Get8BitChunk(bit_msg, &bit_index, PACKET_SENDER_ID_BITS,
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3388      	adds	r3, #136	@ 0x88
 800676e:	f107 010e 	add.w	r1, r7, #14
 8006772:	2204      	movs	r2, #4
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 fcc0 	bl	80080fa <Packet_Get8BitChunk>
 800677a:	4603      	mov	r3, r0
          &bit_msg->sender_id) == false) {
 800677c:	f083 0301 	eor.w	r3, r3, #1
 8006780:	b2db      	uxtb	r3, r3
      if (Packet_Get8BitChunk(bit_msg, &bit_index, PACKET_SENDER_ID_BITS,
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <Input_DecodeBits+0x5e>
        return false;
 8006786:	2300      	movs	r3, #0
 8006788:	e064      	b.n	8006854 <Input_DecodeBits+0x128>
      }
      // The second set of bytes in the message correspond to the data type
      if (Packet_Get8BitChunk(bit_msg, &bit_index, PACKET_MESSAGE_TYPE_BITS,
          &bit_msg->contents_data_type) == false) {
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	338c      	adds	r3, #140	@ 0x8c
      if (Packet_Get8BitChunk(bit_msg, &bit_index, PACKET_MESSAGE_TYPE_BITS,
 800678e:	f107 010e 	add.w	r1, r7, #14
 8006792:	2204      	movs	r2, #4
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 fcb0 	bl	80080fa <Packet_Get8BitChunk>
 800679a:	4603      	mov	r3, r0
          &bit_msg->contents_data_type) == false) {
 800679c:	f083 0301 	eor.w	r3, r3, #1
 80067a0:	b2db      	uxtb	r3, r3
      if (Packet_Get8BitChunk(bit_msg, &bit_index, PACKET_MESSAGE_TYPE_BITS,
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <Input_DecodeBits+0x7e>
        return false;
 80067a6:	2300      	movs	r3, #0
 80067a8:	e054      	b.n	8006854 <Input_DecodeBits+0x128>
      }
      uint8_t packet_length;
      // The third set of bytes in the message correspond to the data length
      if (Packet_Get8BitChunk(bit_msg, &bit_index, PACKET_LENGTH_BITS,
 80067aa:	f107 030d 	add.w	r3, r7, #13
 80067ae:	f107 010e 	add.w	r1, r7, #14
 80067b2:	2203      	movs	r2, #3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fca0 	bl	80080fa <Packet_Get8BitChunk>
 80067ba:	4603      	mov	r3, r0
          &packet_length) == false) {
 80067bc:	f083 0301 	eor.w	r3, r3, #1
 80067c0:	b2db      	uxtb	r3, r3
      if (Packet_Get8BitChunk(bit_msg, &bit_index, PACKET_LENGTH_BITS,
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <Input_DecodeBits+0x9e>
        return false;
 80067c6:	2300      	movs	r3, #0
 80067c8:	e044      	b.n	8006854 <Input_DecodeBits+0x128>
      }
      bit_msg->data_len_bits = 8 << packet_length;
 80067ca:	7b7b      	ldrb	r3, [r7, #13]
 80067cc:	461a      	mov	r2, r3
 80067ce:	2308      	movs	r3, #8
 80067d0:	4093      	lsls	r3, r2
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
      bit_msg->final_length = 8 << packet_length;
 80067da:	7b7b      	ldrb	r3, [r7, #13]
 80067dc:	461a      	mov	r2, r3
 80067de:	2308      	movs	r3, #8
 80067e0:	4093      	lsls	r3, r2
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      bit_msg->final_length += PACKET_PREAMBLE_LENGTH_BITS;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 80067f0:	330c      	adds	r3, #12
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      uint16_t error_bits_length;
      if (ErrorCorrection_CheckLength(&error_bits_length) == false) {
 80067fa:	f107 030a 	add.w	r3, r7, #10
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe ff5c 	bl	80056bc <ErrorCorrection_CheckLength>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <Input_DecodeBits+0xe2>
        return false;
 800680a:	2300      	movs	r3, #0
 800680c:	e022      	b.n	8006854 <Input_DecodeBits+0x128>
      }
      bit_msg->final_length += error_bits_length;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b3 208e 	ldrh.w	r2, [r3, #142]	@ 0x8e
 8006814:	897b      	ldrh	r3, [r7, #10]
 8006816:	4413      	add	r3, r2
 8006818:	b29a      	uxth	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      // The fourth set of bytes in the message correspond to the stationary flag
      if (Packet_Get8BitChunk(bit_msg, &bit_index, PACKET_STATIONARY_BITS,
          (uint8_t*) &bit_msg->stationary_flag) == false) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3390      	adds	r3, #144	@ 0x90
      if (Packet_Get8BitChunk(bit_msg, &bit_index, PACKET_STATIONARY_BITS,
 8006824:	f107 010e 	add.w	r1, r7, #14
 8006828:	2201      	movs	r2, #1
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 fc65 	bl	80080fa <Packet_Get8BitChunk>
 8006830:	4603      	mov	r3, r0
          (uint8_t*) &bit_msg->stationary_flag) == false) {
 8006832:	f083 0301 	eor.w	r3, r3, #1
 8006836:	b2db      	uxtb	r3, r3
      if (Packet_Get8BitChunk(bit_msg, &bit_index, PACKET_STATIONARY_BITS,
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <Input_DecodeBits+0x114>
        return false;
 800683c:	2300      	movs	r3, #0
 800683e:	e009      	b.n	8006854 <Input_DecodeBits+0x128>
      }

      // Asserts that the amount of bits read == the amount of bits in the preamble
      if (bit_index != PACKET_PREAMBLE_LENGTH_BITS) {
 8006840:	89fb      	ldrh	r3, [r7, #14]
 8006842:	2b0c      	cmp	r3, #12
 8006844:	d001      	beq.n	800684a <Input_DecodeBits+0x11e>
        return false;
 8006846:	2300      	movs	r3, #0
 8006848:	e004      	b.n	8006854 <Input_DecodeBits+0x128>
      }

      bit_msg->preamble_received = true;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
    }
  }
  return true;
 8006852:	2301      	movs	r3, #1
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <Input_DecodeMessage>:

// copies data from the bit message to the actual message
bool Input_DecodeMessage(BitMessage_t* input_bit_msg, Message_t* msg)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  if (input_bit_msg == NULL || msg == NULL) {
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <Input_DecodeMessage+0x16>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <Input_DecodeMessage+0x1a>
    return false;
 8006872:	2300      	movs	r3, #0
 8006874:	e023      	b.n	80068be <Input_DecodeMessage+0x62>
  }
  // data_len_bytes is restricted to be a multiple of 8
  uint16_t len_bytes = input_bit_msg->data_len_bits / 8;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800687c:	08db      	lsrs	r3, r3, #3
 800687e:	81bb      	strh	r3, [r7, #12]

  uint16_t start_position = PACKET_PREAMBLE_LENGTH_BITS;
 8006880:	230c      	movs	r3, #12
 8006882:	817b      	strh	r3, [r7, #10]

  for (uint16_t i = 0; i < len_bytes; i++) {
 8006884:	2300      	movs	r3, #0
 8006886:	81fb      	strh	r3, [r7, #14]
 8006888:	e014      	b.n	80068b4 <Input_DecodeMessage+0x58>
    if (Packet_Get8(input_bit_msg, &start_position, msg->data + i) == false) {
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	89fb      	ldrh	r3, [r7, #14]
 8006890:	441a      	add	r2, r3
 8006892:	f107 030a 	add.w	r3, r7, #10
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fcb6 	bl	800820a <Packet_Get8>
 800689e:	4603      	mov	r3, r0
 80068a0:	f083 0301 	eor.w	r3, r3, #1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <Input_DecodeMessage+0x52>
      return false;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e007      	b.n	80068be <Input_DecodeMessage+0x62>
  for (uint16_t i = 0; i < len_bytes; i++) {
 80068ae:	89fb      	ldrh	r3, [r7, #14]
 80068b0:	3301      	adds	r3, #1
 80068b2:	81fb      	strh	r3, [r7, #14]
 80068b4:	89fa      	ldrh	r2, [r7, #14]
 80068b6:	89bb      	ldrh	r3, [r7, #12]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d3e6      	bcc.n	800688a <Input_DecodeMessage+0x2e>
    }
  }
  return true;
 80068bc:	2301      	movs	r3, #1
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <Input_Reset>:

void Input_Reset()
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  buffer_start_index = 0;
 80068cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006908 <Input_Reset+0x40>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	801a      	strh	r2, [r3, #0]
  buffer_end_index = 0;
 80068d2:	4b0e      	ldr	r3, [pc, #56]	@ (800690c <Input_Reset+0x44>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	801a      	strh	r2, [r3, #0]
  analysis_start_index = 0;
 80068d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006910 <Input_Reset+0x48>)
 80068da:	2200      	movs	r2, #0
 80068dc:	701a      	strb	r2, [r3, #0]
  analysis_length = 0;
 80068de:	4b0d      	ldr	r3, [pc, #52]	@ (8006914 <Input_Reset+0x4c>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	701a      	strb	r2, [r3, #0]
  fft_analysis_index = 0;
 80068e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006918 <Input_Reset+0x50>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	801a      	strh	r2, [r3, #0]
  fft_analysis_length = 0;
 80068ea:	4b0c      	ldr	r3, [pc, #48]	@ (800691c <Input_Reset+0x54>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	801a      	strh	r2, [r3, #0]
  bit_index = 0;
 80068f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <Input_Reset+0x58>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	801a      	strh	r2, [r3, #0]
  memset(input_buffer, 0, PROCESSING_BUFFER_SIZE * sizeof(uint16_t));
 80068f6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80068fa:	2100      	movs	r1, #0
 80068fc:	4809      	ldr	r0, [pc, #36]	@ (8006924 <Input_Reset+0x5c>)
 80068fe:	f01e fd80 	bl	8025402 <memset>
}
 8006902:	bf00      	nop
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	240120dc 	.word	0x240120dc
 800690c:	240120de 	.word	0x240120de
 8006910:	240120e4 	.word	0x240120e4
 8006914:	240120e5 	.word	0x240120e5
 8006918:	24015b68 	.word	0x24015b68
 800691c:	24015b6a 	.word	0x24015b6a
 8006920:	240120e6 	.word	0x240120e6
 8006924:	2400a0dc 	.word	0x2400a0dc

08006928 <Input_PrintNoise>:

void Input_PrintNoise()
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b0da      	sub	sp, #360	@ 0x168
 800692c:	af00      	add	r7, sp, #0
  char print_buffer[PRINT_CHUNK_SIZE * 7 + 1]; // Accommodates max uint16 length + \r\n + 1
  uint16_t print_index = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
  CDC_Transmit_HS((uint8_t*) "\b\b\r\n\r\n", 6);
 8006934:	2106      	movs	r1, #6
 8006936:	4830      	ldr	r0, [pc, #192]	@ (80069f8 <Input_PrintNoise+0xd0>)
 8006938:	f01c f824 	bl	8022984 <CDC_Transmit_HS>
  if (xSemaphoreTake(usbSemaphoreHandle, portMAX_DELAY) == pdTRUE) {
 800693c:	4b2f      	ldr	r3, [pc, #188]	@ (80069fc <Input_PrintNoise+0xd4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f04f 31ff 	mov.w	r1, #4294967295
 8006944:	4618      	mov	r0, r3
 8006946:	f019 fb61 	bl	802000c <xQueueSemaphoreTake>
 800694a:	4603      	mov	r3, r0
 800694c:	2b01      	cmp	r3, #1
 800694e:	d146      	bne.n	80069de <Input_PrintNoise+0xb6>
    for (uint16_t i = 0; i < PRINT_BUFFER_SIZE; i += PRINT_CHUNK_SIZE) {
 8006950:	2300      	movs	r3, #0
 8006952:	f8a7 3164 	strh.w	r3, [r7, #356]	@ 0x164
 8006956:	e03d      	b.n	80069d4 <Input_PrintNoise+0xac>
      print_index = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166

      for (uint16_t j = 0; j < PRINT_CHUNK_SIZE && (i + j) < PRINT_BUFFER_SIZE; j++) {
 800695e:	2300      	movs	r3, #0
 8006960:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
 8006964:	e01b      	b.n	800699e <Input_PrintNoise+0x76>
        print_index += sprintf(&print_buffer[print_index], "%u\r\n", input_buffer[i + j]);
 8006966:	f8b7 3166 	ldrh.w	r3, [r7, #358]	@ 0x166
 800696a:	463a      	mov	r2, r7
 800696c:	18d0      	adds	r0, r2, r3
 800696e:	f8b7 2164 	ldrh.w	r2, [r7, #356]	@ 0x164
 8006972:	f8b7 3162 	ldrh.w	r3, [r7, #354]	@ 0x162
 8006976:	4413      	add	r3, r2
 8006978:	4a21      	ldr	r2, [pc, #132]	@ (8006a00 <Input_PrintNoise+0xd8>)
 800697a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800697e:	461a      	mov	r2, r3
 8006980:	4920      	ldr	r1, [pc, #128]	@ (8006a04 <Input_PrintNoise+0xdc>)
 8006982:	f01e fc9b 	bl	80252bc <siprintf>
 8006986:	4603      	mov	r3, r0
 8006988:	b29a      	uxth	r2, r3
 800698a:	f8b7 3166 	ldrh.w	r3, [r7, #358]	@ 0x166
 800698e:	4413      	add	r3, r2
 8006990:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
      for (uint16_t j = 0; j < PRINT_CHUNK_SIZE && (i + j) < PRINT_BUFFER_SIZE; j++) {
 8006994:	f8b7 3162 	ldrh.w	r3, [r7, #354]	@ 0x162
 8006998:	3301      	adds	r3, #1
 800699a:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
 800699e:	f8b7 3162 	ldrh.w	r3, [r7, #354]	@ 0x162
 80069a2:	2b31      	cmp	r3, #49	@ 0x31
 80069a4:	d807      	bhi.n	80069b6 <Input_PrintNoise+0x8e>
 80069a6:	f8b7 2164 	ldrh.w	r2, [r7, #356]	@ 0x164
 80069aa:	f8b7 3162 	ldrh.w	r3, [r7, #354]	@ 0x162
 80069ae:	4413      	add	r3, r2
 80069b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069b4:	dbd7      	blt.n	8006966 <Input_PrintNoise+0x3e>
      }


      CDC_Transmit_HS((uint8_t*) print_buffer, print_index);
 80069b6:	f8b7 2166 	ldrh.w	r2, [r7, #358]	@ 0x166
 80069ba:	463b      	mov	r3, r7
 80069bc:	4611      	mov	r1, r2
 80069be:	4618      	mov	r0, r3
 80069c0:	f01b ffe0 	bl	8022984 <CDC_Transmit_HS>
      osDelay(1);
 80069c4:	2001      	movs	r0, #1
 80069c6:	f018 f80c 	bl	801e9e2 <osDelay>
    for (uint16_t i = 0; i < PRINT_BUFFER_SIZE; i += PRINT_CHUNK_SIZE) {
 80069ca:	f8b7 3164 	ldrh.w	r3, [r7, #356]	@ 0x164
 80069ce:	3332      	adds	r3, #50	@ 0x32
 80069d0:	f8a7 3164 	strh.w	r3, [r7, #356]	@ 0x164
 80069d4:	f8b7 3164 	ldrh.w	r3, [r7, #356]	@ 0x164
 80069d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069dc:	d3bc      	bcc.n	8006958 <Input_PrintNoise+0x30>
    }
  }
  xSemaphoreGive(usbSemaphoreHandle);
 80069de:	4b07      	ldr	r3, [pc, #28]	@ (80069fc <Input_PrintNoise+0xd4>)
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	2300      	movs	r3, #0
 80069e4:	2200      	movs	r2, #0
 80069e6:	2100      	movs	r1, #0
 80069e8:	f019 f88e 	bl	801fb08 <xQueueGenericSend>
}
 80069ec:	bf00      	nop
 80069ee:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	0802ac70 	.word	0x0802ac70
 80069fc:	24018730 	.word	0x24018730
 8006a00:	2400a0dc 	.word	0x2400a0dc
 8006a04:	0802ac78 	.word	0x0802ac78

08006a08 <Input_RegisterParams>:

bool Input_RegisterParams()
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af04      	add	r7, sp, #16
  uint32_t min = MIN_MSG_START_FCN;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	607b      	str	r3, [r7, #4]
  uint32_t max = MAX_MSG_START_FCN;
 8006a12:	2301      	movs	r3, #1
 8006a14:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_MSG_START_FCN, "message start function", PARAM_TYPE_UINT8,
 8006a16:	463b      	mov	r3, r7
 8006a18:	9302      	str	r3, [sp, #8]
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	2301      	movs	r3, #1
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	4b09      	ldr	r3, [pc, #36]	@ (8006a48 <Input_RegisterParams+0x40>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	4909      	ldr	r1, [pc, #36]	@ (8006a4c <Input_RegisterParams+0x44>)
 8006a28:	2002      	movs	r0, #2
 8006a2a:	f7fa f8fb 	bl	8000c24 <Param_Register>
 8006a2e:	4603      	mov	r3, r0
                     &message_start_function, sizeof(uint8_t), &min, &max) == false) {
 8006a30:	f083 0301 	eor.w	r3, r3, #1
 8006a34:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_MSG_START_FCN, "message start function", PARAM_TYPE_UINT8,
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <Input_RegisterParams+0x36>
    return false;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e000      	b.n	8006a40 <Input_RegisterParams+0x38>
  }

  return true;
 8006a3e:	2301      	movs	r3, #1
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	2400026a 	.word	0x2400026a
 8006a4c:	0802ac80 	.word	0x0802ac80

08006a50 <getBufferLength>:


/* Private function definitions ----------------------------------------------*/

static uint16_t getBufferLength()
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
  uint16_t buffer_length;

  if (buffer_end_index >= buffer_start_index) {
 8006a56:	4b11      	ldr	r3, [pc, #68]	@ (8006a9c <getBufferLength+0x4c>)
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	4b10      	ldr	r3, [pc, #64]	@ (8006aa0 <getBufferLength+0x50>)
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d308      	bcc.n	8006a78 <getBufferLength+0x28>
    buffer_length = buffer_end_index - buffer_start_index;
 8006a66:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <getBufferLength+0x4c>)
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa0 <getBufferLength+0x50>)
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	80fb      	strh	r3, [r7, #6]
 8006a76:	e00a      	b.n	8006a8e <getBufferLength+0x3e>
  }
  else {
    buffer_length = PROCESSING_BUFFER_SIZE - (buffer_start_index - buffer_end_index);
 8006a78:	4b08      	ldr	r3, [pc, #32]	@ (8006a9c <getBufferLength+0x4c>)
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	4b08      	ldr	r3, [pc, #32]	@ (8006aa0 <getBufferLength+0x50>)
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8006a8c:	80fb      	strh	r3, [r7, #6]
  }
  return buffer_length;
 8006a8e:	88fb      	ldrh	r3, [r7, #6]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	240120de 	.word	0x240120de
 8006aa0:	240120dc 	.word	0x240120dc

08006aa4 <messageStartWithThreshold>:

bool messageStartWithThreshold()
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
  uint16_t end_index = buffer_end_index;
 8006aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8006b14 <messageStartWithThreshold+0x70>)
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	80fb      	strh	r3, [r7, #6]
  if (buffer_start_index == buffer_end_index) return false; // no new data to process
 8006ab0:	4b19      	ldr	r3, [pc, #100]	@ (8006b18 <messageStartWithThreshold+0x74>)
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	4b17      	ldr	r3, [pc, #92]	@ (8006b14 <messageStartWithThreshold+0x70>)
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d11c      	bne.n	8006afa <messageStartWithThreshold+0x56>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e021      	b.n	8006b08 <messageStartWithThreshold+0x64>

  static const uint16_t mask = PROCESSING_BUFFER_SIZE - 1;

  while (buffer_start_index != end_index) {
    if (input_buffer[buffer_start_index] > AMPLITUDE_THRESHOLD) {
 8006ac4:	4b14      	ldr	r3, [pc, #80]	@ (8006b18 <messageStartWithThreshold+0x74>)
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	4b13      	ldr	r3, [pc, #76]	@ (8006b1c <messageStartWithThreshold+0x78>)
 8006ace:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006ad2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d901      	bls.n	8006ade <messageStartWithThreshold+0x3a>
      return true;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e014      	b.n	8006b08 <messageStartWithThreshold+0x64>
    }
    buffer_start_index = (buffer_start_index + 1) & mask;
 8006ade:	4b0e      	ldr	r3, [pc, #56]	@ (8006b18 <messageStartWithThreshold+0x74>)
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	b21a      	sxth	r2, r3
 8006aea:	4b0d      	ldr	r3, [pc, #52]	@ (8006b20 <messageStartWithThreshold+0x7c>)
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b21b      	sxth	r3, r3
 8006af0:	4013      	ands	r3, r2
 8006af2:	b21b      	sxth	r3, r3
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	4b08      	ldr	r3, [pc, #32]	@ (8006b18 <messageStartWithThreshold+0x74>)
 8006af8:	801a      	strh	r2, [r3, #0]
  while (buffer_start_index != end_index) {
 8006afa:	4b07      	ldr	r3, [pc, #28]	@ (8006b18 <messageStartWithThreshold+0x74>)
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	88fa      	ldrh	r2, [r7, #6]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d1de      	bne.n	8006ac4 <messageStartWithThreshold+0x20>
  }

  return false;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	240120de 	.word	0x240120de
 8006b18:	240120dc 	.word	0x240120dc
 8006b1c:	2400a0dc 	.word	0x2400a0dc
 8006b20:	0802bd78 	.word	0x0802bd78

08006b24 <messageStartWithFrequency>:

bool messageStartWithFrequency()
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
  static const uint16_t buffer_mask = PROCESSING_BUFFER_SIZE - 1;
  static const uint16_t analysis_mask = FFT_ANALYSIS_BUFF_SIZE - 1;
  uint16_t end_index = buffer_end_index;
 8006b2a:	4b96      	ldr	r3, [pc, #600]	@ (8006d84 <messageStartWithFrequency+0x260>)
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	817b      	strh	r3, [r7, #10]

  uint16_t difference = (end_index - buffer_start_index) & buffer_mask;
 8006b30:	4b95      	ldr	r3, [pc, #596]	@ (8006d88 <messageStartWithFrequency+0x264>)
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	897a      	ldrh	r2, [r7, #10]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	b21a      	sxth	r2, r3
 8006b3e:	4b93      	ldr	r3, [pc, #588]	@ (8006d8c <messageStartWithFrequency+0x268>)
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b21b      	sxth	r3, r3
 8006b44:	4013      	ands	r3, r2
 8006b46:	b21b      	sxth	r3, r3
 8006b48:	813b      	strh	r3, [r7, #8]

  if (difference < FFT_SIZE) return false;
 8006b4a:	893b      	ldrh	r3, [r7, #8]
 8006b4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b4e:	d801      	bhi.n	8006b54 <messageStartWithFrequency+0x30>
 8006b50:	2300      	movs	r3, #0
 8006b52:	e113      	b.n	8006d7c <messageStartWithFrequency+0x258>

  do {
    // Prepare buffer
    for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8006b54:	2300      	movs	r3, #0
 8006b56:	81fb      	strh	r3, [r7, #14]
 8006b58:	e018      	b.n	8006b8c <messageStartWithFrequency+0x68>
      fft_input_buffer[i] = (float) input_buffer[(buffer_start_index + i) & buffer_mask];
 8006b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8006d88 <messageStartWithFrequency+0x264>)
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	89fb      	ldrh	r3, [r7, #14]
 8006b64:	4413      	add	r3, r2
 8006b66:	4a89      	ldr	r2, [pc, #548]	@ (8006d8c <messageStartWithFrequency+0x268>)
 8006b68:	8812      	ldrh	r2, [r2, #0]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	4a88      	ldr	r2, [pc, #544]	@ (8006d90 <messageStartWithFrequency+0x26c>)
 8006b6e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006b72:	89fb      	ldrh	r3, [r7, #14]
 8006b74:	ee07 2a90 	vmov	s15, r2
 8006b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7c:	4a85      	ldr	r2, [pc, #532]	@ (8006d94 <messageStartWithFrequency+0x270>)
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i = 0; i < FFT_SIZE; i++) {
 8006b86:	89fb      	ldrh	r3, [r7, #14]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	81fb      	strh	r3, [r7, #14]
 8006b8c:	89fb      	ldrh	r3, [r7, #14]
 8006b8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b90:	d9e3      	bls.n	8006b5a <messageStartWithFrequency+0x36>
    }

    arm_rfft_fast_f32(&fft_handle, fft_input_buffer, fft_output_buffer, 0);
 8006b92:	2300      	movs	r3, #0
 8006b94:	4a80      	ldr	r2, [pc, #512]	@ (8006d98 <messageStartWithFrequency+0x274>)
 8006b96:	497f      	ldr	r1, [pc, #508]	@ (8006d94 <messageStartWithFrequency+0x270>)
 8006b98:	4880      	ldr	r0, [pc, #512]	@ (8006d9c <messageStartWithFrequency+0x278>)
 8006b9a:	f01c fce5 	bl	8023568 <arm_rfft_fast_f32>



    fft_mag_sq_buffer[0] = fft_output_buffer[0] * fft_output_buffer[0];
 8006b9e:	4b7e      	ldr	r3, [pc, #504]	@ (8006d98 <messageStartWithFrequency+0x274>)
 8006ba0:	ed93 7a00 	vldr	s14, [r3]
 8006ba4:	4b7c      	ldr	r3, [pc, #496]	@ (8006d98 <messageStartWithFrequency+0x274>)
 8006ba6:	edd3 7a00 	vldr	s15, [r3]
 8006baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bae:	4b7c      	ldr	r3, [pc, #496]	@ (8006da0 <messageStartWithFrequency+0x27c>)
 8006bb0:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i = 1; i < FFT_SIZE / 2; i++) {
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	81bb      	strh	r3, [r7, #12]
 8006bb8:	e021      	b.n	8006bfe <messageStartWithFrequency+0xda>
      float real = fft_output_buffer[2 * i];
 8006bba:	89bb      	ldrh	r3, [r7, #12]
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	4a76      	ldr	r2, [pc, #472]	@ (8006d98 <messageStartWithFrequency+0x274>)
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	607b      	str	r3, [r7, #4]
      float imag = fft_output_buffer[2 * i + 1];
 8006bc8:	89bb      	ldrh	r3, [r7, #12]
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	3301      	adds	r3, #1
 8006bce:	4a72      	ldr	r2, [pc, #456]	@ (8006d98 <messageStartWithFrequency+0x274>)
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	603b      	str	r3, [r7, #0]

      fft_mag_sq_buffer[i] = real * real + imag * imag;
 8006bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bdc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006be0:	edd7 7a00 	vldr	s15, [r7]
 8006be4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006be8:	89bb      	ldrh	r3, [r7, #12]
 8006bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bee:	4a6c      	ldr	r2, [pc, #432]	@ (8006da0 <messageStartWithFrequency+0x27c>)
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i = 1; i < FFT_SIZE / 2; i++) {
 8006bf8:	89bb      	ldrh	r3, [r7, #12]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	81bb      	strh	r3, [r7, #12]
 8006bfe:	89bb      	ldrh	r3, [r7, #12]
 8006c00:	2b1f      	cmp	r3, #31
 8006c02:	d9da      	bls.n	8006bba <messageStartWithFrequency+0x96>
    }

    fft_analysis[fft_analysis_index].start_index = buffer_start_index;
 8006c04:	4b67      	ldr	r3, [pc, #412]	@ (8006da4 <messageStartWithFrequency+0x280>)
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8006d88 <messageStartWithFrequency+0x264>)
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b298      	uxth	r0, r3
 8006c10:	4a65      	ldr	r2, [pc, #404]	@ (8006da8 <messageStartWithFrequency+0x284>)
 8006c12:	460b      	mov	r3, r1
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	1a5b      	subs	r3, r3, r1
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	3318      	adds	r3, #24
 8006c1e:	4602      	mov	r2, r0
 8006c20:	801a      	strh	r2, [r3, #0]
    fft_analysis[fft_analysis_index].length = FFT_SIZE;
 8006c22:	4b60      	ldr	r3, [pc, #384]	@ (8006da4 <messageStartWithFrequency+0x280>)
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	4619      	mov	r1, r3
 8006c28:	4a5f      	ldr	r2, [pc, #380]	@ (8006da8 <messageStartWithFrequency+0x284>)
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	1a5b      	subs	r3, r3, r1
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	3314      	adds	r3, #20
 8006c36:	2240      	movs	r2, #64	@ 0x40
 8006c38:	601a      	str	r2, [r3, #0]
    // skip the dc component to avoid overwhelming
    arm_mean_f32(&fft_mag_sq_buffer[1], FFT_SIZE / 2 - 1, &fft_analysis[fft_analysis_index].average);
 8006c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8006da4 <messageStartWithFrequency+0x280>)
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	4613      	mov	r3, r2
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4a57      	ldr	r2, [pc, #348]	@ (8006da8 <messageStartWithFrequency+0x284>)
 8006c4a:	4413      	add	r3, r2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	211f      	movs	r1, #31
 8006c50:	4856      	ldr	r0, [pc, #344]	@ (8006dac <messageStartWithFrequency+0x288>)
 8006c52:	f01c fb13 	bl	802327c <arm_mean_f32>
    // skip the dc component since it will always dominate
    arm_max_f32(&fft_mag_sq_buffer[1], FFT_SIZE / 2 - 1, &fft_analysis[fft_analysis_index].maximum, &fft_analysis[fft_analysis_index].max_index);
 8006c56:	4b53      	ldr	r3, [pc, #332]	@ (8006da4 <messageStartWithFrequency+0x280>)
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4a50      	ldr	r2, [pc, #320]	@ (8006da8 <messageStartWithFrequency+0x284>)
 8006c66:	4413      	add	r3, r2
 8006c68:	1d1a      	adds	r2, r3, #4
 8006c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8006da4 <messageStartWithFrequency+0x280>)
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	460b      	mov	r3, r1
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	1a5b      	subs	r3, r3, r1
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	3310      	adds	r3, #16
 8006c7a:	494b      	ldr	r1, [pc, #300]	@ (8006da8 <messageStartWithFrequency+0x284>)
 8006c7c:	440b      	add	r3, r1
 8006c7e:	211f      	movs	r1, #31
 8006c80:	484a      	ldr	r0, [pc, #296]	@ (8006dac <messageStartWithFrequency+0x288>)
 8006c82:	f01c fb3b 	bl	80232fc <arm_max_f32>

    fft_analysis[fft_analysis_index].frequency0_amplitude = fft_mag_sq_buffer[FREQUENCY_INDEX_0];
 8006c86:	4b47      	ldr	r3, [pc, #284]	@ (8006da4 <messageStartWithFrequency+0x280>)
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	4b44      	ldr	r3, [pc, #272]	@ (8006da0 <messageStartWithFrequency+0x27c>)
 8006c8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c90:	4945      	ldr	r1, [pc, #276]	@ (8006da8 <messageStartWithFrequency+0x284>)
 8006c92:	4603      	mov	r3, r0
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	1a1b      	subs	r3, r3, r0
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	601a      	str	r2, [r3, #0]
    fft_analysis[fft_analysis_index].frequency1_amplitude = fft_mag_sq_buffer[FREQUENCY_INDEX_1];
 8006ca0:	4b40      	ldr	r3, [pc, #256]	@ (8006da4 <messageStartWithFrequency+0x280>)
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8006da0 <messageStartWithFrequency+0x27c>)
 8006ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006caa:	493f      	ldr	r1, [pc, #252]	@ (8006da8 <messageStartWithFrequency+0x284>)
 8006cac:	4603      	mov	r3, r0
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	1a1b      	subs	r3, r3, r0
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	440b      	add	r3, r1
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	601a      	str	r2, [r3, #0]


    fft_analysis_index = (fft_analysis_index + 1) & analysis_mask;
 8006cba:	4b3a      	ldr	r3, [pc, #232]	@ (8006da4 <messageStartWithFrequency+0x280>)
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	b21a      	sxth	r2, r3
 8006cc4:	4b3a      	ldr	r3, [pc, #232]	@ (8006db0 <messageStartWithFrequency+0x28c>)
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b21b      	sxth	r3, r3
 8006cca:	4013      	ands	r3, r2
 8006ccc:	b21b      	sxth	r3, r3
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	4b34      	ldr	r3, [pc, #208]	@ (8006da4 <messageStartWithFrequency+0x280>)
 8006cd2:	801a      	strh	r2, [r3, #0]
    fft_analysis_length += 1;
 8006cd4:	4b37      	ldr	r3, [pc, #220]	@ (8006db4 <messageStartWithFrequency+0x290>)
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	4b35      	ldr	r3, [pc, #212]	@ (8006db4 <messageStartWithFrequency+0x290>)
 8006cde:	801a      	strh	r2, [r3, #0]

    buffer_start_index = (buffer_start_index + FFT_SIZE / FFT_OVERLAP) & buffer_mask;
 8006ce0:	4b29      	ldr	r3, [pc, #164]	@ (8006d88 <messageStartWithFrequency+0x264>)
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3310      	adds	r3, #16
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	b21a      	sxth	r2, r3
 8006cec:	4b27      	ldr	r3, [pc, #156]	@ (8006d8c <messageStartWithFrequency+0x268>)
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b21b      	sxth	r3, r3
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	b21b      	sxth	r3, r3
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	4b23      	ldr	r3, [pc, #140]	@ (8006d88 <messageStartWithFrequency+0x264>)
 8006cfa:	801a      	strh	r2, [r3, #0]
    if (fft_analysis_length >= FFT_ANALYSIS_BUFF_SIZE) {
 8006cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8006db4 <messageStartWithFrequency+0x290>)
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d04:	d301      	bcc.n	8006d0a <messageStartWithFrequency+0x1e6>
      // TODO: log error
      return false;
 8006d06:	2300      	movs	r3, #0
 8006d08:	e038      	b.n	8006d7c <messageStartWithFrequency+0x258>
    }

    difference = (end_index - buffer_start_index) & buffer_mask;
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d88 <messageStartWithFrequency+0x264>)
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	897a      	ldrh	r2, [r7, #10]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	b21a      	sxth	r2, r3
 8006d18:	4b1c      	ldr	r3, [pc, #112]	@ (8006d8c <messageStartWithFrequency+0x268>)
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b21b      	sxth	r3, r3
 8006d1e:	4013      	ands	r3, r2
 8006d20:	b21b      	sxth	r3, r3
 8006d22:	813b      	strh	r3, [r7, #8]

  } while (difference > FFT_SIZE);
 8006d24:	893b      	ldrh	r3, [r7, #8]
 8006d26:	2b40      	cmp	r3, #64	@ 0x40
 8006d28:	f63f af14 	bhi.w	8006b54 <messageStartWithFrequency+0x30>

  // go through the fft_analysis array to see if the condition is met

  // TODO later add individual start indices for each

  if (fft_analysis_length < 1) return false;
 8006d2c:	4b21      	ldr	r3, [pc, #132]	@ (8006db4 <messageStartWithFrequency+0x290>)
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <messageStartWithFrequency+0x214>
 8006d34:	2300      	movs	r3, #0
 8006d36:	e021      	b.n	8006d7c <messageStartWithFrequency+0x258>
//  if (checkFftConditions(3, LEN_3_MAG) == true) {
//    len_3_hits++;
//    return true;
//  }

  if (checkFftConditions(6, LEN_6_MAG) == true) {
 8006d38:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8006db8 <messageStartWithFrequency+0x294>
 8006d3c:	2006      	movs	r0, #6
 8006d3e:	f000 f843 	bl	8006dc8 <checkFftConditions>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d006      	beq.n	8006d56 <messageStartWithFrequency+0x232>
    len_6_hits++;
 8006d48:	4b1c      	ldr	r3, [pc, #112]	@ (8006dbc <messageStartWithFrequency+0x298>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8006dbc <messageStartWithFrequency+0x298>)
 8006d50:	6013      	str	r3, [r2, #0]
    return true;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e012      	b.n	8006d7c <messageStartWithFrequency+0x258>
  }

  if (checkFftConditions(10, LEN_10_MAG) == true) {
 8006d56:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8006dc0 <messageStartWithFrequency+0x29c>
 8006d5a:	200a      	movs	r0, #10
 8006d5c:	f000 f834 	bl	8006dc8 <checkFftConditions>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d006      	beq.n	8006d74 <messageStartWithFrequency+0x250>
    len_10_hits++;
 8006d66:	4b17      	ldr	r3, [pc, #92]	@ (8006dc4 <messageStartWithFrequency+0x2a0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	4a15      	ldr	r2, [pc, #84]	@ (8006dc4 <messageStartWithFrequency+0x2a0>)
 8006d6e:	6013      	str	r3, [r2, #0]
    return true;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e003      	b.n	8006d7c <messageStartWithFrequency+0x258>
  }

  fft_analysis_length = 10 - 1;
 8006d74:	4b0f      	ldr	r3, [pc, #60]	@ (8006db4 <messageStartWithFrequency+0x290>)
 8006d76:	2209      	movs	r2, #9
 8006d78:	801a      	strh	r2, [r3, #0]

  return false;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	240120de 	.word	0x240120de
 8006d88:	240120dc 	.word	0x240120dc
 8006d8c:	0802bd7a 	.word	0x0802bd7a
 8006d90:	2400a0dc 	.word	0x2400a0dc
 8006d94:	240120e8 	.word	0x240120e8
 8006d98:	240121e8 	.word	0x240121e8
 8006d9c:	24015b6c 	.word	0x24015b6c
 8006da0:	240122e8 	.word	0x240122e8
 8006da4:	24015b68 	.word	0x24015b68
 8006da8:	24012368 	.word	0x24012368
 8006dac:	240122ec 	.word	0x240122ec
 8006db0:	0802bd7c 	.word	0x0802bd7c
 8006db4:	24015b6a 	.word	0x24015b6a
 8006db8:	49b71b00 	.word	0x49b71b00
 8006dbc:	24015b84 	.word	0x24015b84
 8006dc0:	49435000 	.word	0x49435000
 8006dc4:	24015b88 	.word	0x24015b88

08006dc8 <checkFftConditions>:
{
  return (uint16_t) roundf(frequency * FFT_SIZE / ((float) ADC_SAMPLING_RATE));
}

bool checkFftConditions(const uint16_t check_length, const float multiplier)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	ed87 0a00 	vstr	s0, [r7]
 8006dd4:	80fb      	strh	r3, [r7, #6]
  static const uint16_t analysis_mask = FFT_ANALYSIS_BUFF_SIZE - 1;
  uint16_t check_count = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	81fb      	strh	r3, [r7, #14]
  // looks for check_length successive points that meet the threshold condition and then sets the array start location to be at the start of the first in the chain
  for (uint16_t i = 10 - check_length; i < fft_analysis_length; i++) {
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	f1c3 030a 	rsb	r3, r3, #10
 8006de0:	81bb      	strh	r3, [r7, #12]
 8006de2:	e060      	b.n	8006ea6 <checkFftConditions+0xde>
    uint16_t remaining_length = fft_analysis_length - i;
 8006de4:	4b36      	ldr	r3, [pc, #216]	@ (8006ec0 <checkFftConditions+0xf8>)
 8006de6:	881a      	ldrh	r2, [r3, #0]
 8006de8:	89bb      	ldrh	r3, [r7, #12]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	817b      	strh	r3, [r7, #10]
    if (remaining_length + check_count < check_length) break; // not enough data points left
 8006dee:	897a      	ldrh	r2, [r7, #10]
 8006df0:	89fb      	ldrh	r3, [r7, #14]
 8006df2:	441a      	add	r2, r3
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	db5b      	blt.n	8006eb2 <checkFftConditions+0xea>

    uint16_t index = (fft_analysis_index - fft_analysis_length + i) & analysis_mask;
 8006dfa:	4b32      	ldr	r3, [pc, #200]	@ (8006ec4 <checkFftConditions+0xfc>)
 8006dfc:	881a      	ldrh	r2, [r3, #0]
 8006dfe:	4b30      	ldr	r3, [pc, #192]	@ (8006ec0 <checkFftConditions+0xf8>)
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	89bb      	ldrh	r3, [r7, #12]
 8006e08:	4413      	add	r3, r2
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	b21a      	sxth	r2, r3
 8006e0e:	4b2e      	ldr	r3, [pc, #184]	@ (8006ec8 <checkFftConditions+0x100>)
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b21b      	sxth	r3, r3
 8006e14:	4013      	ands	r3, r2
 8006e16:	b21b      	sxth	r3, r3
 8006e18:	813b      	strh	r3, [r7, #8]
    if ((fft_analysis[index].frequency0_amplitude > multiplier) ||
 8006e1a:	893a      	ldrh	r2, [r7, #8]
 8006e1c:	492b      	ldr	r1, [pc, #172]	@ (8006ecc <checkFftConditions+0x104>)
 8006e1e:	4613      	mov	r3, r2
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	1a9b      	subs	r3, r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	3308      	adds	r3, #8
 8006e2a:	edd3 7a00 	vldr	s15, [r3]
 8006e2e:	ed97 7a00 	vldr	s14, [r7]
 8006e32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3a:	d410      	bmi.n	8006e5e <checkFftConditions+0x96>
        (fft_analysis[index].frequency1_amplitude > multiplier)) {
 8006e3c:	893a      	ldrh	r2, [r7, #8]
 8006e3e:	4923      	ldr	r1, [pc, #140]	@ (8006ecc <checkFftConditions+0x104>)
 8006e40:	4613      	mov	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	330c      	adds	r3, #12
 8006e4c:	edd3 7a00 	vldr	s15, [r3]
    if ((fft_analysis[index].frequency0_amplitude > multiplier) ||
 8006e50:	ed97 7a00 	vldr	s14, [r7]
 8006e54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5c:	d51e      	bpl.n	8006e9c <checkFftConditions+0xd4>
      check_count++;
 8006e5e:	89fb      	ldrh	r3, [r7, #14]
 8006e60:	3301      	adds	r3, #1
 8006e62:	81fb      	strh	r3, [r7, #14]
      if (check_count >= check_length) {
 8006e64:	89fa      	ldrh	r2, [r7, #14]
 8006e66:	88fb      	ldrh	r3, [r7, #6]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d319      	bcc.n	8006ea0 <checkFftConditions+0xd8>
        buffer_start_index = findStartPosition((index - check_length + 1) & analysis_mask, check_length);;
 8006e6c:	893a      	ldrh	r2, [r7, #8]
 8006e6e:	88fb      	ldrh	r3, [r7, #6]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3301      	adds	r3, #1
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	b21a      	sxth	r2, r3
 8006e7a:	4b13      	ldr	r3, [pc, #76]	@ (8006ec8 <checkFftConditions+0x100>)
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b21b      	sxth	r3, r3
 8006e80:	4013      	ands	r3, r2
 8006e82:	b21b      	sxth	r3, r3
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f822 	bl	8006ed4 <findStartPosition>
 8006e90:	4603      	mov	r3, r0
 8006e92:	461a      	mov	r2, r3
 8006e94:	4b0e      	ldr	r3, [pc, #56]	@ (8006ed0 <checkFftConditions+0x108>)
 8006e96:	801a      	strh	r2, [r3, #0]
        return true;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e00c      	b.n	8006eb6 <checkFftConditions+0xee>
      }
    } else {
      check_count = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 10 - check_length; i < fft_analysis_length; i++) {
 8006ea0:	89bb      	ldrh	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	81bb      	strh	r3, [r7, #12]
 8006ea6:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <checkFftConditions+0xf8>)
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	89ba      	ldrh	r2, [r7, #12]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d399      	bcc.n	8006de4 <checkFftConditions+0x1c>
 8006eb0:	e000      	b.n	8006eb4 <checkFftConditions+0xec>
    if (remaining_length + check_count < check_length) break; // not enough data points left
 8006eb2:	bf00      	nop
    }
  }
  return false;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	24015b6a 	.word	0x24015b6a
 8006ec4:	24015b68 	.word	0x24015b68
 8006ec8:	0802bd7e 	.word	0x0802bd7e
 8006ecc:	24012368 	.word	0x24012368
 8006ed0:	240120dc 	.word	0x240120dc

08006ed4 <findStartPosition>:

static uint16_t findStartPosition(const uint16_t analysis_index, const uint16_t check_length)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	460a      	mov	r2, r1
 8006ede:	80fb      	strh	r3, [r7, #6]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	80bb      	strh	r3, [r7, #4]
  static const uint16_t analysis_mask = FFT_ANALYSIS_BUFF_SIZE - 1;
  static const uint16_t buffer_mask = PROCESSING_BUFFER_SIZE - 1;
  if (check_length == 1) {
 8006ee4:	88bb      	ldrh	r3, [r7, #4]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d112      	bne.n	8006f10 <findStartPosition+0x3c>
    return (fft_analysis[analysis_index].start_index + FFT_SIZE / 2) & analysis_mask;
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	494a      	ldr	r1, [pc, #296]	@ (8007018 <findStartPosition+0x144>)
 8006eee:	4613      	mov	r3, r2
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	1a9b      	subs	r3, r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	3318      	adds	r3, #24
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	3320      	adds	r3, #32
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	b21a      	sxth	r2, r3
 8006f02:	4b46      	ldr	r3, [pc, #280]	@ (800701c <findStartPosition+0x148>)
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b21b      	sxth	r3, r3
 8006f08:	4013      	ands	r3, r2
 8006f0a:	b21b      	sxth	r3, r3
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	e07d      	b.n	800700c <findStartPosition+0x138>
  }

  float first_amplitude;
  float second_amplitude;
  if (fft_analysis[analysis_index].frequency0_amplitude > fft_analysis[analysis_index].frequency1_amplitude) {
 8006f10:	88fa      	ldrh	r2, [r7, #6]
 8006f12:	4941      	ldr	r1, [pc, #260]	@ (8007018 <findStartPosition+0x144>)
 8006f14:	4613      	mov	r3, r2
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	1a9b      	subs	r3, r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	3308      	adds	r3, #8
 8006f20:	ed93 7a00 	vldr	s14, [r3]
 8006f24:	88fa      	ldrh	r2, [r7, #6]
 8006f26:	493c      	ldr	r1, [pc, #240]	@ (8007018 <findStartPosition+0x144>)
 8006f28:	4613      	mov	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	1a9b      	subs	r3, r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	330c      	adds	r3, #12
 8006f34:	edd3 7a00 	vldr	s15, [r3]
 8006f38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f40:	dd18      	ble.n	8006f74 <findStartPosition+0xa0>
    first_amplitude = fft_analysis[analysis_index].frequency0_amplitude;
 8006f42:	88fa      	ldrh	r2, [r7, #6]
 8006f44:	4934      	ldr	r1, [pc, #208]	@ (8007018 <findStartPosition+0x144>)
 8006f46:	4613      	mov	r3, r2
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	3308      	adds	r3, #8
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	617b      	str	r3, [r7, #20]
    second_amplitude = fft_analysis[(analysis_index + 1) & analysis_mask].frequency0_amplitude;
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	4a30      	ldr	r2, [pc, #192]	@ (800701c <findStartPosition+0x148>)
 8006f5c:	8812      	ldrh	r2, [r2, #0]
 8006f5e:	401a      	ands	r2, r3
 8006f60:	492d      	ldr	r1, [pc, #180]	@ (8007018 <findStartPosition+0x144>)
 8006f62:	4613      	mov	r3, r2
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	1a9b      	subs	r3, r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	440b      	add	r3, r1
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	e017      	b.n	8006fa4 <findStartPosition+0xd0>
  }
  else {
    first_amplitude = fft_analysis[analysis_index].frequency1_amplitude;
 8006f74:	88fa      	ldrh	r2, [r7, #6]
 8006f76:	4928      	ldr	r1, [pc, #160]	@ (8007018 <findStartPosition+0x144>)
 8006f78:	4613      	mov	r3, r2
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	330c      	adds	r3, #12
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	617b      	str	r3, [r7, #20]
    second_amplitude = fft_analysis[(analysis_index + 1) & analysis_mask].frequency1_amplitude;
 8006f88:	88fb      	ldrh	r3, [r7, #6]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	4a23      	ldr	r2, [pc, #140]	@ (800701c <findStartPosition+0x148>)
 8006f8e:	8812      	ldrh	r2, [r2, #0]
 8006f90:	401a      	ands	r2, r3
 8006f92:	4921      	ldr	r1, [pc, #132]	@ (8007018 <findStartPosition+0x144>)
 8006f94:	4613      	mov	r3, r2
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	1a9b      	subs	r3, r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	440b      	add	r3, r1
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	613b      	str	r3, [r7, #16]
  }

  const float ratio_threshold = 1.5 * 1.5;
 8006fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8007020 <findStartPosition+0x14c>)
 8006fa6:	60fb      	str	r3, [r7, #12]

  // Large increase in the amplitude between successive analysis
  if (second_amplitude / first_amplitude > ratio_threshold) {
 8006fa8:	edd7 6a04 	vldr	s13, [r7, #16]
 8006fac:	ed97 7a05 	vldr	s14, [r7, #20]
 8006fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8006fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc0:	d512      	bpl.n	8006fe8 <findStartPosition+0x114>
    return (fft_analysis[analysis_index].start_index + FFT_SIZE - FFT_SIZE / FFT_OVERLAP) & buffer_mask;
 8006fc2:	88fa      	ldrh	r2, [r7, #6]
 8006fc4:	4914      	ldr	r1, [pc, #80]	@ (8007018 <findStartPosition+0x144>)
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	1a9b      	subs	r3, r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	3318      	adds	r3, #24
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	3330      	adds	r3, #48	@ 0x30
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	b21a      	sxth	r2, r3
 8006fda:	4b12      	ldr	r3, [pc, #72]	@ (8007024 <findStartPosition+0x150>)
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b21b      	sxth	r3, r3
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	b21b      	sxth	r3, r3
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	e011      	b.n	800700c <findStartPosition+0x138>
  }
  else {
    return (fft_analysis[analysis_index].start_index + FFT_SIZE / 2) & buffer_mask;
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	490b      	ldr	r1, [pc, #44]	@ (8007018 <findStartPosition+0x144>)
 8006fec:	4613      	mov	r3, r2
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	3318      	adds	r3, #24
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	3320      	adds	r3, #32
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	b21a      	sxth	r2, r3
 8007000:	4b08      	ldr	r3, [pc, #32]	@ (8007024 <findStartPosition+0x150>)
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b21b      	sxth	r3, r3
 8007006:	4013      	ands	r3, r2
 8007008:	b21b      	sxth	r3, r3
 800700a:	b29b      	uxth	r3, r3
  }
}
 800700c:	4618      	mov	r0, r3
 800700e:	371c      	adds	r7, #28
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	24012368 	.word	0x24012368
 800701c:	0802bd80 	.word	0x0802bd80
 8007020:	40100000 	.word	0x40100000
 8007024:	0802bd82 	.word	0x0802bd82

08007028 <MESS_StartTask>:
static bool registerMessMainParams();

/* Exported function definitions ---------------------------------------------*/

void MESS_StartTask(void* argument)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	f5ad 4d94 	sub.w	sp, sp, #18944	@ 0x4a00
 800702e:	b090      	sub	sp, #64	@ 0x40
 8007030:	af00      	add	r7, sp, #0
 8007032:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8007036:	f6a3 233c 	subw	r3, r3, #2620	@ 0xa3c
 800703a:	6018      	str	r0, [r3, #0]
  (void)(argument);
  osEventFlagsClear(print_event_handle, 0xFFFFFFFF);
 800703c:	4bbf      	ldr	r3, [pc, #764]	@ (800733c <MESS_StartTask+0x314>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f04f 31ff 	mov.w	r1, #4294967295
 8007044:	4618      	mov	r0, r3
 8007046:	f017 fd69 	bl	801eb1c <osEventFlagsClear>
  Message_t tx_msg;
  WaveformStep_t message_sequence[PACKET_MAX_LENGTH_BITS];
  uint16_t message_length = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	f644 223e 	movw	r2, #19006	@ 0x4a3e
 8007050:	443a      	add	r2, r7
 8007052:	8013      	strh	r3, [r2, #0]
  EvalMessageInfo_t eval_info;

  if (Param_RegisterTask(MESS_TASK, "MESS") == false) {
 8007054:	49ba      	ldr	r1, [pc, #744]	@ (8007340 <MESS_StartTask+0x318>)
 8007056:	2002      	movs	r0, #2
 8007058:	f7fa f8a8 	bl	80011ac <Param_RegisterTask>
 800705c:	4603      	mov	r3, r0
 800705e:	f083 0301 	eor.w	r3, r3, #1
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <MESS_StartTask+0x46>
    Error_Routine(ERROR_MESS_INIT);
 8007068:	2002      	movs	r0, #2
 800706a:	f001 fb4c 	bl	8008706 <Error_Routine>
  }

  if (registerMessParams() == false) {
 800706e:	f000 fc1d 	bl	80078ac <registerMessParams>
 8007072:	4603      	mov	r3, r0
 8007074:	f083 0301 	eor.w	r3, r3, #1
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <MESS_StartTask+0x5c>
    Error_Routine(ERROR_MESS_INIT);
 800707e:	2002      	movs	r0, #2
 8007080:	f001 fb41 	bl	8008706 <Error_Routine>
  }

  if (Param_TaskRegistrationComplete(MESS_TASK) == false) {
 8007084:	2002      	movs	r0, #2
 8007086:	f7fa f90f 	bl	80012a8 <Param_TaskRegistrationComplete>
 800708a:	4603      	mov	r3, r0
 800708c:	f083 0301 	eor.w	r3, r3, #1
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <MESS_StartTask+0x74>
    Error_Routine(ERROR_MESS_INIT);
 8007096:	2002      	movs	r0, #2
 8007098:	f001 fb35 	bl	8008706 <Error_Routine>
  }

  CFG_WaitLoadComplete();
 800709c:	f7f9 fd6a 	bl	8000b74 <CFG_WaitLoadComplete>

  PGA_Init();
 80070a0:	f001 ff0a 	bl	8008eb8 <PGA_Init>
  PGA_Enable();
 80070a4:	f001 ff4c 	bl	8008f40 <PGA_Enable>
  osDelay(1);
 80070a8:	2001      	movs	r0, #1
 80070aa:	f017 fc9a 	bl	801e9e2 <osDelay>
  PGA_SetGain(PGA_GAIN_1);
 80070ae:	2000      	movs	r0, #0
 80070b0:	f001 ff1a 	bl	8008ee8 <PGA_SetGain>
  ADC_Init();
 80070b4:	f7fd fd98 	bl	8004be8 <ADC_Init>
  Input_Init();
 80070b8:	f7ff f96a 	bl	8006390 <Input_Init>
  Feedback_Init();
 80070bc:	f7ff f934 	bl	8006328 <Feedback_Init>
  Evaluate_Init();
 80070c0:	f7fe ffc0 	bl	8006044 <Evaluate_Init>
  DAC_InitWaveformGenerator();
 80070c4:	f001 fc6a 	bl	800899c <DAC_InitWaveformGenerator>
//  switchState(LISTENING);
  MESS_TaskState = LISTENING;
 80070c8:	4b9e      	ldr	r3, [pc, #632]	@ (8007344 <MESS_StartTask+0x31c>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	701a      	strb	r2, [r3, #0]

  osDelay(10);
 80070ce:	200a      	movs	r0, #10
 80070d0:	f017 fc87 	bl	801e9e2 <osDelay>
  ADC_StartInput();
 80070d4:	f7fd fdda 	bl	8004c8c <ADC_StartInput>
  for (;;) {
    switch (MESS_TaskState) {
 80070d8:	4b9a      	ldr	r3, [pc, #616]	@ (8007344 <MESS_StartTask+0x31c>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b02      	cmp	r3, #2
 80070de:	f000 80e7 	beq.w	80072b0 <MESS_StartTask+0x288>
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	f300 8206 	bgt.w	80074f4 <MESS_StartTask+0x4cc>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <MESS_StartTask+0xca>
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d013      	beq.n	8007118 <MESS_StartTask+0xf0>
            switchState(LISTENING);
          }
        }
        break;
      default:
        break;
 80070f0:	e200      	b.n	80074f4 <MESS_StartTask+0x4cc>
        if (DAC_IsRunning() == false) {
 80070f2:	f001 fd2f 	bl	8008b54 <DAC_IsRunning>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f083 0301 	eor.w	r3, r3, #1
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 81fa 	beq.w	80074f8 <MESS_StartTask+0x4d0>
          osDelay(1); // Lets the ADC finish in the case of feedback network
 8007104:	2001      	movs	r0, #1
 8007106:	f017 fc6c 	bl	801e9e2 <osDelay>
          HAL_TIM_Base_Stop(&htim6);
 800710a:	488f      	ldr	r0, [pc, #572]	@ (8007348 <MESS_StartTask+0x320>)
 800710c:	f010 f948 	bl	80173a0 <HAL_TIM_Base_Stop>
          switchState(LISTENING);
 8007110:	2001      	movs	r0, #1
 8007112:	f000 fae9 	bl	80076e8 <switchState>
        break;
 8007116:	e1ef      	b.n	80074f8 <MESS_StartTask+0x4d0>
        MessageFlags_t flags = checkFlags();
 8007118:	f000 fb70 	bl	80077fc <checkFlags>
 800711c:	4603      	mov	r3, r0
 800711e:	f644 223d 	movw	r2, #19005	@ 0x4a3d
 8007122:	443a      	add	r2, r7
 8007124:	7013      	strb	r3, [r2, #0]
        switch (flags) {
 8007126:	f644 233d 	movw	r3, #19005	@ 0x4a3d
 800712a:	443b      	add	r3, r7
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	2b08      	cmp	r3, #8
 8007130:	d021      	beq.n	8007176 <MESS_StartTask+0x14e>
 8007132:	2b08      	cmp	r3, #8
 8007134:	dc2b      	bgt.n	800718e <MESS_StartTask+0x166>
 8007136:	2b01      	cmp	r3, #1
 8007138:	d002      	beq.n	8007140 <MESS_StartTask+0x118>
 800713a:	2b04      	cmp	r3, #4
 800713c:	d00f      	beq.n	800715e <MESS_StartTask+0x136>
            break;
 800713e:	e026      	b.n	800718e <MESS_StartTask+0x166>
            osEventFlagsClear(print_event_handle, MESS_PRINT_REQUEST);
 8007140:	4b7e      	ldr	r3, [pc, #504]	@ (800733c <MESS_StartTask+0x314>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2101      	movs	r1, #1
 8007146:	4618      	mov	r0, r3
 8007148:	f017 fce8 	bl	801eb1c <osEventFlagsClear>
            Input_PrintNoise();
 800714c:	f7ff fbec 	bl	8006928 <Input_PrintNoise>
            osEventFlagsSet(print_event_handle, MESS_PRINT_COMPLETE);
 8007150:	4b7a      	ldr	r3, [pc, #488]	@ (800733c <MESS_StartTask+0x314>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2102      	movs	r1, #2
 8007156:	4618      	mov	r0, r3
 8007158:	f017 fc9e 	bl	801ea98 <osEventFlagsSet>
            break;
 800715c:	e018      	b.n	8007190 <MESS_StartTask+0x168>
            osEventFlagsClear(print_event_handle, MESS_TEST_OUTPUT);
 800715e:	4b77      	ldr	r3, [pc, #476]	@ (800733c <MESS_StartTask+0x314>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2104      	movs	r1, #4
 8007164:	4618      	mov	r0, r3
 8007166:	f017 fcd9 	bl	801eb1c <osEventFlagsClear>
            Modulate_TestOutput();
 800716a:	f000 fdb1 	bl	8007cd0 <Modulate_TestOutput>
            switchState(DRIVING_TRANSDUCER);
 800716e:	2000      	movs	r0, #0
 8007170:	f000 faba 	bl	80076e8 <switchState>
            break;
 8007174:	e00c      	b.n	8007190 <MESS_StartTask+0x168>
            osEventFlagsClear(print_event_handle, MESS_FREQ_RESP);
 8007176:	4b71      	ldr	r3, [pc, #452]	@ (800733c <MESS_StartTask+0x314>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2108      	movs	r1, #8
 800717c:	4618      	mov	r0, r3
 800717e:	f017 fccd 	bl	801eb1c <osEventFlagsClear>
            Modulate_TestFrequencyResponse();
 8007182:	f000 fdd9 	bl	8007d38 <Modulate_TestFrequencyResponse>
            switchState(DRIVING_TRANSDUCER);
 8007186:	2000      	movs	r0, #0
 8007188:	f000 faae 	bl	80076e8 <switchState>
            break;
 800718c:	e000      	b.n	8007190 <MESS_StartTask+0x168>
            break;
 800718e:	bf00      	nop
        if (MESS_GetMessageFromTxQ(&tx_msg) == pdPASS) {
 8007190:	f644 13ac 	movw	r3, #18860	@ 0x49ac
 8007194:	443b      	add	r3, r7
 8007196:	4618      	mov	r0, r3
 8007198:	f000 f9e6 	bl	8007568 <MESS_GetMessageFromTxQ>
 800719c:	4603      	mov	r3, r0
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d17c      	bne.n	800729c <MESS_StartTask+0x274>
          if (Packet_PrepareTx(&tx_msg, &bit_msg) == false) {
 80071a2:	4b6a      	ldr	r3, [pc, #424]	@ (800734c <MESS_StartTask+0x324>)
 80071a4:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 80071a8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80071ac:	443b      	add	r3, r7
 80071ae:	f644 12ac 	movw	r2, #18860	@ 0x49ac
 80071b2:	443a      	add	r2, r7
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f000 fece 	bl	8007f58 <Packet_PrepareTx>
 80071bc:	4603      	mov	r3, r0
 80071be:	f083 0301 	eor.w	r3, r3, #1
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 8199 	bne.w	80074fc <MESS_StartTask+0x4d4>
          message_length = bit_msg.bit_count;
 80071ca:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 80071ce:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 80071d2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80071d6:	f644 223e 	movw	r2, #19006	@ 0x4a3e
 80071da:	443a      	add	r2, r7
 80071dc:	8013      	strh	r3, [r2, #0]
          if (Modulate_ConvertToFrequency(&bit_msg, message_sequence) == false) {
 80071de:	4a5c      	ldr	r2, [pc, #368]	@ (8007350 <MESS_StartTask+0x328>)
 80071e0:	f644 2340 	movw	r3, #19008	@ 0x4a40
 80071e4:	4413      	add	r3, r2
 80071e6:	19da      	adds	r2, r3, r7
 80071e8:	4b58      	ldr	r3, [pc, #352]	@ (800734c <MESS_StartTask+0x324>)
 80071ea:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 80071ee:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80071f2:	443b      	add	r3, r7
 80071f4:	4611      	mov	r1, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fcc2 	bl	8007b80 <Modulate_ConvertToFrequency>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f083 0301 	eor.w	r3, r3, #1
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 817b 	bne.w	8007500 <MESS_StartTask+0x4d8>
          if (Modulate_ApplyAmplitude(message_sequence, message_length) == false) {
 800720a:	f644 233e 	movw	r3, #19006	@ 0x4a3e
 800720e:	443b      	add	r3, r7
 8007210:	881a      	ldrh	r2, [r3, #0]
 8007212:	4b4f      	ldr	r3, [pc, #316]	@ (8007350 <MESS_StartTask+0x328>)
 8007214:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 8007218:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800721c:	443b      	add	r3, r7
 800721e:	4611      	mov	r1, r2
 8007220:	4618      	mov	r0, r3
 8007222:	f000 fccd 	bl	8007bc0 <Modulate_ApplyAmplitude>
 8007226:	4603      	mov	r3, r0
 8007228:	f083 0301 	eor.w	r3, r3, #1
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	f040 8168 	bne.w	8007504 <MESS_StartTask+0x4dc>
          if (Modulate_ApplyDuration(message_sequence, message_length) == false) {
 8007234:	f644 233e 	movw	r3, #19006	@ 0x4a3e
 8007238:	443b      	add	r3, r7
 800723a:	881a      	ldrh	r2, [r3, #0]
 800723c:	4b44      	ldr	r3, [pc, #272]	@ (8007350 <MESS_StartTask+0x328>)
 800723e:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 8007242:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8007246:	443b      	add	r3, r7
 8007248:	4611      	mov	r1, r2
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fcda 	bl	8007c04 <Modulate_ApplyDuration>
 8007250:	4603      	mov	r3, r0
 8007252:	f083 0301 	eor.w	r3, r3, #1
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	f040 8155 	bne.w	8007508 <MESS_StartTask+0x4e0>
          DAC_SetWaveformSequence(message_sequence, message_length);
 800725e:	f644 233e 	movw	r3, #19006	@ 0x4a3e
 8007262:	443b      	add	r3, r7
 8007264:	881a      	ldrh	r2, [r3, #0]
 8007266:	4b3a      	ldr	r3, [pc, #232]	@ (8007350 <MESS_StartTask+0x328>)
 8007268:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 800726c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8007270:	443b      	add	r3, r7
 8007272:	4611      	mov	r1, r2
 8007274:	4618      	mov	r0, r3
 8007276:	f001 fbb1 	bl	80089dc <DAC_SetWaveformSequence>
          switch (tx_msg.type) {
 800727a:	f644 13ac 	movw	r3, #18860	@ 0x49ac
 800727e:	443b      	add	r3, r7
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d002      	beq.n	800728c <MESS_StartTask+0x264>
 8007286:	2b03      	cmp	r3, #3
 8007288:	d004      	beq.n	8007294 <MESS_StartTask+0x26c>
              break;
 800728a:	e007      	b.n	800729c <MESS_StartTask+0x274>
              switchState(DRIVING_TRANSDUCER);
 800728c:	2000      	movs	r0, #0
 800728e:	f000 fa2b 	bl	80076e8 <switchState>
              break;
 8007292:	e003      	b.n	800729c <MESS_StartTask+0x274>
              DAC_StartWaveformOutput(DAC_CHANNEL_FEEDBACK);
 8007294:	2010      	movs	r0, #16
 8007296:	f001 fc09 	bl	8008aac <DAC_StartWaveformOutput>
              break;
 800729a:	bf00      	nop
        if (Input_DetectMessageStart() == true) {
 800729c:	f7ff f8dc 	bl	8006458 <Input_DetectMessageStart>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 8132 	beq.w	800750c <MESS_StartTask+0x4e4>
          switchState(PROCESSING);
 80072a8:	2002      	movs	r0, #2
 80072aa:	f000 fa1d 	bl	80076e8 <switchState>
          break;
 80072ae:	e130      	b.n	8007512 <MESS_StartTask+0x4ea>
            (input_bit_msg.bit_count >= input_bit_msg.final_length) &&
 80072b0:	4b28      	ldr	r3, [pc, #160]	@ (8007354 <MESS_StartTask+0x32c>)
 80072b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	@ 0x86
 80072b6:	4b27      	ldr	r3, [pc, #156]	@ (8007354 <MESS_StartTask+0x32c>)
 80072b8:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 80072bc:	429a      	cmp	r2, r3
 80072be:	d306      	bcc.n	80072ce <MESS_StartTask+0x2a6>
            (input_bit_msg.preamble_received == true);
 80072c0:	4b24      	ldr	r3, [pc, #144]	@ (8007354 <MESS_StartTask+0x32c>)
 80072c2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
            (input_bit_msg.bit_count >= input_bit_msg.final_length) &&
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <MESS_StartTask+0x2a6>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <MESS_StartTask+0x2a8>
 80072ce:	2300      	movs	r3, #0
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	b2da      	uxtb	r2, r3
        input_bit_msg.fully_received =
 80072d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007354 <MESS_StartTask+0x32c>)
 80072d8:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        if (Input_SegmentBlocks() == false) {
 80072dc:	f7ff f8d4 	bl	8006488 <Input_SegmentBlocks>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f083 0301 	eor.w	r3, r3, #1
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <MESS_StartTask+0x2cc>
          Error_Routine(ERROR_MESS_PROCESSING);
 80072ec:	2004      	movs	r0, #4
 80072ee:	f001 fa0a 	bl	8008706 <Error_Routine>
          break;
 80072f2:	e10e      	b.n	8007512 <MESS_StartTask+0x4ea>
        if (Input_ProcessBlocks(&input_bit_msg, &eval_info) == false) {
 80072f4:	4b18      	ldr	r3, [pc, #96]	@ (8007358 <MESS_StartTask+0x330>)
 80072f6:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 80072fa:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80072fe:	443b      	add	r3, r7
 8007300:	4619      	mov	r1, r3
 8007302:	4814      	ldr	r0, [pc, #80]	@ (8007354 <MESS_StartTask+0x32c>)
 8007304:	f7ff f956 	bl	80065b4 <Input_ProcessBlocks>
 8007308:	4603      	mov	r3, r0
 800730a:	f083 0301 	eor.w	r3, r3, #1
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <MESS_StartTask+0x2f4>
          Error_Routine(ERROR_MESS_PROCESSING);
 8007314:	2004      	movs	r0, #4
 8007316:	f001 f9f6 	bl	8008706 <Error_Routine>
          break;
 800731a:	e0fa      	b.n	8007512 <MESS_StartTask+0x4ea>
        if (Input_DecodeBits(&input_bit_msg, evaluation_mode) == false) {
 800731c:	4b0f      	ldr	r3, [pc, #60]	@ (800735c <MESS_StartTask+0x334>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	4619      	mov	r1, r3
 8007322:	480c      	ldr	r0, [pc, #48]	@ (8007354 <MESS_StartTask+0x32c>)
 8007324:	f7ff fa02 	bl	800672c <Input_DecodeBits>
 8007328:	4603      	mov	r3, r0
 800732a:	f083 0301 	eor.w	r3, r3, #1
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d015      	beq.n	8007360 <MESS_StartTask+0x338>
          Error_Routine(ERROR_MESS_PROCESSING);
 8007334:	2004      	movs	r0, #4
 8007336:	f001 f9e6 	bl	8008706 <Error_Routine>
          break;
 800733a:	e0ea      	b.n	8007512 <MESS_StartTask+0x4ea>
 800733c:	24018734 	.word	0x24018734
 8007340:	0802ac98 	.word	0x0802ac98
 8007344:	24000280 	.word	0x24000280
 8007348:	24018484 	.word	0x24018484
 800734c:	ffffb5cc 	.word	0xffffb5cc
 8007350:	ffffbcac 	.word	0xffffbcac
 8007354:	24015b98 	.word	0x24015b98
 8007358:	ffffb660 	.word	0xffffb660
 800735c:	24015b95 	.word	0x24015b95
        if (evaluation_mode == true) {
 8007360:	4b6e      	ldr	r3, [pc, #440]	@ (800751c <MESS_StartTask+0x4f4>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d04b      	beq.n	8007400 <MESS_StartTask+0x3d8>
          if (input_bit_msg.bit_count >= EVAL_MESSAGE_LENGTH) {
 8007368:	4b6d      	ldr	r3, [pc, #436]	@ (8007520 <MESS_StartTask+0x4f8>)
 800736a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800736e:	2b63      	cmp	r3, #99	@ 0x63
 8007370:	f240 80ce 	bls.w	8007510 <MESS_StartTask+0x4e8>
            rx_msg.data_type = EVAL;
 8007374:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8007378:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 800737c:	2205      	movs	r2, #5
 800737e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
            rx_msg.timestamp = osKernelGetTickCount();
 8007382:	f017 fa87 	bl	801e894 <osKernelGetTickCount>
 8007386:	4602      	mov	r2, r0
 8007388:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 800738c:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 8007390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            rx_msg.eval_info = &eval_info;
 8007394:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8007398:	f6a3 2234 	subw	r2, r3, #2612	@ 0xa34
 800739c:	4b61      	ldr	r3, [pc, #388]	@ (8007524 <MESS_StartTask+0x4fc>)
 800739e:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 80073a2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80073a6:	443b      	add	r3, r7
 80073a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
            rx_msg.eval_info->len_bits = EVAL_MESSAGE_LENGTH;
 80073ac:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 80073b0:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 80073b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073b8:	2264      	movs	r2, #100	@ 0x64
 80073ba:	801a      	strh	r2, [r3, #0]
            rx_msg.eval_info->eval_msg = evaluation_message;
 80073bc:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 80073c0:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 80073c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073c8:	4a57      	ldr	r2, [pc, #348]	@ (8007528 <MESS_StartTask+0x500>)
 80073ca:	7812      	ldrb	r2, [r2, #0]
 80073cc:	721a      	strb	r2, [r3, #8]
            memcpy(&rx_msg.data, input_bit_msg.data, 100 / 8 + 1);
 80073ce:	4b57      	ldr	r3, [pc, #348]	@ (800752c <MESS_StartTask+0x504>)
 80073d0:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 80073d4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80073d8:	443b      	add	r3, r7
 80073da:	3301      	adds	r3, #1
 80073dc:	220d      	movs	r2, #13
 80073de:	4950      	ldr	r1, [pc, #320]	@ (8007520 <MESS_StartTask+0x4f8>)
 80073e0:	4618      	mov	r0, r3
 80073e2:	f01e f8fe 	bl	80255e2 <memcpy>
            MESS_AddMessageToRxQ(&rx_msg);
 80073e6:	4b51      	ldr	r3, [pc, #324]	@ (800752c <MESS_StartTask+0x504>)
 80073e8:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 80073ec:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80073f0:	443b      	add	r3, r7
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 f920 	bl	8007638 <MESS_AddMessageToRxQ>
            switchState(LISTENING);
 80073f8:	2001      	movs	r0, #1
 80073fa:	f000 f975 	bl	80076e8 <switchState>
        break;
 80073fe:	e087      	b.n	8007510 <MESS_StartTask+0x4e8>
          if (input_bit_msg.fully_received == true) {
 8007400:	4b47      	ldr	r3, [pc, #284]	@ (8007520 <MESS_StartTask+0x4f8>)
 8007402:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 8082 	beq.w	8007510 <MESS_StartTask+0x4e8>
            rx_msg.type = (tx_msg.type == MSG_TRANSMIT_TRANSDUCER) ?
 800740c:	f644 13ac 	movw	r3, #18860	@ 0x49ac
 8007410:	443b      	add	r3, r7
 8007412:	781b      	ldrb	r3, [r3, #0]
                          MSG_RECEIVED_TRANSDUCER : MSG_RECEIVED_FEEDBACK;
 8007414:	2b01      	cmp	r3, #1
 8007416:	d101      	bne.n	800741c <MESS_StartTask+0x3f4>
 8007418:	2200      	movs	r2, #0
 800741a:	e000      	b.n	800741e <MESS_StartTask+0x3f6>
 800741c:	2202      	movs	r2, #2
            rx_msg.type = (tx_msg.type == MSG_TRANSMIT_TRANSDUCER) ?
 800741e:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8007422:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 8007426:	701a      	strb	r2, [r3, #0]
            rx_msg.timestamp = osKernelGetTickCount();
 8007428:	f017 fa34 	bl	801e894 <osKernelGetTickCount>
 800742c:	4602      	mov	r2, r0
 800742e:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8007432:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 8007436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            rx_msg.length_bits = input_bit_msg.data_len_bits;
 800743a:	4b39      	ldr	r3, [pc, #228]	@ (8007520 <MESS_StartTask+0x4f8>)
 800743c:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8007440:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8007444:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 8007448:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
            rx_msg.data_type = input_bit_msg.contents_data_type;
 800744c:	4b34      	ldr	r3, [pc, #208]	@ (8007520 <MESS_StartTask+0x4f8>)
 800744e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8007452:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8007456:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 800745a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
            rx_msg.eval_info = &eval_info;
 800745e:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8007462:	f6a3 2234 	subw	r2, r3, #2612	@ 0xa34
 8007466:	4b2f      	ldr	r3, [pc, #188]	@ (8007524 <MESS_StartTask+0x4fc>)
 8007468:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 800746c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8007470:	443b      	add	r3, r7
 8007472:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
            rx_msg.sender_id = input_bit_msg.sender_id;
 8007476:	4b2a      	ldr	r3, [pc, #168]	@ (8007520 <MESS_StartTask+0x4f8>)
 8007478:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 800747c:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8007480:	f6a3 2334 	subw	r3, r3, #2612	@ 0xa34
 8007484:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
            if (Input_DecodeMessage(&input_bit_msg, &rx_msg) == false) {
 8007488:	4b28      	ldr	r3, [pc, #160]	@ (800752c <MESS_StartTask+0x504>)
 800748a:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 800748e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8007492:	443b      	add	r3, r7
 8007494:	4619      	mov	r1, r3
 8007496:	4822      	ldr	r0, [pc, #136]	@ (8007520 <MESS_StartTask+0x4f8>)
 8007498:	f7ff f9e0 	bl	800685c <Input_DecodeMessage>
 800749c:	4603      	mov	r3, r0
 800749e:	f083 0301 	eor.w	r3, r3, #1
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <MESS_StartTask+0x488>
              Error_Routine(ERROR_MESS_PROCESSING);
 80074a8:	2004      	movs	r0, #4
 80074aa:	f001 f92c 	bl	8008706 <Error_Routine>
              break;
 80074ae:	e030      	b.n	8007512 <MESS_StartTask+0x4ea>
            if (ErrorCorrection_CheckCorrection(&input_bit_msg,
 80074b0:	4b1e      	ldr	r3, [pc, #120]	@ (800752c <MESS_StartTask+0x504>)
 80074b2:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 80074b6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80074ba:	443b      	add	r3, r7
 80074bc:	338a      	adds	r3, #138	@ 0x8a
 80074be:	4619      	mov	r1, r3
 80074c0:	4817      	ldr	r0, [pc, #92]	@ (8007520 <MESS_StartTask+0x4f8>)
 80074c2:	f7fe f8b7 	bl	8005634 <ErrorCorrection_CheckCorrection>
 80074c6:	4603      	mov	r3, r0
                &rx_msg.error_correction_error) == false) {
 80074c8:	f083 0301 	eor.w	r3, r3, #1
 80074cc:	b2db      	uxtb	r3, r3
            if (ErrorCorrection_CheckCorrection(&input_bit_msg,
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <MESS_StartTask+0x4b2>
              Error_Routine(ERROR_MESS_PROCESSING);
 80074d2:	2004      	movs	r0, #4
 80074d4:	f001 f917 	bl	8008706 <Error_Routine>
              break;
 80074d8:	e01b      	b.n	8007512 <MESS_StartTask+0x4ea>
            MESS_AddMessageToRxQ(&rx_msg);
 80074da:	4b14      	ldr	r3, [pc, #80]	@ (800752c <MESS_StartTask+0x504>)
 80074dc:	f503 4394 	add.w	r3, r3, #18944	@ 0x4a00
 80074e0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80074e4:	443b      	add	r3, r7
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f8a6 	bl	8007638 <MESS_AddMessageToRxQ>
            switchState(LISTENING);
 80074ec:	2001      	movs	r0, #1
 80074ee:	f000 f8fb 	bl	80076e8 <switchState>
        break;
 80074f2:	e00d      	b.n	8007510 <MESS_StartTask+0x4e8>
        break;
 80074f4:	bf00      	nop
 80074f6:	e00c      	b.n	8007512 <MESS_StartTask+0x4ea>
        break;
 80074f8:	bf00      	nop
 80074fa:	e00a      	b.n	8007512 <MESS_StartTask+0x4ea>
            break;
 80074fc:	bf00      	nop
 80074fe:	e008      	b.n	8007512 <MESS_StartTask+0x4ea>
            break;
 8007500:	bf00      	nop
 8007502:	e006      	b.n	8007512 <MESS_StartTask+0x4ea>
            break;
 8007504:	bf00      	nop
 8007506:	e004      	b.n	8007512 <MESS_StartTask+0x4ea>
            break;
 8007508:	bf00      	nop
 800750a:	e002      	b.n	8007512 <MESS_StartTask+0x4ea>
        break;
 800750c:	bf00      	nop
 800750e:	e000      	b.n	8007512 <MESS_StartTask+0x4ea>
        break;
 8007510:	bf00      	nop
    }
    osDelay(1);
 8007512:	2001      	movs	r0, #1
 8007514:	f017 fa65 	bl	801e9e2 <osDelay>
    switch (MESS_TaskState) {
 8007518:	e5de      	b.n	80070d8 <MESS_StartTask+0xb0>
 800751a:	bf00      	nop
 800751c:	24015b95 	.word	0x24015b95
 8007520:	24015b98 	.word	0x24015b98
 8007524:	ffffb660 	.word	0xffffb660
 8007528:	2400027f 	.word	0x2400027f
 800752c:	ffffb5cc 	.word	0xffffb5cc

08007530 <MESS_InitializeQueues>:
  }
}

void MESS_InitializeQueues(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  tx_queue = xQueueCreate(MSG_QUEUE_SIZE, sizeof(Message_t));
 8007534:	2200      	movs	r2, #0
 8007536:	2190      	movs	r1, #144	@ 0x90
 8007538:	200a      	movs	r0, #10
 800753a:	f018 f960 	bl	801f7fe <xQueueGenericCreate>
 800753e:	4603      	mov	r3, r0
 8007540:	4a07      	ldr	r2, [pc, #28]	@ (8007560 <MESS_InitializeQueues+0x30>)
 8007542:	6013      	str	r3, [r2, #0]
  rx_queue = xQueueCreate(MSG_QUEUE_SIZE, sizeof(Message_t));
 8007544:	2200      	movs	r2, #0
 8007546:	2190      	movs	r1, #144	@ 0x90
 8007548:	200a      	movs	r0, #10
 800754a:	f018 f958 	bl	801f7fe <xQueueGenericCreate>
 800754e:	4603      	mov	r3, r0
 8007550:	4a04      	ldr	r2, [pc, #16]	@ (8007564 <MESS_InitializeQueues+0x34>)
 8007552:	6013      	str	r3, [r2, #0]

  if (tx_queue == NULL || rx_queue == NULL) {
 8007554:	4b02      	ldr	r3, [pc, #8]	@ (8007560 <MESS_InitializeQueues+0x30>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
    // TODO: Handle error
  }
}
 800755a:	bf00      	nop
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	24015b8c 	.word	0x24015b8c
 8007564:	24015b90 	.word	0x24015b90

08007568 <MESS_GetMessageFromTxQ>:

BaseType_t MESS_GetMessageFromTxQ(Message_t* msg)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  if (tx_queue == NULL || msg == NULL) {
 8007570:	4b0f      	ldr	r3, [pc, #60]	@ (80075b0 <MESS_GetMessageFromTxQ+0x48>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <MESS_GetMessageFromTxQ+0x16>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <MESS_GetMessageFromTxQ+0x1a>
    return pdFAIL;
 800757e:	2300      	movs	r3, #0
 8007580:	e011      	b.n	80075a6 <MESS_GetMessageFromTxQ+0x3e>
  }

  if (uxQueueMessagesWaiting(tx_queue) > 0) {
 8007582:	4b0b      	ldr	r3, [pc, #44]	@ (80075b0 <MESS_GetMessageFromTxQ+0x48>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f018 fe50 	bl	802022c <uxQueueMessagesWaiting>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d008      	beq.n	80075a4 <MESS_GetMessageFromTxQ+0x3c>
    return xQueueReceive(tx_queue, (void*)msg, 0);
 8007592:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <MESS_GetMessageFromTxQ+0x48>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2200      	movs	r2, #0
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4618      	mov	r0, r3
 800759c:	f018 fc54 	bl	801fe48 <xQueueReceive>
 80075a0:	4603      	mov	r3, r0
 80075a2:	e000      	b.n	80075a6 <MESS_GetMessageFromTxQ+0x3e>
  }

  return pdFAIL;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	24015b8c 	.word	0x24015b8c

080075b4 <MESS_AddMessageToTxQ>:

BaseType_t MESS_AddMessageToTxQ(Message_t* msg)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  if (tx_queue == NULL || msg == NULL) {
 80075bc:	4b0a      	ldr	r3, [pc, #40]	@ (80075e8 <MESS_AddMessageToTxQ+0x34>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <MESS_AddMessageToTxQ+0x16>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <MESS_AddMessageToTxQ+0x1a>
    return pdFAIL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	e007      	b.n	80075de <MESS_AddMessageToTxQ+0x2a>
  }

  return xQueueSend(tx_queue, msg, 5);
 80075ce:	4b06      	ldr	r3, [pc, #24]	@ (80075e8 <MESS_AddMessageToTxQ+0x34>)
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	2300      	movs	r3, #0
 80075d4:	2205      	movs	r2, #5
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	f018 fa96 	bl	801fb08 <xQueueGenericSend>
 80075dc:	4603      	mov	r3, r0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	24015b8c 	.word	0x24015b8c

080075ec <MESS_GetMessageFromRxQ>:
BaseType_t MESS_GetMessageFromRxQ(Message_t* msg)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  if (rx_queue == NULL || msg == NULL) {
 80075f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007634 <MESS_GetMessageFromRxQ+0x48>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <MESS_GetMessageFromRxQ+0x16>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <MESS_GetMessageFromRxQ+0x1a>
    return pdFAIL;
 8007602:	2300      	movs	r3, #0
 8007604:	e011      	b.n	800762a <MESS_GetMessageFromRxQ+0x3e>
  }

  if (uxQueueMessagesWaiting(rx_queue) > 0) {
 8007606:	4b0b      	ldr	r3, [pc, #44]	@ (8007634 <MESS_GetMessageFromRxQ+0x48>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4618      	mov	r0, r3
 800760c:	f018 fe0e 	bl	802022c <uxQueueMessagesWaiting>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <MESS_GetMessageFromRxQ+0x3c>
    return xQueueReceive(rx_queue, (void*)msg, 0);
 8007616:	4b07      	ldr	r3, [pc, #28]	@ (8007634 <MESS_GetMessageFromRxQ+0x48>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	4618      	mov	r0, r3
 8007620:	f018 fc12 	bl	801fe48 <xQueueReceive>
 8007624:	4603      	mov	r3, r0
 8007626:	e000      	b.n	800762a <MESS_GetMessageFromRxQ+0x3e>
  }

  return pdFAIL;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	24015b90 	.word	0x24015b90

08007638 <MESS_AddMessageToRxQ>:

BaseType_t MESS_AddMessageToRxQ(Message_t* msg)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  if (rx_queue == NULL || msg == NULL) {
 8007640:	4b0a      	ldr	r3, [pc, #40]	@ (800766c <MESS_AddMessageToRxQ+0x34>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <MESS_AddMessageToRxQ+0x16>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <MESS_AddMessageToRxQ+0x1a>
    return pdFAIL;
 800764e:	2300      	movs	r3, #0
 8007650:	e007      	b.n	8007662 <MESS_AddMessageToRxQ+0x2a>
  }

  return xQueueSend(rx_queue, msg, 5);
 8007652:	4b06      	ldr	r3, [pc, #24]	@ (800766c <MESS_AddMessageToRxQ+0x34>)
 8007654:	6818      	ldr	r0, [r3, #0]
 8007656:	2300      	movs	r3, #0
 8007658:	2205      	movs	r2, #5
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	f018 fa54 	bl	801fb08 <xQueueGenericSend>
 8007660:	4603      	mov	r3, r0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	24015b90 	.word	0x24015b90

08007670 <MESS_RoundBaud>:

void MESS_RoundBaud(float* baud)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  float length_multiple = DAC_BUFFER_SIZE / 2; // Length of sequence must be a multiple of half the DAC buffer size
 8007678:	4b19      	ldr	r3, [pc, #100]	@ (80076e0 <MESS_RoundBaud+0x70>)
 800767a:	617b      	str	r3, [r7, #20]
  float length_multiple_us = length_multiple * DAC_SAMPLE_RATE / 1000000.0f; // Converts symbol length multiple into micro seconds
 800767c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007680:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80076e4 <MESS_RoundBaud+0x74>
 8007684:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007688:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80076e4 <MESS_RoundBaud+0x74>
 800768c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007690:	edc7 7a04 	vstr	s15, [r7, #16]

  float baud_duration_us = (1000000.0f / *baud);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	ed93 7a00 	vldr	s14, [r3]
 800769a:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80076e4 <MESS_RoundBaud+0x74>
 800769e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a2:	edc7 7a03 	vstr	s15, [r7, #12]

  float baud_multiple_durations = roundf(baud_duration_us / length_multiple_us);
 80076a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80076aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80076ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80076b2:	eeb0 0a66 	vmov.f32	s0, s13
 80076b6:	f021 ff13 	bl	80294e0 <roundf>
 80076ba:	ed87 0a02 	vstr	s0, [r7, #8]
  *baud = 1000000.0f / (baud_multiple_durations * length_multiple_us);
 80076be:	ed97 7a02 	vldr	s14, [r7, #8]
 80076c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80076c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076ca:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80076e4 <MESS_RoundBaud+0x74>
 80076ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	edc3 7a00 	vstr	s15, [r3]
}
 80076d8:	bf00      	nop
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	437a0000 	.word	0x437a0000
 80076e4:	49742400 	.word	0x49742400

080076e8 <switchState>:

/* Private function definitions ----------------------------------------------*/

static void switchState(ProcessingState_t newState)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
  // First deactivate and clear all adcs, dacs, and all buffers except for the input buffer when transitioning from listening to processing
  MESS_TaskState = CHANGING;
 80076f2:	4b31      	ldr	r3, [pc, #196]	@ (80077b8 <switchState+0xd0>)
 80076f4:	2203      	movs	r2, #3
 80076f6:	701a      	strb	r2, [r3, #0]
  switch (newState) {
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d04f      	beq.n	800779e <switchState+0xb6>
 80076fe:	2b02      	cmp	r3, #2
 8007700:	dc54      	bgt.n	80077ac <switchState+0xc4>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <switchState+0x24>
 8007706:	2b01      	cmp	r3, #1
 8007708:	d029      	beq.n	800775e <switchState+0x76>
    case PROCESSING:
      Packet_PrepareRx(&input_bit_msg);
      MESS_TaskState = PROCESSING;
      break;
    default:
      break;
 800770a:	e04f      	b.n	80077ac <switchState+0xc4>
      ADC_StopAll();
 800770c:	f7fd fb28 	bl	8004d60 <ADC_StopAll>
      HAL_TIM_Base_Start(&htim6);
 8007710:	482a      	ldr	r0, [pc, #168]	@ (80077bc <switchState+0xd4>)
 8007712:	f00f fdc7 	bl	80172a4 <HAL_TIM_Base_Start>
      HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8007716:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800771a:	2200      	movs	r2, #0
 800771c:	2100      	movs	r1, #0
 800771e:	4828      	ldr	r0, [pc, #160]	@ (80077c0 <switchState+0xd8>)
 8007720:	f006 fd33 	bl	800e18a <HAL_DAC_SetValue>
      HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8007724:	2100      	movs	r1, #0
 8007726:	4826      	ldr	r0, [pc, #152]	@ (80077c0 <switchState+0xd8>)
 8007728:	f006 fb52 	bl	800ddd0 <HAL_DAC_Start>
      osDelay(1);
 800772c:	2001      	movs	r0, #1
 800772e:	f017 f958 	bl	801e9e2 <osDelay>
      HAL_TIM_Base_Stop(&htim6);
 8007732:	4822      	ldr	r0, [pc, #136]	@ (80077bc <switchState+0xd4>)
 8007734:	f00f fe34 	bl	80173a0 <HAL_TIM_Base_Stop>
      HAL_GPIO_WritePin(PAMP_MUTE_GPIO_Port, PAMP_MUTE_Pin, GPIO_PIN_RESET);
 8007738:	2200      	movs	r2, #0
 800773a:	2180      	movs	r1, #128	@ 0x80
 800773c:	4821      	ldr	r0, [pc, #132]	@ (80077c4 <switchState+0xdc>)
 800773e:	f009 ffaf 	bl	80116a0 <HAL_GPIO_WritePin>
      osDelay(1);
 8007742:	2001      	movs	r0, #1
 8007744:	f017 f94d 	bl	801e9e2 <osDelay>
      switchTrTransmit();
 8007748:	f000 f840 	bl	80077cc <switchTrTransmit>
      osDelay(10);
 800774c:	200a      	movs	r0, #10
 800774e:	f017 f948 	bl	801e9e2 <osDelay>
      Modulate_StartTransducerOutput();
 8007752:	f000 fa87 	bl	8007c64 <Modulate_StartTransducerOutput>
      MESS_TaskState = DRIVING_TRANSDUCER;
 8007756:	4b18      	ldr	r3, [pc, #96]	@ (80077b8 <switchState+0xd0>)
 8007758:	2200      	movs	r2, #0
 800775a:	701a      	strb	r2, [r3, #0]
      break;
 800775c:	e027      	b.n	80077ae <switchState+0xc6>
      DAC_StopWaveformOutput();
 800775e:	f001 f9e3 	bl	8008b28 <DAC_StopWaveformOutput>
      HAL_TIM_Base_Stop(&htim6);
 8007762:	4816      	ldr	r0, [pc, #88]	@ (80077bc <switchState+0xd4>)
 8007764:	f00f fe1c 	bl	80173a0 <HAL_TIM_Base_Stop>
      HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8007768:	2100      	movs	r1, #0
 800776a:	4815      	ldr	r0, [pc, #84]	@ (80077c0 <switchState+0xd8>)
 800776c:	f006 fb87 	bl	800de7e <HAL_DAC_Stop>
      HAL_GPIO_WritePin(PAMP_MUTE_GPIO_Port, PAMP_MUTE_Pin, GPIO_PIN_SET);
 8007770:	2201      	movs	r2, #1
 8007772:	2180      	movs	r1, #128	@ 0x80
 8007774:	4813      	ldr	r0, [pc, #76]	@ (80077c4 <switchState+0xdc>)
 8007776:	f009 ff93 	bl	80116a0 <HAL_GPIO_WritePin>
      ADC_StopAll();
 800777a:	f7fd faf1 	bl	8004d60 <ADC_StopAll>
      Input_Reset();
 800777e:	f7ff f8a3 	bl	80068c8 <Input_Reset>
      osDelay(100); // I am terrified of the pre-amplifier being exposed to residual voltage from the power amplifier
 8007782:	2064      	movs	r0, #100	@ 0x64
 8007784:	f017 f92d 	bl	801e9e2 <osDelay>
      switchTrReceive();
 8007788:	f000 f82c 	bl	80077e4 <switchTrReceive>
      osDelay(5);
 800778c:	2005      	movs	r0, #5
 800778e:	f017 f928 	bl	801e9e2 <osDelay>
      ADC_StartInput();
 8007792:	f7fd fa7b 	bl	8004c8c <ADC_StartInput>
      MESS_TaskState = LISTENING;
 8007796:	4b08      	ldr	r3, [pc, #32]	@ (80077b8 <switchState+0xd0>)
 8007798:	2201      	movs	r2, #1
 800779a:	701a      	strb	r2, [r3, #0]
      break;
 800779c:	e007      	b.n	80077ae <switchState+0xc6>
      Packet_PrepareRx(&input_bit_msg);
 800779e:	480a      	ldr	r0, [pc, #40]	@ (80077c8 <switchState+0xe0>)
 80077a0:	f000 fc1c 	bl	8007fdc <Packet_PrepareRx>
      MESS_TaskState = PROCESSING;
 80077a4:	4b04      	ldr	r3, [pc, #16]	@ (80077b8 <switchState+0xd0>)
 80077a6:	2202      	movs	r2, #2
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	e000      	b.n	80077ae <switchState+0xc6>
      break;
 80077ac:	bf00      	nop
  }
}
 80077ae:	bf00      	nop
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	24000280 	.word	0x24000280
 80077bc:	24018484 	.word	0x24018484
 80077c0:	24018144 	.word	0x24018144
 80077c4:	58021000 	.word	0x58021000
 80077c8:	24015b98 	.word	0x24015b98

080077cc <switchTrTransmit>:

static void switchTrTransmit()
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, TR_CTRL_Pin, GPIO_PIN_RESET);
 80077d0:	2200      	movs	r2, #0
 80077d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80077d6:	4802      	ldr	r0, [pc, #8]	@ (80077e0 <switchTrTransmit+0x14>)
 80077d8:	f009 ff62 	bl	80116a0 <HAL_GPIO_WritePin>
}
 80077dc:	bf00      	nop
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	58020c00 	.word	0x58020c00

080077e4 <switchTrReceive>:

static void switchTrReceive()
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, TR_CTRL_Pin, GPIO_PIN_SET);
 80077e8:	2201      	movs	r2, #1
 80077ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80077ee:	4802      	ldr	r0, [pc, #8]	@ (80077f8 <switchTrReceive+0x14>)
 80077f0:	f009 ff56 	bl	80116a0 <HAL_GPIO_WritePin>
}
 80077f4:	bf00      	nop
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	58020c00 	.word	0x58020c00

080077fc <checkFlags>:

static MessageFlags_t checkFlags()
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
  uint32_t flags;
  if (print_event_handle == NULL) {
 8007802:	4b29      	ldr	r3, [pc, #164]	@ (80078a8 <checkFlags+0xac>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <checkFlags+0x12>
    return 0;
 800780a:	2300      	movs	r3, #0
 800780c:	e048      	b.n	80078a0 <checkFlags+0xa4>
  }
  flags = osEventFlagsWait(print_event_handle, MESS_PRINT_REQUEST, osFlagsWaitAny, 0);
 800780e:	4b26      	ldr	r3, [pc, #152]	@ (80078a8 <checkFlags+0xac>)
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	2300      	movs	r3, #0
 8007814:	2200      	movs	r2, #0
 8007816:	2101      	movs	r1, #1
 8007818:	f017 f9b1 	bl	801eb7e <osEventFlagsWait>
 800781c:	6078      	str	r0, [r7, #4]

  if (flags == osFlagsErrorResource) {
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f113 0f03 	cmn.w	r3, #3
 8007824:	d009      	beq.n	800783a <checkFlags+0x3e>
    // Normal nothing returned. Do nothing
  }
  else if (flags & 0x80000000U) {
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	db06      	blt.n	800783a <checkFlags+0x3e>
    // TODO: log error
  }
  else if ((flags & MESS_PRINT_REQUEST) == MESS_PRINT_REQUEST) {
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <checkFlags+0x3e>
    return MESS_PRINT_REQUEST;
 8007836:	2301      	movs	r3, #1
 8007838:	e032      	b.n	80078a0 <checkFlags+0xa4>
  }

  flags = osEventFlagsWait(print_event_handle, MESS_TEST_OUTPUT, osFlagsWaitAny, 0);
 800783a:	4b1b      	ldr	r3, [pc, #108]	@ (80078a8 <checkFlags+0xac>)
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	2300      	movs	r3, #0
 8007840:	2200      	movs	r2, #0
 8007842:	2104      	movs	r1, #4
 8007844:	f017 f99b 	bl	801eb7e <osEventFlagsWait>
 8007848:	6078      	str	r0, [r7, #4]

  if (flags == osFlagsErrorResource) {
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f113 0f03 	cmn.w	r3, #3
 8007850:	d00f      	beq.n	8007872 <checkFlags+0x76>
    // Normal nothing returned. Do nothing
  }
  else if (flags & 0x80000000U) {
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	db0c      	blt.n	8007872 <checkFlags+0x76>
    // TODO: log error
  }
  else if ((flags & MESS_TEST_OUTPUT) == MESS_TEST_OUTPUT) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <checkFlags+0x76>
    osEventFlagsClear(print_event_handle, MESS_TEST_OUTPUT); // TODO: test if useless
 8007862:	4b11      	ldr	r3, [pc, #68]	@ (80078a8 <checkFlags+0xac>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2104      	movs	r1, #4
 8007868:	4618      	mov	r0, r3
 800786a:	f017 f957 	bl	801eb1c <osEventFlagsClear>
    return MESS_TEST_OUTPUT;
 800786e:	2304      	movs	r3, #4
 8007870:	e016      	b.n	80078a0 <checkFlags+0xa4>
  }

  flags = osEventFlagsWait(print_event_handle, MESS_FREQ_RESP, osFlagsWaitAny, 0);
 8007872:	4b0d      	ldr	r3, [pc, #52]	@ (80078a8 <checkFlags+0xac>)
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	2300      	movs	r3, #0
 8007878:	2200      	movs	r2, #0
 800787a:	2108      	movs	r1, #8
 800787c:	f017 f97f 	bl	801eb7e <osEventFlagsWait>
 8007880:	6078      	str	r0, [r7, #4]

  if (flags == osFlagsErrorResource) {
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f113 0f03 	cmn.w	r3, #3
 8007888:	d009      	beq.n	800789e <checkFlags+0xa2>
    // Normal nothing returned. Do nothing
  }
  else if (flags & 0x80000000U) {
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	db06      	blt.n	800789e <checkFlags+0xa2>
    // TODO: log error
  }
  else if ((flags & MESS_FREQ_RESP) == MESS_FREQ_RESP) {
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <checkFlags+0xa2>
    return MESS_FREQ_RESP;
 800789a:	2308      	movs	r3, #8
 800789c:	e000      	b.n	80078a0 <checkFlags+0xa4>
  }
  return 0;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	24018734 	.word	0x24018734

080078ac <registerMessParams>:

static bool registerMessParams()
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	af00      	add	r7, sp, #0
  // register all parameters from all files
  if (Modulate_RegisterParams() == false) {
 80078b0:	f000 fab2 	bl	8007e18 <Modulate_RegisterParams>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f083 0301 	eor.w	r3, r3, #1
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <registerMessParams+0x18>
    return false;
 80078c0:	2300      	movs	r3, #0
 80078c2:	e028      	b.n	8007916 <registerMessParams+0x6a>
  }

  if (registerMessMainParams() == false) {
 80078c4:	f000 f82a 	bl	800791c <registerMessMainParams>
 80078c8:	4603      	mov	r3, r0
 80078ca:	f083 0301 	eor.w	r3, r3, #1
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <registerMessParams+0x2c>
    return false;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e01e      	b.n	8007916 <registerMessParams+0x6a>
  }

  if (Input_RegisterParams() == false) {
 80078d8:	f7ff f896 	bl	8006a08 <Input_RegisterParams>
 80078dc:	4603      	mov	r3, r0
 80078de:	f083 0301 	eor.w	r3, r3, #1
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <registerMessParams+0x40>
    return false;
 80078e8:	2300      	movs	r3, #0
 80078ea:	e014      	b.n	8007916 <registerMessParams+0x6a>
  }

  if (Packet_RegisterParams() == false) {
 80078ec:	f000 fcd8 	bl	80082a0 <Packet_RegisterParams>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f083 0301 	eor.w	r3, r3, #1
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <registerMessParams+0x54>
    return false;
 80078fc:	2300      	movs	r3, #0
 80078fe:	e00a      	b.n	8007916 <registerMessParams+0x6a>
  }

  if (ErrorCorrection_RegisterParams() == false) {
 8007900:	f7fd ff20 	bl	8005744 <ErrorCorrection_RegisterParams>
 8007904:	4603      	mov	r3, r0
 8007906:	f083 0301 	eor.w	r3, r3, #1
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <registerMessParams+0x68>
    return false;
 8007910:	2300      	movs	r3, #0
 8007912:	e000      	b.n	8007916 <registerMessParams+0x6a>
  }

  return true;
 8007914:	2301      	movs	r3, #1
}
 8007916:	4618      	mov	r0, r3
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <registerMessMainParams>:

static bool registerMessMainParams()
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af04      	add	r7, sp, #16
  float min_f = MIN_BAUD_RATE;
 8007922:	4b7b      	ldr	r3, [pc, #492]	@ (8007b10 <registerMessMainParams+0x1f4>)
 8007924:	60fb      	str	r3, [r7, #12]
  float max_f = MAX_BAUD_RATE;
 8007926:	4b7b      	ldr	r3, [pc, #492]	@ (8007b14 <registerMessMainParams+0x1f8>)
 8007928:	60bb      	str	r3, [r7, #8]
  if (Param_Register(PARAM_BAUD, "baud rate", PARAM_TYPE_FLOAT,
 800792a:	f107 0308 	add.w	r3, r7, #8
 800792e:	9302      	str	r3, [sp, #8]
 8007930:	f107 030c 	add.w	r3, r7, #12
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	2304      	movs	r3, #4
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	4b77      	ldr	r3, [pc, #476]	@ (8007b18 <registerMessMainParams+0x1fc>)
 800793c:	2206      	movs	r2, #6
 800793e:	4977      	ldr	r1, [pc, #476]	@ (8007b1c <registerMessMainParams+0x200>)
 8007940:	2000      	movs	r0, #0
 8007942:	f7f9 f96f 	bl	8000c24 <Param_Register>
 8007946:	4603      	mov	r3, r0
                     &baud_rate, sizeof(float), &min_f, &max_f) == false) {
 8007948:	f083 0301 	eor.w	r3, r3, #1
 800794c:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_BAUD, "baud rate", PARAM_TYPE_FLOAT,
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <registerMessMainParams+0x3a>
    return false;
 8007952:	2300      	movs	r3, #0
 8007954:	e0d8      	b.n	8007b08 <registerMessMainParams+0x1ec>
  }

  uint32_t min_u32 = MIN_FSK_FREQUENCY;
 8007956:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800795a:	607b      	str	r3, [r7, #4]
  uint32_t max_u32 = MAX_FSK_FREQUENCY;
 800795c:	f249 4370 	movw	r3, #38000	@ 0x9470
 8007960:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_FSK_F0, "FSK 0 frequency", PARAM_TYPE_UINT32,
 8007962:	463b      	mov	r3, r7
 8007964:	9302      	str	r3, [sp, #8]
 8007966:	1d3b      	adds	r3, r7, #4
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	2304      	movs	r3, #4
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	4b6c      	ldr	r3, [pc, #432]	@ (8007b20 <registerMessMainParams+0x204>)
 8007970:	2204      	movs	r2, #4
 8007972:	496c      	ldr	r1, [pc, #432]	@ (8007b24 <registerMessMainParams+0x208>)
 8007974:	2003      	movs	r0, #3
 8007976:	f7f9 f955 	bl	8000c24 <Param_Register>
 800797a:	4603      	mov	r3, r0
                     &fsk_f0, sizeof(uint32_t), &min_u32, &max_u32) == false) {
 800797c:	f083 0301 	eor.w	r3, r3, #1
 8007980:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_FSK_F0, "FSK 0 frequency", PARAM_TYPE_UINT32,
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <registerMessMainParams+0x6e>
    return false;
 8007986:	2300      	movs	r3, #0
 8007988:	e0be      	b.n	8007b08 <registerMessMainParams+0x1ec>
  }
  if (Param_Register(PARAM_FSK_F1, "FSK 1 frequency", PARAM_TYPE_UINT32,
 800798a:	463b      	mov	r3, r7
 800798c:	9302      	str	r3, [sp, #8]
 800798e:	1d3b      	adds	r3, r7, #4
 8007990:	9301      	str	r3, [sp, #4]
 8007992:	2304      	movs	r3, #4
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	4b64      	ldr	r3, [pc, #400]	@ (8007b28 <registerMessMainParams+0x20c>)
 8007998:	2204      	movs	r2, #4
 800799a:	4964      	ldr	r1, [pc, #400]	@ (8007b2c <registerMessMainParams+0x210>)
 800799c:	2004      	movs	r0, #4
 800799e:	f7f9 f941 	bl	8000c24 <Param_Register>
 80079a2:	4603      	mov	r3, r0
                     &fsk_f1, sizeof(uint32_t), &min_u32, &max_u32) == false) {
 80079a4:	f083 0301 	eor.w	r3, r3, #1
 80079a8:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_FSK_F1, "FSK 1 frequency", PARAM_TYPE_UINT32,
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <registerMessMainParams+0x96>
    return false;
 80079ae:	2300      	movs	r3, #0
 80079b0:	e0aa      	b.n	8007b08 <registerMessMainParams+0x1ec>
  }

  min_u32 = MIN_MOD_DEMOD_METHOD;
 80079b2:	2300      	movs	r3, #0
 80079b4:	607b      	str	r3, [r7, #4]
  max_u32 = MAX_MOD_DEMOD_METHOD;
 80079b6:	2301      	movs	r3, #1
 80079b8:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_MOD_DEMOD_METHOD, "mod/demod method", PARAM_TYPE_UINT8,
 80079ba:	463b      	mov	r3, r7
 80079bc:	9302      	str	r3, [sp, #8]
 80079be:	1d3b      	adds	r3, r7, #4
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	2301      	movs	r3, #1
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4b5a      	ldr	r3, [pc, #360]	@ (8007b30 <registerMessMainParams+0x214>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	495a      	ldr	r1, [pc, #360]	@ (8007b34 <registerMessMainParams+0x218>)
 80079cc:	2005      	movs	r0, #5
 80079ce:	f7f9 f929 	bl	8000c24 <Param_Register>
 80079d2:	4603      	mov	r3, r0
                     &mod_demod_method, sizeof(uint8_t), &min_u32, &max_u32) == false) {
 80079d4:	f083 0301 	eor.w	r3, r3, #1
 80079d8:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_MOD_DEMOD_METHOD, "mod/demod method", PARAM_TYPE_UINT8,
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <registerMessMainParams+0xc6>
    return false;
 80079de:	2300      	movs	r3, #0
 80079e0:	e092      	b.n	8007b08 <registerMessMainParams+0x1ec>
  }

  min_u32 = MIN_FC;
 80079e2:	f247 5330 	movw	r3, #30000	@ 0x7530
 80079e6:	607b      	str	r3, [r7, #4]
  max_u32 = MAX_FC;
 80079e8:	f248 03e8 	movw	r3, #33000	@ 0x80e8
 80079ec:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_FC, "center frequency", PARAM_TYPE_UINT32,
 80079ee:	463b      	mov	r3, r7
 80079f0:	9302      	str	r3, [sp, #8]
 80079f2:	1d3b      	adds	r3, r7, #4
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	2304      	movs	r3, #4
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007b38 <registerMessMainParams+0x21c>)
 80079fc:	2204      	movs	r2, #4
 80079fe:	494f      	ldr	r1, [pc, #316]	@ (8007b3c <registerMessMainParams+0x220>)
 8007a00:	2006      	movs	r0, #6
 8007a02:	f7f9 f90f 	bl	8000c24 <Param_Register>
 8007a06:	4603      	mov	r3, r0
                     &fc, sizeof(uint32_t), &min_u32, &max_u32) == false) {
 8007a08:	f083 0301 	eor.w	r3, r3, #1
 8007a0c:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_FC, "center frequency", PARAM_TYPE_UINT32,
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <registerMessMainParams+0xfa>
    return false;
 8007a12:	2300      	movs	r3, #0
 8007a14:	e078      	b.n	8007b08 <registerMessMainParams+0x1ec>
  }

  min_u32 = MIN_FHBFSK_FREQ_SPACING;
 8007a16:	2301      	movs	r3, #1
 8007a18:	607b      	str	r3, [r7, #4]
  max_u32 = MAX_FHBFSK_FREQ_SPACING;
 8007a1a:	230a      	movs	r3, #10
 8007a1c:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_FHBFSK_FREQ_SPACING, "frequency spacing", PARAM_TYPE_UINT8,
 8007a1e:	463b      	mov	r3, r7
 8007a20:	9302      	str	r3, [sp, #8]
 8007a22:	1d3b      	adds	r3, r7, #4
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	2301      	movs	r3, #1
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	4b45      	ldr	r3, [pc, #276]	@ (8007b40 <registerMessMainParams+0x224>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4945      	ldr	r1, [pc, #276]	@ (8007b44 <registerMessMainParams+0x228>)
 8007a30:	2007      	movs	r0, #7
 8007a32:	f7f9 f8f7 	bl	8000c24 <Param_Register>
 8007a36:	4603      	mov	r3, r0
                     &fhbfsk_freq_spacing, sizeof(uint8_t), &min_u32, &max_u32) == false) {
 8007a38:	f083 0301 	eor.w	r3, r3, #1
 8007a3c:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_FHBFSK_FREQ_SPACING, "frequency spacing", PARAM_TYPE_UINT8,
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <registerMessMainParams+0x12a>
    return false;
 8007a42:	2300      	movs	r3, #0
 8007a44:	e060      	b.n	8007b08 <registerMessMainParams+0x1ec>
  }

  min_u32 = MIN_FHBFSK_DWELL_TIME;
 8007a46:	2301      	movs	r3, #1
 8007a48:	607b      	str	r3, [r7, #4]
  max_u32 = MAX_FHBFSK_DWELL_TIME;
 8007a4a:	2304      	movs	r3, #4
 8007a4c:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_FHBFSK_DWELL_TIME, "dwell time", PARAM_TYPE_UINT8,
 8007a4e:	463b      	mov	r3, r7
 8007a50:	9302      	str	r3, [sp, #8]
 8007a52:	1d3b      	adds	r3, r7, #4
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	2301      	movs	r3, #1
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8007b48 <registerMessMainParams+0x22c>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	493b      	ldr	r1, [pc, #236]	@ (8007b4c <registerMessMainParams+0x230>)
 8007a60:	2008      	movs	r0, #8
 8007a62:	f7f9 f8df 	bl	8000c24 <Param_Register>
 8007a66:	4603      	mov	r3, r0
                     &fhbfsk_dwell_time, sizeof(uint8_t), &min_u32, &max_u32) == false) {
 8007a68:	f083 0301 	eor.w	r3, r3, #1
 8007a6c:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_FHBFSK_DWELL_TIME, "dwell time", PARAM_TYPE_UINT8,
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <registerMessMainParams+0x15a>
    return false;
 8007a72:	2300      	movs	r3, #0
 8007a74:	e048      	b.n	8007b08 <registerMessMainParams+0x1ec>
  }

  min_u32 = MIN_FHBFSK_NUM_TONES;
 8007a76:	2302      	movs	r3, #2
 8007a78:	607b      	str	r3, [r7, #4]
  max_u32 = MAX_FHBFSK_NUM_TONES;
 8007a7a:	231e      	movs	r3, #30
 8007a7c:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_FHBFSK_NUM_TONES, "number of tones", PARAM_TYPE_UINT8,
 8007a7e:	463b      	mov	r3, r7
 8007a80:	9302      	str	r3, [sp, #8]
 8007a82:	1d3b      	adds	r3, r7, #4
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	2301      	movs	r3, #1
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	4b31      	ldr	r3, [pc, #196]	@ (8007b50 <registerMessMainParams+0x234>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	4931      	ldr	r1, [pc, #196]	@ (8007b54 <registerMessMainParams+0x238>)
 8007a90:	200a      	movs	r0, #10
 8007a92:	f7f9 f8c7 	bl	8000c24 <Param_Register>
 8007a96:	4603      	mov	r3, r0
                     &fhbfsk_num_tones, sizeof(uint8_t), &min_u32, &max_u32) == false) {
 8007a98:	f083 0301 	eor.w	r3, r3, #1
 8007a9c:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_FHBFSK_NUM_TONES, "number of tones", PARAM_TYPE_UINT8,
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <registerMessMainParams+0x18a>
    return false;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e030      	b.n	8007b08 <registerMessMainParams+0x1ec>
  }

  min_u32 = (uint32_t) MIN_EVAL_MODE_STATE;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	607b      	str	r3, [r7, #4]
  max_u32 = (uint32_t) MAX_EVAL_MODE_STATE;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_EVAL_MODE_ON, "evaluation mode", PARAM_TYPE_UINT8,
 8007aae:	463b      	mov	r3, r7
 8007ab0:	9302      	str	r3, [sp, #8]
 8007ab2:	1d3b      	adds	r3, r7, #4
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	4b27      	ldr	r3, [pc, #156]	@ (8007b58 <registerMessMainParams+0x23c>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	4927      	ldr	r1, [pc, #156]	@ (8007b5c <registerMessMainParams+0x240>)
 8007ac0:	200b      	movs	r0, #11
 8007ac2:	f7f9 f8af 	bl	8000c24 <Param_Register>
 8007ac6:	4603      	mov	r3, r0
                     &evaluation_mode, sizeof(uint8_t), &min_u32, &max_u32) == false) {
 8007ac8:	f083 0301 	eor.w	r3, r3, #1
 8007acc:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_EVAL_MODE_ON, "evaluation mode", PARAM_TYPE_UINT8,
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <registerMessMainParams+0x1ba>
    return false;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e018      	b.n	8007b08 <registerMessMainParams+0x1ec>
  }

  min_u32 = MIN_EVAL_MESSAGE;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	607b      	str	r3, [r7, #4]
  max_u32 = MAX_EVAL_MESSAGE;
 8007ada:	2305      	movs	r3, #5
 8007adc:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_EVAL_MESSAGE, "evaluation message", PARAM_TYPE_UINT8,
 8007ade:	463b      	mov	r3, r7
 8007ae0:	9302      	str	r3, [sp, #8]
 8007ae2:	1d3b      	adds	r3, r7, #4
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	4b1d      	ldr	r3, [pc, #116]	@ (8007b60 <registerMessMainParams+0x244>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	491d      	ldr	r1, [pc, #116]	@ (8007b64 <registerMessMainParams+0x248>)
 8007af0:	200c      	movs	r0, #12
 8007af2:	f7f9 f897 	bl	8000c24 <Param_Register>
 8007af6:	4603      	mov	r3, r0
                     &evaluation_message, sizeof(uint8_t), &min_u32, &max_u32) == false) {
 8007af8:	f083 0301 	eor.w	r3, r3, #1
 8007afc:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_EVAL_MESSAGE, "evaluation message", PARAM_TYPE_UINT8,
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <registerMessMainParams+0x1ea>
    return false;
 8007b02:	2300      	movs	r3, #0
 8007b04:	e000      	b.n	8007b08 <registerMessMainParams+0x1ec>
  }

  return true;
 8007b06:	2301      	movs	r3, #1
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	41200000 	.word	0x41200000
 8007b14:	447a0000 	.word	0x447a0000
 8007b18:	2400026c 	.word	0x2400026c
 8007b1c:	0802aca0 	.word	0x0802aca0
 8007b20:	24000270 	.word	0x24000270
 8007b24:	0802acac 	.word	0x0802acac
 8007b28:	24000274 	.word	0x24000274
 8007b2c:	0802acbc 	.word	0x0802acbc
 8007b30:	24015b94 	.word	0x24015b94
 8007b34:	0802accc 	.word	0x0802accc
 8007b38:	24000278 	.word	0x24000278
 8007b3c:	0802ace0 	.word	0x0802ace0
 8007b40:	2400027d 	.word	0x2400027d
 8007b44:	0802acf4 	.word	0x0802acf4
 8007b48:	2400027e 	.word	0x2400027e
 8007b4c:	0802ad08 	.word	0x0802ad08
 8007b50:	2400027c 	.word	0x2400027c
 8007b54:	0802ad14 	.word	0x0802ad14
 8007b58:	24015b95 	.word	0x24015b95
 8007b5c:	0802ad24 	.word	0x0802ad24
 8007b60:	2400027f 	.word	0x2400027f
 8007b64:	0802ad34 	.word	0x0802ad34

08007b68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	80fb      	strh	r3, [r7, #6]
  (void)(GPIO_Pin);
}
 8007b72:	bf00      	nop
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
	...

08007b80 <Modulate_ConvertToFrequency>:
uint32_t getFskFrequency(bool bit);

/* Exported function definitions ---------------------------------------------*/

bool Modulate_ConvertToFrequency(BitMessage_t* bit_msg, WaveformStep_t* message_sequence)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  switch (mod_demod_method) {
 8007b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007bbc <Modulate_ConvertToFrequency+0x3c>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <Modulate_ConvertToFrequency+0x1c>
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d008      	beq.n	8007ba8 <Modulate_ConvertToFrequency+0x28>
      break;
    case MOD_DEMOD_FHBFSK:
      return convertToFrequencyFhbfsk(bit_msg, message_sequence);
      break;
    default:
      break;
 8007b96:	bf00      	nop
  }
  return true;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e00a      	b.n	8007bb2 <Modulate_ConvertToFrequency+0x32>
      return convertToFrequencyFsk(bit_msg, message_sequence);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f962 	bl	8007e68 <convertToFrequencyFsk>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	e004      	b.n	8007bb2 <Modulate_ConvertToFrequency+0x32>
      return convertToFrequencyFhbfsk(bit_msg, message_sequence);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f98b 	bl	8007ec6 <convertToFrequencyFhbfsk>
 8007bb0:	4603      	mov	r3, r0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	24015b94 	.word	0x24015b94

08007bc0 <Modulate_ApplyAmplitude>:

bool Modulate_ApplyAmplitude(WaveformStep_t* message_sequence, uint16_t len)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	807b      	strh	r3, [r7, #2]
  float amplitude = output_amplitude;
 8007bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8007c00 <Modulate_ApplyAmplitude+0x40>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60bb      	str	r3, [r7, #8]
  for (uint16_t i = 0; i < len; i++) {
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	81fb      	strh	r3, [r7, #14]
 8007bd6:	e008      	b.n	8007bea <Modulate_ApplyAmplitude+0x2a>
    message_sequence[i].relative_amplitude = amplitude;
 8007bd8:	89fb      	ldrh	r3, [r7, #14]
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	4413      	add	r3, r2
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	605a      	str	r2, [r3, #4]
  for (uint16_t i = 0; i < len; i++) {
 8007be4:	89fb      	ldrh	r3, [r7, #14]
 8007be6:	3301      	adds	r3, #1
 8007be8:	81fb      	strh	r3, [r7, #14]
 8007bea:	89fa      	ldrh	r2, [r7, #14]
 8007bec:	887b      	ldrh	r3, [r7, #2]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d3f2      	bcc.n	8007bd8 <Modulate_ApplyAmplitude+0x18>
  }
  return true;
 8007bf2:	2301      	movs	r3, #1
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	24000284 	.word	0x24000284

08007c04 <Modulate_ApplyDuration>:

bool Modulate_ApplyDuration(WaveformStep_t* message_sequence, uint16_t len)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	807b      	strh	r3, [r7, #2]
  for (uint16_t i = 0; i < len; i++) {
 8007c10:	2300      	movs	r3, #0
 8007c12:	81fb      	strh	r3, [r7, #14]
 8007c14:	e018      	b.n	8007c48 <Modulate_ApplyDuration+0x44>
    message_sequence[i].duration_us = (uint32_t) roundf(1000000.0f / baud_rate);
 8007c16:	4b11      	ldr	r3, [pc, #68]	@ (8007c5c <Modulate_ApplyDuration+0x58>)
 8007c18:	edd3 7a00 	vldr	s15, [r3]
 8007c1c:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8007c60 <Modulate_ApplyDuration+0x5c>
 8007c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c24:	eeb0 0a47 	vmov.f32	s0, s14
 8007c28:	f021 fc5a 	bl	80294e0 <roundf>
 8007c2c:	eef0 7a40 	vmov.f32	s15, s0
 8007c30:	89fb      	ldrh	r3, [r7, #14]
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	4413      	add	r3, r2
 8007c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c3c:	ee17 2a90 	vmov	r2, s15
 8007c40:	609a      	str	r2, [r3, #8]
  for (uint16_t i = 0; i < len; i++) {
 8007c42:	89fb      	ldrh	r3, [r7, #14]
 8007c44:	3301      	adds	r3, #1
 8007c46:	81fb      	strh	r3, [r7, #14]
 8007c48:	89fa      	ldrh	r2, [r7, #14]
 8007c4a:	887b      	ldrh	r3, [r7, #2]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d3e2      	bcc.n	8007c16 <Modulate_ApplyDuration+0x12>
  }
  return true;
 8007c50:	2301      	movs	r3, #1
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	2400026c 	.word	0x2400026c
 8007c60:	49742400 	.word	0x49742400

08007c64 <Modulate_StartTransducerOutput>:
{
  output_amplitude = new_amplitude;
}

bool Modulate_StartTransducerOutput()
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Stop(&htim6);
 8007c6a:	4818      	ldr	r0, [pc, #96]	@ (8007ccc <Modulate_StartTransducerOutput+0x68>)
 8007c6c:	f00f fb98 	bl	80173a0 <HAL_TIM_Base_Stop>
  ADC_StopAll();
 8007c70:	f7fd f876 	bl	8004d60 <ADC_StopAll>
  DAC_StopWaveformOutput();
 8007c74:	f000 ff58 	bl	8008b28 <DAC_StopWaveformOutput>
  osDelay(1);
 8007c78:	2001      	movs	r0, #1
 8007c7a:	f016 feb2 	bl	801e9e2 <osDelay>
  if (ADC_StartFeedback() == false) {
 8007c7e:	f7fd f829 	bl	8004cd4 <ADC_StartFeedback>
 8007c82:	4603      	mov	r3, r0
 8007c84:	f083 0301 	eor.w	r3, r3, #1
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <Modulate_StartTransducerOutput+0x2e>
    return false;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e018      	b.n	8007cc4 <Modulate_StartTransducerOutput+0x60>
  }
  if (DAC_StartWaveformOutput(DAC_CHANNEL_1) == false) {
 8007c92:	2000      	movs	r0, #0
 8007c94:	f000 ff0a 	bl	8008aac <DAC_StartWaveformOutput>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f083 0301 	eor.w	r3, r3, #1
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <Modulate_StartTransducerOutput+0x44>
    return false;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e00d      	b.n	8007cc4 <Modulate_StartTransducerOutput+0x60>
  }
  osDelay(150);
 8007ca8:	2096      	movs	r0, #150	@ 0x96
 8007caa:	f016 fe9a 	bl	801e9e2 <osDelay>
  HAL_StatusTypeDef ret = HAL_TIM_Base_Start(&htim6);
 8007cae:	4807      	ldr	r0, [pc, #28]	@ (8007ccc <Modulate_StartTransducerOutput+0x68>)
 8007cb0:	f00f faf8 	bl	80172a4 <HAL_TIM_Base_Start>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	71fb      	strb	r3, [r7, #7]
  return ret == HAL_OK;
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bf0c      	ite	eq
 8007cbe:	2301      	moveq	r3, #1
 8007cc0:	2300      	movne	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	24018484 	.word	0x24018484

08007cd0 <Modulate_TestOutput>:

void Modulate_TestOutput()
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  test_sequence[0].duration_us = 1000;
 8007cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8007d10 <Modulate_TestOutput+0x40>)
 8007cd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007cda:	609a      	str	r2, [r3, #8]
  test_sequence[0].freq_hz = 30000;
 8007cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007d10 <Modulate_TestOutput+0x40>)
 8007cde:	f247 5230 	movw	r2, #30000	@ 0x7530
 8007ce2:	601a      	str	r2, [r3, #0]
  test_sequence[0].relative_amplitude = output_amplitude;
 8007ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8007d14 <Modulate_TestOutput+0x44>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a09      	ldr	r2, [pc, #36]	@ (8007d10 <Modulate_TestOutput+0x40>)
 8007cea:	6053      	str	r3, [r2, #4]
  test_sequence[1].duration_us = 1000;
 8007cec:	4b08      	ldr	r3, [pc, #32]	@ (8007d10 <Modulate_TestOutput+0x40>)
 8007cee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007cf2:	619a      	str	r2, [r3, #24]
  test_sequence[1].freq_hz = 33000;
 8007cf4:	4b06      	ldr	r3, [pc, #24]	@ (8007d10 <Modulate_TestOutput+0x40>)
 8007cf6:	f248 02e8 	movw	r2, #33000	@ 0x80e8
 8007cfa:	611a      	str	r2, [r3, #16]
  test_sequence[1].relative_amplitude = output_amplitude;
 8007cfc:	4b05      	ldr	r3, [pc, #20]	@ (8007d14 <Modulate_TestOutput+0x44>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a03      	ldr	r2, [pc, #12]	@ (8007d10 <Modulate_TestOutput+0x40>)
 8007d02:	6153      	str	r3, [r2, #20]

  DAC_SetWaveformSequence(test_sequence, 2);
 8007d04:	2102      	movs	r1, #2
 8007d06:	4802      	ldr	r0, [pc, #8]	@ (8007d10 <Modulate_TestOutput+0x40>)
 8007d08:	f000 fe68 	bl	80089dc <DAC_SetWaveformSequence>
}
 8007d0c:	bf00      	nop
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	24015c2c 	.word	0x24015c2c
 8007d14:	24000284 	.word	0x24000284

08007d18 <Modulate_SetTestFrequency>:

void Modulate_SetTestFrequency(uint32_t freq_hz)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  test_freq = freq_hz;
 8007d20:	4a04      	ldr	r2, [pc, #16]	@ (8007d34 <Modulate_SetTestFrequency+0x1c>)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6013      	str	r3, [r2, #0]
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	24000288 	.word	0x24000288

08007d38 <Modulate_TestFrequencyResponse>:

void Modulate_TestFrequencyResponse()
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
  test_sequence[0].duration_us = FEEDBACK_TEST_DURATION_MS * 1000;
 8007d3c:	4b08      	ldr	r3, [pc, #32]	@ (8007d60 <Modulate_TestFrequencyResponse+0x28>)
 8007d3e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8007d42:	609a      	str	r2, [r3, #8]
  test_sequence[0].freq_hz = test_freq;
 8007d44:	4b07      	ldr	r3, [pc, #28]	@ (8007d64 <Modulate_TestFrequencyResponse+0x2c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a05      	ldr	r2, [pc, #20]	@ (8007d60 <Modulate_TestFrequencyResponse+0x28>)
 8007d4a:	6013      	str	r3, [r2, #0]
  test_sequence[0].relative_amplitude = output_amplitude;
 8007d4c:	4b06      	ldr	r3, [pc, #24]	@ (8007d68 <Modulate_TestFrequencyResponse+0x30>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a03      	ldr	r2, [pc, #12]	@ (8007d60 <Modulate_TestFrequencyResponse+0x28>)
 8007d52:	6053      	str	r3, [r2, #4]

  DAC_SetWaveformSequence(test_sequence, 1);
 8007d54:	2101      	movs	r1, #1
 8007d56:	4802      	ldr	r0, [pc, #8]	@ (8007d60 <Modulate_TestFrequencyResponse+0x28>)
 8007d58:	f000 fe40 	bl	80089dc <DAC_SetWaveformSequence>
}
 8007d5c:	bf00      	nop
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	24015c2c 	.word	0x24015c2c
 8007d64:	24000288 	.word	0x24000288
 8007d68:	24000284 	.word	0x24000284

08007d6c <Modulate_GetFhbfskFrequency>:

uint32_t Modulate_GetFhbfskFrequency(bool bit, uint16_t bit_index)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	460a      	mov	r2, r1
 8007d76:	71fb      	strb	r3, [r7, #7]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	80bb      	strh	r3, [r7, #4]
  uint32_t frequency_separation = fhbfsk_freq_spacing * baud_rate;
 8007d7c:	4b21      	ldr	r3, [pc, #132]	@ (8007e04 <Modulate_GetFhbfskFrequency+0x98>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	ee07 3a90 	vmov	s15, r3
 8007d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d88:	4b1f      	ldr	r3, [pc, #124]	@ (8007e08 <Modulate_GetFhbfskFrequency+0x9c>)
 8007d8a:	edd3 7a00 	vldr	s15, [r3]
 8007d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d96:	ee17 3a90 	vmov	r3, s15
 8007d9a:	617b      	str	r3, [r7, #20]

  uint32_t start_freq = fc - frequency_separation * (2 * fhbfsk_num_tones - 1) / 2;
 8007d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8007e0c <Modulate_GetFhbfskFrequency+0xa0>)
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e10 <Modulate_GetFhbfskFrequency+0xa4>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	3b01      	subs	r3, #1
 8007da8:	4619      	mov	r1, r3
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	fb01 f303 	mul.w	r3, r1, r3
 8007db0:	085b      	lsrs	r3, r3, #1
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	613b      	str	r3, [r7, #16]
  start_freq = (start_freq / frequency_separation) * frequency_separation;
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	fbb2 f2f3 	udiv	r2, r2, r3
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	fb02 f303 	mul.w	r3, r2, r3
 8007dc4:	613b      	str	r3, [r7, #16]

  uint32_t frequency_index = 2 * ((bit_index / fhbfsk_dwell_time) % fhbfsk_num_tones);
 8007dc6:	88bb      	ldrh	r3, [r7, #4]
 8007dc8:	4a12      	ldr	r2, [pc, #72]	@ (8007e14 <Modulate_GetFhbfskFrequency+0xa8>)
 8007dca:	7812      	ldrb	r2, [r2, #0]
 8007dcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8007e10 <Modulate_GetFhbfskFrequency+0xa4>)
 8007dd2:	7812      	ldrb	r2, [r2, #0]
 8007dd4:	fb93 f1f2 	sdiv	r1, r3, r2
 8007dd8:	fb01 f202 	mul.w	r2, r1, r2
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]
  frequency_index += bit;
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4413      	add	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]
  return start_freq + frequency_separation * frequency_index;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	fb03 f202 	mul.w	r2, r3, r2
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	4413      	add	r3, r2
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	2400027d 	.word	0x2400027d
 8007e08:	2400026c 	.word	0x2400026c
 8007e0c:	24000278 	.word	0x24000278
 8007e10:	2400027c 	.word	0x2400027c
 8007e14:	2400027e 	.word	0x2400027e

08007e18 <Modulate_RegisterParams>:

bool Modulate_RegisterParams()
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af04      	add	r7, sp, #16
  float min = MIN_OUTPUT_AMPLITUDE;
 8007e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e5c <Modulate_RegisterParams+0x44>)
 8007e20:	607b      	str	r3, [r7, #4]
  float max = MAX_OUTPUT_AMPLITUDE;
 8007e22:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8007e26:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_OUTPUT_AMPLITUDE, "output amplitude", PARAM_TYPE_FLOAT,
 8007e28:	463b      	mov	r3, r7
 8007e2a:	9302      	str	r3, [sp, #8]
 8007e2c:	1d3b      	adds	r3, r7, #4
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	2304      	movs	r3, #4
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	4b0a      	ldr	r3, [pc, #40]	@ (8007e60 <Modulate_RegisterParams+0x48>)
 8007e36:	2206      	movs	r2, #6
 8007e38:	490a      	ldr	r1, [pc, #40]	@ (8007e64 <Modulate_RegisterParams+0x4c>)
 8007e3a:	2001      	movs	r0, #1
 8007e3c:	f7f8 fef2 	bl	8000c24 <Param_Register>
 8007e40:	4603      	mov	r3, r0
                     &output_amplitude, sizeof(float), &min, &max) == false) {
 8007e42:	f083 0301 	eor.w	r3, r3, #1
 8007e46:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_OUTPUT_AMPLITUDE, "output amplitude", PARAM_TYPE_FLOAT,
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <Modulate_RegisterParams+0x38>
    return false;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	e000      	b.n	8007e52 <Modulate_RegisterParams+0x3a>
  }

  return true;
 8007e50:	2301      	movs	r3, #1
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	3ca3d70a 	.word	0x3ca3d70a
 8007e60:	24000284 	.word	0x24000284
 8007e64:	0802ad48 	.word	0x0802ad48

08007e68 <convertToFrequencyFsk>:


/* Private function definitions ----------------------------------------------*/

bool convertToFrequencyFsk(BitMessage_t* bit_msg, WaveformStep_t* message_sequence)
{
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  for (uint16_t i = 0; i < bit_msg->bit_count; i++) {
 8007e72:	2300      	movs	r3, #0
 8007e74:	81fb      	strh	r3, [r7, #14]
 8007e76:	e01b      	b.n	8007eb0 <convertToFrequencyFsk+0x48>
    bool bit;
    if (Packet_GetBit(bit_msg, i, &bit) == false) {
 8007e78:	f107 020d 	add.w	r2, r7, #13
 8007e7c:	89fb      	ldrh	r3, [r7, #14]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f90a 	bl	800809a <Packet_GetBit>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f083 0301 	eor.w	r3, r3, #1
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <convertToFrequencyFsk+0x2e>
      return false;
 8007e92:	2300      	movs	r3, #0
 8007e94:	e013      	b.n	8007ebe <convertToFrequencyFsk+0x56>
    }
    message_sequence[i].freq_hz = getFskFrequency(bit);
 8007e96:	7b79      	ldrb	r1, [r7, #13]
 8007e98:	89fb      	ldrh	r3, [r7, #14]
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	18d4      	adds	r4, r2, r3
 8007ea0:	4608      	mov	r0, r1
 8007ea2:	f000 f841 	bl	8007f28 <getFskFrequency>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	6023      	str	r3, [r4, #0]
  for (uint16_t i = 0; i < bit_msg->bit_count; i++) {
 8007eaa:	89fb      	ldrh	r3, [r7, #14]
 8007eac:	3301      	adds	r3, #1
 8007eae:	81fb      	strh	r3, [r7, #14]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8007eb6:	89fa      	ldrh	r2, [r7, #14]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d3dd      	bcc.n	8007e78 <convertToFrequencyFsk+0x10>
  }
  return true;
 8007ebc:	2301      	movs	r3, #1
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd90      	pop	{r4, r7, pc}

08007ec6 <convertToFrequencyFhbfsk>:

bool convertToFrequencyFhbfsk(BitMessage_t* bit_msg, WaveformStep_t* message_sequence)
{
 8007ec6:	b590      	push	{r4, r7, lr}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
  for (uint16_t i = 0; i < bit_msg->bit_count; i++) {
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	81fb      	strh	r3, [r7, #14]
 8007ed4:	e01c      	b.n	8007f10 <convertToFrequencyFhbfsk+0x4a>
    bool bit;
    if (Packet_GetBit(bit_msg, i, &bit) == false) {
 8007ed6:	f107 020d 	add.w	r2, r7, #13
 8007eda:	89fb      	ldrh	r3, [r7, #14]
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f8db 	bl	800809a <Packet_GetBit>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f083 0301 	eor.w	r3, r3, #1
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <convertToFrequencyFhbfsk+0x2e>
      return false;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	e014      	b.n	8007f1e <convertToFrequencyFhbfsk+0x58>
    }
    message_sequence[i].freq_hz = Modulate_GetFhbfskFrequency(bit, i);
 8007ef4:	7b78      	ldrb	r0, [r7, #13]
 8007ef6:	89fb      	ldrh	r3, [r7, #14]
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	18d4      	adds	r4, r2, r3
 8007efe:	89fb      	ldrh	r3, [r7, #14]
 8007f00:	4619      	mov	r1, r3
 8007f02:	f7ff ff33 	bl	8007d6c <Modulate_GetFhbfskFrequency>
 8007f06:	4603      	mov	r3, r0
 8007f08:	6023      	str	r3, [r4, #0]
  for (uint16_t i = 0; i < bit_msg->bit_count; i++) {
 8007f0a:	89fb      	ldrh	r3, [r7, #14]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	81fb      	strh	r3, [r7, #14]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8007f16:	89fa      	ldrh	r2, [r7, #14]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d3dc      	bcc.n	8007ed6 <convertToFrequencyFhbfsk+0x10>
  }
  return true;
 8007f1c:	2301      	movs	r3, #1
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd90      	pop	{r4, r7, pc}
	...

08007f28 <getFskFrequency>:

uint32_t getFskFrequency(bool bit)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	71fb      	strb	r3, [r7, #7]
  return (bit) ? fsk_f1 : fsk_f0;
 8007f32:	79fb      	ldrb	r3, [r7, #7]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <getFskFrequency+0x16>
 8007f38:	4b05      	ldr	r3, [pc, #20]	@ (8007f50 <getFskFrequency+0x28>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	e001      	b.n	8007f42 <getFskFrequency+0x1a>
 8007f3e:	4b05      	ldr	r3, [pc, #20]	@ (8007f54 <getFskFrequency+0x2c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	24000274 	.word	0x24000274
 8007f54:	24000270 	.word	0x24000270

08007f58 <Packet_PrepareTx>:
bool getData(BitMessage_t* bit_msg, uint16_t* start_position, uint8_t num_bits, void* data);

/* Exported function definitions ---------------------------------------------*/

bool Packet_PrepareTx(Message_t* msg, BitMessage_t* bit_msg)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  if (msg == NULL || bit_msg == NULL) {
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <Packet_PrepareTx+0x16>
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <Packet_PrepareTx+0x1a>
    return false;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e030      	b.n	8007fd4 <Packet_PrepareTx+0x7c>
  }

  initPacket(bit_msg);
 8007f72:	6838      	ldr	r0, [r7, #0]
 8007f74:	f000 f9d4 	bl	8008320 <initPacket>

  // Add preamble to bit packet
  if (msg->data_type != EVAL) {
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	d00b      	beq.n	8007f9a <Packet_PrepareTx+0x42>
    if (addPreamble(bit_msg, msg) == false) {
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	6838      	ldr	r0, [r7, #0]
 8007f86:	f000 f9f5 	bl	8008374 <addPreamble>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	f083 0301 	eor.w	r3, r3, #1
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <Packet_PrepareTx+0x42>
      return false;
 8007f96:	2300      	movs	r3, #0
 8007f98:	e01c      	b.n	8007fd4 <Packet_PrepareTx+0x7c>
    }
  }

  // Adds the data payload bits to the packet
  if (addMessage(bit_msg, msg) == false) {
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	6838      	ldr	r0, [r7, #0]
 8007f9e:	f000 fa6f 	bl	8008480 <addMessage>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f083 0301 	eor.w	r3, r3, #1
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <Packet_PrepareTx+0x5a>
    return false;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e010      	b.n	8007fd4 <Packet_PrepareTx+0x7c>
  }

  // Add the error correction bits as specified by the user
  if (msg->data_type != EVAL) {
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007fb8:	2b05      	cmp	r3, #5
 8007fba:	d00a      	beq.n	8007fd2 <Packet_PrepareTx+0x7a>
    if (ErrorCorrection_AddCorrection(bit_msg) == false) {
 8007fbc:	6838      	ldr	r0, [r7, #0]
 8007fbe:	f7fd fa6b 	bl	8005498 <ErrorCorrection_AddCorrection>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f083 0301 	eor.w	r3, r3, #1
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <Packet_PrepareTx+0x7a>
      return false;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e000      	b.n	8007fd4 <Packet_PrepareTx+0x7c>
    }
  }
  return true;
 8007fd2:	2301      	movs	r3, #1
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <Packet_PrepareRx>:

bool Packet_PrepareRx(BitMessage_t* bit_msg)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  initPacket(bit_msg);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f99b 	bl	8008320 <initPacket>

  return true;
 8007fea:	2301      	movs	r3, #1
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <Packet_AddBit>:

bool Packet_AddBit(BitMessage_t* bit_msg, bool bit)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  if (bit_msg->bit_count >= PACKET_MAX_LENGTH_BITS) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8008006:	f240 422b 	movw	r2, #1067	@ 0x42b
 800800a:	4293      	cmp	r3, r2
 800800c:	d901      	bls.n	8008012 <Packet_AddBit+0x1e>
    return false;
 800800e:	2300      	movs	r3, #0
 8008010:	e03d      	b.n	800808e <Packet_AddBit+0x9a>
  }

  uint8_t byte_index = bit_msg->bit_count / 8;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8008018:	08db      	lsrs	r3, r3, #3
 800801a:	b29b      	uxth	r3, r3
 800801c:	73fb      	strb	r3, [r7, #15]
  uint8_t bit_position = bit_msg-> bit_count % 8;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8008024:	b2db      	uxtb	r3, r3
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	73bb      	strb	r3, [r7, #14]

  if (bit == true) {
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d011      	beq.n	8008056 <Packet_AddBit+0x62>
    bit_msg->data[byte_index] |= (1 << (7 - bit_position));
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	5cd3      	ldrb	r3, [r2, r3]
 8008038:	b25a      	sxtb	r2, r3
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	f1c3 0307 	rsb	r3, r3, #7
 8008040:	2101      	movs	r1, #1
 8008042:	fa01 f303 	lsl.w	r3, r1, r3
 8008046:	b25b      	sxtb	r3, r3
 8008048:	4313      	orrs	r3, r2
 800804a:	b25a      	sxtb	r2, r3
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	b2d1      	uxtb	r1, r2
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	54d1      	strb	r1, [r2, r3]
 8008054:	e012      	b.n	800807c <Packet_AddBit+0x88>
  } else {
    bit_msg->data[byte_index] &= ~(1 << (7 - bit_position));
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	5cd3      	ldrb	r3, [r2, r3]
 800805c:	b25a      	sxtb	r2, r3
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	f1c3 0307 	rsb	r3, r3, #7
 8008064:	2101      	movs	r1, #1
 8008066:	fa01 f303 	lsl.w	r3, r1, r3
 800806a:	b25b      	sxtb	r3, r3
 800806c:	43db      	mvns	r3, r3
 800806e:	b25b      	sxtb	r3, r3
 8008070:	4013      	ands	r3, r2
 8008072:	b25a      	sxtb	r2, r3
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	b2d1      	uxtb	r1, r2
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	54d1      	strb	r1, [r2, r3]
  }

  bit_msg->bit_count++;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8008082:	3301      	adds	r3, #1
 8008084:	b29a      	uxth	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
  return true;
 800808c:	2301      	movs	r3, #1
}
 800808e:	4618      	mov	r0, r3
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <Packet_GetBit>:

bool Packet_GetBit(BitMessage_t* bit_msg, uint16_t position, bool* bit)
{
 800809a:	b480      	push	{r7}
 800809c:	b087      	sub	sp, #28
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	460b      	mov	r3, r1
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	817b      	strh	r3, [r7, #10]
  if (position >= bit_msg->bit_count) {
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80080ae:	897a      	ldrh	r2, [r7, #10]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d301      	bcc.n	80080b8 <Packet_GetBit+0x1e>
    return false;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e01a      	b.n	80080ee <Packet_GetBit+0x54>
  }

  uint16_t byte_index = position / 8;
 80080b8:	897b      	ldrh	r3, [r7, #10]
 80080ba:	08db      	lsrs	r3, r3, #3
 80080bc:	82fb      	strh	r3, [r7, #22]
  uint8_t bit_position = position % 8;
 80080be:	897b      	ldrh	r3, [r7, #10]
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	757b      	strb	r3, [r7, #21]

  *bit = (bit_msg->data[byte_index] & (1 << (7 - bit_position))) != 0;
 80080c8:	8afb      	ldrh	r3, [r7, #22]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	5cd3      	ldrb	r3, [r2, r3]
 80080ce:	461a      	mov	r2, r3
 80080d0:	7d7b      	ldrb	r3, [r7, #21]
 80080d2:	f1c3 0307 	rsb	r3, r3, #7
 80080d6:	fa42 f303 	asr.w	r3, r2, r3
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bf14      	ite	ne
 80080e2:	2301      	movne	r3, #1
 80080e4:	2300      	moveq	r3, #0
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	701a      	strb	r2, [r3, #0]

  return true;
 80080ec:	2301      	movs	r3, #1
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <Packet_Get8BitChunk>:

bool Packet_Get8BitChunk(BitMessage_t* bit_msg, uint16_t* start_position, uint8_t chunk_length, uint8_t* ret)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b087      	sub	sp, #28
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	603b      	str	r3, [r7, #0]
 8008106:	4613      	mov	r3, r2
 8008108:	71fb      	strb	r3, [r7, #7]
  if (*start_position + chunk_length > bit_msg->bit_count) {
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	4413      	add	r3, r2
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	f8b2 2086 	ldrh.w	r2, [r2, #134]	@ 0x86
 800811a:	4293      	cmp	r3, r2
 800811c:	dd01      	ble.n	8008122 <Packet_Get8BitChunk+0x28>
    return false;
 800811e:	2300      	movs	r3, #0
 8008120:	e03b      	b.n	800819a <Packet_Get8BitChunk+0xa0>
  }
  uint8_t start_byte = *start_position / 8;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	08db      	lsrs	r3, r3, #3
 8008128:	b29b      	uxth	r3, r3
 800812a:	75fb      	strb	r3, [r7, #23]
  uint16_t raw_chunk;
  memcpy(&raw_chunk, &bit_msg->data[start_byte], sizeof(uint16_t));
 800812c:	7dfb      	ldrb	r3, [r7, #23]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4413      	add	r3, r2
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29b      	uxth	r3, r3
 8008136:	827b      	strh	r3, [r7, #18]

  raw_chunk = (raw_chunk << 8) | (raw_chunk >> 8);
 8008138:	8a7b      	ldrh	r3, [r7, #18]
 800813a:	b21b      	sxth	r3, r3
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	b21a      	sxth	r2, r3
 8008140:	8a7b      	ldrh	r3, [r7, #18]
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	b29b      	uxth	r3, r3
 8008146:	b21b      	sxth	r3, r3
 8008148:	4313      	orrs	r3, r2
 800814a:	b21b      	sxth	r3, r3
 800814c:	b29b      	uxth	r3, r3
 800814e:	827b      	strh	r3, [r7, #18]

  uint8_t start_ignore_bits = *start_position % 8;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	75bb      	strb	r3, [r7, #22]
  uint8_t end_ignore_bits = 16 - chunk_length;
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	f1c3 0310 	rsb	r3, r3, #16
 8008162:	757b      	strb	r3, [r7, #21]

  raw_chunk = raw_chunk << start_ignore_bits;
 8008164:	8a7b      	ldrh	r3, [r7, #18]
 8008166:	461a      	mov	r2, r3
 8008168:	7dbb      	ldrb	r3, [r7, #22]
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	b29b      	uxth	r3, r3
 8008170:	827b      	strh	r3, [r7, #18]
  raw_chunk = raw_chunk >> end_ignore_bits;
 8008172:	8a7b      	ldrh	r3, [r7, #18]
 8008174:	461a      	mov	r2, r3
 8008176:	7d7b      	ldrb	r3, [r7, #21]
 8008178:	fa42 f303 	asr.w	r3, r2, r3
 800817c:	b29b      	uxth	r3, r3
 800817e:	827b      	strh	r3, [r7, #18]

  *ret = (uint8_t) raw_chunk;
 8008180:	8a7b      	ldrh	r3, [r7, #18]
 8008182:	b2da      	uxtb	r2, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	701a      	strb	r2, [r3, #0]
  *start_position += chunk_length;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	881a      	ldrh	r2, [r3, #0]
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	b29b      	uxth	r3, r3
 8008190:	4413      	add	r3, r2
 8008192:	b29a      	uxth	r2, r3
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	801a      	strh	r2, [r3, #0]
  return true;
 8008198:	2301      	movs	r3, #1
}
 800819a:	4618      	mov	r0, r3
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <Packet_Add8>:

bool Packet_Add8(BitMessage_t* bit_msg, uint8_t data)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70fb      	strb	r3, [r7, #3]
  return addData(bit_msg, &data, 8 * sizeof(uint8_t));
 80081b2:	1cfb      	adds	r3, r7, #3
 80081b4:	2208      	movs	r2, #8
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f9da 	bl	8008572 <addData>
 80081be:	4603      	mov	r3, r0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <Packet_Add16>:

bool Packet_Add16(BitMessage_t* bit_msg, uint16_t data)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
 return addData(bit_msg, &data, 8 * sizeof(uint16_t));
 80081d4:	1cbb      	adds	r3, r7, #2
 80081d6:	2210      	movs	r2, #16
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f9c9 	bl	8008572 <addData>
 80081e0:	4603      	mov	r3, r0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <Packet_Add32>:

bool Packet_Add32(BitMessage_t* bit_msg, uint32_t data)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
  return addData(bit_msg, &data, 8 * sizeof(uint32_t));
 80081f4:	463b      	mov	r3, r7
 80081f6:	2220      	movs	r2, #32
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f9b9 	bl	8008572 <addData>
 8008200:	4603      	mov	r3, r0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <Packet_Get8>:

bool Packet_Get8(BitMessage_t* bit_msg, uint16_t* start_position, uint8_t* data)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	607a      	str	r2, [r7, #4]
  return getData(bit_msg, start_position, 8 * sizeof(uint8_t), data);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2208      	movs	r2, #8
 800821a:	68b9      	ldr	r1, [r7, #8]
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 f9f6 	bl	800860e <getData>
 8008222:	4603      	mov	r3, r0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <Packet_Get16>:

bool Packet_Get16(BitMessage_t* bit_msg, uint16_t* start_position, uint16_t* data)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
  return getData(bit_msg, start_position, 8 * sizeof(uint16_t), data);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2210      	movs	r2, #16
 800823c:	68b9      	ldr	r1, [r7, #8]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 f9e5 	bl	800860e <getData>
 8008244:	4603      	mov	r3, r0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <Packet_Get32>:

bool Packet_Get32(BitMessage_t* bit_msg, uint16_t* start_position, uint32_t* data)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	607a      	str	r2, [r7, #4]
  return getData(bit_msg, start_position, 8 * sizeof(uint32_t), data);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2220      	movs	r2, #32
 800825e:	68b9      	ldr	r1, [r7, #8]
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 f9d4 	bl	800860e <getData>
 8008266:	4603      	mov	r3, r0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <Packet_MinimumSize>:

uint16_t Packet_MinimumSize(uint16_t str_len)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	80fb      	strh	r3, [r7, #6]
  size_t packet_size = 1;
 800827a:	2301      	movs	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]

  // Keep doubling the packet size until it's large enough
  while (packet_size < str_len) {
 800827e:	e002      	b.n	8008286 <Packet_MinimumSize+0x16>
      packet_size *= 2;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	60fb      	str	r3, [r7, #12]
  while (packet_size < str_len) {
 8008286:	88fb      	ldrh	r3, [r7, #6]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	429a      	cmp	r2, r3
 800828c:	d3f8      	bcc.n	8008280 <Packet_MinimumSize+0x10>
  }

  return packet_size;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	b29b      	uxth	r3, r3
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
	...

080082a0 <Packet_RegisterParams>:

bool Packet_RegisterParams()
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af04      	add	r7, sp, #16
  uint32_t min_u32 = MIN_ID;
 80082a6:	2300      	movs	r3, #0
 80082a8:	607b      	str	r3, [r7, #4]
  uint32_t max_u32 = MAX_ID;
 80082aa:	230f      	movs	r3, #15
 80082ac:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_ID, "the modem identifier", PARAM_TYPE_UINT8,
 80082ae:	463b      	mov	r3, r7
 80082b0:	9302      	str	r3, [sp, #8]
 80082b2:	1d3b      	adds	r3, r7, #4
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	2301      	movs	r3, #1
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	4b15      	ldr	r3, [pc, #84]	@ (8008310 <Packet_RegisterParams+0x70>)
 80082bc:	2200      	movs	r2, #0
 80082be:	4915      	ldr	r1, [pc, #84]	@ (8008314 <Packet_RegisterParams+0x74>)
 80082c0:	200d      	movs	r0, #13
 80082c2:	f7f8 fcaf 	bl	8000c24 <Param_Register>
 80082c6:	4603      	mov	r3, r0
      &modem_id, sizeof(uint8_t), &min_u32, &max_u32) == false) {
 80082c8:	f083 0301 	eor.w	r3, r3, #1
 80082cc:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_ID, "the modem identifier", PARAM_TYPE_UINT8,
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <Packet_RegisterParams+0x36>
    return false;
 80082d2:	2300      	movs	r3, #0
 80082d4:	e018      	b.n	8008308 <Packet_RegisterParams+0x68>
  }

  min_u32 = MIN_STATIONARY_FLAG;
 80082d6:	2300      	movs	r3, #0
 80082d8:	607b      	str	r3, [r7, #4]
  max_u32 = MAX_STATIONARY_FLAG;
 80082da:	2301      	movs	r3, #1
 80082dc:	603b      	str	r3, [r7, #0]
  if (Param_Register(PARAM_STATIONARY_FLAG, "stationary flag", PARAM_TYPE_UINT8,
 80082de:	463b      	mov	r3, r7
 80082e0:	9302      	str	r3, [sp, #8]
 80082e2:	1d3b      	adds	r3, r7, #4
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	2301      	movs	r3, #1
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008318 <Packet_RegisterParams+0x78>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	490b      	ldr	r1, [pc, #44]	@ (800831c <Packet_RegisterParams+0x7c>)
 80082f0:	200e      	movs	r0, #14
 80082f2:	f7f8 fc97 	bl	8000c24 <Param_Register>
 80082f6:	4603      	mov	r3, r0
      &is_stationary, sizeof(uint8_t), &min_u32, &max_u32) == false) {
 80082f8:	f083 0301 	eor.w	r3, r3, #1
 80082fc:	b2db      	uxtb	r3, r3
  if (Param_Register(PARAM_STATIONARY_FLAG, "stationary flag", PARAM_TYPE_UINT8,
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <Packet_RegisterParams+0x66>
    return false;
 8008302:	2300      	movs	r3, #0
 8008304:	e000      	b.n	8008308 <Packet_RegisterParams+0x68>
  }

  return true;
 8008306:	2301      	movs	r3, #1
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	2400028c 	.word	0x2400028c
 8008314:	0802ad5c 	.word	0x0802ad5c
 8008318:	2400028d 	.word	0x2400028d
 800831c:	0802ad74 	.word	0x0802ad74

08008320 <initPacket>:

/* Private function definitions ----------------------------------------------*/

void initPacket(BitMessage_t* bit_msg)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  memset(bit_msg->data, 0, sizeof(bit_msg->data));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2286      	movs	r2, #134	@ 0x86
 800832c:	2100      	movs	r1, #0
 800832e:	4618      	mov	r0, r3
 8008330:	f01d f867 	bl	8025402 <memset>
  bit_msg->bit_count = 0;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
  bit_msg->sender_id = 255;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	22ff      	movs	r2, #255	@ 0xff
 8008340:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
  bit_msg->contents_data_type = UNKNOWN;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2204      	movs	r2, #4
 8008348:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
  bit_msg->final_length = 0;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
  bit_msg->stationary_flag = false;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
  bit_msg->preamble_received = false;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  bit_msg->fully_received = false;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <addPreamble>:

bool addPreamble(BitMessage_t* bit_msg, Message_t* msg)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  if (msg->length_bits > PACKET_DATA_MAX_LENGTH_BITS) {
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8008384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008388:	d901      	bls.n	800838e <addPreamble+0x1a>
    return false;
 800838a:	2300      	movs	r3, #0
 800838c:	e070      	b.n	8008470 <addPreamble+0xfc>
  }

  if (addChunk(bit_msg, modem_id, PACKET_SENDER_ID_BITS) == false) {
 800838e:	4b3a      	ldr	r3, [pc, #232]	@ (8008478 <addPreamble+0x104>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2204      	movs	r2, #4
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f8b4 	bl	8008504 <addChunk>
 800839c:	4603      	mov	r3, r0
 800839e:	f083 0301 	eor.w	r3, r3, #1
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <addPreamble+0x38>
    return false;
 80083a8:	2300      	movs	r3, #0
 80083aa:	e061      	b.n	8008470 <addPreamble+0xfc>
  }

  if (addChunk(bit_msg, msg->data_type, PACKET_MESSAGE_TYPE_BITS) == false) {
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80083b2:	2204      	movs	r2, #4
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f8a4 	bl	8008504 <addChunk>
 80083bc:	4603      	mov	r3, r0
 80083be:	f083 0301 	eor.w	r3, r3, #1
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <addPreamble+0x58>
    return false;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e051      	b.n	8008470 <addPreamble+0xfc>
  }

  uint8_t length_index = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  uint16_t length_accomodated = 8;
 80083d0:	2308      	movs	r3, #8
 80083d2:	81bb      	strh	r3, [r7, #12]

  while (length_accomodated < msg->length_bits) {
 80083d4:	e005      	b.n	80083e2 <addPreamble+0x6e>
    length_index++;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	3301      	adds	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]
    length_accomodated = length_accomodated << 1;
 80083dc:	89bb      	ldrh	r3, [r7, #12]
 80083de:	005b      	lsls	r3, r3, #1
 80083e0:	81bb      	strh	r3, [r7, #12]
  while (length_accomodated < msg->length_bits) {
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80083e8:	89ba      	ldrh	r2, [r7, #12]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d3f3      	bcc.n	80083d6 <addPreamble+0x62>
  }

  if (addChunk(bit_msg, length_index, PACKET_LENGTH_BITS) == false) {
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	2203      	movs	r2, #3
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f885 	bl	8008504 <addChunk>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f083 0301 	eor.w	r3, r3, #1
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <addPreamble+0x96>
    return false;
 8008406:	2300      	movs	r3, #0
 8008408:	e032      	b.n	8008470 <addPreamble+0xfc>
  }

  bit_msg->final_length += length_accomodated;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8b3 208e 	ldrh.w	r2, [r3, #142]	@ 0x8e
 8008410:	89bb      	ldrh	r3, [r7, #12]
 8008412:	4413      	add	r3, r2
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
  uint16_t error_length;
  if (ErrorCorrection_CheckLength(&error_length) == false) {
 800841c:	f107 030a 	add.w	r3, r7, #10
 8008420:	4618      	mov	r0, r3
 8008422:	f7fd f94b 	bl	80056bc <ErrorCorrection_CheckLength>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <addPreamble+0xbc>
    return false;
 800842c:	2300      	movs	r3, #0
 800842e:	e01f      	b.n	8008470 <addPreamble+0xfc>
  }
  bit_msg->final_length += error_length;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8b3 208e 	ldrh.w	r2, [r3, #142]	@ 0x8e
 8008436:	897b      	ldrh	r3, [r7, #10]
 8008438:	4413      	add	r3, r2
 800843a:	b29a      	uxth	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e

  if (Packet_AddBit(bit_msg, is_stationary) == false) {
 8008442:	4b0e      	ldr	r3, [pc, #56]	@ (800847c <addPreamble+0x108>)
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7ff fdd3 	bl	8007ff4 <Packet_AddBit>
 800844e:	4603      	mov	r3, r0
 8008450:	f083 0301 	eor.w	r3, r3, #1
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <addPreamble+0xea>
    return false;
 800845a:	2300      	movs	r3, #0
 800845c:	e008      	b.n	8008470 <addPreamble+0xfc>
  }

  bit_msg->final_length += PACKET_PREAMBLE_LENGTH_BITS;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8008464:	330c      	adds	r3, #12
 8008466:	b29a      	uxth	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e

  return true;
 800846e:	2301      	movs	r3, #1
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	2400028c 	.word	0x2400028c
 800847c:	2400028d 	.word	0x2400028d

08008480 <addMessage>:

bool addMessage(BitMessage_t* bit_msg, Message_t* msg)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  if (msg->data_type == BITS) {
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008490:	2b03      	cmp	r3, #3
 8008492:	d101      	bne.n	8008498 <addMessage+0x18>
    return false;
 8008494:	2300      	movs	r3, #0
 8008496:	e031      	b.n	80084fc <addMessage+0x7c>
  }

  for (uint16_t i = 0; i < msg->length_bits; i++) {
 8008498:	2300      	movs	r3, #0
 800849a:	81fb      	strh	r3, [r7, #14]
 800849c:	e027      	b.n	80084ee <addMessage+0x6e>
    uint16_t byte_index = i / 8;
 800849e:	89fb      	ldrh	r3, [r7, #14]
 80084a0:	08db      	lsrs	r3, r3, #3
 80084a2:	81bb      	strh	r3, [r7, #12]
    uint16_t bit_index = i % 8;
 80084a4:	89fb      	ldrh	r3, [r7, #14]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	817b      	strh	r3, [r7, #10]
    bool bit = (msg->data[byte_index] & (1 << (7 - bit_index))) != 0;
 80084ac:	89bb      	ldrh	r3, [r7, #12]
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	4413      	add	r3, r2
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	461a      	mov	r2, r3
 80084b6:	897b      	ldrh	r3, [r7, #10]
 80084b8:	f1c3 0307 	rsb	r3, r3, #7
 80084bc:	fa42 f303 	asr.w	r3, r2, r3
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bf14      	ite	ne
 80084c8:	2301      	movne	r3, #1
 80084ca:	2300      	moveq	r3, #0
 80084cc:	727b      	strb	r3, [r7, #9]
    if (Packet_AddBit(bit_msg, bit) == false)
 80084ce:	7a7b      	ldrb	r3, [r7, #9]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff fd8e 	bl	8007ff4 <Packet_AddBit>
 80084d8:	4603      	mov	r3, r0
 80084da:	f083 0301 	eor.w	r3, r3, #1
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <addMessage+0x68>
      return false;
 80084e4:	2300      	movs	r3, #0
 80084e6:	e009      	b.n	80084fc <addMessage+0x7c>
  for (uint16_t i = 0; i < msg->length_bits; i++) {
 80084e8:	89fb      	ldrh	r3, [r7, #14]
 80084ea:	3301      	adds	r3, #1
 80084ec:	81fb      	strh	r3, [r7, #14]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80084f4:	89fa      	ldrh	r2, [r7, #14]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d3d1      	bcc.n	800849e <addMessage+0x1e>
  }
  return true;
 80084fa:	2301      	movs	r3, #1
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <addChunk>:

bool addChunk(BitMessage_t* bit_msg, uint8_t chunk, uint8_t chunk_size)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
 8008510:	4613      	mov	r3, r2
 8008512:	70bb      	strb	r3, [r7, #2]
  if (chunk_size > 8) {
 8008514:	78bb      	ldrb	r3, [r7, #2]
 8008516:	2b08      	cmp	r3, #8
 8008518:	d901      	bls.n	800851e <addChunk+0x1a>
    return false;
 800851a:	2300      	movs	r3, #0
 800851c:	e025      	b.n	800856a <addChunk+0x66>
  }

  for (uint8_t i = 8 - chunk_size; i < 8; i++) {
 800851e:	78bb      	ldrb	r3, [r7, #2]
 8008520:	f1c3 0308 	rsb	r3, r3, #8
 8008524:	73fb      	strb	r3, [r7, #15]
 8008526:	e01c      	b.n	8008562 <addChunk+0x5e>
    bool bit = (chunk & (1 << (7 - i))) != 0;
 8008528:	78fa      	ldrb	r2, [r7, #3]
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	f1c3 0307 	rsb	r3, r3, #7
 8008530:	fa42 f303 	asr.w	r3, r2, r3
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	bf14      	ite	ne
 800853c:	2301      	movne	r3, #1
 800853e:	2300      	moveq	r3, #0
 8008540:	73bb      	strb	r3, [r7, #14]
    if (Packet_AddBit(bit_msg, bit) == false) {
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff fd54 	bl	8007ff4 <Packet_AddBit>
 800854c:	4603      	mov	r3, r0
 800854e:	f083 0301 	eor.w	r3, r3, #1
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <addChunk+0x58>
      return false;
 8008558:	2300      	movs	r3, #0
 800855a:	e006      	b.n	800856a <addChunk+0x66>
  for (uint8_t i = 8 - chunk_size; i < 8; i++) {
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	3301      	adds	r3, #1
 8008560:	73fb      	strb	r3, [r7, #15]
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	2b07      	cmp	r3, #7
 8008566:	d9df      	bls.n	8008528 <addChunk+0x24>
    }
  }
  return true;
 8008568:	2301      	movs	r3, #1
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <addData>:

bool addData(BitMessage_t* bit_msg, void* data, uint8_t num_bits)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b086      	sub	sp, #24
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	4613      	mov	r3, r2
 800857e:	71fb      	strb	r3, [r7, #7]
  if (bit_msg == NULL || data == NULL || num_bits > 32) {
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d005      	beq.n	8008592 <addData+0x20>
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <addData+0x20>
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	2b20      	cmp	r3, #32
 8008590:	d901      	bls.n	8008596 <addData+0x24>
    return false;
 8008592:	2300      	movs	r3, #0
 8008594:	e037      	b.n	8008606 <addData+0x94>
  }

  if ((num_bits % 8) != 0) {
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <addData+0x34>
    return false;
 80085a2:	2300      	movs	r3, #0
 80085a4:	e02f      	b.n	8008606 <addData+0x94>
  }

  for (uint8_t i = 0; i < num_bits; i++) {
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]
 80085aa:	e027      	b.n	80085fc <addData+0x8a>
    uint8_t byte_index = i / 8;
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	08db      	lsrs	r3, r3, #3
 80085b0:	75bb      	strb	r3, [r7, #22]
    uint8_t bit_index = i % 8;
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
 80085b4:	f003 0307 	and.w	r3, r3, #7
 80085b8:	757b      	strb	r3, [r7, #21]
    bool bit = (*(((uint8_t*) data) + byte_index) & (1 << (7 - bit_index))) != 0;
 80085ba:	7dbb      	ldrb	r3, [r7, #22]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	4413      	add	r3, r2
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	7d7b      	ldrb	r3, [r7, #21]
 80085c6:	f1c3 0307 	rsb	r3, r3, #7
 80085ca:	fa42 f303 	asr.w	r3, r2, r3
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bf14      	ite	ne
 80085d6:	2301      	movne	r3, #1
 80085d8:	2300      	moveq	r3, #0
 80085da:	753b      	strb	r3, [r7, #20]
    if (Packet_AddBit(bit_msg, bit) == false) {
 80085dc:	7d3b      	ldrb	r3, [r7, #20]
 80085de:	4619      	mov	r1, r3
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f7ff fd07 	bl	8007ff4 <Packet_AddBit>
 80085e6:	4603      	mov	r3, r0
 80085e8:	f083 0301 	eor.w	r3, r3, #1
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <addData+0x84>
      return false;
 80085f2:	2300      	movs	r3, #0
 80085f4:	e007      	b.n	8008606 <addData+0x94>
  for (uint8_t i = 0; i < num_bits; i++) {
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	3301      	adds	r3, #1
 80085fa:	75fb      	strb	r3, [r7, #23]
 80085fc:	7dfa      	ldrb	r2, [r7, #23]
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	429a      	cmp	r2, r3
 8008602:	d3d3      	bcc.n	80085ac <addData+0x3a>
    }
  }
  return true;
 8008604:	2301      	movs	r3, #1
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <getData>:

bool getData(BitMessage_t* bit_msg, uint16_t* start_position, uint8_t num_bits, void* data)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b086      	sub	sp, #24
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	603b      	str	r3, [r7, #0]
 800861a:	4613      	mov	r3, r2
 800861c:	71fb      	strb	r3, [r7, #7]
  if (bit_msg == NULL || start_position == NULL || data == NULL || num_bits > 32) {
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d008      	beq.n	8008636 <getData+0x28>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d005      	beq.n	8008636 <getData+0x28>
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <getData+0x28>
 8008630:	79fb      	ldrb	r3, [r7, #7]
 8008632:	2b20      	cmp	r3, #32
 8008634:	d901      	bls.n	800863a <getData+0x2c>
    return false;
 8008636:	2300      	movs	r3, #0
 8008638:	e061      	b.n	80086fe <getData+0xf0>
  }

  if ((num_bits % 8) != 0) {
 800863a:	79fb      	ldrb	r3, [r7, #7]
 800863c:	f003 0307 	and.w	r3, r3, #7
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <getData+0x3c>
    return false;
 8008646:	2300      	movs	r3, #0
 8008648:	e059      	b.n	80086fe <getData+0xf0>
  }

  for (uint8_t i = 0; i < num_bits; i++) {
 800864a:	2300      	movs	r3, #0
 800864c:	75fb      	strb	r3, [r7, #23]
 800864e:	e049      	b.n	80086e4 <getData+0xd6>
    uint8_t byte_index = i / 8;
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	08db      	lsrs	r3, r3, #3
 8008654:	75bb      	strb	r3, [r7, #22]
    uint8_t bit_index = i % 8;
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	757b      	strb	r3, [r7, #21]
    bool bit;
    if (Packet_GetBit(bit_msg, *start_position + i, &bit) == false) {
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	881a      	ldrh	r2, [r3, #0]
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	b29b      	uxth	r3, r3
 8008666:	4413      	add	r3, r2
 8008668:	b29b      	uxth	r3, r3
 800866a:	f107 0214 	add.w	r2, r7, #20
 800866e:	4619      	mov	r1, r3
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f7ff fd12 	bl	800809a <Packet_GetBit>
 8008676:	4603      	mov	r3, r0
 8008678:	f083 0301 	eor.w	r3, r3, #1
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <getData+0x78>
      return false;
 8008682:	2300      	movs	r3, #0
 8008684:	e03b      	b.n	80086fe <getData+0xf0>
    }
    if (bit == true) {
 8008686:	7d3b      	ldrb	r3, [r7, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d013      	beq.n	80086b4 <getData+0xa6>
      *(((uint8_t*) data) + byte_index) |= (1 << (7 - bit_index));
 800868c:	7dbb      	ldrb	r3, [r7, #22]
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	4413      	add	r3, r2
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	b25a      	sxtb	r2, r3
 8008696:	7d7b      	ldrb	r3, [r7, #21]
 8008698:	f1c3 0307 	rsb	r3, r3, #7
 800869c:	2101      	movs	r1, #1
 800869e:	fa01 f303 	lsl.w	r3, r1, r3
 80086a2:	b25b      	sxtb	r3, r3
 80086a4:	4313      	orrs	r3, r2
 80086a6:	b259      	sxtb	r1, r3
 80086a8:	7dbb      	ldrb	r3, [r7, #22]
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4413      	add	r3, r2
 80086ae:	b2ca      	uxtb	r2, r1
 80086b0:	701a      	strb	r2, [r3, #0]
 80086b2:	e014      	b.n	80086de <getData+0xd0>
    } else {
      *(((uint8_t*) data) + byte_index) &= ~(1 << (7 - bit_index));
 80086b4:	7dbb      	ldrb	r3, [r7, #22]
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	4413      	add	r3, r2
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b25a      	sxtb	r2, r3
 80086be:	7d7b      	ldrb	r3, [r7, #21]
 80086c0:	f1c3 0307 	rsb	r3, r3, #7
 80086c4:	2101      	movs	r1, #1
 80086c6:	fa01 f303 	lsl.w	r3, r1, r3
 80086ca:	b25b      	sxtb	r3, r3
 80086cc:	43db      	mvns	r3, r3
 80086ce:	b25b      	sxtb	r3, r3
 80086d0:	4013      	ands	r3, r2
 80086d2:	b259      	sxtb	r1, r3
 80086d4:	7dbb      	ldrb	r3, [r7, #22]
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	4413      	add	r3, r2
 80086da:	b2ca      	uxtb	r2, r1
 80086dc:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < num_bits; i++) {
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	3301      	adds	r3, #1
 80086e2:	75fb      	strb	r3, [r7, #23]
 80086e4:	7dfa      	ldrb	r2, [r7, #23]
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d3b1      	bcc.n	8008650 <getData+0x42>
    }
  }
  *start_position += num_bits;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	881a      	ldrh	r2, [r3, #0]
 80086f0:	79fb      	ldrb	r3, [r7, #7]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	4413      	add	r3, r2
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	801a      	strh	r2, [r3, #0]
  return true;
 80086fc:	2301      	movs	r3, #1
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <Error_Routine>:


/* Exported function definitions ---------------------------------------------*/

void Error_Routine(ErrorCodes_t error_code)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	4603      	mov	r3, r0
 800870e:	71fb      	strb	r3, [r7, #7]
  switch (error_code) {
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	2b04      	cmp	r3, #4
 8008714:	d806      	bhi.n	8008724 <Error_Routine+0x1e>
    case ERROR_CFG_INIT:
    case ERROR_COMM_INIT:
    case ERROR_MESS_INIT:
    case ERROR_SYS_INIT:
    case ERROR_MESS_PROCESSING:
      WS_SetColour(0, 255, 0, 0);
 8008716:	2300      	movs	r3, #0
 8008718:	2200      	movs	r2, #0
 800871a:	21ff      	movs	r1, #255	@ 0xff
 800871c:	2000      	movs	r0, #0
 800871e:	f000 fc75 	bl	800900c <WS_SetColour>
      break;
 8008722:	e006      	b.n	8008732 <Error_Routine+0x2c>
    default:
      WS_SetColour(0, 0, 0, 255);
 8008724:	23ff      	movs	r3, #255	@ 0xff
 8008726:	2200      	movs	r2, #0
 8008728:	2100      	movs	r1, #0
 800872a:	2000      	movs	r0, #0
 800872c:	f000 fc6e 	bl	800900c <WS_SetColour>
      break;
 8008730:	bf00      	nop
  }
}
 8008732:	bf00      	nop
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <SYS_StartTask>:
bool registerSysParam();

/* Exported function definitions ---------------------------------------------*/

void SYS_StartTask(void* argument)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  (void)(argument);
  if (Param_RegisterTask(SYS_TASK, "SYS") == false) {
 8008744:	4916      	ldr	r1, [pc, #88]	@ (80087a0 <SYS_StartTask+0x64>)
 8008746:	2003      	movs	r0, #3
 8008748:	f7f8 fd30 	bl	80011ac <Param_RegisterTask>
 800874c:	4603      	mov	r3, r0
 800874e:	f083 0301 	eor.w	r3, r3, #1
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <SYS_StartTask+0x22>
    Error_Routine(ERROR_SYS_INIT);
 8008758:	2003      	movs	r0, #3
 800875a:	f7ff ffd4 	bl	8008706 <Error_Routine>
  }

  if (registerSysParam() == false) {
 800875e:	f000 f821 	bl	80087a4 <registerSysParam>
 8008762:	4603      	mov	r3, r0
 8008764:	f083 0301 	eor.w	r3, r3, #1
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <SYS_StartTask+0x38>
    Error_Routine(ERROR_SYS_INIT);
 800876e:	2003      	movs	r0, #3
 8008770:	f7ff ffc9 	bl	8008706 <Error_Routine>
  }

  if (Param_TaskRegistrationComplete(SYS_TASK) == false) {
 8008774:	2003      	movs	r0, #3
 8008776:	f7f8 fd97 	bl	80012a8 <Param_TaskRegistrationComplete>
 800877a:	4603      	mov	r3, r0
 800877c:	f083 0301 	eor.w	r3, r3, #1
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d002      	beq.n	800878c <SYS_StartTask+0x50>
    Error_Routine(ERROR_SYS_INIT);
 8008786:	2003      	movs	r0, #3
 8008788:	f7ff ffbd 	bl	8008706 <Error_Routine>
  }

  CFG_WaitLoadComplete();
 800878c:	f7f8 f9f2 	bl	8000b74 <CFG_WaitLoadComplete>

  for (;;) {
    WS_Update();
 8008790:	f000 fc64 	bl	800905c <WS_Update>
    osDelay(1000);
 8008794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008798:	f016 f923 	bl	801e9e2 <osDelay>
    WS_Update();
 800879c:	bf00      	nop
 800879e:	e7f7      	b.n	8008790 <SYS_StartTask+0x54>
 80087a0:	0802ad84 	.word	0x0802ad84

080087a4 <registerSysParam>:
}

/* Private function definitions ----------------------------------------------*/

bool registerSysParam()
{
 80087a4:	b480      	push	{r7}
 80087a6:	af00      	add	r7, sp, #0
  return true;
 80087a8:	2301      	movs	r3, #1
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <checkUint8>:


/* Exported function definitions ---------------------------------------------*/

bool checkUint8(char* num_str, uint16_t num_str_len, uint8_t* ret, uint8_t min, uint8_t max)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	607a      	str	r2, [r7, #4]
 80087be:	461a      	mov	r2, r3
 80087c0:	460b      	mov	r3, r1
 80087c2:	817b      	strh	r3, [r7, #10]
 80087c4:	4613      	mov	r3, r2
 80087c6:	727b      	strb	r3, [r7, #9]
  if (num_str_len > 3) return false;
 80087c8:	897b      	ldrh	r3, [r7, #10]
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d901      	bls.n	80087d2 <checkUint8+0x1e>
 80087ce:	2300      	movs	r3, #0
 80087d0:	e03c      	b.n	800884c <checkUint8+0x98>
  if (num_str_len == 0) {
 80087d2:	897b      	ldrh	r3, [r7, #10]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <checkUint8+0x38>
    *ret = 0;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	701a      	strb	r2, [r3, #0]
    if (min == 0) {
 80087de:	7a7b      	ldrb	r3, [r7, #9]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <checkUint8+0x34>
      return true;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e031      	b.n	800884c <checkUint8+0x98>
    }
    else {
      return false;
 80087e8:	2300      	movs	r3, #0
 80087ea:	e02f      	b.n	800884c <checkUint8+0x98>
    }
  }
  for (uint8_t i = 0; i < num_str_len; i++) {
 80087ec:	2300      	movs	r3, #0
 80087ee:	75fb      	strb	r3, [r7, #23]
 80087f0:	e010      	b.n	8008814 <checkUint8+0x60>
    if (! isdigit((uint8_t) num_str[i])) return false;
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4413      	add	r3, r2
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	3301      	adds	r3, #1
 80087fc:	4a15      	ldr	r2, [pc, #84]	@ (8008854 <checkUint8+0xa0>)
 80087fe:	4413      	add	r3, r2
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	f003 0304 	and.w	r3, r3, #4
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <checkUint8+0x5a>
 800880a:	2300      	movs	r3, #0
 800880c:	e01e      	b.n	800884c <checkUint8+0x98>
  for (uint8_t i = 0; i < num_str_len; i++) {
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	3301      	adds	r3, #1
 8008812:	75fb      	strb	r3, [r7, #23]
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	b29b      	uxth	r3, r3
 8008818:	897a      	ldrh	r2, [r7, #10]
 800881a:	429a      	cmp	r2, r3
 800881c:	d8e9      	bhi.n	80087f2 <checkUint8+0x3e>
  }

  uint16_t ret_buf = (uint16_t) atoi((char*) num_str); // Not uint8 in case of overflow
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f01b fd4a 	bl	80242b8 <atoi>
 8008824:	4603      	mov	r3, r0
 8008826:	82bb      	strh	r3, [r7, #20]

  *ret = (uint8_t) ret_buf;
 8008828:	8abb      	ldrh	r3, [r7, #20]
 800882a:	b2da      	uxtb	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	701a      	strb	r2, [r3, #0]

  if ((ret_buf >= min) && (ret_buf <= max)) {
 8008830:	7a7b      	ldrb	r3, [r7, #9]
 8008832:	b29b      	uxth	r3, r3
 8008834:	8aba      	ldrh	r2, [r7, #20]
 8008836:	429a      	cmp	r2, r3
 8008838:	d307      	bcc.n	800884a <checkUint8+0x96>
 800883a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800883e:	b29b      	uxth	r3, r3
 8008840:	8aba      	ldrh	r2, [r7, #20]
 8008842:	429a      	cmp	r2, r3
 8008844:	d801      	bhi.n	800884a <checkUint8+0x96>
    return true;
 8008846:	2301      	movs	r3, #1
 8008848:	e000      	b.n	800884c <checkUint8+0x98>
  }
  else {
    return false;
 800884a:	2300      	movs	r3, #0
  }
}
 800884c:	4618      	mov	r0, r3
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	0802c0f8 	.word	0x0802c0f8

08008858 <checkUint32>:
    return false;
  }
}

bool checkUint32(char* num_str, uint16_t num_str_len, uint32_t* ret, uint32_t min, uint32_t max)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	607a      	str	r2, [r7, #4]
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	460b      	mov	r3, r1
 8008866:	817b      	strh	r3, [r7, #10]
  if (num_str_len > 10) return false;
 8008868:	897b      	ldrh	r3, [r7, #10]
 800886a:	2b0a      	cmp	r3, #10
 800886c:	d901      	bls.n	8008872 <checkUint32+0x1a>
 800886e:	2300      	movs	r3, #0
 8008870:	e039      	b.n	80088e6 <checkUint32+0x8e>
  if (num_str_len == 0) {
 8008872:	897b      	ldrh	r3, [r7, #10]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d109      	bne.n	800888c <checkUint32+0x34>
    *ret = 0;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	601a      	str	r2, [r3, #0]
    if (min == 0) {
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <checkUint32+0x30>
      return true;
 8008884:	2301      	movs	r3, #1
 8008886:	e02e      	b.n	80088e6 <checkUint32+0x8e>
    }
    else {
      return false;
 8008888:	2300      	movs	r3, #0
 800888a:	e02c      	b.n	80088e6 <checkUint32+0x8e>
    }
  }
  for (uint8_t i = 0; i < num_str_len; i++) {
 800888c:	2300      	movs	r3, #0
 800888e:	75fb      	strb	r3, [r7, #23]
 8008890:	e010      	b.n	80088b4 <checkUint32+0x5c>
    if (! isdigit((uint8_t) num_str[i])) return false;
 8008892:	7dfb      	ldrb	r3, [r7, #23]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	4413      	add	r3, r2
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	3301      	adds	r3, #1
 800889c:	4a14      	ldr	r2, [pc, #80]	@ (80088f0 <checkUint32+0x98>)
 800889e:	4413      	add	r3, r2
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	f003 0304 	and.w	r3, r3, #4
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <checkUint32+0x56>
 80088aa:	2300      	movs	r3, #0
 80088ac:	e01b      	b.n	80088e6 <checkUint32+0x8e>
  for (uint8_t i = 0; i < num_str_len; i++) {
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
 80088b0:	3301      	adds	r3, #1
 80088b2:	75fb      	strb	r3, [r7, #23]
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	897a      	ldrh	r2, [r7, #10]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d8e9      	bhi.n	8008892 <checkUint32+0x3a>
  }

  uint32_t ret_buf = (uint32_t) strtoul((char*) num_str, NULL, 0);
 80088be:	2200      	movs	r2, #0
 80088c0:	2100      	movs	r1, #0
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f01b fdf2 	bl	80244ac <strtoul>
 80088c8:	6138      	str	r0, [r7, #16]

  *ret = (uint32_t) ret_buf;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	601a      	str	r2, [r3, #0]

  if ((ret_buf >= min) && (ret_buf <= max)) {
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d305      	bcc.n	80088e4 <checkUint32+0x8c>
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d801      	bhi.n	80088e4 <checkUint32+0x8c>
    return true;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e000      	b.n	80088e6 <checkUint32+0x8e>
  }
  else {
    return false;
 80088e4:	2300      	movs	r3, #0
  }
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	0802c0f8 	.word	0x0802c0f8

080088f4 <checkFloat>:

bool checkFloat(char* num_str, float* ret, float min, float max)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8008902:	edc7 0a00 	vstr	s1, [r7]
  char extra;
  if (sscanf(num_str, "%f%c", ret, &extra) == 1) {
 8008906:	f107 0317 	add.w	r3, r7, #23
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	4910      	ldr	r1, [pc, #64]	@ (8008950 <checkFloat+0x5c>)
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f01c fcf6 	bl	8025300 <siscanf>
 8008914:	4603      	mov	r3, r0
 8008916:	2b01      	cmp	r3, #1
 8008918:	d115      	bne.n	8008946 <checkFloat+0x52>
    if (*ret >= min && *ret <= max) {
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	edd3 7a00 	vldr	s15, [r3]
 8008920:	ed97 7a01 	vldr	s14, [r7, #4]
 8008924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800892c:	d80b      	bhi.n	8008946 <checkFloat+0x52>
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	edd3 7a00 	vldr	s15, [r3]
 8008934:	ed97 7a00 	vldr	s14, [r7]
 8008938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800893c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008940:	db01      	blt.n	8008946 <checkFloat+0x52>
      return true;
 8008942:	2301      	movs	r3, #1
 8008944:	e000      	b.n	8008948 <checkFloat+0x54>
    }
  }
  return false;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	0802ad88 	.word	0x0802ad88

08008954 <checkYesNo>:

bool checkYesNo(char input, bool* ret)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	6039      	str	r1, [r7, #0]
 800895e:	71fb      	strb	r3, [r7, #7]
  if (input == 'y' || input == 'Y') {
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b79      	cmp	r3, #121	@ 0x79
 8008964:	d002      	beq.n	800896c <checkYesNo+0x18>
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	2b59      	cmp	r3, #89	@ 0x59
 800896a:	d104      	bne.n	8008976 <checkYesNo+0x22>
    *ret = true;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2201      	movs	r2, #1
 8008970:	701a      	strb	r2, [r3, #0]
    return true;
 8008972:	2301      	movs	r3, #1
 8008974:	e00b      	b.n	800898e <checkYesNo+0x3a>
  } 
  else if (input == 'n' || input == 'N') {
 8008976:	79fb      	ldrb	r3, [r7, #7]
 8008978:	2b6e      	cmp	r3, #110	@ 0x6e
 800897a:	d002      	beq.n	8008982 <checkYesNo+0x2e>
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	2b4e      	cmp	r3, #78	@ 0x4e
 8008980:	d104      	bne.n	800898c <checkYesNo+0x38>
    *ret = false;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
    return true;
 8008988:	2301      	movs	r3, #1
 800898a:	e000      	b.n	800898e <checkYesNo+0x3a>
  }
  else {
    return false;
 800898c:	2300      	movs	r3, #0
  }
}
 800898e:	4618      	mov	r0, r3
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
	...

0800899c <DAC_InitWaveformGenerator>:
static void fullDmaCallback(void);

/* Exported function definitions ---------------------------------------------*/

bool DAC_InitWaveformGenerator(void)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
  generateSineTable();
 80089a2:	f000 f8e5 	bl	8008b70 <generateSineTable>

  // Initialize control structure
  memset(&wave_ctrl, 0, sizeof(wave_ctrl));
 80089a6:	221c      	movs	r2, #28
 80089a8:	2100      	movs	r1, #0
 80089aa:	480a      	ldr	r0, [pc, #40]	@ (80089d4 <DAC_InitWaveformGenerator+0x38>)
 80089ac:	f01c fd29 	bl	8025402 <memset>
  wave_ctrl.current_amplitude = 0;
 80089b0:	4b08      	ldr	r3, [pc, #32]	@ (80089d4 <DAC_InitWaveformGenerator+0x38>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	609a      	str	r2, [r3, #8]

  // Configure DAC and DMA here
  HAL_StatusTypeDef ret1 = HAL_TIM_Base_Start(&htim6);
 80089b6:	4808      	ldr	r0, [pc, #32]	@ (80089d8 <DAC_InitWaveformGenerator+0x3c>)
 80089b8:	f00e fc74 	bl	80172a4 <HAL_TIM_Base_Start>
 80089bc:	4603      	mov	r3, r0
 80089be:	71fb      	strb	r3, [r7, #7]

  return (ret1 == HAL_OK);
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	bf0c      	ite	eq
 80089c6:	2301      	moveq	r3, #1
 80089c8:	2300      	movne	r3, #0
 80089ca:	b2db      	uxtb	r3, r3
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	24016c1c 	.word	0x24016c1c
 80089d8:	24018484 	.word	0x24018484

080089dc <DAC_SetWaveformSequence>:

bool DAC_SetWaveformSequence(WaveformStep_t* sequence, uint32_t num_steps)
{
 80089dc:	b5b0      	push	{r4, r5, r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  if(! sequence || num_steps == 0) return false;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <DAC_SetWaveformSequence+0x16>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <DAC_SetWaveformSequence+0x1a>
 80089f2:	2300      	movs	r3, #0
 80089f4:	e04b      	b.n	8008a8e <DAC_SetWaveformSequence+0xb2>

  // Length of sequence must be a multiple of half the DAC buffer size
  uint32_t length_multiple = DAC_BUFFER_SIZE / 2;
 80089f6:	23fa      	movs	r3, #250	@ 0xfa
 80089f8:	613b      	str	r3, [r7, #16]
  // Converts symbol length multiple into micro seconds
  uint32_t length_multiple_us = length_multiple * DAC_SAMPLE_RATE / 1000000;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	4a26      	ldr	r2, [pc, #152]	@ (8008a98 <DAC_SetWaveformSequence+0xbc>)
 80089fe:	fb02 f303 	mul.w	r3, r2, r3
 8008a02:	4a26      	ldr	r2, [pc, #152]	@ (8008a9c <DAC_SetWaveformSequence+0xc0>)
 8008a04:	fba2 2303 	umull	r2, r3, r2, r3
 8008a08:	0c9b      	lsrs	r3, r3, #18
 8008a0a:	60fb      	str	r3, [r7, #12]

  // Every symbol duration must be a multiple of half the DAC buffer duration in micro seconds
  for (uint32_t i = 0; i < num_steps; i++) {
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	617b      	str	r3, [r7, #20]
 8008a10:	e02f      	b.n	8008a72 <DAC_SetWaveformSequence+0x96>
    if ((sequence[i].duration_us % length_multiple_us) != 0) {
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	011b      	lsls	r3, r3, #4
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	4413      	add	r3, r2
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a22:	68f9      	ldr	r1, [r7, #12]
 8008a24:	fb01 f202 	mul.w	r2, r1, r2
 8008a28:	1a9b      	subs	r3, r3, r2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <DAC_SetWaveformSequence+0x56>
      return false;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e02d      	b.n	8008a8e <DAC_SetWaveformSequence+0xb2>

    // Calculate phase increment for each step
    // Phase increment determines how quickly we move through the sine table
    // Formula: phase_inc = (freq * 2^PHASE_PRECISION) / sample_rate
    sequence[i].phase_increment =
        (((uint64_t) sequence[i].freq_hz) << PHASE_PRECISION) / DAC_SAMPLE_RATE;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	4413      	add	r3, r2
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	461c      	mov	r4, r3
 8008a40:	4615      	mov	r5, r2
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f04f 0100 	mov.w	r1, #0
 8008a4a:	0021      	movs	r1, r4
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	4a12      	ldr	r2, [pc, #72]	@ (8008a98 <DAC_SetWaveformSequence+0xbc>)
 8008a50:	f04f 0300 	mov.w	r3, #0
 8008a54:	f7f7 fe70 	bl	8000738 <__aeabi_uldivmod>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4619      	mov	r1, r3
    sequence[i].phase_increment =
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	4413      	add	r3, r2
 8008a68:	4602      	mov	r2, r0
 8008a6a:	60da      	str	r2, [r3, #12]
  for (uint32_t i = 0; i < num_steps; i++) {
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	617b      	str	r3, [r7, #20]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d3cb      	bcc.n	8008a12 <DAC_SetWaveformSequence+0x36>
  }

  current_sequence = sequence;
 8008a7a:	4a09      	ldr	r2, [pc, #36]	@ (8008aa0 <DAC_SetWaveformSequence+0xc4>)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6013      	str	r3, [r2, #0]
  sequence_length = num_steps;
 8008a80:	4a08      	ldr	r2, [pc, #32]	@ (8008aa4 <DAC_SetWaveformSequence+0xc8>)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	6013      	str	r3, [r2, #0]
  current_step = 0;
 8008a86:	4b08      	ldr	r3, [pc, #32]	@ (8008aa8 <DAC_SetWaveformSequence+0xcc>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]

  return true;
 8008a8c:	2301      	movs	r3, #1
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bdb0      	pop	{r4, r5, r7, pc}
 8008a96:	bf00      	nop
 8008a98:	000f4240 	.word	0x000f4240
 8008a9c:	431bde83 	.word	0x431bde83
 8008aa0:	24016c38 	.word	0x24016c38
 8008aa4:	24016c3c 	.word	0x24016c3c
 8008aa8:	24016c40 	.word	0x24016c40

08008aac <DAC_StartWaveformOutput>:

bool DAC_StartWaveformOutput(uint32_t channel)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	6078      	str	r0, [r7, #4]
  if (current_sequence == NULL) return false;
 8008ab4:	4b17      	ldr	r3, [pc, #92]	@ (8008b14 <DAC_StartWaveformOutput+0x68>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <DAC_StartWaveformOutput+0x14>
 8008abc:	2300      	movs	r3, #0
 8008abe:	e024      	b.n	8008b0a <DAC_StartWaveformOutput+0x5e>

  dac_running = true;
 8008ac0:	4b15      	ldr	r3, [pc, #84]	@ (8008b18 <DAC_StartWaveformOutput+0x6c>)
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	701a      	strb	r2, [r3, #0]
  updateWaveformParameters(&current_sequence[0]);
 8008ac6:	4b13      	ldr	r3, [pc, #76]	@ (8008b14 <DAC_StartWaveformOutput+0x68>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 f894 	bl	8008bf8 <updateWaveformParameters>
  fillDacBuffer(FILL_FIRST_HALF);
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f000 f8c9 	bl	8008c68 <fillDacBuffer>
  fillDacBuffer(FILL_LAST_HALF);
 8008ad6:	2001      	movs	r0, #1
 8008ad8:	f000 f8c6 	bl	8008c68 <fillDacBuffer>

  if (channel == DAC_CHANNEL_2) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b10      	cmp	r3, #16
 8008ae0:	d102      	bne.n	8008ae8 <DAC_StartWaveformOutput+0x3c>
    HAL_TIM_Base_Start(&htim6);
 8008ae2:	480e      	ldr	r0, [pc, #56]	@ (8008b1c <DAC_StartWaveformOutput+0x70>)
 8008ae4:	f00e fbde 	bl	80172a4 <HAL_TIM_Base_Start>
  }

  HAL_StatusTypeDef ret = HAL_DAC_Start_DMA(&hdac1, channel, (uint32_t*) dac_buffer,
 8008ae8:	2300      	movs	r3, #0
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8008af0:	4a0b      	ldr	r2, [pc, #44]	@ (8008b20 <DAC_StartWaveformOutput+0x74>)
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	480b      	ldr	r0, [pc, #44]	@ (8008b24 <DAC_StartWaveformOutput+0x78>)
 8008af6:	f005 f9e5 	bl	800dec4 <HAL_DAC_Start_DMA>
 8008afa:	4603      	mov	r3, r0
 8008afc:	73fb      	strb	r3, [r7, #15]
                    DAC_BUFFER_SIZE, DAC_ALIGN_12B_R);

  return ret == HAL_OK;
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bf0c      	ite	eq
 8008b04:	2301      	moveq	r3, #1
 8008b06:	2300      	movne	r3, #0
 8008b08:	b2db      	uxtb	r3, r3
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	24016c38 	.word	0x24016c38
 8008b18:	24016c44 	.word	0x24016c44
 8008b1c:	24018484 	.word	0x24018484
 8008b20:	2401644c 	.word	0x2401644c
 8008b24:	24018144 	.word	0x24018144

08008b28 <DAC_StopWaveformOutput>:

bool DAC_StopWaveformOutput(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  // reset flags and end DMA transfer to ease DMA channels
  dac_running = false;
 8008b2c:	4b07      	ldr	r3, [pc, #28]	@ (8008b4c <DAC_StopWaveformOutput+0x24>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	701a      	strb	r2, [r3, #0]
  // current_sequence = NULL; // deprecated
  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);
 8008b32:	2110      	movs	r1, #16
 8008b34:	4806      	ldr	r0, [pc, #24]	@ (8008b50 <DAC_StopWaveformOutput+0x28>)
 8008b36:	f005 fa85 	bl	800e044 <HAL_DAC_Stop_DMA>
  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	4804      	ldr	r0, [pc, #16]	@ (8008b50 <DAC_StopWaveformOutput+0x28>)
 8008b3e:	f005 fa81 	bl	800e044 <HAL_DAC_Stop_DMA>
  ADC_StopFeedback();
 8008b42:	f7fc f8ed 	bl	8004d20 <ADC_StopFeedback>
  return true;
 8008b46:	2301      	movs	r3, #1
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	24016c44 	.word	0x24016c44
 8008b50:	24018144 	.word	0x24018144

08008b54 <DAC_IsRunning>:

bool DAC_IsRunning()
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  return dac_running;
 8008b58:	4b03      	ldr	r3, [pc, #12]	@ (8008b68 <DAC_IsRunning+0x14>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	b2db      	uxtb	r3, r3
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	24016c44 	.word	0x24016c44
 8008b6c:	00000000 	.word	0x00000000

08008b70 <generateSineTable>:

/* Private function definitions ----------------------------------------------*/

// Creates a sine table with 360/SINE_POINTS degree spacing between adjacent points centered at 2047. Table has one full sine wave
static void generateSineTable(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
  for(uint16_t i = 0; i < SINE_POINTS; i++) {
 8008b76:	2300      	movs	r3, #0
 8008b78:	80fb      	strh	r3, [r7, #6]
 8008b7a:	e028      	b.n	8008bce <generateSineTable+0x5e>
    sine_table[i] = (uint16_t)(2047.0f * sinf(2.0f * M_PI * i / SINE_POINTS) + 2047.0f);
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008b86:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8008be0 <generateSineTable+0x70>
 8008b8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008b8e:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8008be8 <generateSineTable+0x78>
 8008b92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b9e:	f020 fb1b 	bl	80291d8 <sinf>
 8008ba2:	eef0 7a40 	vmov.f32	s15, s0
 8008ba6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8008bf0 <generateSineTable+0x80>
 8008baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bae:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8008bf0 <generateSineTable+0x80>
 8008bb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bbc:	ee17 2a90 	vmov	r2, s15
 8008bc0:	b291      	uxth	r1, r2
 8008bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8008bf4 <generateSineTable+0x84>)
 8008bc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint16_t i = 0; i < SINE_POINTS; i++) {
 8008bc8:	88fb      	ldrh	r3, [r7, #6]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	80fb      	strh	r3, [r7, #6]
 8008bce:	88fb      	ldrh	r3, [r7, #6]
 8008bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bd4:	d3d2      	bcc.n	8008b7c <generateSineTable+0xc>
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	54442d18 	.word	0x54442d18
 8008be4:	401921fb 	.word	0x401921fb
 8008be8:	00000000 	.word	0x00000000
 8008bec:	40900000 	.word	0x40900000
 8008bf0:	44ffe000 	.word	0x44ffe000
 8008bf4:	24015c4c 	.word	0x24015c4c

08008bf8 <updateWaveformParameters>:

static void updateWaveformParameters(const WaveformStep_t* step)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  // Calculate new phase increment
  wave_ctrl.phase_increment = step->phase_increment;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	4a15      	ldr	r2, [pc, #84]	@ (8008c5c <updateWaveformParameters+0x64>)
 8008c06:	6053      	str	r3, [r2, #4]

  // Setup amplitude transition
  wave_ctrl.target_amplitude = (uint32_t) (step->relative_amplitude * (float) DAC_MAX_VALUE);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c0e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008c60 <updateWaveformParameters+0x68>
 8008c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c1a:	ee17 2a90 	vmov	r2, s15
 8008c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c5c <updateWaveformParameters+0x64>)
 8008c20:	60da      	str	r2, [r3, #12]
  wave_ctrl.amplitude_step = ((int32_t) wave_ctrl.target_amplitude - (int32_t) wave_ctrl.current_amplitude) / AMPLITUDE_STEPS;
 8008c22:	4b0e      	ldr	r3, [pc, #56]	@ (8008c5c <updateWaveformParameters+0x64>)
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	461a      	mov	r2, r3
 8008c28:	4b0c      	ldr	r3, [pc, #48]	@ (8008c5c <updateWaveformParameters+0x64>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da00      	bge.n	8008c34 <updateWaveformParameters+0x3c>
 8008c32:	331f      	adds	r3, #31
 8008c34:	115b      	asrs	r3, r3, #5
 8008c36:	461a      	mov	r2, r3
 8008c38:	4b08      	ldr	r3, [pc, #32]	@ (8008c5c <updateWaveformParameters+0x64>)
 8008c3a:	611a      	str	r2, [r3, #16]
  wave_ctrl.amplitude_counter = 0;
 8008c3c:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <updateWaveformParameters+0x64>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	615a      	str	r2, [r3, #20]
  wave_ctrl.amplitude_transitioning = true;
 8008c42:	4b06      	ldr	r3, [pc, #24]	@ (8008c5c <updateWaveformParameters+0x64>)
 8008c44:	2201      	movs	r2, #1
 8008c46:	761a      	strb	r2, [r3, #24]

  current_symbol_duration_us = 0;
 8008c48:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <updateWaveformParameters+0x6c>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	601a      	str	r2, [r3, #0]
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	24016c1c 	.word	0x24016c1c
 8008c60:	457ff000 	.word	0x457ff000
 8008c64:	24016c48 	.word	0x24016c48

08008c68 <fillDacBuffer>:

static void fillDacBuffer(FillType_t type)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	@ 0x28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	71fb      	strb	r3, [r7, #7]
  // Flag that indicates that the next time this function is called it should terminate the DAC output
  static bool last_fill = false;

  callback_count++;
 8008c72:	4b66      	ldr	r3, [pc, #408]	@ (8008e0c <fillDacBuffer+0x1a4>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3301      	adds	r3, #1
 8008c78:	4a64      	ldr	r2, [pc, #400]	@ (8008e0c <fillDacBuffer+0x1a4>)
 8008c7a:	6013      	str	r3, [r2, #0]

  if (last_fill == true) {
 8008c7c:	4b64      	ldr	r3, [pc, #400]	@ (8008e10 <fillDacBuffer+0x1a8>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d005      	beq.n	8008c90 <fillDacBuffer+0x28>
    last_fill = false;
 8008c84:	4b62      	ldr	r3, [pc, #392]	@ (8008e10 <fillDacBuffer+0x1a8>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
    DAC_StopWaveformOutput();
 8008c8a:	f7ff ff4d 	bl	8008b28 <DAC_StopWaveformOutput>
    return;
 8008c8e:	e0ba      	b.n	8008e06 <fillDacBuffer+0x19e>
  }

  // Final step check
  if (current_step == (sequence_length - 1)) {
 8008c90:	4b60      	ldr	r3, [pc, #384]	@ (8008e14 <fillDacBuffer+0x1ac>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	1e5a      	subs	r2, r3, #1
 8008c96:	4b60      	ldr	r3, [pc, #384]	@ (8008e18 <fillDacBuffer+0x1b0>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d10e      	bne.n	8008cbc <fillDacBuffer+0x54>
    if (current_symbol_duration_us >= current_sequence[current_step].duration_us) {
 8008c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8008e1c <fillDacBuffer+0x1b4>)
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	4b5d      	ldr	r3, [pc, #372]	@ (8008e18 <fillDacBuffer+0x1b0>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	4413      	add	r3, r2
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	4b5c      	ldr	r3, [pc, #368]	@ (8008e20 <fillDacBuffer+0x1b8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d803      	bhi.n	8008cbc <fillDacBuffer+0x54>
      last_fill = true;
 8008cb4:	4b56      	ldr	r3, [pc, #344]	@ (8008e10 <fillDacBuffer+0x1a8>)
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	701a      	strb	r2, [r3, #0]
      return;
 8008cba:	e0a4      	b.n	8008e06 <fillDacBuffer+0x19e>
    }
  }

  // Running index to use
  uint16_t i = (type == FILL_FIRST_HALF) ? 0 : DAC_BUFFER_SIZE / 2;
 8008cbc:	79fb      	ldrb	r3, [r7, #7]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <fillDacBuffer+0x5e>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e000      	b.n	8008cc8 <fillDacBuffer+0x60>
 8008cc6:	23fa      	movs	r3, #250	@ 0xfa
 8008cc8:	84fb      	strh	r3, [r7, #38]	@ 0x26

  const uint16_t start_index = i; // Absolute starting index to use
 8008cca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ccc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  const uint16_t end_index = (type == FILL_FIRST_HALF) ? DAC_BUFFER_SIZE / 2: DAC_BUFFER_SIZE;
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <fillDacBuffer+0x70>
 8008cd4:	23fa      	movs	r3, #250	@ 0xfa
 8008cd6:	e001      	b.n	8008cdc <fillDacBuffer+0x74>
 8008cd8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8008cdc:	847b      	strh	r3, [r7, #34]	@ 0x22

  if (current_symbol_duration_us >= current_sequence[current_step].duration_us) { // Current sequence step has gone on long enough
 8008cde:	4b4f      	ldr	r3, [pc, #316]	@ (8008e1c <fillDacBuffer+0x1b4>)
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	4b4d      	ldr	r3, [pc, #308]	@ (8008e18 <fillDacBuffer+0x1b0>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	4413      	add	r3, r2
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	4b4c      	ldr	r3, [pc, #304]	@ (8008e20 <fillDacBuffer+0x1b8>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d80d      	bhi.n	8008d10 <fillDacBuffer+0xa8>
    // start new symbol
    current_step++;
 8008cf4:	4b48      	ldr	r3, [pc, #288]	@ (8008e18 <fillDacBuffer+0x1b0>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	4a47      	ldr	r2, [pc, #284]	@ (8008e18 <fillDacBuffer+0x1b0>)
 8008cfc:	6013      	str	r3, [r2, #0]
    updateWaveformParameters(&current_sequence[current_step]);
 8008cfe:	4b47      	ldr	r3, [pc, #284]	@ (8008e1c <fillDacBuffer+0x1b4>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	4b45      	ldr	r3, [pc, #276]	@ (8008e18 <fillDacBuffer+0x1b0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	4413      	add	r3, r2
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7ff ff74 	bl	8008bf8 <updateWaveformParameters>
  }

  // Flag to change the output frequency has been set so perform amplitude transition
  if (wave_ctrl.amplitude_transitioning) {
 8008d10:	4b44      	ldr	r3, [pc, #272]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d12:	7e1b      	ldrb	r3, [r3, #24]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d044      	beq.n	8008da2 <fillDacBuffer+0x13a>
    for (;i < start_index + AMPLITUDE_STEPS; i++) {
 8008d18:	e03d      	b.n	8008d96 <fillDacBuffer+0x12e>
      // Take the first 10 bits of the phase as the sine table has 2^10 points
      uint32_t index = wave_ctrl.phase_accumulator >> (PHASE_PRECISION - 10);
 8008d1a:	4b42      	ldr	r3, [pc, #264]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	0d9b      	lsrs	r3, r3, #22
 8008d20:	61fb      	str	r3, [r7, #28]
      uint32_t base_value = sine_table[index & (SINE_POINTS - 1)]; // Ensures nothing out of index
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d28:	4a3f      	ldr	r2, [pc, #252]	@ (8008e28 <fillDacBuffer+0x1c0>)
 8008d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d2e:	61bb      	str	r3, [r7, #24]

      wave_ctrl.current_amplitude = (uint32_t) ((int32_t) wave_ctrl.current_amplitude + wave_ctrl.amplitude_step);
 8008d30:	4b3c      	ldr	r3, [pc, #240]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	461a      	mov	r2, r3
 8008d36:	4b3b      	ldr	r3, [pc, #236]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	4b39      	ldr	r3, [pc, #228]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d40:	609a      	str	r2, [r3, #8]
      wave_ctrl.amplitude_counter++;
 8008d42:	4b38      	ldr	r3, [pc, #224]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	3301      	adds	r3, #1
 8008d48:	4a36      	ldr	r2, [pc, #216]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d4a:	6153      	str	r3, [r2, #20]
      if(wave_ctrl.amplitude_counter >= AMPLITUDE_STEPS) {
 8008d4c:	4b35      	ldr	r3, [pc, #212]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	2b1f      	cmp	r3, #31
 8008d52:	d906      	bls.n	8008d62 <fillDacBuffer+0xfa>
        wave_ctrl.amplitude_transitioning = false;
 8008d54:	4b33      	ldr	r3, [pc, #204]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	761a      	strb	r2, [r3, #24]
        wave_ctrl.current_amplitude = wave_ctrl.target_amplitude;
 8008d5a:	4b32      	ldr	r3, [pc, #200]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	4a31      	ldr	r2, [pc, #196]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d60:	6093      	str	r3, [r2, #8]
      }
      // Add baseline offset and modulation amplitude
      dac_buffer[i] = (DAC_MAX_VALUE + 1) / 2 - wave_ctrl.current_amplitude / 2 + ((base_value * wave_ctrl.current_amplitude) >> 12);
 8008d62:	4b30      	ldr	r3, [pc, #192]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	fb02 f303 	mul.w	r3, r2, r3
 8008d6c:	0b1a      	lsrs	r2, r3, #12
 8008d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	085b      	lsrs	r3, r3, #1
 8008d74:	1ad2      	subs	r2, r2, r3
 8008d76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d7c:	492b      	ldr	r1, [pc, #172]	@ (8008e2c <fillDacBuffer+0x1c4>)
 8008d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      // Update phase
      wave_ctrl.phase_accumulator += wave_ctrl.phase_increment;
 8008d82:	4b28      	ldr	r3, [pc, #160]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	4b27      	ldr	r3, [pc, #156]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	4a25      	ldr	r2, [pc, #148]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008d8e:	6013      	str	r3, [r2, #0]
    for (;i < start_index + AMPLITUDE_STEPS; i++) {
 8008d90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d92:	3301      	adds	r3, #1
 8008d94:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008d96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d98:	f103 021f 	add.w	r2, r3, #31
 8008d9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	dabb      	bge.n	8008d1a <fillDacBuffer+0xb2>
    }
  }

  uint16_t offset_amt = (DAC_MAX_VALUE + 1) / 2 - wave_ctrl.current_amplitude / 2;
 8008da2:	4b20      	ldr	r3, [pc, #128]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8008dae:	82fb      	strh	r3, [r7, #22]
  for(; i < end_index; i++) {
 8008db0:	e020      	b.n	8008df4 <fillDacBuffer+0x18c>
    // Get current phase
    uint32_t index = wave_ctrl.phase_accumulator >> (PHASE_PRECISION - 10);
 8008db2:	4b1c      	ldr	r3, [pc, #112]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	0d9b      	lsrs	r3, r3, #22
 8008db8:	613b      	str	r3, [r7, #16]
    uint32_t base_value = sine_table[index & (SINE_POINTS - 1)];
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dc0:	4a19      	ldr	r2, [pc, #100]	@ (8008e28 <fillDacBuffer+0x1c0>)
 8008dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc6:	60fb      	str	r3, [r7, #12]

    // Scale output and write to buffer
    dac_buffer[i] = offset_amt + ((base_value * wave_ctrl.current_amplitude) >> 12);
 8008dc8:	8af9      	ldrh	r1, [r7, #22]
 8008dca:	4b16      	ldr	r3, [pc, #88]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	fb02 f303 	mul.w	r3, r2, r3
 8008dd4:	0b1a      	lsrs	r2, r3, #12
 8008dd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008dd8:	440a      	add	r2, r1
 8008dda:	4914      	ldr	r1, [pc, #80]	@ (8008e2c <fillDacBuffer+0x1c4>)
 8008ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Update phase
    wave_ctrl.phase_accumulator += wave_ctrl.phase_increment;
 8008de0:	4b10      	ldr	r3, [pc, #64]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	4b0f      	ldr	r3, [pc, #60]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	4413      	add	r3, r2
 8008dea:	4a0e      	ldr	r2, [pc, #56]	@ (8008e24 <fillDacBuffer+0x1bc>)
 8008dec:	6013      	str	r3, [r2, #0]
  for(; i < end_index; i++) {
 8008dee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008df0:	3301      	adds	r3, #1
 8008df2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008df4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008df6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d3da      	bcc.n	8008db2 <fillDacBuffer+0x14a>
  }

  current_symbol_duration_us += DAC_BUFFER_SIZE * DAC_SAMPLE_RATE / 1000000 / 2;
 8008dfc:	4b08      	ldr	r3, [pc, #32]	@ (8008e20 <fillDacBuffer+0x1b8>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	33fa      	adds	r3, #250	@ 0xfa
 8008e02:	4a07      	ldr	r2, [pc, #28]	@ (8008e20 <fillDacBuffer+0x1b8>)
 8008e04:	6013      	str	r3, [r2, #0]
}
 8008e06:	3728      	adds	r7, #40	@ 0x28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	24016c4c 	.word	0x24016c4c
 8008e10:	24016c50 	.word	0x24016c50
 8008e14:	24016c3c 	.word	0x24016c3c
 8008e18:	24016c40 	.word	0x24016c40
 8008e1c:	24016c38 	.word	0x24016c38
 8008e20:	24016c48 	.word	0x24016c48
 8008e24:	24016c1c 	.word	0x24016c1c
 8008e28:	24015c4c 	.word	0x24015c4c
 8008e2c:	2401644c 	.word	0x2401644c

08008e30 <HAL_DAC_ConvHalfCpltCallbackCh1>:

// DMA callbacks
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  (void)(hdac);
  halfFullDmaCallback();
 8008e38:	f000 f822 	bl	8008e80 <halfFullDmaCallback>
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  (void)(hdac);
  fullDmaCallback();
 8008e4c:	f000 f826 	bl	8008e9c <fullDmaCallback>
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_DACEx_ConvHalfCpltCallbackCh2>:

void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  (void)(hdac);
  halfFullDmaCallback();
 8008e60:	f000 f80e 	bl	8008e80 <halfFullDmaCallback>
}
 8008e64:	bf00      	nop
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  (void)(hdac);
  fullDmaCallback();
 8008e74:	f000 f812 	bl	8008e9c <fullDmaCallback>
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <halfFullDmaCallback>:

static void halfFullDmaCallback(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
  if(dac_running == true) {
 8008e84:	4b04      	ldr	r3, [pc, #16]	@ (8008e98 <halfFullDmaCallback+0x18>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <halfFullDmaCallback+0x14>
    fillDacBuffer(FILL_FIRST_HALF);
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f7ff feea 	bl	8008c68 <fillDacBuffer>
  }
}
 8008e94:	bf00      	nop
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	24016c44 	.word	0x24016c44

08008e9c <fullDmaCallback>:

static void fullDmaCallback(void)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	af00      	add	r7, sp, #0
  if(dac_running == true) {
 8008ea0:	4b04      	ldr	r3, [pc, #16]	@ (8008eb4 <fullDmaCallback+0x18>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <fullDmaCallback+0x14>
    fillDacBuffer(FILL_LAST_HALF);
 8008eaa:	2001      	movs	r0, #1
 8008eac:	f7ff fedc 	bl	8008c68 <fillDacBuffer>
  }
}
 8008eb0:	bf00      	nop
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	24016c44 	.word	0x24016c44

08008eb8 <PGA_Init>:

HAL_StatusTypeDef SPI_TransmitData(uint16_t *pData, uint16_t size);
HAL_StatusTypeDef SPI_SendCommandReceiveResponse(uint16_t *pTxData, uint16_t *pRxData, uint16_t size);

HAL_StatusTypeDef PGA_Init()
{
 8008eb8:	b480      	push	{r7}
 8008eba:	af00      	add	r7, sp, #0
  spi4_dma_complete = true;
 8008ebc:	4b07      	ldr	r3, [pc, #28]	@ (8008edc <PGA_Init+0x24>)
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	701a      	strb	r2, [r3, #0]
  pga_is_shutdown = false;
 8008ec2:	4b07      	ldr	r3, [pc, #28]	@ (8008ee0 <PGA_Init+0x28>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	701a      	strb	r2, [r3, #0]

  rx_buffer = 2;
 8008ec8:	4b06      	ldr	r3, [pc, #24]	@ (8008ee4 <PGA_Init+0x2c>)
 8008eca:	2202      	movs	r2, #2
 8008ecc:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	24016c51 	.word	0x24016c51
 8008ee0:	24016c52 	.word	0x24016c52
 8008ee4:	24016c56 	.word	0x24016c56

08008ee8 <PGA_SetGain>:

void PGA_SetGain(PGA_Gain_t gain)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	71fb      	strb	r3, [r7, #7]
  tx_buffer = PGA_CMD_WRITE;
 8008ef2:	4b11      	ldr	r3, [pc, #68]	@ (8008f38 <PGA_SetGain+0x50>)
 8008ef4:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8008ef8:	801a      	strh	r2, [r3, #0]
  tx_buffer |= PGA_CHANNEL;
 8008efa:	4b0f      	ldr	r3, [pc, #60]	@ (8008f38 <PGA_SetGain+0x50>)
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	f043 0301 	orr.w	r3, r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	4b0c      	ldr	r3, [pc, #48]	@ (8008f38 <PGA_SetGain+0x50>)
 8008f06:	801a      	strh	r2, [r3, #0]
  tx_buffer |= (gain << 4);
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	011b      	lsls	r3, r3, #4
 8008f0e:	b21a      	sxth	r2, r3
 8008f10:	4b09      	ldr	r3, [pc, #36]	@ (8008f38 <PGA_SetGain+0x50>)
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	b21b      	sxth	r3, r3
 8008f16:	4313      	orrs	r3, r2
 8008f18:	b21b      	sxth	r3, r3
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <PGA_SetGain+0x50>)
 8008f1e:	801a      	strh	r2, [r3, #0]

  current_gain = gain;
 8008f20:	4a06      	ldr	r2, [pc, #24]	@ (8008f3c <PGA_SetGain+0x54>)
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	7013      	strb	r3, [r2, #0]

  SPI_TransmitData(&tx_buffer, 1);
 8008f26:	2101      	movs	r1, #1
 8008f28:	4803      	ldr	r0, [pc, #12]	@ (8008f38 <PGA_SetGain+0x50>)
 8008f2a:	f000 f81d 	bl	8008f68 <SPI_TransmitData>
}
 8008f2e:	bf00      	nop
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	24016c54 	.word	0x24016c54
 8008f3c:	24016c53 	.word	0x24016c53

08008f40 <PGA_Enable>:
{
  return HAL_OK;
}

HAL_StatusTypeDef PGA_Enable()
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
  tx_buffer = PGA_CMD_SDN_DIS;
 8008f46:	4b07      	ldr	r3, [pc, #28]	@ (8008f64 <PGA_Enable+0x24>)
 8008f48:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8008f4c:	801a      	strh	r2, [r3, #0]

  HAL_StatusTypeDef ret = SPI_TransmitData(&tx_buffer, 1);
 8008f4e:	2101      	movs	r1, #1
 8008f50:	4804      	ldr	r0, [pc, #16]	@ (8008f64 <PGA_Enable+0x24>)
 8008f52:	f000 f809 	bl	8008f68 <SPI_TransmitData>
 8008f56:	4603      	mov	r3, r0
 8008f58:	71fb      	strb	r3, [r7, #7]

  return ret;
 8008f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	24016c54 	.word	0x24016c54

08008f68 <SPI_TransmitData>:
{
  return HAL_OK;
}

HAL_StatusTypeDef SPI_TransmitData(uint16_t *pData, uint16_t size)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	807b      	strh	r3, [r7, #2]
  // Wait for any ongoing transfer to complete
  while(HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY);
 8008f74:	bf00      	nop
 8008f76:	4808      	ldr	r0, [pc, #32]	@ (8008f98 <SPI_TransmitData+0x30>)
 8008f78:	f00e f806 	bl	8016f88 <HAL_SPI_GetState>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d1f9      	bne.n	8008f76 <SPI_TransmitData+0xe>

  // Transmit data using DMA
  return HAL_SPI_Transmit_DMA(&hspi4, (uint8_t*) pData, size);
 8008f82:	887b      	ldrh	r3, [r7, #2]
 8008f84:	461a      	mov	r2, r3
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4803      	ldr	r0, [pc, #12]	@ (8008f98 <SPI_TransmitData+0x30>)
 8008f8a:	f00d fcb1 	bl	80168f0 <HAL_SPI_Transmit_DMA>
 8008f8e:	4603      	mov	r3, r0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	240182c0 	.word	0x240182c0

08008f9c <PGA_GetGain>:
  // Transmit and receive data using DMA
  return HAL_SPI_TransmitReceive_DMA(&hspi4, (uint8_t*) pTxData, (uint8_t*) pRxData, size);
}

uint8_t PGA_GetGain()
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	af00      	add	r7, sp, #0
  return current_gain;
 8008fa0:	4b03      	ldr	r3, [pc, #12]	@ (8008fb0 <PGA_GetGain+0x14>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	b2db      	uxtb	r3, r3
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	24016c53 	.word	0x24016c53

08008fb4 <WS_Init>:
extern TIM_HandleTypeDef WS_TIM;

/* Private function prototypes -----------------------------------------------*/

HAL_StatusTypeDef WS_Init()
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop_DMA(&WS_TIM, WS_TIM_CHANNEL);
 8008fba:	2100      	movs	r1, #0
 8008fbc:	4810      	ldr	r0, [pc, #64]	@ (8009000 <WS_Init+0x4c>)
 8008fbe:	f00e fd33 	bl	8017a28 <HAL_TIM_PWM_Stop_DMA>
  // Initialize PWM timer
  HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&WS_TIM);
 8008fc2:	480f      	ldr	r0, [pc, #60]	@ (8009000 <WS_Init+0x4c>)
 8008fc4:	f00e fa9a 	bl	80174fc <HAL_TIM_PWM_Init>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	71fb      	strb	r3, [r7, #7]
  if (halStatus != HAL_OK) return halStatus;
 8008fcc:	79fb      	ldrb	r3, [r7, #7]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <WS_Init+0x22>
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	e010      	b.n	8008ff8 <WS_Init+0x44>

  // Clear DMA buffer
  memset(WS_DMA_BUF, 0, sizeof(WS_DMA_BUF));
 8008fd6:	22f8      	movs	r2, #248	@ 0xf8
 8008fd8:	2100      	movs	r1, #0
 8008fda:	480a      	ldr	r0, [pc, #40]	@ (8009004 <WS_Init+0x50>)
 8008fdc:	f01c fa11 	bl	8025402 <memset>

  // Set DMA Transfer ready flag
  WS_DMA_COMPLETE_FLAG = 1;
 8008fe0:	4b09      	ldr	r3, [pc, #36]	@ (8009008 <WS_Init+0x54>)
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	701a      	strb	r2, [r3, #0]

  WS_SetColour(0, 0, 0, 0);
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	2000      	movs	r0, #0
 8008fee:	f000 f80d 	bl	800900c <WS_SetColour>
  WS_Update();
 8008ff2:	f000 f833 	bl	800905c <WS_Update>

  return halStatus;
 8008ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	24018438 	.word	0x24018438
 8009004:	24016c5c 	.word	0x24016c5c
 8009008:	24016d54 	.word	0x24016d54

0800900c <WS_SetColour>:

void WS_SetColour(uint8_t index, uint8_t r, uint8_t g, uint8_t b)
{
 800900c:	b490      	push	{r4, r7}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	4611      	mov	r1, r2
 8009018:	461a      	mov	r2, r3
 800901a:	4623      	mov	r3, r4
 800901c:	71fb      	strb	r3, [r7, #7]
 800901e:	4603      	mov	r3, r0
 8009020:	71bb      	strb	r3, [r7, #6]
 8009022:	460b      	mov	r3, r1
 8009024:	717b      	strb	r3, [r7, #5]
 8009026:	4613      	mov	r3, r2
 8009028:	713b      	strb	r3, [r7, #4]
  WS_LED_DATA[index].colour.r = r;
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	4a0a      	ldr	r2, [pc, #40]	@ (8009058 <WS_SetColour+0x4c>)
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	79ba      	ldrb	r2, [r7, #6]
 8009034:	705a      	strb	r2, [r3, #1]
  WS_LED_DATA[index].colour.g = g;
 8009036:	79fb      	ldrb	r3, [r7, #7]
 8009038:	4a07      	ldr	r2, [pc, #28]	@ (8009058 <WS_SetColour+0x4c>)
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	797a      	ldrb	r2, [r7, #5]
 8009040:	709a      	strb	r2, [r3, #2]
  WS_LED_DATA[index].colour.b = b;
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	4904      	ldr	r1, [pc, #16]	@ (8009058 <WS_SetColour+0x4c>)
 8009046:	793a      	ldrb	r2, [r7, #4]
 8009048:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bc90      	pop	{r4, r7}
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	24016c58 	.word	0x24016c58

0800905c <WS_Update>:

HAL_StatusTypeDef WS_Update()
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
  // Check if previous DMA complete
  if (! WS_DMA_COMPLETE_FLAG) {
 8009062:	4b2c      	ldr	r3, [pc, #176]	@ (8009114 <WS_Update+0xb8>)
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <WS_Update+0x14>
    return HAL_BUSY;
 800906c:	2302      	movs	r3, #2
 800906e:	e04c      	b.n	800910a <WS_Update+0xae>
  }

  uint16_t bufIndex = WS_RST_PERIODS;
 8009070:	2332      	movs	r3, #50	@ 0x32
 8009072:	81fb      	strh	r3, [r7, #14]

  for (uint8_t ledIndex = 0; ledIndex < WS_NUM_LEDS; ledIndex++) {
 8009074:	2300      	movs	r3, #0
 8009076:	737b      	strb	r3, [r7, #13]
 8009078:	e03b      	b.n	80090f2 <WS_Update+0x96>
    uint32_t ledData = WS_LED_DATA[ledIndex].data;
 800907a:	7b7b      	ldrb	r3, [r7, #13]
 800907c:	4a26      	ldr	r2, [pc, #152]	@ (8009118 <WS_Update+0xbc>)
 800907e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009082:	607b      	str	r3, [r7, #4]

    for (int8_t byteIndex = 2; byteIndex >= 0; byteIndex--) {
 8009084:	2302      	movs	r3, #2
 8009086:	733b      	strb	r3, [r7, #12]
 8009088:	e02c      	b.n	80090e4 <WS_Update+0x88>
      uint8_t byte = (ledData >> (byteIndex * 8)) & 0xFF;
 800908a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800908e:	00db      	lsls	r3, r3, #3
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	fa22 f303 	lsr.w	r3, r2, r3
 8009096:	70fb      	strb	r3, [r7, #3]

      // Convert LED data to PWM timing pulses required by WS2812B protocol
      // Each bit becomes a specific pulse width in the DMA buffer
      for (int8_t bit_index = 7; bit_index >= 0; bit_index--) {
 8009098:	2307      	movs	r3, #7
 800909a:	72fb      	strb	r3, [r7, #11]
 800909c:	e018      	b.n	80090d0 <WS_Update+0x74>
        WS_DMA_BUF[bufIndex++] = (byte & (1 << bit_index)) ? WS_HI_VAL : WS_LO_VAL;
 800909e:	78fa      	ldrb	r2, [r7, #3]
 80090a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80090a4:	fa42 f303 	asr.w	r3, r2, r3
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <WS_Update+0x58>
 80090b0:	2143      	movs	r1, #67	@ 0x43
 80090b2:	e000      	b.n	80090b6 <WS_Update+0x5a>
 80090b4:	2121      	movs	r1, #33	@ 0x21
 80090b6:	89fb      	ldrh	r3, [r7, #14]
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	81fa      	strh	r2, [r7, #14]
 80090bc:	461a      	mov	r2, r3
 80090be:	4b17      	ldr	r3, [pc, #92]	@ (800911c <WS_Update+0xc0>)
 80090c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      for (int8_t bit_index = 7; bit_index >= 0; bit_index--) {
 80090c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	3b01      	subs	r3, #1
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	72fb      	strb	r3, [r7, #11]
 80090d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	dae2      	bge.n	800909e <WS_Update+0x42>
    for (int8_t byteIndex = 2; byteIndex >= 0; byteIndex--) {
 80090d8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	3b01      	subs	r3, #1
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	733b      	strb	r3, [r7, #12]
 80090e4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	dace      	bge.n	800908a <WS_Update+0x2e>
  for (uint8_t ledIndex = 0; ledIndex < WS_NUM_LEDS; ledIndex++) {
 80090ec:	7b7b      	ldrb	r3, [r7, #13]
 80090ee:	3301      	adds	r3, #1
 80090f0:	737b      	strb	r3, [r7, #13]
 80090f2:	7b7b      	ldrb	r3, [r7, #13]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d0c0      	beq.n	800907a <WS_Update+0x1e>
      }
    }
  }

  HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&WS_TIM, WS_TIM_CHANNEL,
 80090f8:	237c      	movs	r3, #124	@ 0x7c
 80090fa:	4a08      	ldr	r2, [pc, #32]	@ (800911c <WS_Update+0xc0>)
 80090fc:	2100      	movs	r1, #0
 80090fe:	4808      	ldr	r0, [pc, #32]	@ (8009120 <WS_Update+0xc4>)
 8009100:	f00e fa5e 	bl	80175c0 <HAL_TIM_PWM_Start_DMA>
 8009104:	4603      	mov	r3, r0
 8009106:	72bb      	strb	r3, [r7, #10]
      (uint32_t *) WS_DMA_BUF, WS_DMA_BUF_LEN);

  return halStatus;
 8009108:	7abb      	ldrb	r3, [r7, #10]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	24016d54 	.word	0x24016d54
 8009118:	24016c58 	.word	0x24016c58
 800911c:	24016c5c 	.word	0x24016c5c
 8009120:	24018438 	.word	0x24018438

08009124 <WS_Callback>:

void WS_Callback()
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop_DMA(&WS_TIM, WS_TIM_CHANNEL);
 8009128:	2100      	movs	r1, #0
 800912a:	4804      	ldr	r0, [pc, #16]	@ (800913c <WS_Callback+0x18>)
 800912c:	f00e fc7c 	bl	8017a28 <HAL_TIM_PWM_Stop_DMA>

  WS_DMA_COMPLETE_FLAG = 1;
 8009130:	4b03      	ldr	r3, [pc, #12]	@ (8009140 <WS_Callback+0x1c>)
 8009132:	2201      	movs	r2, #1
 8009134:	701a      	strb	r2, [r3, #0]
}
 8009136:	bf00      	nop
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	24018438 	.word	0x24018438
 8009140:	24016d54 	.word	0x24016d54

08009144 <DAU_Init>:


/* Exported function definitions ---------------------------------------------*/

void DAU_Init(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
  dau_buffer.length = MAX_COMM_IN_BUFFER_SIZE;
 800914a:	4b14      	ldr	r3, [pc, #80]	@ (800919c <DAU_Init+0x58>)
 800914c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009150:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
  dau_buffer.index = 0;
 8009154:	4b11      	ldr	r3, [pc, #68]	@ (800919c <DAU_Init+0x58>)
 8009156:	2200      	movs	r2, #0
 8009158:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
  dau_buffer.data_ready = false;
 800915c:	4b0f      	ldr	r3, [pc, #60]	@ (800919c <DAU_Init+0x58>)
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
  dau_buffer.contents_changed = false;
 8009164:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <DAU_Init+0x58>)
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
  dau_buffer.source = COMM_UART;
 800916c:	4b0b      	ldr	r3, [pc, #44]	@ (800919c <DAU_Init+0x58>)
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106

  __HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
 8009174:	4b0a      	ldr	r3, [pc, #40]	@ (80091a0 <DAU_Init+0x5c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	4b09      	ldr	r3, [pc, #36]	@ (80091a0 <DAU_Init+0x5c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f042 0210 	orr.w	r2, r2, #16
 8009182:	601a      	str	r2, [r3, #0]

  HAL_StatusTypeDef ret = HAL_UART_Receive_DMA(&huart5, rx_buffer, DAU_RX_BUFFER_SIZE);
 8009184:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009188:	4906      	ldr	r1, [pc, #24]	@ (80091a4 <DAU_Init+0x60>)
 800918a:	4805      	ldr	r0, [pc, #20]	@ (80091a0 <DAU_Init+0x5c>)
 800918c:	f00f ff2c 	bl	8018fe8 <HAL_UART_Receive_DMA>
 8009190:	4603      	mov	r3, r0
 8009192:	71fb      	strb	r3, [r7, #7]
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	24016d58 	.word	0x24016d58
 80091a0:	24018594 	.word	0x24018594
 80091a4:	24016e60 	.word	0x24016e60

080091a8 <DAU_TransmitData>:

void DAU_TransmitData(uint8_t* data, uint16_t len)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	807b      	strh	r3, [r7, #2]
  if (osMutexAcquire(dau_uart_mutexHandle, osWaitForever) == osOK) {
 80091b4:	4b19      	ldr	r3, [pc, #100]	@ (800921c <DAU_TransmitData+0x74>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f04f 31ff 	mov.w	r1, #4294967295
 80091bc:	4618      	mov	r0, r3
 80091be:	f015 fdc9 	bl	801ed54 <osMutexAcquire>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d126      	bne.n	8009216 <DAU_TransmitData+0x6e>
    while (tx_busy == 1) {
 80091c8:	e002      	b.n	80091d0 <DAU_TransmitData+0x28>
      // TODO: Replace busy-wait with proper timeout or notification mechanism
      osDelay(1);
 80091ca:	2001      	movs	r0, #1
 80091cc:	f015 fc09 	bl	801e9e2 <osDelay>
    while (tx_busy == 1) {
 80091d0:	4b13      	ldr	r3, [pc, #76]	@ (8009220 <DAU_TransmitData+0x78>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d0f7      	beq.n	80091ca <DAU_TransmitData+0x22>
    }
    if (len > DAU_TX_BUFFER_SIZE) {
 80091da:	887b      	ldrh	r3, [r7, #2]
 80091dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091e0:	d905      	bls.n	80091ee <DAU_TransmitData+0x46>
      osMutexRelease(dau_uart_mutexHandle);
 80091e2:	4b0e      	ldr	r3, [pc, #56]	@ (800921c <DAU_TransmitData+0x74>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f015 fdff 	bl	801edea <osMutexRelease>
      return;
 80091ec:	e013      	b.n	8009216 <DAU_TransmitData+0x6e>
    }

    memcpy(tx_buffer, data, len);
 80091ee:	887b      	ldrh	r3, [r7, #2]
 80091f0:	461a      	mov	r2, r3
 80091f2:	6879      	ldr	r1, [r7, #4]
 80091f4:	480b      	ldr	r0, [pc, #44]	@ (8009224 <DAU_TransmitData+0x7c>)
 80091f6:	f01c f9f4 	bl	80255e2 <memcpy>

    tx_busy = 1;
 80091fa:	4b09      	ldr	r3, [pc, #36]	@ (8009220 <DAU_TransmitData+0x78>)
 80091fc:	2201      	movs	r2, #1
 80091fe:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit_DMA(&huart5, tx_buffer, len);
 8009200:	887b      	ldrh	r3, [r7, #2]
 8009202:	461a      	mov	r2, r3
 8009204:	4907      	ldr	r1, [pc, #28]	@ (8009224 <DAU_TransmitData+0x7c>)
 8009206:	4808      	ldr	r0, [pc, #32]	@ (8009228 <DAU_TransmitData+0x80>)
 8009208:	f00f fe6e 	bl	8018ee8 <HAL_UART_Transmit_DMA>
    osMutexRelease(dau_uart_mutexHandle);
 800920c:	4b03      	ldr	r3, [pc, #12]	@ (800921c <DAU_TransmitData+0x74>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4618      	mov	r0, r3
 8009212:	f015 fdea 	bl	801edea <osMutexRelease>
  }
}
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	2401872c 	.word	0x2401872c
 8009220:	24017e68 	.word	0x24017e68
 8009224:	24017668 	.word	0x24017668
 8009228:	24018594 	.word	0x24018594

0800922c <DAU_GetNewData>:

void DAU_GetNewData()
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
  // Calculate current DMA position
  uint32_t dma_position = (DAU_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart5.hdmarx)) % DAU_RX_BUFFER_SIZE;
 8009232:	4b52      	ldr	r3, [pc, #328]	@ (800937c <DAU_GetNewData+0x150>)
 8009234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a51      	ldr	r2, [pc, #324]	@ (8009380 <DAU_GetNewData+0x154>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d068      	beq.n	8009312 <DAU_GetNewData+0xe6>
 8009240:	4b4e      	ldr	r3, [pc, #312]	@ (800937c <DAU_GetNewData+0x150>)
 8009242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a4e      	ldr	r2, [pc, #312]	@ (8009384 <DAU_GetNewData+0x158>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d061      	beq.n	8009312 <DAU_GetNewData+0xe6>
 800924e:	4b4b      	ldr	r3, [pc, #300]	@ (800937c <DAU_GetNewData+0x150>)
 8009250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a4c      	ldr	r2, [pc, #304]	@ (8009388 <DAU_GetNewData+0x15c>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d05a      	beq.n	8009312 <DAU_GetNewData+0xe6>
 800925c:	4b47      	ldr	r3, [pc, #284]	@ (800937c <DAU_GetNewData+0x150>)
 800925e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a49      	ldr	r2, [pc, #292]	@ (800938c <DAU_GetNewData+0x160>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d053      	beq.n	8009312 <DAU_GetNewData+0xe6>
 800926a:	4b44      	ldr	r3, [pc, #272]	@ (800937c <DAU_GetNewData+0x150>)
 800926c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a47      	ldr	r2, [pc, #284]	@ (8009390 <DAU_GetNewData+0x164>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d04c      	beq.n	8009312 <DAU_GetNewData+0xe6>
 8009278:	4b40      	ldr	r3, [pc, #256]	@ (800937c <DAU_GetNewData+0x150>)
 800927a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a44      	ldr	r2, [pc, #272]	@ (8009394 <DAU_GetNewData+0x168>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d045      	beq.n	8009312 <DAU_GetNewData+0xe6>
 8009286:	4b3d      	ldr	r3, [pc, #244]	@ (800937c <DAU_GetNewData+0x150>)
 8009288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a42      	ldr	r2, [pc, #264]	@ (8009398 <DAU_GetNewData+0x16c>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d03e      	beq.n	8009312 <DAU_GetNewData+0xe6>
 8009294:	4b39      	ldr	r3, [pc, #228]	@ (800937c <DAU_GetNewData+0x150>)
 8009296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a3f      	ldr	r2, [pc, #252]	@ (800939c <DAU_GetNewData+0x170>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d037      	beq.n	8009312 <DAU_GetNewData+0xe6>
 80092a2:	4b36      	ldr	r3, [pc, #216]	@ (800937c <DAU_GetNewData+0x150>)
 80092a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a3d      	ldr	r2, [pc, #244]	@ (80093a0 <DAU_GetNewData+0x174>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d030      	beq.n	8009312 <DAU_GetNewData+0xe6>
 80092b0:	4b32      	ldr	r3, [pc, #200]	@ (800937c <DAU_GetNewData+0x150>)
 80092b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a3a      	ldr	r2, [pc, #232]	@ (80093a4 <DAU_GetNewData+0x178>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d029      	beq.n	8009312 <DAU_GetNewData+0xe6>
 80092be:	4b2f      	ldr	r3, [pc, #188]	@ (800937c <DAU_GetNewData+0x150>)
 80092c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a38      	ldr	r2, [pc, #224]	@ (80093a8 <DAU_GetNewData+0x17c>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d022      	beq.n	8009312 <DAU_GetNewData+0xe6>
 80092cc:	4b2b      	ldr	r3, [pc, #172]	@ (800937c <DAU_GetNewData+0x150>)
 80092ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a35      	ldr	r2, [pc, #212]	@ (80093ac <DAU_GetNewData+0x180>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d01b      	beq.n	8009312 <DAU_GetNewData+0xe6>
 80092da:	4b28      	ldr	r3, [pc, #160]	@ (800937c <DAU_GetNewData+0x150>)
 80092dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a33      	ldr	r2, [pc, #204]	@ (80093b0 <DAU_GetNewData+0x184>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d014      	beq.n	8009312 <DAU_GetNewData+0xe6>
 80092e8:	4b24      	ldr	r3, [pc, #144]	@ (800937c <DAU_GetNewData+0x150>)
 80092ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a30      	ldr	r2, [pc, #192]	@ (80093b4 <DAU_GetNewData+0x188>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d00d      	beq.n	8009312 <DAU_GetNewData+0xe6>
 80092f6:	4b21      	ldr	r3, [pc, #132]	@ (800937c <DAU_GetNewData+0x150>)
 80092f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a2e      	ldr	r2, [pc, #184]	@ (80093b8 <DAU_GetNewData+0x18c>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d006      	beq.n	8009312 <DAU_GetNewData+0xe6>
 8009304:	4b1d      	ldr	r3, [pc, #116]	@ (800937c <DAU_GetNewData+0x150>)
 8009306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a2b      	ldr	r2, [pc, #172]	@ (80093bc <DAU_GetNewData+0x190>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d109      	bne.n	8009326 <DAU_GetNewData+0xfa>
 8009312:	4b1a      	ldr	r3, [pc, #104]	@ (800937c <DAU_GetNewData+0x150>)
 8009314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8009320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009324:	e008      	b.n	8009338 <DAU_GetNewData+0x10c>
 8009326:	4b15      	ldr	r3, [pc, #84]	@ (800937c <DAU_GetNewData+0x150>)
 8009328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8009334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009338:	607b      	str	r3, [r7, #4]
  rx_tail = dma_position; // Update tail to current DMA position
 800933a:	4a21      	ldr	r2, [pc, #132]	@ (80093c0 <DAU_GetNewData+0x194>)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6013      	str	r3, [r2, #0]

  // Process all data between head and tail
  while (rx_head != rx_tail) {
 8009340:	e010      	b.n	8009364 <DAU_GetNewData+0x138>
    uint8_t byte = rx_buffer[rx_head];
 8009342:	4b20      	ldr	r3, [pc, #128]	@ (80093c4 <DAU_GetNewData+0x198>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a20      	ldr	r2, [pc, #128]	@ (80093c8 <DAU_GetNewData+0x19c>)
 8009348:	5cd3      	ldrb	r3, [r2, r3]
 800934a:	70fb      	strb	r3, [r7, #3]

    DAU_ProcessRxData(&byte, 1);
 800934c:	1cfb      	adds	r3, r7, #3
 800934e:	2101      	movs	r1, #1
 8009350:	4618      	mov	r0, r3
 8009352:	f000 f83b 	bl	80093cc <DAU_ProcessRxData>

    rx_head = (rx_head + 1) % DAU_RX_BUFFER_SIZE;
 8009356:	4b1b      	ldr	r3, [pc, #108]	@ (80093c4 <DAU_GetNewData+0x198>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	3301      	adds	r3, #1
 800935c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009360:	4a18      	ldr	r2, [pc, #96]	@ (80093c4 <DAU_GetNewData+0x198>)
 8009362:	6013      	str	r3, [r2, #0]
  while (rx_head != rx_tail) {
 8009364:	4b17      	ldr	r3, [pc, #92]	@ (80093c4 <DAU_GetNewData+0x198>)
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	4b15      	ldr	r3, [pc, #84]	@ (80093c0 <DAU_GetNewData+0x194>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d1e8      	bne.n	8009342 <DAU_GetNewData+0x116>
  }
}
 8009370:	bf00      	nop
 8009372:	bf00      	nop
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	24018594 	.word	0x24018594
 8009380:	40020010 	.word	0x40020010
 8009384:	40020028 	.word	0x40020028
 8009388:	40020040 	.word	0x40020040
 800938c:	40020058 	.word	0x40020058
 8009390:	40020070 	.word	0x40020070
 8009394:	40020088 	.word	0x40020088
 8009398:	400200a0 	.word	0x400200a0
 800939c:	400200b8 	.word	0x400200b8
 80093a0:	40020410 	.word	0x40020410
 80093a4:	40020428 	.word	0x40020428
 80093a8:	40020440 	.word	0x40020440
 80093ac:	40020458 	.word	0x40020458
 80093b0:	40020470 	.word	0x40020470
 80093b4:	40020488 	.word	0x40020488
 80093b8:	400204a0 	.word	0x400204a0
 80093bc:	400204b8 	.word	0x400204b8
 80093c0:	24017664 	.word	0x24017664
 80093c4:	24017660 	.word	0x24017660
 80093c8:	24016e60 	.word	0x24016e60

080093cc <DAU_ProcessRxData>:

void DAU_ProcessRxData(uint8_t* data, uint32_t len)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  // if a message is ready, do not process any more user input
  if (*data == '\0') return; // TODO: Review null character handling
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d077      	beq.n	80094ce <DAU_ProcessRxData+0x102>
  if (dau_buffer.data_ready == true) return;
 80093de:	4b41      	ldr	r3, [pc, #260]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 80093e0:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d174      	bne.n	80094d2 <DAU_ProcessRxData+0x106>
  if (len == 0) return;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d073      	beq.n	80094d6 <DAU_ProcessRxData+0x10a>
  dau_buffer.contents_changed = true;
 80093ee:	4b3d      	ldr	r3, [pc, #244]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104

  for (uint16_t i = 0; i < len; i++) {
 80093f6:	2300      	movs	r3, #0
 80093f8:	81fb      	strh	r3, [r7, #14]
 80093fa:	e063      	b.n	80094c4 <DAU_ProcessRxData+0xf8>
    if (dau_buffer.index < sizeof(dau_buffer.buffer) - 1) {
 80093fc:	4b39      	ldr	r3, [pc, #228]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 80093fe:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8009402:	2bfe      	cmp	r3, #254	@ 0xfe
 8009404:	d855      	bhi.n	80094b2 <DAU_ProcessRxData+0xe6>
      if (data[i] == '\e') {
 8009406:	89fb      	ldrh	r3, [r7, #14]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	4413      	add	r3, r2
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b1b      	cmp	r3, #27
 8009410:	d10e      	bne.n	8009430 <DAU_ProcessRxData+0x64>
        dau_buffer.buffer[0] = '\e';
 8009412:	4b34      	ldr	r3, [pc, #208]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 8009414:	221b      	movs	r2, #27
 8009416:	701a      	strb	r2, [r3, #0]
        dau_buffer.buffer[1] = '\0';
 8009418:	4b32      	ldr	r3, [pc, #200]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 800941a:	2200      	movs	r2, #0
 800941c:	705a      	strb	r2, [r3, #1]
        dau_buffer.index = 1;
 800941e:	4b31      	ldr	r3, [pc, #196]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 8009420:	2201      	movs	r2, #1
 8009422:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
        dau_buffer.data_ready = true;
 8009426:	4b2f      	ldr	r3, [pc, #188]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 8009428:	2201      	movs	r2, #1
 800942a:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

        continue;
 800942e:	e046      	b.n	80094be <DAU_ProcessRxData+0xf2>
      }

      if (data[i] == '\b') {
 8009430:	89fb      	ldrh	r3, [r7, #14]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	4413      	add	r3, r2
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	2b08      	cmp	r3, #8
 800943a:	d10d      	bne.n	8009458 <DAU_ProcessRxData+0x8c>
        if (dau_buffer.index == 0) {
 800943c:	4b29      	ldr	r3, [pc, #164]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 800943e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8009442:	2b00      	cmp	r3, #0
 8009444:	d03a      	beq.n	80094bc <DAU_ProcessRxData+0xf0>
          continue;
        }
        else {
          dau_buffer.index--;
 8009446:	4b27      	ldr	r3, [pc, #156]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 8009448:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800944c:	3b01      	subs	r3, #1
 800944e:	b29a      	uxth	r2, r3
 8009450:	4b24      	ldr	r3, [pc, #144]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 8009452:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
        }
        continue;
 8009456:	e032      	b.n	80094be <DAU_ProcessRxData+0xf2>
      }
      if (data[i] == '\r' || data[i] == '\n') {
 8009458:	89fb      	ldrh	r3, [r7, #14]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	4413      	add	r3, r2
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	2b0d      	cmp	r3, #13
 8009462:	d005      	beq.n	8009470 <DAU_ProcessRxData+0xa4>
 8009464:	89fb      	ldrh	r3, [r7, #14]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	4413      	add	r3, r2
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b0a      	cmp	r3, #10
 800946e:	d110      	bne.n	8009492 <DAU_ProcessRxData+0xc6>

        if (dau_buffer.index > 0) {
 8009470:	4b1c      	ldr	r3, [pc, #112]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 8009472:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8009476:	2b00      	cmp	r3, #0
 8009478:	d021      	beq.n	80094be <DAU_ProcessRxData+0xf2>
          // End string
          dau_buffer.buffer[dau_buffer.index] = '\0';
 800947a:	4b1a      	ldr	r3, [pc, #104]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 800947c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8009480:	461a      	mov	r2, r3
 8009482:	4b18      	ldr	r3, [pc, #96]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 8009484:	2100      	movs	r1, #0
 8009486:	5499      	strb	r1, [r3, r2]

          dau_buffer.data_ready = true;
 8009488:	4b16      	ldr	r3, [pc, #88]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
        if (dau_buffer.index > 0) {
 8009490:	e015      	b.n	80094be <DAU_ProcessRxData+0xf2>
        }
      }
      else {
        dau_buffer.buffer[dau_buffer.index++] = data[i];
 8009492:	89fb      	ldrh	r3, [r7, #14]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	441a      	add	r2, r3
 8009498:	4b12      	ldr	r3, [pc, #72]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 800949a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800949e:	1c59      	adds	r1, r3, #1
 80094a0:	b288      	uxth	r0, r1
 80094a2:	4910      	ldr	r1, [pc, #64]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 80094a4:	f8a1 0102 	strh.w	r0, [r1, #258]	@ 0x102
 80094a8:	4619      	mov	r1, r3
 80094aa:	7812      	ldrb	r2, [r2, #0]
 80094ac:	4b0d      	ldr	r3, [pc, #52]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 80094ae:	545a      	strb	r2, [r3, r1]
 80094b0:	e005      	b.n	80094be <DAU_ProcessRxData+0xf2>
      }
    } else {
      dau_buffer.index = 0;
 80094b2:	4b0c      	ldr	r3, [pc, #48]	@ (80094e4 <DAU_ProcessRxData+0x118>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 80094ba:	e000      	b.n	80094be <DAU_ProcessRxData+0xf2>
          continue;
 80094bc:	bf00      	nop
  for (uint16_t i = 0; i < len; i++) {
 80094be:	89fb      	ldrh	r3, [r7, #14]
 80094c0:	3301      	adds	r3, #1
 80094c2:	81fb      	strh	r3, [r7, #14]
 80094c4:	89fb      	ldrh	r3, [r7, #14]
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d897      	bhi.n	80093fc <DAU_ProcessRxData+0x30>
 80094cc:	e004      	b.n	80094d8 <DAU_ProcessRxData+0x10c>
  if (*data == '\0') return; // TODO: Review null character handling
 80094ce:	bf00      	nop
 80094d0:	e002      	b.n	80094d8 <DAU_ProcessRxData+0x10c>
  if (dau_buffer.data_ready == true) return;
 80094d2:	bf00      	nop
 80094d4:	e000      	b.n	80094d8 <DAU_ProcessRxData+0x10c>
  if (len == 0) return;
 80094d6:	bf00      	nop
    }
  }
}
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	24016d58 	.word	0x24016d58

080094e8 <DAU_GetMessage>:

RxState_t DAU_GetMessage(uint8_t* buffer, uint16_t* len)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  if (dau_buffer.contents_changed == false) return NO_CHANGE;
 80094f2:	4b18      	ldr	r3, [pc, #96]	@ (8009554 <DAU_GetMessage+0x6c>)
 80094f4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80094f8:	f083 0301 	eor.w	r3, r3, #1
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <DAU_GetMessage+0x1e>
 8009502:	2302      	movs	r3, #2
 8009504:	e021      	b.n	800954a <DAU_GetMessage+0x62>
  RxState_t state = (dau_buffer.data_ready == true) ? DATA_READY : NEW_CONTENT;
 8009506:	4b13      	ldr	r3, [pc, #76]	@ (8009554 <DAU_GetMessage+0x6c>)
 8009508:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800950c:	73fb      	strb	r3, [r7, #15]
  *len = dau_buffer.index;
 800950e:	4b11      	ldr	r3, [pc, #68]	@ (8009554 <DAU_GetMessage+0x6c>)
 8009510:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	801a      	strh	r2, [r3, #0]
  memcpy(buffer, dau_buffer.buffer, dau_buffer.index + 1); // +1 for null terminator
 8009518:	4b0e      	ldr	r3, [pc, #56]	@ (8009554 <DAU_GetMessage+0x6c>)
 800951a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800951e:	3301      	adds	r3, #1
 8009520:	461a      	mov	r2, r3
 8009522:	490c      	ldr	r1, [pc, #48]	@ (8009554 <DAU_GetMessage+0x6c>)
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f01c f85c 	bl	80255e2 <memcpy>
  dau_buffer.data_ready = false;
 800952a:	4b0a      	ldr	r3, [pc, #40]	@ (8009554 <DAU_GetMessage+0x6c>)
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
  if (state == DATA_READY) dau_buffer.index = 0;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d103      	bne.n	8009540 <DAU_GetMessage+0x58>
 8009538:	4b06      	ldr	r3, [pc, #24]	@ (8009554 <DAU_GetMessage+0x6c>)
 800953a:	2200      	movs	r2, #0
 800953c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
  dau_buffer.contents_changed = false;
 8009540:	4b04      	ldr	r3, [pc, #16]	@ (8009554 <DAU_GetMessage+0x6c>)
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
  return state;
 8009548:	7bfb      	ldrb	r3, [r7, #15]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	24016d58 	.word	0x24016d58

08009558 <HAL_UART_TxCpltCallback>:

/* Private function definitions ----------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  if (huart == &huart5) {
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a06      	ldr	r2, [pc, #24]	@ (800957c <HAL_UART_TxCpltCallback+0x24>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d102      	bne.n	800956e <HAL_UART_TxCpltCallback+0x16>
    tx_busy = 0;
 8009568:	4b05      	ldr	r3, [pc, #20]	@ (8009580 <HAL_UART_TxCpltCallback+0x28>)
 800956a:	2200      	movs	r2, #0
 800956c:	701a      	strb	r2, [r3, #0]
  }
}
 800956e:	bf00      	nop
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	24018594 	.word	0x24018594
 8009580:	24017e68 	.word	0x24017e68

08009584 <USB_Init>:


/* Exported function definitions ---------------------------------------------*/

void USB_Init(void)
{
 8009584:	b480      	push	{r7}
 8009586:	af00      	add	r7, sp, #0
  usb_overflow_mess_len = strlen(USB_OVERFLOW_MESS);
 8009588:	4b0e      	ldr	r3, [pc, #56]	@ (80095c4 <USB_Init+0x40>)
 800958a:	221c      	movs	r2, #28
 800958c:	801a      	strh	r2, [r3, #0]
  usb_buffer.length = MAX_COMM_IN_BUFFER_SIZE;
 800958e:	4b0e      	ldr	r3, [pc, #56]	@ (80095c8 <USB_Init+0x44>)
 8009590:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009594:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
  usb_buffer.index = 0;
 8009598:	4b0b      	ldr	r3, [pc, #44]	@ (80095c8 <USB_Init+0x44>)
 800959a:	2200      	movs	r2, #0
 800959c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
  usb_buffer.contents_changed = false;
 80095a0:	4b09      	ldr	r3, [pc, #36]	@ (80095c8 <USB_Init+0x44>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
  usb_buffer.data_ready = false;
 80095a8:	4b07      	ldr	r3, [pc, #28]	@ (80095c8 <USB_Init+0x44>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
  usb_buffer.source = COMM_USB;
 80095b0:	4b05      	ldr	r3, [pc, #20]	@ (80095c8 <USB_Init+0x44>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
}
 80095b8:	bf00      	nop
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	24017e6a 	.word	0x24017e6a
 80095c8:	24017e6c 	.word	0x24017e6c

080095cc <USB_TransmitData>:

void USB_TransmitData(uint8_t* data, uint16_t len)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	460b      	mov	r3, r1
 80095d6:	807b      	strh	r3, [r7, #2]
  if (xSemaphoreTake(usbSemaphoreHandle, portMAX_DELAY) == pdTRUE) {
 80095d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009614 <USB_TransmitData+0x48>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f04f 31ff 	mov.w	r1, #4294967295
 80095e0:	4618      	mov	r0, r3
 80095e2:	f016 fd13 	bl	802000c <xQueueSemaphoreTake>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d10e      	bne.n	800960a <USB_TransmitData+0x3e>
    CDC_Transmit_HS(data, len);
 80095ec:	887b      	ldrh	r3, [r7, #2]
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f019 f9c7 	bl	8022984 <CDC_Transmit_HS>
    vTaskDelay(pdMS_TO_TICKS(1));
 80095f6:	2001      	movs	r0, #1
 80095f8:	f017 f9cc 	bl	8020994 <vTaskDelay>
    xSemaphoreGive(usbSemaphoreHandle);
 80095fc:	4b05      	ldr	r3, [pc, #20]	@ (8009614 <USB_TransmitData+0x48>)
 80095fe:	6818      	ldr	r0, [r3, #0]
 8009600:	2300      	movs	r3, #0
 8009602:	2200      	movs	r2, #0
 8009604:	2100      	movs	r1, #0
 8009606:	f016 fa7f 	bl	801fb08 <xQueueGenericSend>
  }
}
 800960a:	bf00      	nop
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	24018730 	.word	0x24018730

08009618 <USB_ProcessRxData>:

void USB_ProcessRxData(uint8_t* data, uint32_t len)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  // if a message is ready, do not process any more user input
  if (usb_buffer.data_ready == true) return;
 8009622:	4b40      	ldr	r3, [pc, #256]	@ (8009724 <USB_ProcessRxData+0x10c>)
 8009624:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8009628:	2b00      	cmp	r3, #0
 800962a:	d172      	bne.n	8009712 <USB_ProcessRxData+0xfa>
  if (len == 0) return;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d071      	beq.n	8009716 <USB_ProcessRxData+0xfe>
  usb_buffer.contents_changed = true;
 8009632:	4b3c      	ldr	r3, [pc, #240]	@ (8009724 <USB_ProcessRxData+0x10c>)
 8009634:	2201      	movs	r2, #1
 8009636:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104

  for (uint16_t i = 0; i < len; i++) {
 800963a:	2300      	movs	r3, #0
 800963c:	81fb      	strh	r3, [r7, #14]
 800963e:	e063      	b.n	8009708 <USB_ProcessRxData+0xf0>
    if (usb_buffer.index < sizeof(usb_buffer.buffer) - 1) {
 8009640:	4b38      	ldr	r3, [pc, #224]	@ (8009724 <USB_ProcessRxData+0x10c>)
 8009642:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8009646:	2bfe      	cmp	r3, #254	@ 0xfe
 8009648:	d855      	bhi.n	80096f6 <USB_ProcessRxData+0xde>
      if (data[i] == '\e') {
 800964a:	89fb      	ldrh	r3, [r7, #14]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2b1b      	cmp	r3, #27
 8009654:	d10e      	bne.n	8009674 <USB_ProcessRxData+0x5c>
        usb_buffer.buffer[0] = '\e';
 8009656:	4b33      	ldr	r3, [pc, #204]	@ (8009724 <USB_ProcessRxData+0x10c>)
 8009658:	221b      	movs	r2, #27
 800965a:	701a      	strb	r2, [r3, #0]
        usb_buffer.buffer[1] = '\0';
 800965c:	4b31      	ldr	r3, [pc, #196]	@ (8009724 <USB_ProcessRxData+0x10c>)
 800965e:	2200      	movs	r2, #0
 8009660:	705a      	strb	r2, [r3, #1]
        usb_buffer.index = 1;
 8009662:	4b30      	ldr	r3, [pc, #192]	@ (8009724 <USB_ProcessRxData+0x10c>)
 8009664:	2201      	movs	r2, #1
 8009666:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
        usb_buffer.data_ready = true;
 800966a:	4b2e      	ldr	r3, [pc, #184]	@ (8009724 <USB_ProcessRxData+0x10c>)
 800966c:	2201      	movs	r2, #1
 800966e:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

        continue;
 8009672:	e046      	b.n	8009702 <USB_ProcessRxData+0xea>
      }

      if (data[i] == '\b') {
 8009674:	89fb      	ldrh	r3, [r7, #14]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	4413      	add	r3, r2
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	2b08      	cmp	r3, #8
 800967e:	d10d      	bne.n	800969c <USB_ProcessRxData+0x84>
        if (usb_buffer.index == 0) {
 8009680:	4b28      	ldr	r3, [pc, #160]	@ (8009724 <USB_ProcessRxData+0x10c>)
 8009682:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8009686:	2b00      	cmp	r3, #0
 8009688:	d03a      	beq.n	8009700 <USB_ProcessRxData+0xe8>
          continue;
        }
        else {
          usb_buffer.index--;
 800968a:	4b26      	ldr	r3, [pc, #152]	@ (8009724 <USB_ProcessRxData+0x10c>)
 800968c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	4b23      	ldr	r3, [pc, #140]	@ (8009724 <USB_ProcessRxData+0x10c>)
 8009696:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
        }
//        USB_TransmitData((uint8_t*) "\b ", 2);
        continue;
 800969a:	e032      	b.n	8009702 <USB_ProcessRxData+0xea>
      }
      if (data[i] == '\r' || data[i] == '\n') {
 800969c:	89fb      	ldrh	r3, [r7, #14]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b0d      	cmp	r3, #13
 80096a6:	d005      	beq.n	80096b4 <USB_ProcessRxData+0x9c>
 80096a8:	89fb      	ldrh	r3, [r7, #14]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	4413      	add	r3, r2
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2b0a      	cmp	r3, #10
 80096b2:	d110      	bne.n	80096d6 <USB_ProcessRxData+0xbe>

        if (usb_buffer.index > 0) {
 80096b4:	4b1b      	ldr	r3, [pc, #108]	@ (8009724 <USB_ProcessRxData+0x10c>)
 80096b6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d021      	beq.n	8009702 <USB_ProcessRxData+0xea>
          // End string
          usb_buffer.buffer[usb_buffer.index] = '\0';
 80096be:	4b19      	ldr	r3, [pc, #100]	@ (8009724 <USB_ProcessRxData+0x10c>)
 80096c0:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80096c4:	461a      	mov	r2, r3
 80096c6:	4b17      	ldr	r3, [pc, #92]	@ (8009724 <USB_ProcessRxData+0x10c>)
 80096c8:	2100      	movs	r1, #0
 80096ca:	5499      	strb	r1, [r3, r2]

          usb_buffer.data_ready = true;
 80096cc:	4b15      	ldr	r3, [pc, #84]	@ (8009724 <USB_ProcessRxData+0x10c>)
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
        if (usb_buffer.index > 0) {
 80096d4:	e015      	b.n	8009702 <USB_ProcessRxData+0xea>
        }
      }
      else {
        usb_buffer.buffer[usb_buffer.index++] = data[i];
 80096d6:	89fb      	ldrh	r3, [r7, #14]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	441a      	add	r2, r3
 80096dc:	4b11      	ldr	r3, [pc, #68]	@ (8009724 <USB_ProcessRxData+0x10c>)
 80096de:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80096e2:	1c59      	adds	r1, r3, #1
 80096e4:	b288      	uxth	r0, r1
 80096e6:	490f      	ldr	r1, [pc, #60]	@ (8009724 <USB_ProcessRxData+0x10c>)
 80096e8:	f8a1 0102 	strh.w	r0, [r1, #258]	@ 0x102
 80096ec:	4619      	mov	r1, r3
 80096ee:	7812      	ldrb	r2, [r2, #0]
 80096f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009724 <USB_ProcessRxData+0x10c>)
 80096f2:	545a      	strb	r2, [r3, r1]
 80096f4:	e005      	b.n	8009702 <USB_ProcessRxData+0xea>
      }
    } else {
      // Buffer overflow occurred - reset index and discard additional characters
      // An overflow message should be echoed to the user (handled elsewhere)
      usb_buffer.index = 0;
 80096f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009724 <USB_ProcessRxData+0x10c>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 80096fe:	e000      	b.n	8009702 <USB_ProcessRxData+0xea>
          continue;
 8009700:	bf00      	nop
  for (uint16_t i = 0; i < len; i++) {
 8009702:	89fb      	ldrh	r3, [r7, #14]
 8009704:	3301      	adds	r3, #1
 8009706:	81fb      	strh	r3, [r7, #14]
 8009708:	89fb      	ldrh	r3, [r7, #14]
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	429a      	cmp	r2, r3
 800970e:	d897      	bhi.n	8009640 <USB_ProcessRxData+0x28>
 8009710:	e002      	b.n	8009718 <USB_ProcessRxData+0x100>
  if (usb_buffer.data_ready == true) return;
 8009712:	bf00      	nop
 8009714:	e000      	b.n	8009718 <USB_ProcessRxData+0x100>
  if (len == 0) return;
 8009716:	bf00      	nop
    }
  }
}
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	24017e6c 	.word	0x24017e6c

08009728 <USB_GetMessage>:

RxState_t USB_GetMessage(uint8_t* buffer, uint16_t* len)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  if (usb_buffer.contents_changed == false) return NO_CHANGE;
 8009732:	4b18      	ldr	r3, [pc, #96]	@ (8009794 <USB_GetMessage+0x6c>)
 8009734:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8009738:	f083 0301 	eor.w	r3, r3, #1
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <USB_GetMessage+0x1e>
 8009742:	2302      	movs	r3, #2
 8009744:	e021      	b.n	800978a <USB_GetMessage+0x62>
  RxState_t state = (usb_buffer.data_ready == true) ? DATA_READY : NEW_CONTENT;
 8009746:	4b13      	ldr	r3, [pc, #76]	@ (8009794 <USB_GetMessage+0x6c>)
 8009748:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800974c:	73fb      	strb	r3, [r7, #15]
  *len = usb_buffer.index;
 800974e:	4b11      	ldr	r3, [pc, #68]	@ (8009794 <USB_GetMessage+0x6c>)
 8009750:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	801a      	strh	r2, [r3, #0]
  memcpy(buffer, usb_buffer.buffer, usb_buffer.index + 1); // +1 for null terminator
 8009758:	4b0e      	ldr	r3, [pc, #56]	@ (8009794 <USB_GetMessage+0x6c>)
 800975a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800975e:	3301      	adds	r3, #1
 8009760:	461a      	mov	r2, r3
 8009762:	490c      	ldr	r1, [pc, #48]	@ (8009794 <USB_GetMessage+0x6c>)
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f01b ff3c 	bl	80255e2 <memcpy>
  usb_buffer.data_ready = false;
 800976a:	4b0a      	ldr	r3, [pc, #40]	@ (8009794 <USB_GetMessage+0x6c>)
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
  if (state == DATA_READY) usb_buffer.index = 0;
 8009772:	7bfb      	ldrb	r3, [r7, #15]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d103      	bne.n	8009780 <USB_GetMessage+0x58>
 8009778:	4b06      	ldr	r3, [pc, #24]	@ (8009794 <USB_GetMessage+0x6c>)
 800977a:	2200      	movs	r2, #0
 800977c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
  usb_buffer.contents_changed = false;
 8009780:	4b04      	ldr	r3, [pc, #16]	@ (8009794 <USB_GetMessage+0x6c>)
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
  return state;
 8009788:	7bfb      	ldrb	r3, [r7, #15]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	24017e6c 	.word	0x24017e6c

08009798 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0

}
 800979c:	bf00      	nop
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80097a6:	b480      	push	{r7}
 80097a8:	af00      	add	r7, sp, #0
return 0;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
	...

080097b8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a04      	ldr	r2, [pc, #16]	@ (80097d8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d102      	bne.n	80097d0 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		WS_Callback();
 80097ca:	f7ff fcab 	bl	8009124 <WS_Callback>
	}
	return;
 80097ce:	bf00      	nop
 80097d0:	bf00      	nop
}
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	40000400 	.word	0x40000400

080097dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80097e0:	f000 fe66 	bl	800a4b0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80097e4:	f001 fe8a 	bl	800b4fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80097e8:	f000 f89c 	bl	8009924 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80097ec:	f000 f90c 	bl	8009a08 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80097f0:	f000 fce4 	bl	800a1bc <MX_GPIO_Init>
  MX_DMA_Init();
 80097f4:	f000 fc72 	bl	800a0dc <MX_DMA_Init>
  MX_ADC1_Init();
 80097f8:	f000 f936 	bl	8009a68 <MX_ADC1_Init>
  MX_ADC3_Init();
 80097fc:	f000 f9b0 	bl	8009b60 <MX_ADC3_Init>
  MX_DAC1_Init();
 8009800:	f000 fa20 	bl	8009c44 <MX_DAC1_Init>
  MX_DTS_Init();
 8009804:	f000 fa5a 	bl	8009cbc <MX_DTS_Init>
  MX_I2C1_Init();
 8009808:	f000 fa82 	bl	8009d10 <MX_I2C1_Init>
  MX_SPI4_Init();
 800980c:	f000 fac2 	bl	8009d94 <MX_SPI4_Init>
  MX_TIM3_Init();
 8009810:	f000 fb18 	bl	8009e44 <MX_TIM3_Init>
  MX_UART5_Init();
 8009814:	f000 fc16 	bl	800a044 <MX_UART5_Init>
  MX_TIM6_Init();
 8009818:	f000 fb8a 	bl	8009f30 <MX_TIM6_Init>
  MX_TIM8_Init();
 800981c:	f000 fbbe 	bl	8009f9c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  WS_Init();
 8009820:	f7ff fbc8 	bl	8008fb4 <WS_Init>

  if (CFG_CreateParamFlags() == false) {
 8009824:	f7f7 f990 	bl	8000b48 <CFG_CreateParamFlags>
 8009828:	4603      	mov	r3, r0
 800982a:	f083 0301 	eor.w	r3, r3, #1
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <main+0x5c>
    Error_Handler();
 8009834:	f000 fe77 	bl	800a526 <Error_Handler>
  }

  if (Param_Init() == false) {
 8009838:	f7f7 f9c0 	bl	8000bbc <Param_Init>
 800983c:	4603      	mov	r3, r0
 800983e:	f083 0301 	eor.w	r3, r3, #1
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <main+0x70>
    Error_Handler();
 8009848:	f000 fe6d 	bl	800a526 <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800984c:	f014 ffd8 	bl	801e800 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of dau_uart_mutex */
  dau_uart_mutexHandle = osMutexNew(&dau_uart_mutex_attributes);
 8009850:	4820      	ldr	r0, [pc, #128]	@ (80098d4 <main+0xf8>)
 8009852:	f015 f9f9 	bl	801ec48 <osMutexNew>
 8009856:	4603      	mov	r3, r0
 8009858:	4a1f      	ldr	r2, [pc, #124]	@ (80098d8 <main+0xfc>)
 800985a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of usbSemaphore */
  usbSemaphoreHandle = osSemaphoreNew(1, 1, &usbSemaphore_attributes);
 800985c:	4a1f      	ldr	r2, [pc, #124]	@ (80098dc <main+0x100>)
 800985e:	2101      	movs	r1, #1
 8009860:	2001      	movs	r0, #1
 8009862:	f015 faff 	bl	801ee64 <osSemaphoreNew>
 8009866:	4603      	mov	r3, r0
 8009868:	4a1d      	ldr	r2, [pc, #116]	@ (80098e0 <main+0x104>)
 800986a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  MESS_InitializeQueues();
 800986c:	f7fd fe60 	bl	8007530 <MESS_InitializeQueues>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8009870:	4a1c      	ldr	r2, [pc, #112]	@ (80098e4 <main+0x108>)
 8009872:	2100      	movs	r1, #0
 8009874:	481c      	ldr	r0, [pc, #112]	@ (80098e8 <main+0x10c>)
 8009876:	f015 f822 	bl	801e8be <osThreadNew>
 800987a:	4603      	mov	r3, r0
 800987c:	4a1b      	ldr	r2, [pc, #108]	@ (80098ec <main+0x110>)
 800987e:	6013      	str	r3, [r2, #0]

  /* creation of messageTask */
  messageTaskHandle = osThreadNew(startMessageProcessingTask, NULL, &messageTask_attributes);
 8009880:	4a1b      	ldr	r2, [pc, #108]	@ (80098f0 <main+0x114>)
 8009882:	2100      	movs	r1, #0
 8009884:	481b      	ldr	r0, [pc, #108]	@ (80098f4 <main+0x118>)
 8009886:	f015 f81a 	bl	801e8be <osThreadNew>
 800988a:	4603      	mov	r3, r0
 800988c:	4a1a      	ldr	r2, [pc, #104]	@ (80098f8 <main+0x11c>)
 800988e:	6013      	str	r3, [r2, #0]

  /* creation of sysTask */
  sysTaskHandle = osThreadNew(startSystemManagementTask, NULL, &sysTask_attributes);
 8009890:	4a1a      	ldr	r2, [pc, #104]	@ (80098fc <main+0x120>)
 8009892:	2100      	movs	r1, #0
 8009894:	481a      	ldr	r0, [pc, #104]	@ (8009900 <main+0x124>)
 8009896:	f015 f812 	bl	801e8be <osThreadNew>
 800989a:	4603      	mov	r3, r0
 800989c:	4a19      	ldr	r2, [pc, #100]	@ (8009904 <main+0x128>)
 800989e:	6013      	str	r3, [r2, #0]

  /* creation of commTask */
  commTaskHandle = osThreadNew(startCommunicationTask, NULL, &commTask_attributes);
 80098a0:	4a19      	ldr	r2, [pc, #100]	@ (8009908 <main+0x12c>)
 80098a2:	2100      	movs	r1, #0
 80098a4:	4819      	ldr	r0, [pc, #100]	@ (800990c <main+0x130>)
 80098a6:	f015 f80a 	bl	801e8be <osThreadNew>
 80098aa:	4603      	mov	r3, r0
 80098ac:	4a18      	ldr	r2, [pc, #96]	@ (8009910 <main+0x134>)
 80098ae:	6013      	str	r3, [r2, #0]

  /* creation of configTask */
  configTaskHandle = osThreadNew(startconfigTask, NULL, &configTask_attributes);
 80098b0:	4a18      	ldr	r2, [pc, #96]	@ (8009914 <main+0x138>)
 80098b2:	2100      	movs	r1, #0
 80098b4:	4818      	ldr	r0, [pc, #96]	@ (8009918 <main+0x13c>)
 80098b6:	f015 f802 	bl	801e8be <osThreadNew>
 80098ba:	4603      	mov	r3, r0
 80098bc:	4a17      	ldr	r2, [pc, #92]	@ (800991c <main+0x140>)
 80098be:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  print_event_handle = osEventFlagsNew(NULL);
 80098c0:	2000      	movs	r0, #0
 80098c2:	f015 f8a9 	bl	801ea18 <osEventFlagsNew>
 80098c6:	4603      	mov	r3, r0
 80098c8:	4a15      	ldr	r2, [pc, #84]	@ (8009920 <main+0x144>)
 80098ca:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80098cc:	f014 ffbc 	bl	801e848 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80098d0:	bf00      	nop
 80098d2:	e7fd      	b.n	80098d0 <main+0xf4>
 80098d4:	0802be38 	.word	0x0802be38
 80098d8:	2401872c 	.word	0x2401872c
 80098dc:	0802be48 	.word	0x0802be48
 80098e0:	24018730 	.word	0x24018730
 80098e4:	0802bd84 	.word	0x0802bd84
 80098e8:	0800a445 	.word	0x0800a445
 80098ec:	24018718 	.word	0x24018718
 80098f0:	0802bda8 	.word	0x0802bda8
 80098f4:	0800a459 	.word	0x0800a459
 80098f8:	2401871c 	.word	0x2401871c
 80098fc:	0802bdcc 	.word	0x0802bdcc
 8009900:	0800a46f 	.word	0x0800a46f
 8009904:	24018720 	.word	0x24018720
 8009908:	0802bdf0 	.word	0x0802bdf0
 800990c:	0800a485 	.word	0x0800a485
 8009910:	24018724 	.word	0x24018724
 8009914:	0802be14 	.word	0x0802be14
 8009918:	0800a49b 	.word	0x0800a49b
 800991c:	24018728 	.word	0x24018728
 8009920:	24018734 	.word	0x24018734

08009924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b09c      	sub	sp, #112	@ 0x70
 8009928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800992a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800992e:	224c      	movs	r2, #76	@ 0x4c
 8009930:	2100      	movs	r1, #0
 8009932:	4618      	mov	r0, r3
 8009934:	f01b fd65 	bl	8025402 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009938:	1d3b      	adds	r3, r7, #4
 800993a:	2220      	movs	r2, #32
 800993c:	2100      	movs	r1, #0
 800993e:	4618      	mov	r0, r3
 8009940:	f01b fd5f 	bl	8025402 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8009944:	2002      	movs	r0, #2
 8009946:	f009 fad7 	bl	8012ef8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800994a:	2300      	movs	r3, #0
 800994c:	603b      	str	r3, [r7, #0]
 800994e:	4b2d      	ldr	r3, [pc, #180]	@ (8009a04 <SystemClock_Config+0xe0>)
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	4a2c      	ldr	r2, [pc, #176]	@ (8009a04 <SystemClock_Config+0xe0>)
 8009954:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8009958:	6193      	str	r3, [r2, #24]
 800995a:	4b2a      	ldr	r3, [pc, #168]	@ (8009a04 <SystemClock_Config+0xe0>)
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009962:	603b      	str	r3, [r7, #0]
 8009964:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8009966:	bf00      	nop
 8009968:	4b26      	ldr	r3, [pc, #152]	@ (8009a04 <SystemClock_Config+0xe0>)
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009974:	d1f8      	bne.n	8009968 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8009976:	2303      	movs	r3, #3
 8009978:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800997a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800997e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8009980:	2301      	movs	r3, #1
 8009982:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8009984:	2340      	movs	r3, #64	@ 0x40
 8009986:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009988:	2302      	movs	r3, #2
 800998a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800998c:	2302      	movs	r3, #2
 800998e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009990:	2301      	movs	r3, #1
 8009992:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8009994:	233c      	movs	r3, #60	@ 0x3c
 8009996:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8009998:	2301      	movs	r3, #1
 800999a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 800999c:	230a      	movs	r3, #10
 800999e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80099a0:	2302      	movs	r3, #2
 80099a2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80099a4:	230c      	movs	r3, #12
 80099a6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80099b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099b4:	4618      	mov	r0, r3
 80099b6:	f009 fae9 	bl	8012f8c <HAL_RCC_OscConfig>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80099c0:	f000 fdb1 	bl	800a526 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80099c4:	233f      	movs	r3, #63	@ 0x3f
 80099c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80099c8:	2303      	movs	r3, #3
 80099ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80099cc:	2300      	movs	r3, #0
 80099ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80099d0:	2308      	movs	r3, #8
 80099d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80099d4:	2340      	movs	r3, #64	@ 0x40
 80099d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80099d8:	2340      	movs	r3, #64	@ 0x40
 80099da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80099dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80099e2:	2340      	movs	r3, #64	@ 0x40
 80099e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80099e6:	1d3b      	adds	r3, r7, #4
 80099e8:	2103      	movs	r1, #3
 80099ea:	4618      	mov	r0, r3
 80099ec:	f009 fea8 	bl	8013740 <HAL_RCC_ClockConfig>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80099f6:	f000 fd96 	bl	800a526 <Error_Handler>
  }
}
 80099fa:	bf00      	nop
 80099fc:	3770      	adds	r7, #112	@ 0x70
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	58024800 	.word	0x58024800

08009a08 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b0ae      	sub	sp, #184	@ 0xb8
 8009a0c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009a0e:	463b      	mov	r3, r7
 8009a10:	22b8      	movs	r2, #184	@ 0xb8
 8009a12:	2100      	movs	r1, #0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f01b fcf4 	bl	8025402 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8009a1a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009a1e:	f04f 0300 	mov.w	r3, #0
 8009a22:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8009a26:	2301      	movs	r3, #1
 8009a28:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8009a2a:	2318      	movs	r3, #24
 8009a2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8009a2e:	2304      	movs	r3, #4
 8009a30:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8009a32:	2302      	movs	r3, #2
 8009a34:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8009a36:	2302      	movs	r3, #2
 8009a38:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8009a3a:	23c0      	movs	r3, #192	@ 0xc0
 8009a3c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8009a46:	2300      	movs	r3, #0
 8009a48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f00a fa44 	bl	8013edc <HAL_RCCEx_PeriphCLKConfig>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8009a5a:	f000 fd64 	bl	800a526 <Error_Handler>
  }
}
 8009a5e:	bf00      	nop
 8009a60:	37b8      	adds	r7, #184	@ 0xb8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08c      	sub	sp, #48	@ 0x30
 8009a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8009a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	605a      	str	r2, [r3, #4]
 8009a78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8009a7a:	463b      	mov	r3, r7
 8009a7c:	2224      	movs	r2, #36	@ 0x24
 8009a7e:	2100      	movs	r1, #0
 8009a80:	4618      	mov	r0, r3
 8009a82:	f01b fcbe 	bl	8025402 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8009a86:	4b33      	ldr	r3, [pc, #204]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009a88:	4a33      	ldr	r2, [pc, #204]	@ (8009b58 <MX_ADC1_Init+0xf0>)
 8009a8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8009a8c:	4b31      	ldr	r3, [pc, #196]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8009a92:	4b30      	ldr	r3, [pc, #192]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009a98:	4b2e      	ldr	r3, [pc, #184]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009aa0:	2204      	movs	r2, #4
 8009aa2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8009ab0:	4b28      	ldr	r3, [pc, #160]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009ab6:	4b27      	ldr	r3, [pc, #156]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8009abe:	4b25      	ldr	r3, [pc, #148]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009ac0:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8009ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8009ac6:	4b23      	ldr	r3, [pc, #140]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009ac8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8009ace:	4b21      	ldr	r3, [pc, #132]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009ad0:	2203      	movs	r2, #3
 8009ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8009ada:	4b1e      	ldr	r3, [pc, #120]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8009ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8009ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009aea:	2201      	movs	r2, #1
 8009aec:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009aee:	4819      	ldr	r0, [pc, #100]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009af0:	f002 f934 	bl	800bd5c <HAL_ADC_Init>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8009afa:	f000 fd14 	bl	800a526 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8009afe:	2300      	movs	r3, #0
 8009b00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b06:	4619      	mov	r1, r3
 8009b08:	4812      	ldr	r0, [pc, #72]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009b0a:	f003 ff05 	bl	800d918 <HAL_ADCEx_MultiModeConfigChannel>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8009b14:	f000 fd07 	bl	800a526 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8009b18:	4b10      	ldr	r3, [pc, #64]	@ (8009b5c <MX_ADC1_Init+0xf4>)
 8009b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009b1c:	2306      	movs	r3, #6
 8009b1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8009b20:	2301      	movs	r3, #1
 8009b22:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009b24:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8009b28:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009b2a:	2304      	movs	r3, #4
 8009b2c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8009b32:	2300      	movs	r3, #0
 8009b34:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009b38:	463b      	mov	r3, r7
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	4805      	ldr	r0, [pc, #20]	@ (8009b54 <MX_ADC1_Init+0xec>)
 8009b3e:	f002 fe97 	bl	800c870 <HAL_ADC_ConfigChannel>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8009b48:	f000 fced 	bl	800a526 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009b4c:	bf00      	nop
 8009b4e:	3730      	adds	r7, #48	@ 0x30
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	24017f74 	.word	0x24017f74
 8009b58:	40022000 	.word	0x40022000
 8009b5c:	14f00020 	.word	0x14f00020

08009b60 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b08a      	sub	sp, #40	@ 0x28
 8009b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009b66:	1d3b      	adds	r3, r7, #4
 8009b68:	2224      	movs	r2, #36	@ 0x24
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f01b fc48 	bl	8025402 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8009b72:	4b31      	ldr	r3, [pc, #196]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009b74:	4a31      	ldr	r2, [pc, #196]	@ (8009c3c <MX_ADC3_Init+0xdc>)
 8009b76:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8009b78:	4b2f      	ldr	r3, [pc, #188]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8009b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009b80:	2208      	movs	r2, #8
 8009b82:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8009b84:	4b2c      	ldr	r3, [pc, #176]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009b90:	4b29      	ldr	r3, [pc, #164]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009b92:	2204      	movs	r2, #4
 8009b94:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8009b96:	4b28      	ldr	r3, [pc, #160]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8009b9c:	4b26      	ldr	r3, [pc, #152]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8009ba2:	4b25      	ldr	r3, [pc, #148]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8009ba8:	4b23      	ldr	r3, [pc, #140]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8009bb0:	4b21      	ldr	r3, [pc, #132]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009bb2:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8009bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8009bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009bba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8009bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8009bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8009bce:	4b1a      	ldr	r3, [pc, #104]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009bd0:	2203      	movs	r2, #3
 8009bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009bd4:	4b18      	ldr	r3, [pc, #96]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8009bda:	4b17      	ldr	r3, [pc, #92]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8009be0:	4b15      	ldr	r3, [pc, #84]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8009be8:	4b13      	ldr	r3, [pc, #76]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8009bee:	4812      	ldr	r0, [pc, #72]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009bf0:	f002 f8b4 	bl	800bd5c <HAL_ADC_Init>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8009bfa:	f000 fc94 	bl	800a526 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009bfe:	4b10      	ldr	r3, [pc, #64]	@ (8009c40 <MX_ADC3_Init+0xe0>)
 8009c00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009c02:	2306      	movs	r3, #6
 8009c04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009c0a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8009c0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009c10:	2304      	movs	r3, #4
 8009c12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009c1c:	1d3b      	adds	r3, r7, #4
 8009c1e:	4619      	mov	r1, r3
 8009c20:	4805      	ldr	r0, [pc, #20]	@ (8009c38 <MX_ADC3_Init+0xd8>)
 8009c22:	f002 fe25 	bl	800c870 <HAL_ADC_ConfigChannel>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8009c2c:	f000 fc7b 	bl	800a526 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8009c30:	bf00      	nop
 8009c32:	3728      	adds	r7, #40	@ 0x28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	24017fe4 	.word	0x24017fe4
 8009c3c:	58026000 	.word	0x58026000
 8009c40:	04300002 	.word	0x04300002

08009c44 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08a      	sub	sp, #40	@ 0x28
 8009c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8009c4a:	1d3b      	adds	r3, r7, #4
 8009c4c:	2224      	movs	r2, #36	@ 0x24
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f01b fbd6 	bl	8025402 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8009c56:	4b17      	ldr	r3, [pc, #92]	@ (8009cb4 <MX_DAC1_Init+0x70>)
 8009c58:	4a17      	ldr	r2, [pc, #92]	@ (8009cb8 <MX_DAC1_Init+0x74>)
 8009c5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8009c5c:	4815      	ldr	r0, [pc, #84]	@ (8009cb4 <MX_DAC1_Init+0x70>)
 8009c5e:	f004 f895 	bl	800dd8c <HAL_DAC_Init>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8009c68:	f000 fc5d 	bl	800a526 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8009c70:	2316      	movs	r3, #22
 8009c72:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8009c74:	2300      	movs	r3, #0
 8009c76:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8009c80:	1d3b      	adds	r3, r7, #4
 8009c82:	2200      	movs	r2, #0
 8009c84:	4619      	mov	r1, r3
 8009c86:	480b      	ldr	r0, [pc, #44]	@ (8009cb4 <MX_DAC1_Init+0x70>)
 8009c88:	f004 fabe 	bl	800e208 <HAL_DAC_ConfigChannel>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8009c92:	f000 fc48 	bl	800a526 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8009c96:	1d3b      	adds	r3, r7, #4
 8009c98:	2210      	movs	r2, #16
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4805      	ldr	r0, [pc, #20]	@ (8009cb4 <MX_DAC1_Init+0x70>)
 8009c9e:	f004 fab3 	bl	800e208 <HAL_DAC_ConfigChannel>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8009ca8:	f000 fc3d 	bl	800a526 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8009cac:	bf00      	nop
 8009cae:	3728      	adds	r7, #40	@ 0x28
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	24018144 	.word	0x24018144
 8009cb8:	40007400 	.word	0x40007400

08009cbc <MX_DTS_Init>:
  * @brief DTS Initialization Function
  * @param None
  * @retval None
  */
static void MX_DTS_Init(void)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 8009cc0:	4b11      	ldr	r3, [pc, #68]	@ (8009d08 <MX_DTS_Init+0x4c>)
 8009cc2:	4a12      	ldr	r2, [pc, #72]	@ (8009d0c <MX_DTS_Init+0x50>)
 8009cc4:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 8009cc6:	4b10      	ldr	r3, [pc, #64]	@ (8009d08 <MX_DTS_Init+0x4c>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8009d08 <MX_DTS_Init+0x4c>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 8009cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d08 <MX_DTS_Init+0x4c>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_1_CYCLE;
 8009cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8009d08 <MX_DTS_Init+0x4c>)
 8009cda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009cde:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 0;
 8009ce0:	4b09      	ldr	r3, [pc, #36]	@ (8009d08 <MX_DTS_Init+0x4c>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 8009ce6:	4b08      	ldr	r3, [pc, #32]	@ (8009d08 <MX_DTS_Init+0x4c>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 8009cec:	4b06      	ldr	r3, [pc, #24]	@ (8009d08 <MX_DTS_Init+0x4c>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 8009cf2:	4805      	ldr	r0, [pc, #20]	@ (8009d08 <MX_DTS_Init+0x4c>)
 8009cf4:	f007 fa92 	bl	801121c <HAL_DTS_Init>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <MX_DTS_Init+0x46>
  {
    Error_Handler();
 8009cfe:	f000 fc12 	bl	800a526 <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 8009d02:	bf00      	nop
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	24018248 	.word	0x24018248
 8009d0c:	58006800 	.word	0x58006800

08009d10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009d14:	4b1c      	ldr	r3, [pc, #112]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d16:	4a1d      	ldr	r2, [pc, #116]	@ (8009d8c <MX_I2C1_Init+0x7c>)
 8009d18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0050174F;
 8009d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8009d90 <MX_I2C1_Init+0x80>)
 8009d1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009d20:	4b19      	ldr	r3, [pc, #100]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d26:	4b18      	ldr	r3, [pc, #96]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d28:	2201      	movs	r2, #1
 8009d2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d2c:	4b16      	ldr	r3, [pc, #88]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009d32:	4b15      	ldr	r3, [pc, #84]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009d38:	4b13      	ldr	r3, [pc, #76]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009d3e:	4b12      	ldr	r3, [pc, #72]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009d44:	4b10      	ldr	r3, [pc, #64]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009d4a:	480f      	ldr	r0, [pc, #60]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d4c:	f007 fcdc 	bl	8011708 <HAL_I2C_Init>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009d56:	f000 fbe6 	bl	800a526 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	480a      	ldr	r0, [pc, #40]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d5e:	f007 fd6f 	bl	8011840 <HAL_I2CEx_ConfigAnalogFilter>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8009d68:	f000 fbdd 	bl	800a526 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	4806      	ldr	r0, [pc, #24]	@ (8009d88 <MX_I2C1_Init+0x78>)
 8009d70:	f007 fdb1 	bl	80118d6 <HAL_I2CEx_ConfigDigitalFilter>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8009d7a:	f000 fbd4 	bl	800a526 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8009d7e:	2001      	movs	r0, #1
 8009d80:	f007 fdf6 	bl	8011970 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009d84:	bf00      	nop
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	2401826c 	.word	0x2401826c
 8009d8c:	40005400 	.word	0x40005400
 8009d90:	0050174f 	.word	0x0050174f

08009d94 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8009d98:	4b28      	ldr	r3, [pc, #160]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009d9a:	4a29      	ldr	r2, [pc, #164]	@ (8009e40 <MX_SPI4_Init+0xac>)
 8009d9c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8009d9e:	4b27      	ldr	r3, [pc, #156]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009da0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8009da4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8009da6:	4b25      	ldr	r3, [pc, #148]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009da8:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8009dac:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8009dae:	4b23      	ldr	r3, [pc, #140]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009db0:	220f      	movs	r2, #15
 8009db2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009db4:	4b21      	ldr	r3, [pc, #132]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009dba:	4b20      	ldr	r3, [pc, #128]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8009dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009dc2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009dc6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009dca:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8009dce:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8009dd6:	4b19      	ldr	r3, [pc, #100]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ddc:	4b17      	ldr	r3, [pc, #92]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8009de2:	4b16      	ldr	r3, [pc, #88]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009de8:	4b14      	ldr	r3, [pc, #80]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009dea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009dee:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8009df0:	4b12      	ldr	r3, [pc, #72]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8009df6:	4b11      	ldr	r3, [pc, #68]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8009dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8009e02:	4b0e      	ldr	r3, [pc, #56]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8009e08:	4b0c      	ldr	r3, [pc, #48]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8009e14:	4b09      	ldr	r3, [pc, #36]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8009e1a:	4b08      	ldr	r3, [pc, #32]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8009e20:	4b06      	ldr	r3, [pc, #24]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8009e26:	4805      	ldr	r0, [pc, #20]	@ (8009e3c <MX_SPI4_Init+0xa8>)
 8009e28:	f00c fc3e 	bl	80166a8 <HAL_SPI_Init>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8009e32:	f000 fb78 	bl	800a526 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8009e36:	bf00      	nop
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	240182c0 	.word	0x240182c0
 8009e40:	40013400 	.word	0x40013400

08009e44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b08e      	sub	sp, #56	@ 0x38
 8009e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	605a      	str	r2, [r3, #4]
 8009e54:	609a      	str	r2, [r3, #8]
 8009e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e58:	f107 031c 	add.w	r3, r7, #28
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	605a      	str	r2, [r3, #4]
 8009e62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e64:	463b      	mov	r3, r7
 8009e66:	2200      	movs	r2, #0
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	605a      	str	r2, [r3, #4]
 8009e6c:	609a      	str	r2, [r3, #8]
 8009e6e:	60da      	str	r2, [r3, #12]
 8009e70:	611a      	str	r2, [r3, #16]
 8009e72:	615a      	str	r2, [r3, #20]
 8009e74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009e76:	4b2c      	ldr	r3, [pc, #176]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009e78:	4a2c      	ldr	r2, [pc, #176]	@ (8009f2c <MX_TIM3_Init+0xe8>)
 8009e7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8009e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009e7e:	2202      	movs	r2, #2
 8009e80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e82:	4b29      	ldr	r3, [pc, #164]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8009e88:	4b27      	ldr	r3, [pc, #156]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009e8a:	2263      	movs	r2, #99	@ 0x63
 8009e8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e8e:	4b26      	ldr	r3, [pc, #152]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e94:	4b24      	ldr	r3, [pc, #144]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009e9a:	4823      	ldr	r0, [pc, #140]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009e9c:	f00d f9ab 	bl	80171f6 <HAL_TIM_Base_Init>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8009ea6:	f000 fb3e 	bl	800a526 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009eb0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	481c      	ldr	r0, [pc, #112]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009eb8:	f00e f8ca 	bl	8018050 <HAL_TIM_ConfigClockSource>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8009ec2:	f000 fb30 	bl	800a526 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009ec6:	4818      	ldr	r0, [pc, #96]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009ec8:	f00d fb18 	bl	80174fc <HAL_TIM_PWM_Init>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8009ed2:	f000 fb28 	bl	800a526 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009eda:	2300      	movs	r3, #0
 8009edc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009ede:	f107 031c 	add.w	r3, r7, #28
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	4810      	ldr	r0, [pc, #64]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009ee6:	f00e fef5 	bl	8018cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8009ef0:	f000 fb19 	bl	800a526 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009ef4:	2360      	movs	r3, #96	@ 0x60
 8009ef6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8009efc:	2302      	movs	r3, #2
 8009efe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f00:	2300      	movs	r3, #0
 8009f02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f04:	463b      	mov	r3, r7
 8009f06:	2200      	movs	r2, #0
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4807      	ldr	r0, [pc, #28]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009f0c:	f00d ff8c 	bl	8017e28 <HAL_TIM_PWM_ConfigChannel>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8009f16:	f000 fb06 	bl	800a526 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009f1a:	4803      	ldr	r0, [pc, #12]	@ (8009f28 <MX_TIM3_Init+0xe4>)
 8009f1c:	f000 fefc 	bl	800ad18 <HAL_TIM_MspPostInit>

}
 8009f20:	bf00      	nop
 8009f22:	3738      	adds	r7, #56	@ 0x38
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	24018438 	.word	0x24018438
 8009f2c:	40000400 	.word	0x40000400

08009f30 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f36:	1d3b      	adds	r3, r7, #4
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]
 8009f3c:	605a      	str	r2, [r3, #4]
 8009f3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009f40:	4b14      	ldr	r3, [pc, #80]	@ (8009f94 <MX_TIM6_Init+0x64>)
 8009f42:	4a15      	ldr	r2, [pc, #84]	@ (8009f98 <MX_TIM6_Init+0x68>)
 8009f44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 120-1;
 8009f46:	4b13      	ldr	r3, [pc, #76]	@ (8009f94 <MX_TIM6_Init+0x64>)
 8009f48:	2277      	movs	r2, #119	@ 0x77
 8009f4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f4c:	4b11      	ldr	r3, [pc, #68]	@ (8009f94 <MX_TIM6_Init+0x64>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2-1;
 8009f52:	4b10      	ldr	r3, [pc, #64]	@ (8009f94 <MX_TIM6_Init+0x64>)
 8009f54:	2201      	movs	r2, #1
 8009f56:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f58:	4b0e      	ldr	r3, [pc, #56]	@ (8009f94 <MX_TIM6_Init+0x64>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009f5e:	480d      	ldr	r0, [pc, #52]	@ (8009f94 <MX_TIM6_Init+0x64>)
 8009f60:	f00d f949 	bl	80171f6 <HAL_TIM_Base_Init>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8009f6a:	f000 fadc 	bl	800a526 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009f6e:	2320      	movs	r3, #32
 8009f70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f72:	2300      	movs	r3, #0
 8009f74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009f76:	1d3b      	adds	r3, r7, #4
 8009f78:	4619      	mov	r1, r3
 8009f7a:	4806      	ldr	r0, [pc, #24]	@ (8009f94 <MX_TIM6_Init+0x64>)
 8009f7c:	f00e feaa 	bl	8018cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8009f86:	f000 face 	bl	800a526 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	24018484 	.word	0x24018484
 8009f98:	40001000 	.word	0x40001000

08009f9c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b088      	sub	sp, #32
 8009fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fa2:	f107 0310 	add.w	r3, r7, #16
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	605a      	str	r2, [r3, #4]
 8009fac:	609a      	str	r2, [r3, #8]
 8009fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009fb0:	1d3b      	adds	r3, r7, #4
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	605a      	str	r2, [r3, #4]
 8009fb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009fba:	4b20      	ldr	r3, [pc, #128]	@ (800a03c <MX_TIM8_Init+0xa0>)
 8009fbc:	4a20      	ldr	r2, [pc, #128]	@ (800a040 <MX_TIM8_Init+0xa4>)
 8009fbe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1000-1;
 8009fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800a03c <MX_TIM8_Init+0xa0>)
 8009fc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009fc6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800a03c <MX_TIM8_Init+0xa0>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2-1;
 8009fce:	4b1b      	ldr	r3, [pc, #108]	@ (800a03c <MX_TIM8_Init+0xa0>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009fd4:	4b19      	ldr	r3, [pc, #100]	@ (800a03c <MX_TIM8_Init+0xa0>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009fda:	4b18      	ldr	r3, [pc, #96]	@ (800a03c <MX_TIM8_Init+0xa0>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009fe0:	4b16      	ldr	r3, [pc, #88]	@ (800a03c <MX_TIM8_Init+0xa0>)
 8009fe2:	2280      	movs	r2, #128	@ 0x80
 8009fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009fe6:	4815      	ldr	r0, [pc, #84]	@ (800a03c <MX_TIM8_Init+0xa0>)
 8009fe8:	f00d f905 	bl	80171f6 <HAL_TIM_Base_Init>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8009ff2:	f000 fa98 	bl	800a526 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ffa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009ffc:	f107 0310 	add.w	r3, r7, #16
 800a000:	4619      	mov	r1, r3
 800a002:	480e      	ldr	r0, [pc, #56]	@ (800a03c <MX_TIM8_Init+0xa0>)
 800a004:	f00e f824 	bl	8018050 <HAL_TIM_ConfigClockSource>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800a00e:	f000 fa8a 	bl	800a526 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a012:	2320      	movs	r3, #32
 800a014:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a016:	2300      	movs	r3, #0
 800a018:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a01e:	1d3b      	adds	r3, r7, #4
 800a020:	4619      	mov	r1, r3
 800a022:	4806      	ldr	r0, [pc, #24]	@ (800a03c <MX_TIM8_Init+0xa0>)
 800a024:	f00e fe56 	bl	8018cd4 <HAL_TIMEx_MasterConfigSynchronization>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800a02e:	f000 fa7a 	bl	800a526 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800a032:	bf00      	nop
 800a034:	3720      	adds	r7, #32
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	240184d0 	.word	0x240184d0
 800a040:	40010400 	.word	0x40010400

0800a044 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800a048:	4b22      	ldr	r3, [pc, #136]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a04a:	4a23      	ldr	r2, [pc, #140]	@ (800a0d8 <MX_UART5_Init+0x94>)
 800a04c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800a04e:	4b21      	ldr	r3, [pc, #132]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a050:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a054:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800a056:	4b1f      	ldr	r3, [pc, #124]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a058:	2200      	movs	r2, #0
 800a05a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800a05c:	4b1d      	ldr	r3, [pc, #116]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a05e:	2200      	movs	r2, #0
 800a060:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800a062:	4b1c      	ldr	r3, [pc, #112]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a064:	2200      	movs	r2, #0
 800a066:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800a068:	4b1a      	ldr	r3, [pc, #104]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a06a:	220c      	movs	r2, #12
 800a06c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a06e:	4b19      	ldr	r3, [pc, #100]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a070:	2200      	movs	r2, #0
 800a072:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800a074:	4b17      	ldr	r3, [pc, #92]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a076:	2200      	movs	r2, #0
 800a078:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a07a:	4b16      	ldr	r3, [pc, #88]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a080:	4b14      	ldr	r3, [pc, #80]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a082:	2200      	movs	r2, #0
 800a084:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a086:	4b13      	ldr	r3, [pc, #76]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a088:	2200      	movs	r2, #0
 800a08a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800a08c:	4811      	ldr	r0, [pc, #68]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a08e:	f00e fedb 	bl	8018e48 <HAL_UART_Init>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800a098:	f000 fa45 	bl	800a526 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a09c:	2100      	movs	r1, #0
 800a09e:	480d      	ldr	r0, [pc, #52]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a0a0:	f010 ff4c 	bl	801af3c <HAL_UARTEx_SetTxFifoThreshold>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800a0aa:	f000 fa3c 	bl	800a526 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	4808      	ldr	r0, [pc, #32]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a0b2:	f010 ff81 	bl	801afb8 <HAL_UARTEx_SetRxFifoThreshold>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d001      	beq.n	800a0c0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800a0bc:	f000 fa33 	bl	800a526 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800a0c0:	4804      	ldr	r0, [pc, #16]	@ (800a0d4 <MX_UART5_Init+0x90>)
 800a0c2:	f010 ff02 	bl	801aeca <HAL_UARTEx_DisableFifoMode>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800a0cc:	f000 fa2b 	bl	800a526 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800a0d0:	bf00      	nop
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	24018594 	.word	0x24018594
 800a0d8:	40005000 	.word	0x40005000

0800a0dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a0e2:	4b35      	ldr	r3, [pc, #212]	@ (800a1b8 <MX_DMA_Init+0xdc>)
 800a0e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a0e8:	4a33      	ldr	r2, [pc, #204]	@ (800a1b8 <MX_DMA_Init+0xdc>)
 800a0ea:	f043 0301 	orr.w	r3, r3, #1
 800a0ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a0f2:	4b31      	ldr	r3, [pc, #196]	@ (800a1b8 <MX_DMA_Init+0xdc>)
 800a0f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	607b      	str	r3, [r7, #4]
 800a0fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a100:	4b2d      	ldr	r3, [pc, #180]	@ (800a1b8 <MX_DMA_Init+0xdc>)
 800a102:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a106:	4a2c      	ldr	r2, [pc, #176]	@ (800a1b8 <MX_DMA_Init+0xdc>)
 800a108:	f043 0302 	orr.w	r3, r3, #2
 800a10c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a110:	4b29      	ldr	r3, [pc, #164]	@ (800a1b8 <MX_DMA_Init+0xdc>)
 800a112:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	603b      	str	r3, [r7, #0]
 800a11c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800a11e:	2200      	movs	r2, #0
 800a120:	2105      	movs	r1, #5
 800a122:	200b      	movs	r0, #11
 800a124:	f003 fd92 	bl	800dc4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a128:	200b      	movs	r0, #11
 800a12a:	f003 fda9 	bl	800dc80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800a12e:	2200      	movs	r2, #0
 800a130:	2105      	movs	r1, #5
 800a132:	200c      	movs	r0, #12
 800a134:	f003 fd8a 	bl	800dc4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a138:	200c      	movs	r0, #12
 800a13a:	f003 fda1 	bl	800dc80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800a13e:	2200      	movs	r2, #0
 800a140:	2105      	movs	r1, #5
 800a142:	200d      	movs	r0, #13
 800a144:	f003 fd82 	bl	800dc4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800a148:	200d      	movs	r0, #13
 800a14a:	f003 fd99 	bl	800dc80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800a14e:	2200      	movs	r2, #0
 800a150:	2105      	movs	r1, #5
 800a152:	200e      	movs	r0, #14
 800a154:	f003 fd7a 	bl	800dc4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800a158:	200e      	movs	r0, #14
 800a15a:	f003 fd91 	bl	800dc80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800a15e:	2200      	movs	r2, #0
 800a160:	2105      	movs	r1, #5
 800a162:	200f      	movs	r0, #15
 800a164:	f003 fd72 	bl	800dc4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800a168:	200f      	movs	r0, #15
 800a16a:	f003 fd89 	bl	800dc80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800a16e:	2200      	movs	r2, #0
 800a170:	2105      	movs	r1, #5
 800a172:	2010      	movs	r0, #16
 800a174:	f003 fd6a 	bl	800dc4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a178:	2010      	movs	r0, #16
 800a17a:	f003 fd81 	bl	800dc80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800a17e:	2200      	movs	r2, #0
 800a180:	2105      	movs	r1, #5
 800a182:	2011      	movs	r0, #17
 800a184:	f003 fd62 	bl	800dc4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800a188:	2011      	movs	r0, #17
 800a18a:	f003 fd79 	bl	800dc80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800a18e:	2200      	movs	r2, #0
 800a190:	2105      	movs	r1, #5
 800a192:	202f      	movs	r0, #47	@ 0x2f
 800a194:	f003 fd5a 	bl	800dc4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800a198:	202f      	movs	r0, #47	@ 0x2f
 800a19a:	f003 fd71 	bl	800dc80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800a19e:	2200      	movs	r2, #0
 800a1a0:	2105      	movs	r1, #5
 800a1a2:	2038      	movs	r0, #56	@ 0x38
 800a1a4:	f003 fd52 	bl	800dc4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800a1a8:	2038      	movs	r0, #56	@ 0x38
 800a1aa:	f003 fd69 	bl	800dc80 <HAL_NVIC_EnableIRQ>

}
 800a1ae:	bf00      	nop
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	58024400 	.word	0x58024400

0800a1bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08c      	sub	sp, #48	@ 0x30
 800a1c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1c2:	f107 031c 	add.w	r3, r7, #28
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]
 800a1ca:	605a      	str	r2, [r3, #4]
 800a1cc:	609a      	str	r2, [r3, #8]
 800a1ce:	60da      	str	r2, [r3, #12]
 800a1d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a1d2:	4b96      	ldr	r3, [pc, #600]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a1d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1d8:	4a94      	ldr	r2, [pc, #592]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a1da:	f043 0310 	orr.w	r3, r3, #16
 800a1de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a1e2:	4b92      	ldr	r3, [pc, #584]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a1e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1e8:	f003 0310 	and.w	r3, r3, #16
 800a1ec:	61bb      	str	r3, [r7, #24]
 800a1ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1f0:	4b8e      	ldr	r3, [pc, #568]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a1f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1f6:	4a8d      	ldr	r2, [pc, #564]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a1f8:	f043 0304 	orr.w	r3, r3, #4
 800a1fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a200:	4b8a      	ldr	r3, [pc, #552]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a206:	f003 0304 	and.w	r3, r3, #4
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a20e:	4b87      	ldr	r3, [pc, #540]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a214:	4a85      	ldr	r2, [pc, #532]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a21a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a21e:	4b83      	ldr	r3, [pc, #524]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a228:	613b      	str	r3, [r7, #16]
 800a22a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a22c:	4b7f      	ldr	r3, [pc, #508]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a22e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a232:	4a7e      	ldr	r2, [pc, #504]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a234:	f043 0301 	orr.w	r3, r3, #1
 800a238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a23c:	4b7b      	ldr	r3, [pc, #492]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a23e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a24a:	4b78      	ldr	r3, [pc, #480]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a24c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a250:	4a76      	ldr	r2, [pc, #472]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a252:	f043 0302 	orr.w	r3, r3, #2
 800a256:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a25a:	4b74      	ldr	r3, [pc, #464]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a25c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a260:	f003 0302 	and.w	r3, r3, #2
 800a264:	60bb      	str	r3, [r7, #8]
 800a266:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a268:	4b70      	ldr	r3, [pc, #448]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a26a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a26e:	4a6f      	ldr	r2, [pc, #444]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a270:	f043 0308 	orr.w	r3, r3, #8
 800a274:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a278:	4b6c      	ldr	r3, [pc, #432]	@ (800a42c <MX_GPIO_Init+0x270>)
 800a27a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a27e:	f003 0308 	and.w	r3, r3, #8
 800a282:	607b      	str	r3, [r7, #4]
 800a284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAMP_MUTE_GPIO_Port, PAMP_MUTE_Pin, GPIO_PIN_SET);
 800a286:	2201      	movs	r2, #1
 800a288:	2180      	movs	r1, #128	@ 0x80
 800a28a:	4869      	ldr	r0, [pc, #420]	@ (800a430 <MX_GPIO_Init+0x274>)
 800a28c:	f007 fa08 	bl	80116a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_MAIN_TO_DAU_GPIO_Port, GPIO_MAIN_TO_DAU_Pin, GPIO_PIN_RESET);
 800a290:	2200      	movs	r2, #0
 800a292:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a296:	4867      	ldr	r0, [pc, #412]	@ (800a434 <MX_GPIO_Init+0x278>)
 800a298:	f007 fa02 	bl	80116a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TR_CTRL_Pin|EN_3V3A_Pin, GPIO_PIN_SET);
 800a29c:	2201      	movs	r2, #1
 800a29e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a2a2:	4865      	ldr	r0, [pc, #404]	@ (800a438 <MX_GPIO_Init+0x27c>)
 800a2a4:	f007 f9fc 	bl	80116a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_N3V3_GPIO_Port, EN_N3V3_Pin, GPIO_PIN_SET);
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a2ae:	4863      	ldr	r0, [pc, #396]	@ (800a43c <MX_GPIO_Init+0x280>)
 800a2b0:	f007 f9f6 	bl	80116a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UNUSED1_Pin UNUSED2_Pin UNUSED3_Pin UNUSED4_Pin
                           UNUSED5_Pin UNUSED20_Pin UNUSED21_Pin UNUSED22_Pin
                           UNUSED23_Pin UNUSED52_Pin UNUSED53_Pin */
  GPIO_InitStruct.Pin = UNUSED1_Pin|UNUSED2_Pin|UNUSED3_Pin|UNUSED4_Pin
 800a2b4:	f24a 637f 	movw	r3, #42623	@ 0xa67f
 800a2b8:	61fb      	str	r3, [r7, #28]
                          |UNUSED5_Pin|UNUSED20_Pin|UNUSED21_Pin|UNUSED22_Pin
                          |UNUSED23_Pin|UNUSED52_Pin|UNUSED53_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a2c2:	f107 031c 	add.w	r3, r7, #28
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4859      	ldr	r0, [pc, #356]	@ (800a430 <MX_GPIO_Init+0x274>)
 800a2ca:	f007 f841 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pins : UNUSED6_Pin UNUSED7_Pin UNUSED8_Pin UNUSED9_Pin
                           UNUSED10_Pin UNUSED11_Pin UNUSED17_Pin UNUSED18_Pin
                           UNUSED33_Pin UNUSED34_Pin UNUSED38_Pin UNUSED39_Pin
                           UNUSED40_Pin */
  GPIO_InitStruct.Pin = UNUSED6_Pin|UNUSED7_Pin|UNUSED8_Pin|UNUSED9_Pin
 800a2ce:	f64f 63b7 	movw	r3, #65207	@ 0xfeb7
 800a2d2:	61fb      	str	r3, [r7, #28]
                          |UNUSED10_Pin|UNUSED11_Pin|UNUSED17_Pin|UNUSED18_Pin
                          |UNUSED33_Pin|UNUSED34_Pin|UNUSED38_Pin|UNUSED39_Pin
                          |UNUSED40_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2dc:	f107 031c 	add.w	r3, r7, #28
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4856      	ldr	r0, [pc, #344]	@ (800a43c <MX_GPIO_Init+0x280>)
 800a2e4:	f007 f834 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pins : UNUSED12_Pin UNUSED13_Pin UNUSED14_Pin UNUSED15_Pin
                           UNUSED16_Pin UNUSED35_Pin UNUSED36_Pin UNUSED37_Pin */
  GPIO_InitStruct.Pin = UNUSED12_Pin|UNUSED13_Pin|UNUSED14_Pin|UNUSED15_Pin
 800a2e8:	f248 538f 	movw	r3, #34191	@ 0x858f
 800a2ec:	61fb      	str	r3, [r7, #28]
                          |UNUSED16_Pin|UNUSED35_Pin|UNUSED36_Pin|UNUSED37_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2f6:	f107 031c 	add.w	r3, r7, #28
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	4850      	ldr	r0, [pc, #320]	@ (800a440 <MX_GPIO_Init+0x284>)
 800a2fe:	f007 f827 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pins : UNUSED19_Pin UNUSED24_Pin UNUSED25_Pin UNUSED48_Pin
                           UNUSED49_Pin UNUSED50_Pin UNUSED51_Pin */
  GPIO_InitStruct.Pin = UNUSED19_Pin|UNUSED24_Pin|UNUSED25_Pin|UNUSED48_Pin
 800a302:	f640 7331 	movw	r3, #3889	@ 0xf31
 800a306:	61fb      	str	r3, [r7, #28]
                          |UNUSED49_Pin|UNUSED50_Pin|UNUSED51_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a308:	2300      	movs	r3, #0
 800a30a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a30c:	2300      	movs	r3, #0
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a310:	f107 031c 	add.w	r3, r7, #28
 800a314:	4619      	mov	r1, r3
 800a316:	4847      	ldr	r0, [pc, #284]	@ (800a434 <MX_GPIO_Init+0x278>)
 800a318:	f007 f81a 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC2_5_FB_Pin */
  GPIO_InitStruct.Pin = ADC2_5_FB_Pin;
 800a31c:	2302      	movs	r3, #2
 800a31e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a320:	2303      	movs	r3, #3
 800a322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a324:	2300      	movs	r3, #0
 800a326:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ADC2_5_FB_GPIO_Port, &GPIO_InitStruct);
 800a328:	f107 031c 	add.w	r3, r7, #28
 800a32c:	4619      	mov	r1, r3
 800a32e:	4841      	ldr	r0, [pc, #260]	@ (800a434 <MX_GPIO_Init+0x278>)
 800a330:	f007 f80e 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAMP_FAULTZ_Pin */
  GPIO_InitStruct.Pin = PAMP_FAULTZ_Pin;
 800a334:	2304      	movs	r3, #4
 800a336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a338:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800a33c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a33e:	2301      	movs	r3, #1
 800a340:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PAMP_FAULTZ_GPIO_Port, &GPIO_InitStruct);
 800a342:	f107 031c 	add.w	r3, r7, #28
 800a346:	4619      	mov	r1, r3
 800a348:	483a      	ldr	r0, [pc, #232]	@ (800a434 <MX_GPIO_Init+0x278>)
 800a34a:	f007 f801 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAMP_MUTE_Pin */
  GPIO_InitStruct.Pin = PAMP_MUTE_Pin;
 800a34e:	2380      	movs	r3, #128	@ 0x80
 800a350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800a352:	2311      	movs	r3, #17
 800a354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a356:	2300      	movs	r3, #0
 800a358:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a35a:	2300      	movs	r3, #0
 800a35c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(PAMP_MUTE_GPIO_Port, &GPIO_InitStruct);
 800a35e:	f107 031c 	add.w	r3, r7, #28
 800a362:	4619      	mov	r1, r3
 800a364:	4832      	ldr	r0, [pc, #200]	@ (800a430 <MX_GPIO_Init+0x274>)
 800a366:	f006 fff3 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PGOOD_26V_Pin */
  GPIO_InitStruct.Pin = PGOOD_26V_Pin;
 800a36a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a36e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a370:	2300      	movs	r3, #0
 800a372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a374:	2301      	movs	r3, #1
 800a376:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PGOOD_26V_GPIO_Port, &GPIO_InitStruct);
 800a378:	f107 031c 	add.w	r3, r7, #28
 800a37c:	4619      	mov	r1, r3
 800a37e:	482c      	ldr	r0, [pc, #176]	@ (800a430 <MX_GPIO_Init+0x274>)
 800a380:	f006 ffe6 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_DAU_TO_MAIN_Pin */
  GPIO_InitStruct.Pin = GPIO_DAU_TO_MAIN_Pin;
 800a384:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a38a:	2300      	movs	r3, #0
 800a38c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a38e:	2302      	movs	r3, #2
 800a390:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO_DAU_TO_MAIN_GPIO_Port, &GPIO_InitStruct);
 800a392:	f107 031c 	add.w	r3, r7, #28
 800a396:	4619      	mov	r1, r3
 800a398:	4826      	ldr	r0, [pc, #152]	@ (800a434 <MX_GPIO_Init+0x278>)
 800a39a:	f006 ffd9 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_MAIN_TO_DAU_Pin */
  GPIO_InitStruct.Pin = GPIO_MAIN_TO_DAU_Pin;
 800a39e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_MAIN_TO_DAU_GPIO_Port, &GPIO_InitStruct);
 800a3b0:	f107 031c 	add.w	r3, r7, #28
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	481f      	ldr	r0, [pc, #124]	@ (800a434 <MX_GPIO_Init+0x278>)
 800a3b8:	f006 ffca 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pins : TR_CTRL_Pin EN_3V3A_Pin */
  GPIO_InitStruct.Pin = TR_CTRL_Pin|EN_3V3A_Pin;
 800a3bc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800a3c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a3ce:	f107 031c 	add.w	r3, r7, #28
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4818      	ldr	r0, [pc, #96]	@ (800a438 <MX_GPIO_Init+0x27c>)
 800a3d6:	f006 ffbb 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pins : UNUSED26_Pin UNUSED27_Pin UNUSED28_Pin UNUSED29_Pin
                           UNUSED30_Pin UNUSED31_Pin UNUSED32_Pin UNUSED41_Pin
                           UNUSED42_Pin UNUSED43_Pin UNUSED44_Pin UNUSED45_Pin
                           UNUSED46_Pin UNUSED47_Pin */
  GPIO_InitStruct.Pin = UNUSED26_Pin|UNUSED27_Pin|UNUSED28_Pin|UNUSED29_Pin
 800a3da:	f64f 63fb 	movw	r3, #65275	@ 0xfefb
 800a3de:	61fb      	str	r3, [r7, #28]
                          |UNUSED30_Pin|UNUSED31_Pin|UNUSED32_Pin|UNUSED41_Pin
                          |UNUSED42_Pin|UNUSED43_Pin|UNUSED44_Pin|UNUSED45_Pin
                          |UNUSED46_Pin|UNUSED47_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a3e8:	f107 031c 	add.w	r3, r7, #28
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4812      	ldr	r0, [pc, #72]	@ (800a438 <MX_GPIO_Init+0x27c>)
 800a3f0:	f006 ffae 	bl	8011350 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_N3V3_Pin */
  GPIO_InitStruct.Pin = EN_N3V3_Pin;
 800a3f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a3f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a402:	2300      	movs	r3, #0
 800a404:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(EN_N3V3_GPIO_Port, &GPIO_InitStruct);
 800a406:	f107 031c 	add.w	r3, r7, #28
 800a40a:	4619      	mov	r1, r3
 800a40c:	480b      	ldr	r0, [pc, #44]	@ (800a43c <MX_GPIO_Init+0x280>)
 800a40e:	f006 ff9f 	bl	8011350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(PAMP_FAULTZ_EXTI_IRQn, 5, 0);
 800a412:	2200      	movs	r2, #0
 800a414:	2105      	movs	r1, #5
 800a416:	2008      	movs	r0, #8
 800a418:	f003 fc18 	bl	800dc4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PAMP_FAULTZ_EXTI_IRQn);
 800a41c:	2008      	movs	r0, #8
 800a41e:	f003 fc2f 	bl	800dc80 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800a422:	bf00      	nop
 800a424:	3730      	adds	r7, #48	@ 0x30
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	58024400 	.word	0x58024400
 800a430:	58021000 	.word	0x58021000
 800a434:	58020400 	.word	0x58020400
 800a438:	58020c00 	.word	0x58020c00
 800a43c:	58020800 	.word	0x58020800
 800a440:	58020000 	.word	0x58020000

0800a444 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800a44c:	f018 f9d4 	bl	80227f8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  (void)(argument);
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a450:	2001      	movs	r0, #1
 800a452:	f014 fac6 	bl	801e9e2 <osDelay>
 800a456:	e7fb      	b.n	800a450 <StartDefaultTask+0xc>

0800a458 <startMessageProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMessageProcessingTask */
void startMessageProcessingTask(void *argument)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMessageProcessingTask */
  MESS_StartTask(argument);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7fc fde1 	bl	8007028 <MESS_StartTask>
  /* USER CODE END startMessageProcessingTask */
}
 800a466:	bf00      	nop
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <startSystemManagementTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSystemManagementTask */
void startSystemManagementTask(void *argument)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b082      	sub	sp, #8
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSystemManagementTask */
  SYS_StartTask(argument);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7fe f960 	bl	800873c <SYS_StartTask>
  /* USER CODE END startSystemManagementTask */
}
 800a47c:	bf00      	nop
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <startCommunicationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCommunicationTask */
void startCommunicationTask(void *argument)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCommunicationTask */
  COMM_StartTask(argument);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7f9 fa33 	bl	80038f8 <COMM_StartTask>
  /* USER CODE END startCommunicationTask */
}
 800a492:	bf00      	nop
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <startconfigTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startconfigTask */
void startconfigTask(void *argument)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startconfigTask */
  CFG_StartTask(argument);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7f6 fb16 	bl	8000ad4 <CFG_StartTask>
  /* USER CODE END startconfigTask */
}
 800a4a8:	bf00      	nop
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <MPU_Config>:

 /* MPU Configuration */

void MPU_Config(void)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800a4b6:	463b      	mov	r3, r7
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	601a      	str	r2, [r3, #0]
 800a4bc:	605a      	str	r2, [r3, #4]
 800a4be:	609a      	str	r2, [r3, #8]
 800a4c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800a4c2:	f003 fbeb 	bl	800dc9c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800a4d2:	231f      	movs	r3, #31
 800a4d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800a4d6:	2387      	movs	r3, #135	@ 0x87
 800a4d8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a4f2:	463b      	mov	r3, r7
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f003 fc09 	bl	800dd0c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800a4fa:	2004      	movs	r0, #4
 800a4fc:	f003 fbe6 	bl	800dccc <HAL_MPU_Enable>

}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a518:	d101      	bne.n	800a51e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800a51a:	f001 f82b 	bl	800b574 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a526:	b480      	push	{r7}
 800a528:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a52a:	b672      	cpsid	i
}
 800a52c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a52e:	bf00      	nop
 800a530:	e7fd      	b.n	800a52e <Error_Handler+0x8>
	...

0800a534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a53a:	4b16      	ldr	r3, [pc, #88]	@ (800a594 <HAL_MspInit+0x60>)
 800a53c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a540:	4a14      	ldr	r2, [pc, #80]	@ (800a594 <HAL_MspInit+0x60>)
 800a542:	f043 0302 	orr.w	r3, r3, #2
 800a546:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a54a:	4b12      	ldr	r3, [pc, #72]	@ (800a594 <HAL_MspInit+0x60>)
 800a54c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a550:	f003 0302 	and.w	r3, r3, #2
 800a554:	607b      	str	r3, [r7, #4]
 800a556:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a558:	2200      	movs	r2, #0
 800a55a:	210f      	movs	r1, #15
 800a55c:	f06f 0001 	mvn.w	r0, #1
 800a560:	f003 fb74 	bl	800dc4c <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 800a564:	4b0b      	ldr	r3, [pc, #44]	@ (800a594 <HAL_MspInit+0x60>)
 800a566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a56a:	4a0a      	ldr	r2, [pc, #40]	@ (800a594 <HAL_MspInit+0x60>)
 800a56c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a570:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a574:	4b07      	ldr	r3, [pc, #28]	@ (800a594 <HAL_MspInit+0x60>)
 800a576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a57a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800a582:	f001 f84f 	bl	800b624 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800a586:	2002      	movs	r0, #2
 800a588:	f001 f838 	bl	800b5fc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	58024400 	.word	0x58024400

0800a598 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08c      	sub	sp, #48	@ 0x30
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5a0:	f107 031c 	add.w	r3, r7, #28
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	605a      	str	r2, [r3, #4]
 800a5aa:	609a      	str	r2, [r3, #8]
 800a5ac:	60da      	str	r2, [r3, #12]
 800a5ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a73      	ldr	r2, [pc, #460]	@ (800a784 <HAL_ADC_MspInit+0x1ec>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d17e      	bne.n	800a6b8 <HAL_ADC_MspInit+0x120>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800a5ba:	4b73      	ldr	r3, [pc, #460]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a5bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5c0:	4a71      	ldr	r2, [pc, #452]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a5c2:	f043 0320 	orr.w	r3, r3, #32
 800a5c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a5ca:	4b6f      	ldr	r3, [pc, #444]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a5cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5d0:	f003 0320 	and.w	r3, r3, #32
 800a5d4:	61bb      	str	r3, [r7, #24]
 800a5d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5d8:	4b6b      	ldr	r3, [pc, #428]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a5da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5de:	4a6a      	ldr	r2, [pc, #424]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a5e0:	f043 0301 	orr.w	r3, r3, #1
 800a5e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a5e8:	4b67      	ldr	r3, [pc, #412]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a5ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5f6:	4b64      	ldr	r3, [pc, #400]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a5f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5fc:	4a62      	ldr	r2, [pc, #392]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a5fe:	f043 0302 	orr.w	r3, r3, #2
 800a602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a606:	4b60      	ldr	r3, [pc, #384]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a60c:	f003 0302 	and.w	r3, r3, #2
 800a610:	613b      	str	r3, [r7, #16]
 800a612:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = ADC1_3_RECV_Pin;
 800a614:	2340      	movs	r3, #64	@ 0x40
 800a616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a618:	2303      	movs	r3, #3
 800a61a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a61c:	2300      	movs	r3, #0
 800a61e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC1_3_RECV_GPIO_Port, &GPIO_InitStruct);
 800a620:	f107 031c 	add.w	r3, r7, #28
 800a624:	4619      	mov	r1, r3
 800a626:	4859      	ldr	r0, [pc, #356]	@ (800a78c <HAL_ADC_MspInit+0x1f4>)
 800a628:	f006 fe92 	bl	8011350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC2_5_FB_Pin;
 800a62c:	2302      	movs	r3, #2
 800a62e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a630:	2303      	movs	r3, #3
 800a632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a634:	2300      	movs	r3, #0
 800a636:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC2_5_FB_GPIO_Port, &GPIO_InitStruct);
 800a638:	f107 031c 	add.w	r3, r7, #28
 800a63c:	4619      	mov	r1, r3
 800a63e:	4854      	ldr	r0, [pc, #336]	@ (800a790 <HAL_ADC_MspInit+0x1f8>)
 800a640:	f006 fe86 	bl	8011350 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800a644:	4b53      	ldr	r3, [pc, #332]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a646:	4a54      	ldr	r2, [pc, #336]	@ (800a798 <HAL_ADC_MspInit+0x200>)
 800a648:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800a64a:	4b52      	ldr	r3, [pc, #328]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a64c:	2209      	movs	r2, #9
 800a64e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a650:	4b50      	ldr	r3, [pc, #320]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a652:	2200      	movs	r2, #0
 800a654:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a656:	4b4f      	ldr	r3, [pc, #316]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a658:	2200      	movs	r2, #0
 800a65a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a65c:	4b4d      	ldr	r3, [pc, #308]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a65e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a662:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a664:	4b4b      	ldr	r3, [pc, #300]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a666:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a66a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a66c:	4b49      	ldr	r3, [pc, #292]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a66e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a672:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a674:	4b47      	ldr	r3, [pc, #284]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a67a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800a67c:	4b45      	ldr	r3, [pc, #276]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a67e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a682:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a684:	4b43      	ldr	r3, [pc, #268]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a686:	2200      	movs	r2, #0
 800a688:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a68a:	4842      	ldr	r0, [pc, #264]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a68c:	f003 ff82 	bl	800e594 <HAL_DMA_Init>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800a696:	f7ff ff46 	bl	800a526 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a3d      	ldr	r2, [pc, #244]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a69e:	659a      	str	r2, [r3, #88]	@ 0x58
 800a6a0:	4a3c      	ldr	r2, [pc, #240]	@ (800a794 <HAL_ADC_MspInit+0x1fc>)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2105      	movs	r1, #5
 800a6aa:	2012      	movs	r0, #18
 800a6ac:	f003 face 	bl	800dc4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800a6b0:	2012      	movs	r0, #18
 800a6b2:	f003 fae5 	bl	800dc80 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 800a6b6:	e061      	b.n	800a77c <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC3)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a37      	ldr	r2, [pc, #220]	@ (800a79c <HAL_ADC_MspInit+0x204>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d15c      	bne.n	800a77c <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800a6c2:	4b31      	ldr	r3, [pc, #196]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a6c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6c8:	4a2f      	ldr	r2, [pc, #188]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a6ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a6d2:	4b2d      	ldr	r3, [pc, #180]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a6d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a6dc:	60fb      	str	r3, [r7, #12]
 800a6de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a6e0:	4b29      	ldr	r3, [pc, #164]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a6e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6e6:	4a28      	ldr	r2, [pc, #160]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a6e8:	f043 0304 	orr.w	r3, r3, #4
 800a6ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a6f0:	4b25      	ldr	r3, [pc, #148]	@ (800a788 <HAL_ADC_MspInit+0x1f0>)
 800a6f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	60bb      	str	r3, [r7, #8]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800a6fe:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800a702:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800a706:	f000 ff9d 	bl	800b644 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream5;
 800a70a:	4b25      	ldr	r3, [pc, #148]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a70c:	4a25      	ldr	r2, [pc, #148]	@ (800a7a4 <HAL_ADC_MspInit+0x20c>)
 800a70e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800a710:	4b23      	ldr	r3, [pc, #140]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a712:	2273      	movs	r2, #115	@ 0x73
 800a714:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a716:	4b22      	ldr	r3, [pc, #136]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a718:	2200      	movs	r2, #0
 800a71a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800a71c:	4b20      	ldr	r3, [pc, #128]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a71e:	2200      	movs	r2, #0
 800a720:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800a722:	4b1f      	ldr	r3, [pc, #124]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a724:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a728:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a72a:	4b1d      	ldr	r3, [pc, #116]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a72c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a730:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a732:	4b1b      	ldr	r3, [pc, #108]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a738:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800a73a:	4b19      	ldr	r3, [pc, #100]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a73c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a740:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800a742:	4b17      	ldr	r3, [pc, #92]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a744:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a748:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a74a:	4b15      	ldr	r3, [pc, #84]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800a750:	4813      	ldr	r0, [pc, #76]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a752:	f003 ff1f 	bl	800e594 <HAL_DMA_Init>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800a75c:	f7ff fee3 	bl	800a526 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a0f      	ldr	r2, [pc, #60]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a764:	659a      	str	r2, [r3, #88]	@ 0x58
 800a766:	4a0e      	ldr	r2, [pc, #56]	@ (800a7a0 <HAL_ADC_MspInit+0x208>)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800a76c:	2200      	movs	r2, #0
 800a76e:	2105      	movs	r1, #5
 800a770:	207f      	movs	r0, #127	@ 0x7f
 800a772:	f003 fa6b 	bl	800dc4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800a776:	207f      	movs	r0, #127	@ 0x7f
 800a778:	f003 fa82 	bl	800dc80 <HAL_NVIC_EnableIRQ>
}
 800a77c:	bf00      	nop
 800a77e:	3730      	adds	r7, #48	@ 0x30
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	40022000 	.word	0x40022000
 800a788:	58024400 	.word	0x58024400
 800a78c:	58020000 	.word	0x58020000
 800a790:	58020400 	.word	0x58020400
 800a794:	24018054 	.word	0x24018054
 800a798:	40020410 	.word	0x40020410
 800a79c:	58026000 	.word	0x58026000
 800a7a0:	240180cc 	.word	0x240180cc
 800a7a4:	40020088 	.word	0x40020088

0800a7a8 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08a      	sub	sp, #40	@ 0x28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7b0:	f107 0314 	add.w	r3, r7, #20
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	601a      	str	r2, [r3, #0]
 800a7b8:	605a      	str	r2, [r3, #4]
 800a7ba:	609a      	str	r2, [r3, #8]
 800a7bc:	60da      	str	r2, [r3, #12]
 800a7be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a52      	ldr	r2, [pc, #328]	@ (800a910 <HAL_DAC_MspInit+0x168>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	f040 809d 	bne.w	800a906 <HAL_DAC_MspInit+0x15e>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800a7cc:	4b51      	ldr	r3, [pc, #324]	@ (800a914 <HAL_DAC_MspInit+0x16c>)
 800a7ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a7d2:	4a50      	ldr	r2, [pc, #320]	@ (800a914 <HAL_DAC_MspInit+0x16c>)
 800a7d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a7d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800a7dc:	4b4d      	ldr	r3, [pc, #308]	@ (800a914 <HAL_DAC_MspInit+0x16c>)
 800a7de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a7e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7e6:	613b      	str	r3, [r7, #16]
 800a7e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7ea:	4b4a      	ldr	r3, [pc, #296]	@ (800a914 <HAL_DAC_MspInit+0x16c>)
 800a7ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7f0:	4a48      	ldr	r2, [pc, #288]	@ (800a914 <HAL_DAC_MspInit+0x16c>)
 800a7f2:	f043 0301 	orr.w	r3, r3, #1
 800a7f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a7fa:	4b46      	ldr	r3, [pc, #280]	@ (800a914 <HAL_DAC_MspInit+0x16c>)
 800a7fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a800:	f003 0301 	and.w	r3, r3, #1
 800a804:	60fb      	str	r3, [r7, #12]
 800a806:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_1_OUT_Pin|DAC1_2_FB_Pin;
 800a808:	2330      	movs	r3, #48	@ 0x30
 800a80a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a80c:	2303      	movs	r3, #3
 800a80e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a810:	2300      	movs	r3, #0
 800a812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a814:	f107 0314 	add.w	r3, r7, #20
 800a818:	4619      	mov	r1, r3
 800a81a:	483f      	ldr	r0, [pc, #252]	@ (800a918 <HAL_DAC_MspInit+0x170>)
 800a81c:	f006 fd98 	bl	8011350 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 800a820:	4b3e      	ldr	r3, [pc, #248]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a822:	4a3f      	ldr	r2, [pc, #252]	@ (800a920 <HAL_DAC_MspInit+0x178>)
 800a824:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 800a826:	4b3d      	ldr	r3, [pc, #244]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a828:	2244      	movs	r2, #68	@ 0x44
 800a82a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a82c:	4b3b      	ldr	r3, [pc, #236]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a82e:	2240      	movs	r2, #64	@ 0x40
 800a830:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800a832:	4b3a      	ldr	r3, [pc, #232]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a834:	2200      	movs	r2, #0
 800a836:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800a838:	4b38      	ldr	r3, [pc, #224]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a83a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a83e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a840:	4b36      	ldr	r3, [pc, #216]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a842:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a846:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a848:	4b34      	ldr	r3, [pc, #208]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a84a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a84e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800a850:	4b32      	ldr	r3, [pc, #200]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a856:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a858:	4b30      	ldr	r3, [pc, #192]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a85a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800a85e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a860:	4b2e      	ldr	r3, [pc, #184]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a862:	2200      	movs	r2, #0
 800a864:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800a866:	482d      	ldr	r0, [pc, #180]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a868:	f003 fe94 	bl	800e594 <HAL_DMA_Init>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <HAL_DAC_MspInit+0xce>
    {
      Error_Handler();
 800a872:	f7ff fe58 	bl	800a526 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a28      	ldr	r2, [pc, #160]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a87a:	60da      	str	r2, [r3, #12]
 800a87c:	4a27      	ldr	r2, [pc, #156]	@ (800a91c <HAL_DAC_MspInit+0x174>)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream2;
 800a882:	4b28      	ldr	r3, [pc, #160]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a884:	4a28      	ldr	r2, [pc, #160]	@ (800a928 <HAL_DAC_MspInit+0x180>)
 800a886:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800a888:	4b26      	ldr	r3, [pc, #152]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a88a:	2243      	movs	r2, #67	@ 0x43
 800a88c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a88e:	4b25      	ldr	r3, [pc, #148]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a890:	2240      	movs	r2, #64	@ 0x40
 800a892:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a894:	4b23      	ldr	r3, [pc, #140]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a896:	2200      	movs	r2, #0
 800a898:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800a89a:	4b22      	ldr	r3, [pc, #136]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a89c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a8a0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a8a2:	4b20      	ldr	r3, [pc, #128]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a8a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a8a8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a8aa:	4b1e      	ldr	r3, [pc, #120]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a8ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a8b0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800a8b2:	4b1c      	ldr	r3, [pc, #112]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a8b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a8b8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a8ba:	4b1a      	ldr	r3, [pc, #104]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a8bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800a8c0:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a8c2:	4b18      	ldr	r3, [pc, #96]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a8c4:	2204      	movs	r2, #4
 800a8c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dac1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a8c8:	4b16      	ldr	r3, [pc, #88]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a8ca:	2203      	movs	r2, #3
 800a8cc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dac1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 800a8ce:	4b15      	ldr	r3, [pc, #84]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dac1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800a8d4:	4b13      	ldr	r3, [pc, #76]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800a8da:	4812      	ldr	r0, [pc, #72]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a8dc:	f003 fe5a 	bl	800e594 <HAL_DMA_Init>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <HAL_DAC_MspInit+0x142>
    {
      Error_Handler();
 800a8e6:	f7ff fe1e 	bl	800a526 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a0d      	ldr	r2, [pc, #52]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a8ee:	609a      	str	r2, [r3, #8]
 800a8f0:	4a0c      	ldr	r2, [pc, #48]	@ (800a924 <HAL_DAC_MspInit+0x17c>)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	2105      	movs	r1, #5
 800a8fa:	2036      	movs	r0, #54	@ 0x36
 800a8fc:	f003 f9a6 	bl	800dc4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a900:	2036      	movs	r0, #54	@ 0x36
 800a902:	f003 f9bd 	bl	800dc80 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 800a906:	bf00      	nop
 800a908:	3728      	adds	r7, #40	@ 0x28
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	40007400 	.word	0x40007400
 800a914:	58024400 	.word	0x58024400
 800a918:	58020000 	.word	0x58020000
 800a91c:	24018158 	.word	0x24018158
 800a920:	40020028 	.word	0x40020028
 800a924:	240181d0 	.word	0x240181d0
 800a928:	40020040 	.word	0x40020040

0800a92c <HAL_DTS_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdts: DTS handle pointer
  * @retval None
  */
void HAL_DTS_MspInit(DTS_HandleTypeDef* hdts)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  if(hdts->Instance==DTS)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a0b      	ldr	r2, [pc, #44]	@ (800a968 <HAL_DTS_MspInit+0x3c>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d10e      	bne.n	800a95c <HAL_DTS_MspInit+0x30>
  {
    /* USER CODE BEGIN DTS_MspInit 0 */

    /* USER CODE END DTS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 800a93e:	4b0b      	ldr	r3, [pc, #44]	@ (800a96c <HAL_DTS_MspInit+0x40>)
 800a940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a944:	4a09      	ldr	r2, [pc, #36]	@ (800a96c <HAL_DTS_MspInit+0x40>)
 800a946:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a94a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a94e:	4b07      	ldr	r3, [pc, #28]	@ (800a96c <HAL_DTS_MspInit+0x40>)
 800a950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a954:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DTS_MspInit 1 */

  }

}
 800a95c:	bf00      	nop
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	58006800 	.word	0x58006800
 800a96c:	58024400 	.word	0x58024400

0800a970 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b0b8      	sub	sp, #224	@ 0xe0
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a978:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	605a      	str	r2, [r3, #4]
 800a982:	609a      	str	r2, [r3, #8]
 800a984:	60da      	str	r2, [r3, #12]
 800a986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a988:	f107 0310 	add.w	r3, r7, #16
 800a98c:	22b8      	movs	r2, #184	@ 0xb8
 800a98e:	2100      	movs	r1, #0
 800a990:	4618      	mov	r0, r3
 800a992:	f01a fd36 	bl	8025402 <memset>
  if(hi2c->Instance==I2C1)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a26      	ldr	r2, [pc, #152]	@ (800aa34 <HAL_I2C_MspInit+0xc4>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d145      	bne.n	800aa2c <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800a9a0:	f04f 0208 	mov.w	r2, #8
 800a9a4:	f04f 0300 	mov.w	r3, #0
 800a9a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a9b2:	f107 0310 	add.w	r3, r7, #16
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f009 fa90 	bl	8013edc <HAL_RCCEx_PeriphCLKConfig>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800a9c2:	f7ff fdb0 	bl	800a526 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a9c6:	4b1c      	ldr	r3, [pc, #112]	@ (800aa38 <HAL_I2C_MspInit+0xc8>)
 800a9c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9cc:	4a1a      	ldr	r2, [pc, #104]	@ (800aa38 <HAL_I2C_MspInit+0xc8>)
 800a9ce:	f043 0302 	orr.w	r3, r3, #2
 800a9d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a9d6:	4b18      	ldr	r3, [pc, #96]	@ (800aa38 <HAL_I2C_MspInit+0xc8>)
 800a9d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9dc:	f003 0302 	and.w	r3, r3, #2
 800a9e0:	60fb      	str	r3, [r7, #12]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a9e4:	23c0      	movs	r3, #192	@ 0xc0
 800a9e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a9ea:	2312      	movs	r3, #18
 800a9ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a9fc:	2304      	movs	r3, #4
 800a9fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa02:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800aa06:	4619      	mov	r1, r3
 800aa08:	480c      	ldr	r0, [pc, #48]	@ (800aa3c <HAL_I2C_MspInit+0xcc>)
 800aa0a:	f006 fca1 	bl	8011350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800aa0e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa38 <HAL_I2C_MspInit+0xc8>)
 800aa10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa14:	4a08      	ldr	r2, [pc, #32]	@ (800aa38 <HAL_I2C_MspInit+0xc8>)
 800aa16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aa1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800aa1e:	4b06      	ldr	r3, [pc, #24]	@ (800aa38 <HAL_I2C_MspInit+0xc8>)
 800aa20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa28:	60bb      	str	r3, [r7, #8]
 800aa2a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800aa2c:	bf00      	nop
 800aa2e:	37e0      	adds	r7, #224	@ 0xe0
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	40005400 	.word	0x40005400
 800aa38:	58024400 	.word	0x58024400
 800aa3c:	58020400 	.word	0x58020400

0800aa40 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b0b8      	sub	sp, #224	@ 0xe0
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa48:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	605a      	str	r2, [r3, #4]
 800aa52:	609a      	str	r2, [r3, #8]
 800aa54:	60da      	str	r2, [r3, #12]
 800aa56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aa58:	f107 0310 	add.w	r3, r7, #16
 800aa5c:	22b8      	movs	r2, #184	@ 0xb8
 800aa5e:	2100      	movs	r1, #0
 800aa60:	4618      	mov	r0, r3
 800aa62:	f01a fcce 	bl	8025402 <memset>
  if(hspi->Instance==SPI4)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a5b      	ldr	r2, [pc, #364]	@ (800abd8 <HAL_SPI_MspInit+0x198>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	f040 80af 	bne.w	800abd0 <HAL_SPI_MspInit+0x190>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800aa72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800aa76:	f04f 0300 	mov.w	r3, #0
 800aa7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 800aa7e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800aa82:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800aa84:	f107 0310 	add.w	r3, r7, #16
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f009 fa27 	bl	8013edc <HAL_RCCEx_PeriphCLKConfig>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800aa94:	f7ff fd47 	bl	800a526 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800aa98:	4b50      	ldr	r3, [pc, #320]	@ (800abdc <HAL_SPI_MspInit+0x19c>)
 800aa9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa9e:	4a4f      	ldr	r2, [pc, #316]	@ (800abdc <HAL_SPI_MspInit+0x19c>)
 800aaa0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800aaa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800aaa8:	4b4c      	ldr	r3, [pc, #304]	@ (800abdc <HAL_SPI_MspInit+0x19c>)
 800aaaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aaae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800aab6:	4b49      	ldr	r3, [pc, #292]	@ (800abdc <HAL_SPI_MspInit+0x19c>)
 800aab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aabc:	4a47      	ldr	r2, [pc, #284]	@ (800abdc <HAL_SPI_MspInit+0x19c>)
 800aabe:	f043 0310 	orr.w	r3, r3, #16
 800aac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800aac6:	4b45      	ldr	r3, [pc, #276]	@ (800abdc <HAL_SPI_MspInit+0x19c>)
 800aac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aacc:	f003 0310 	and.w	r3, r3, #16
 800aad0:	60bb      	str	r3, [r7, #8]
 800aad2:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_NCS_Pin|GPIO_PIN_12|GPIO_PIN_14;
 800aad4:	f44f 43b0 	mov.w	r3, #22528	@ 0x5800
 800aad8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aadc:	2302      	movs	r3, #2
 800aade:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aae2:	2300      	movs	r3, #0
 800aae4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aae8:	2300      	movs	r3, #0
 800aaea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800aaee:	2305      	movs	r3, #5
 800aaf0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800aaf4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4839      	ldr	r0, [pc, #228]	@ (800abe0 <HAL_SPI_MspInit+0x1a0>)
 800aafc:	f006 fc28 	bl	8011350 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream3;
 800ab00:	4b38      	ldr	r3, [pc, #224]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab02:	4a39      	ldr	r2, [pc, #228]	@ (800abe8 <HAL_SPI_MspInit+0x1a8>)
 800ab04:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 800ab06:	4b37      	ldr	r3, [pc, #220]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab08:	2254      	movs	r2, #84	@ 0x54
 800ab0a:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab0c:	4b35      	ldr	r3, [pc, #212]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab0e:	2240      	movs	r2, #64	@ 0x40
 800ab10:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab12:	4b34      	ldr	r3, [pc, #208]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ab18:	4b32      	ldr	r3, [pc, #200]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab1e:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ab20:	4b30      	ldr	r3, [pc, #192]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab26:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ab28:	4b2e      	ldr	r3, [pc, #184]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ab2e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800ab30:	4b2c      	ldr	r3, [pc, #176]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ab36:	4b2b      	ldr	r3, [pc, #172]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab38:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ab3c:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ab3e:	4b29      	ldr	r3, [pc, #164]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800ab44:	4827      	ldr	r0, [pc, #156]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab46:	f003 fd25 	bl	800e594 <HAL_DMA_Init>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 800ab50:	f7ff fce9 	bl	800a526 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a23      	ldr	r2, [pc, #140]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab58:	679a      	str	r2, [r3, #120]	@ 0x78
 800ab5a:	4a22      	ldr	r2, [pc, #136]	@ (800abe4 <HAL_SPI_MspInit+0x1a4>)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream4;
 800ab60:	4b22      	ldr	r3, [pc, #136]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800ab62:	4a23      	ldr	r2, [pc, #140]	@ (800abf0 <HAL_SPI_MspInit+0x1b0>)
 800ab64:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 800ab66:	4b21      	ldr	r3, [pc, #132]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800ab68:	2253      	movs	r2, #83	@ 0x53
 800ab6a:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ab6c:	4b1f      	ldr	r3, [pc, #124]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab72:	4b1e      	ldr	r3, [pc, #120]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ab78:	4b1c      	ldr	r3, [pc, #112]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800ab7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab7e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ab80:	4b1a      	ldr	r3, [pc, #104]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800ab82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab86:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ab88:	4b18      	ldr	r3, [pc, #96]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800ab8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ab8e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800ab90:	4b16      	ldr	r3, [pc, #88]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ab96:	4b15      	ldr	r3, [pc, #84]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800ab98:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ab9c:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ab9e:	4b13      	ldr	r3, [pc, #76]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800aba4:	4811      	ldr	r0, [pc, #68]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800aba6:	f003 fcf5 	bl	800e594 <HAL_DMA_Init>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d001      	beq.n	800abb4 <HAL_SPI_MspInit+0x174>
    {
      Error_Handler();
 800abb0:	f7ff fcb9 	bl	800a526 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a0d      	ldr	r2, [pc, #52]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800abb8:	67da      	str	r2, [r3, #124]	@ 0x7c
 800abba:	4a0c      	ldr	r2, [pc, #48]	@ (800abec <HAL_SPI_MspInit+0x1ac>)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 800abc0:	2200      	movs	r2, #0
 800abc2:	2105      	movs	r1, #5
 800abc4:	2054      	movs	r0, #84	@ 0x54
 800abc6:	f003 f841 	bl	800dc4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800abca:	2054      	movs	r0, #84	@ 0x54
 800abcc:	f003 f858 	bl	800dc80 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 800abd0:	bf00      	nop
 800abd2:	37e0      	adds	r7, #224	@ 0xe0
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	40013400 	.word	0x40013400
 800abdc:	58024400 	.word	0x58024400
 800abe0:	58021000 	.word	0x58021000
 800abe4:	24018348 	.word	0x24018348
 800abe8:	40020058 	.word	0x40020058
 800abec:	240183c0 	.word	0x240183c0
 800abf0:	40020070 	.word	0x40020070

0800abf4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a3f      	ldr	r2, [pc, #252]	@ (800ad00 <HAL_TIM_Base_MspInit+0x10c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d147      	bne.n	800ac96 <HAL_TIM_Base_MspInit+0xa2>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ac06:	4b3f      	ldr	r3, [pc, #252]	@ (800ad04 <HAL_TIM_Base_MspInit+0x110>)
 800ac08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac0c:	4a3d      	ldr	r2, [pc, #244]	@ (800ad04 <HAL_TIM_Base_MspInit+0x110>)
 800ac0e:	f043 0302 	orr.w	r3, r3, #2
 800ac12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ac16:	4b3b      	ldr	r3, [pc, #236]	@ (800ad04 <HAL_TIM_Base_MspInit+0x110>)
 800ac18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac1c:	f003 0302 	and.w	r3, r3, #2
 800ac20:	617b      	str	r3, [r7, #20]
 800ac22:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 800ac24:	4b38      	ldr	r3, [pc, #224]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac26:	4a39      	ldr	r2, [pc, #228]	@ (800ad0c <HAL_TIM_Base_MspInit+0x118>)
 800ac28:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800ac2a:	4b37      	ldr	r3, [pc, #220]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac2c:	2217      	movs	r2, #23
 800ac2e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac30:	4b35      	ldr	r3, [pc, #212]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac32:	2240      	movs	r2, #64	@ 0x40
 800ac34:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac36:	4b34      	ldr	r3, [pc, #208]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ac3c:	4b32      	ldr	r3, [pc, #200]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ac42:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ac44:	4b30      	ldr	r3, [pc, #192]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac4a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ac4c:	4b2e      	ldr	r3, [pc, #184]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ac52:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800ac54:	4b2c      	ldr	r3, [pc, #176]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800ac5a:	4b2b      	ldr	r3, [pc, #172]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ac60:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ac62:	4b29      	ldr	r3, [pc, #164]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800ac68:	4827      	ldr	r0, [pc, #156]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac6a:	f003 fc93 	bl	800e594 <HAL_DMA_Init>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800ac74:	f7ff fc57 	bl	800a526 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a23      	ldr	r2, [pc, #140]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac7c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac7e:	4a22      	ldr	r2, [pc, #136]	@ (800ad08 <HAL_TIM_Base_MspInit+0x114>)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800ac84:	2200      	movs	r2, #0
 800ac86:	2105      	movs	r1, #5
 800ac88:	201d      	movs	r0, #29
 800ac8a:	f002 ffdf 	bl	800dc4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ac8e:	201d      	movs	r0, #29
 800ac90:	f002 fff6 	bl	800dc80 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800ac94:	e030      	b.n	800acf8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM6)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a1d      	ldr	r2, [pc, #116]	@ (800ad10 <HAL_TIM_Base_MspInit+0x11c>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d117      	bne.n	800acd0 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800aca0:	4b18      	ldr	r3, [pc, #96]	@ (800ad04 <HAL_TIM_Base_MspInit+0x110>)
 800aca2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aca6:	4a17      	ldr	r2, [pc, #92]	@ (800ad04 <HAL_TIM_Base_MspInit+0x110>)
 800aca8:	f043 0310 	orr.w	r3, r3, #16
 800acac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800acb0:	4b14      	ldr	r3, [pc, #80]	@ (800ad04 <HAL_TIM_Base_MspInit+0x110>)
 800acb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800acb6:	f003 0310 	and.w	r3, r3, #16
 800acba:	613b      	str	r3, [r7, #16]
 800acbc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800acbe:	2200      	movs	r2, #0
 800acc0:	2105      	movs	r1, #5
 800acc2:	2036      	movs	r0, #54	@ 0x36
 800acc4:	f002 ffc2 	bl	800dc4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800acc8:	2036      	movs	r0, #54	@ 0x36
 800acca:	f002 ffd9 	bl	800dc80 <HAL_NVIC_EnableIRQ>
}
 800acce:	e013      	b.n	800acf8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM8)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a0f      	ldr	r2, [pc, #60]	@ (800ad14 <HAL_TIM_Base_MspInit+0x120>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d10e      	bne.n	800acf8 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800acda:	4b0a      	ldr	r3, [pc, #40]	@ (800ad04 <HAL_TIM_Base_MspInit+0x110>)
 800acdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ace0:	4a08      	ldr	r2, [pc, #32]	@ (800ad04 <HAL_TIM_Base_MspInit+0x110>)
 800ace2:	f043 0302 	orr.w	r3, r3, #2
 800ace6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800acea:	4b06      	ldr	r3, [pc, #24]	@ (800ad04 <HAL_TIM_Base_MspInit+0x110>)
 800acec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800acf0:	f003 0302 	and.w	r3, r3, #2
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	68fb      	ldr	r3, [r7, #12]
}
 800acf8:	bf00      	nop
 800acfa:	3718      	adds	r7, #24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	40000400 	.word	0x40000400
 800ad04:	58024400 	.word	0x58024400
 800ad08:	2401851c 	.word	0x2401851c
 800ad0c:	40020010 	.word	0x40020010
 800ad10:	40001000 	.word	0x40001000
 800ad14:	40010400 	.word	0x40010400

0800ad18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b088      	sub	sp, #32
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad20:	f107 030c 	add.w	r3, r7, #12
 800ad24:	2200      	movs	r2, #0
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	605a      	str	r2, [r3, #4]
 800ad2a:	609a      	str	r2, [r3, #8]
 800ad2c:	60da      	str	r2, [r3, #12]
 800ad2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a12      	ldr	r2, [pc, #72]	@ (800ad80 <HAL_TIM_MspPostInit+0x68>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d11e      	bne.n	800ad78 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad3a:	4b12      	ldr	r3, [pc, #72]	@ (800ad84 <HAL_TIM_MspPostInit+0x6c>)
 800ad3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad40:	4a10      	ldr	r2, [pc, #64]	@ (800ad84 <HAL_TIM_MspPostInit+0x6c>)
 800ad42:	f043 0304 	orr.w	r3, r3, #4
 800ad46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ad4a:	4b0e      	ldr	r3, [pc, #56]	@ (800ad84 <HAL_TIM_MspPostInit+0x6c>)
 800ad4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad50:	f003 0304 	and.w	r3, r3, #4
 800ad54:	60bb      	str	r3, [r7, #8]
 800ad56:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LED_DATA_Pin;
 800ad58:	2340      	movs	r3, #64	@ 0x40
 800ad5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad60:	2300      	movs	r3, #0
 800ad62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad64:	2300      	movs	r3, #0
 800ad66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ad68:	2302      	movs	r3, #2
 800ad6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DATA_GPIO_Port, &GPIO_InitStruct);
 800ad6c:	f107 030c 	add.w	r3, r7, #12
 800ad70:	4619      	mov	r1, r3
 800ad72:	4805      	ldr	r0, [pc, #20]	@ (800ad88 <HAL_TIM_MspPostInit+0x70>)
 800ad74:	f006 faec 	bl	8011350 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800ad78:	bf00      	nop
 800ad7a:	3720      	adds	r7, #32
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	40000400 	.word	0x40000400
 800ad84:	58024400 	.word	0x58024400
 800ad88:	58020800 	.word	0x58020800

0800ad8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b0b8      	sub	sp, #224	@ 0xe0
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad94:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800ad98:	2200      	movs	r2, #0
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	605a      	str	r2, [r3, #4]
 800ad9e:	609a      	str	r2, [r3, #8]
 800ada0:	60da      	str	r2, [r3, #12]
 800ada2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ada4:	f107 0310 	add.w	r3, r7, #16
 800ada8:	22b8      	movs	r2, #184	@ 0xb8
 800adaa:	2100      	movs	r1, #0
 800adac:	4618      	mov	r0, r3
 800adae:	f01a fb28 	bl	8025402 <memset>
  if(huart->Instance==UART5)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a5a      	ldr	r2, [pc, #360]	@ (800af20 <HAL_UART_MspInit+0x194>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	f040 80ad 	bne.w	800af18 <HAL_UART_MspInit+0x18c>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800adbe:	f04f 0202 	mov.w	r2, #2
 800adc2:	f04f 0300 	mov.w	r3, #0
 800adc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800adca:	2300      	movs	r3, #0
 800adcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800add0:	f107 0310 	add.w	r3, r7, #16
 800add4:	4618      	mov	r0, r3
 800add6:	f009 f881 	bl	8013edc <HAL_RCCEx_PeriphCLKConfig>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d001      	beq.n	800ade4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800ade0:	f7ff fba1 	bl	800a526 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800ade4:	4b4f      	ldr	r3, [pc, #316]	@ (800af24 <HAL_UART_MspInit+0x198>)
 800ade6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800adea:	4a4e      	ldr	r2, [pc, #312]	@ (800af24 <HAL_UART_MspInit+0x198>)
 800adec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800adf0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800adf4:	4b4b      	ldr	r3, [pc, #300]	@ (800af24 <HAL_UART_MspInit+0x198>)
 800adf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800adfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae02:	4b48      	ldr	r3, [pc, #288]	@ (800af24 <HAL_UART_MspInit+0x198>)
 800ae04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae08:	4a46      	ldr	r2, [pc, #280]	@ (800af24 <HAL_UART_MspInit+0x198>)
 800ae0a:	f043 0302 	orr.w	r3, r3, #2
 800ae0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ae12:	4b44      	ldr	r3, [pc, #272]	@ (800af24 <HAL_UART_MspInit+0x198>)
 800ae14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae18:	f003 0302 	and.w	r3, r3, #2
 800ae1c:	60bb      	str	r3, [r7, #8]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = UART5_RX_Pin|GPIO_PIN_13;
 800ae20:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800ae24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae28:	2302      	movs	r3, #2
 800ae2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae34:	2300      	movs	r3, #0
 800ae36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800ae3a:	230e      	movs	r3, #14
 800ae3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae40:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800ae44:	4619      	mov	r1, r3
 800ae46:	4838      	ldr	r0, [pc, #224]	@ (800af28 <HAL_UART_MspInit+0x19c>)
 800ae48:	f006 fa82 	bl	8011350 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream6;
 800ae4c:	4b37      	ldr	r3, [pc, #220]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800ae4e:	4a38      	ldr	r2, [pc, #224]	@ (800af30 <HAL_UART_MspInit+0x1a4>)
 800ae50:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800ae52:	4b36      	ldr	r3, [pc, #216]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800ae54:	2241      	movs	r2, #65	@ 0x41
 800ae56:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae58:	4b34      	ldr	r3, [pc, #208]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae5e:	4b33      	ldr	r3, [pc, #204]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ae64:	4b31      	ldr	r3, [pc, #196]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800ae66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ae6a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae6c:	4b2f      	ldr	r3, [pc, #188]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae72:	4b2e      	ldr	r3, [pc, #184]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800ae78:	4b2c      	ldr	r3, [pc, #176]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800ae7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ae7e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ae80:	4b2a      	ldr	r3, [pc, #168]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800ae82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ae86:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ae88:	4b28      	ldr	r3, [pc, #160]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800ae8e:	4827      	ldr	r0, [pc, #156]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800ae90:	f003 fb80 	bl	800e594 <HAL_DMA_Init>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800ae9a:	f7ff fb44 	bl	800a526 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a22      	ldr	r2, [pc, #136]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800aea2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800aea6:	4a21      	ldr	r2, [pc, #132]	@ (800af2c <HAL_UART_MspInit+0x1a0>)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800aeac:	4b21      	ldr	r3, [pc, #132]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800aeae:	4a22      	ldr	r2, [pc, #136]	@ (800af38 <HAL_UART_MspInit+0x1ac>)
 800aeb0:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 800aeb2:	4b20      	ldr	r3, [pc, #128]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800aeb4:	2242      	movs	r2, #66	@ 0x42
 800aeb6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aeb8:	4b1e      	ldr	r3, [pc, #120]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800aeba:	2240      	movs	r2, #64	@ 0x40
 800aebc:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aebe:	4b1d      	ldr	r3, [pc, #116]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aec4:	4b1b      	ldr	r3, [pc, #108]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800aec6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800aeca:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aecc:	4b19      	ldr	r3, [pc, #100]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800aece:	2200      	movs	r2, #0
 800aed0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aed2:	4b18      	ldr	r3, [pc, #96]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800aed8:	4b16      	ldr	r3, [pc, #88]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800aede:	4b15      	ldr	r3, [pc, #84]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800aee0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800aee4:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aee6:	4b13      	ldr	r3, [pc, #76]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800aeec:	4811      	ldr	r0, [pc, #68]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800aeee:	f003 fb51 	bl	800e594 <HAL_DMA_Init>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 800aef8:	f7ff fb15 	bl	800a526 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a0d      	ldr	r2, [pc, #52]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800af00:	67da      	str	r2, [r3, #124]	@ 0x7c
 800af02:	4a0c      	ldr	r2, [pc, #48]	@ (800af34 <HAL_UART_MspInit+0x1a8>)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800af08:	2200      	movs	r2, #0
 800af0a:	2105      	movs	r1, #5
 800af0c:	2035      	movs	r0, #53	@ 0x35
 800af0e:	f002 fe9d 	bl	800dc4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800af12:	2035      	movs	r0, #53	@ 0x35
 800af14:	f002 feb4 	bl	800dc80 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 800af18:	bf00      	nop
 800af1a:	37e0      	adds	r7, #224	@ 0xe0
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	40005000 	.word	0x40005000
 800af24:	58024400 	.word	0x58024400
 800af28:	58020400 	.word	0x58020400
 800af2c:	24018628 	.word	0x24018628
 800af30:	400200a0 	.word	0x400200a0
 800af34:	240186a0 	.word	0x240186a0
 800af38:	400200b8 	.word	0x400200b8

0800af3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b090      	sub	sp, #64	@ 0x40
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b0f      	cmp	r3, #15
 800af48:	d827      	bhi.n	800af9a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800af4a:	2200      	movs	r2, #0
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	201c      	movs	r0, #28
 800af50:	f002 fe7c 	bl	800dc4c <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800af54:	201c      	movs	r0, #28
 800af56:	f002 fe93 	bl	800dc80 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800af5a:	4a29      	ldr	r2, [pc, #164]	@ (800b000 <HAL_InitTick+0xc4>)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800af60:	4b28      	ldr	r3, [pc, #160]	@ (800b004 <HAL_InitTick+0xc8>)
 800af62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af66:	4a27      	ldr	r2, [pc, #156]	@ (800b004 <HAL_InitTick+0xc8>)
 800af68:	f043 0301 	orr.w	r3, r3, #1
 800af6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800af70:	4b24      	ldr	r3, [pc, #144]	@ (800b004 <HAL_InitTick+0xc8>)
 800af72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800af7e:	f107 0210 	add.w	r2, r7, #16
 800af82:	f107 0314 	add.w	r3, r7, #20
 800af86:	4611      	mov	r1, r2
 800af88:	4618      	mov	r0, r3
 800af8a:	f008 ff65 	bl	8013e58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800af8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af90:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800af92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af94:	2b00      	cmp	r3, #0
 800af96:	d106      	bne.n	800afa6 <HAL_InitTick+0x6a>
 800af98:	e001      	b.n	800af9e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e02c      	b.n	800aff8 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800af9e:	f008 ff2f 	bl	8013e00 <HAL_RCC_GetPCLK1Freq>
 800afa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800afa4:	e004      	b.n	800afb0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800afa6:	f008 ff2b 	bl	8013e00 <HAL_RCC_GetPCLK1Freq>
 800afaa:	4603      	mov	r3, r0
 800afac:	005b      	lsls	r3, r3, #1
 800afae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800afb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afb2:	4a15      	ldr	r2, [pc, #84]	@ (800b008 <HAL_InitTick+0xcc>)
 800afb4:	fba2 2303 	umull	r2, r3, r2, r3
 800afb8:	0c9b      	lsrs	r3, r3, #18
 800afba:	3b01      	subs	r3, #1
 800afbc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800afbe:	4b13      	ldr	r3, [pc, #76]	@ (800b00c <HAL_InitTick+0xd0>)
 800afc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800afc4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800afc6:	4b11      	ldr	r3, [pc, #68]	@ (800b00c <HAL_InitTick+0xd0>)
 800afc8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800afcc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800afce:	4a0f      	ldr	r2, [pc, #60]	@ (800b00c <HAL_InitTick+0xd0>)
 800afd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800afd4:	4b0d      	ldr	r3, [pc, #52]	@ (800b00c <HAL_InitTick+0xd0>)
 800afd6:	2200      	movs	r2, #0
 800afd8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800afda:	4b0c      	ldr	r3, [pc, #48]	@ (800b00c <HAL_InitTick+0xd0>)
 800afdc:	2200      	movs	r2, #0
 800afde:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800afe0:	480a      	ldr	r0, [pc, #40]	@ (800b00c <HAL_InitTick+0xd0>)
 800afe2:	f00c f908 	bl	80171f6 <HAL_TIM_Base_Init>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d104      	bne.n	800aff6 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800afec:	4807      	ldr	r0, [pc, #28]	@ (800b00c <HAL_InitTick+0xd0>)
 800afee:	f00c f9ff 	bl	80173f0 <HAL_TIM_Base_Start_IT>
 800aff2:	4603      	mov	r3, r0
 800aff4:	e000      	b.n	800aff8 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3740      	adds	r7, #64	@ 0x40
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	24000298 	.word	0x24000298
 800b004:	58024400 	.word	0x58024400
 800b008:	431bde83 	.word	0x431bde83
 800b00c:	24018738 	.word	0x24018738

0800b010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b014:	bf00      	nop
 800b016:	e7fd      	b.n	800b014 <NMI_Handler+0x4>

0800b018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b018:	b480      	push	{r7}
 800b01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b01c:	bf00      	nop
 800b01e:	e7fd      	b.n	800b01c <HardFault_Handler+0x4>

0800b020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b020:	b480      	push	{r7}
 800b022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b024:	bf00      	nop
 800b026:	e7fd      	b.n	800b024 <MemManage_Handler+0x4>

0800b028 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b02c:	bf00      	nop
 800b02e:	e7fd      	b.n	800b02c <BusFault_Handler+0x4>

0800b030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b030:	b480      	push	{r7}
 800b032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b034:	bf00      	nop
 800b036:	e7fd      	b.n	800b034 <UsageFault_Handler+0x4>

0800b038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b038:	b480      	push	{r7}
 800b03a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b03c:	bf00      	nop
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PAMP_FAULTZ_Pin);
 800b04a:	2004      	movs	r0, #4
 800b04c:	f006 fb41 	bl	80116d2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800b050:	bf00      	nop
 800b052:	bd80      	pop	{r7, pc}

0800b054 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800b058:	4802      	ldr	r0, [pc, #8]	@ (800b064 <DMA1_Stream0_IRQHandler+0x10>)
 800b05a:	f004 fdc1 	bl	800fbe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800b05e:	bf00      	nop
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	2401851c 	.word	0x2401851c

0800b068 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800b06c:	4802      	ldr	r0, [pc, #8]	@ (800b078 <DMA1_Stream1_IRQHandler+0x10>)
 800b06e:	f004 fdb7 	bl	800fbe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b072:	bf00      	nop
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	24018158 	.word	0x24018158

0800b07c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800b080:	4802      	ldr	r0, [pc, #8]	@ (800b08c <DMA1_Stream2_IRQHandler+0x10>)
 800b082:	f004 fdad 	bl	800fbe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800b086:	bf00      	nop
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	240181d0 	.word	0x240181d0

0800b090 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800b094:	4802      	ldr	r0, [pc, #8]	@ (800b0a0 <DMA1_Stream3_IRQHandler+0x10>)
 800b096:	f004 fda3 	bl	800fbe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800b09a:	bf00      	nop
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	24018348 	.word	0x24018348

0800b0a4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800b0a8:	4802      	ldr	r0, [pc, #8]	@ (800b0b4 <DMA1_Stream4_IRQHandler+0x10>)
 800b0aa:	f004 fd99 	bl	800fbe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800b0ae:	bf00      	nop
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	240183c0 	.word	0x240183c0

0800b0b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800b0bc:	4802      	ldr	r0, [pc, #8]	@ (800b0c8 <DMA1_Stream5_IRQHandler+0x10>)
 800b0be:	f004 fd8f 	bl	800fbe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800b0c2:	bf00      	nop
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	240180cc 	.word	0x240180cc

0800b0cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800b0d0:	4802      	ldr	r0, [pc, #8]	@ (800b0dc <DMA1_Stream6_IRQHandler+0x10>)
 800b0d2:	f004 fd85 	bl	800fbe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800b0d6:	bf00      	nop
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	24018628 	.word	0x24018628

0800b0e0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800b0e4:	4802      	ldr	r0, [pc, #8]	@ (800b0f0 <ADC_IRQHandler+0x10>)
 800b0e6:	f001 f97f 	bl	800c3e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800b0ea:	bf00      	nop
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	24017f74 	.word	0x24017f74

0800b0f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b0f8:	4802      	ldr	r0, [pc, #8]	@ (800b104 <TIM2_IRQHandler+0x10>)
 800b0fa:	f00c fd8d 	bl	8017c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b0fe:	bf00      	nop
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	24018738 	.word	0x24018738

0800b108 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b10c:	4802      	ldr	r0, [pc, #8]	@ (800b118 <TIM3_IRQHandler+0x10>)
 800b10e:	f00c fd83 	bl	8017c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b112:	bf00      	nop
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	24018438 	.word	0x24018438

0800b11c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800b120:	4802      	ldr	r0, [pc, #8]	@ (800b12c <DMA1_Stream7_IRQHandler+0x10>)
 800b122:	f004 fd5d 	bl	800fbe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800b126:	bf00      	nop
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	240186a0 	.word	0x240186a0

0800b130 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  if (__HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE)) {
 800b134:	4b08      	ldr	r3, [pc, #32]	@ (800b158 <UART5_IRQHandler+0x28>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	69db      	ldr	r3, [r3, #28]
 800b13a:	f003 0310 	and.w	r3, r3, #16
 800b13e:	2b10      	cmp	r3, #16
 800b140:	d105      	bne.n	800b14e <UART5_IRQHandler+0x1e>
      __HAL_UART_CLEAR_IDLEFLAG(&huart5);
 800b142:	4b05      	ldr	r3, [pc, #20]	@ (800b158 <UART5_IRQHandler+0x28>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2210      	movs	r2, #16
 800b148:	621a      	str	r2, [r3, #32]

      // Process any received data when line goes idle
      DAU_GetNewData();
 800b14a:	f7fe f86f 	bl	800922c <DAU_GetNewData>
  }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800b14e:	4802      	ldr	r0, [pc, #8]	@ (800b158 <UART5_IRQHandler+0x28>)
 800b150:	f00d ff96 	bl	8019080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800b154:	bf00      	nop
 800b156:	bd80      	pop	{r7, pc}
 800b158:	24018594 	.word	0x24018594

0800b15c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800b160:	4803      	ldr	r0, [pc, #12]	@ (800b170 <TIM6_DAC_IRQHandler+0x14>)
 800b162:	f002 ffbc 	bl	800e0de <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800b166:	4803      	ldr	r0, [pc, #12]	@ (800b174 <TIM6_DAC_IRQHandler+0x18>)
 800b168:	f00c fd56 	bl	8017c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b16c:	bf00      	nop
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	24018144 	.word	0x24018144
 800b174:	24018484 	.word	0x24018484

0800b178 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b17c:	4802      	ldr	r0, [pc, #8]	@ (800b188 <DMA2_Stream0_IRQHandler+0x10>)
 800b17e:	f004 fd2f 	bl	800fbe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b182:	bf00      	nop
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	24018054 	.word	0x24018054

0800b18c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800b190:	4802      	ldr	r0, [pc, #8]	@ (800b19c <OTG_HS_IRQHandler+0x10>)
 800b192:	f006 fd52 	bl	8011c3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800b196:	bf00      	nop
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	2402a464 	.word	0x2402a464

0800b1a0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800b1a4:	4802      	ldr	r0, [pc, #8]	@ (800b1b0 <SPI4_IRQHandler+0x10>)
 800b1a6:	f00b fce5 	bl	8016b74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800b1aa:	bf00      	nop
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	240182c0 	.word	0x240182c0

0800b1b4 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800b1b8:	4802      	ldr	r0, [pc, #8]	@ (800b1c4 <ADC3_IRQHandler+0x10>)
 800b1ba:	f001 f915 	bl	800c3e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800b1be:	bf00      	nop
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	24017fe4 	.word	0x24017fe4

0800b1c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	af00      	add	r7, sp, #0
  return 1;
 800b1cc:	2301      	movs	r3, #1
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <_kill>:

int _kill(int pid, int sig)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b1e2:	f01a f9d1 	bl	8025588 <__errno>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2216      	movs	r2, #22
 800b1ea:	601a      	str	r2, [r3, #0]
  return -1;
 800b1ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <_exit>:

void _exit (int status)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b200:	f04f 31ff 	mov.w	r1, #4294967295
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7ff ffe7 	bl	800b1d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b20a:	bf00      	nop
 800b20c:	e7fd      	b.n	800b20a <_exit+0x12>

0800b20e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b086      	sub	sp, #24
 800b212:	af00      	add	r7, sp, #0
 800b214:	60f8      	str	r0, [r7, #12]
 800b216:	60b9      	str	r1, [r7, #8]
 800b218:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b21a:	2300      	movs	r3, #0
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	e00a      	b.n	800b236 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b220:	f3af 8000 	nop.w
 800b224:	4601      	mov	r1, r0
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	60ba      	str	r2, [r7, #8]
 800b22c:	b2ca      	uxtb	r2, r1
 800b22e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	3301      	adds	r3, #1
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	dbf0      	blt.n	800b220 <_read+0x12>
  }

  return len;
 800b23e:	687b      	ldr	r3, [r7, #4]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3718      	adds	r7, #24
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b254:	2300      	movs	r3, #0
 800b256:	617b      	str	r3, [r7, #20]
 800b258:	e009      	b.n	800b26e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	1c5a      	adds	r2, r3, #1
 800b25e:	60ba      	str	r2, [r7, #8]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	4618      	mov	r0, r3
 800b264:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	3301      	adds	r3, #1
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	429a      	cmp	r2, r3
 800b274:	dbf1      	blt.n	800b25a <_write+0x12>
  }
  return len;
 800b276:	687b      	ldr	r3, [r7, #4]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <_close>:

int _close(int file)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b2a8:	605a      	str	r2, [r3, #4]
  return 0;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <_isatty>:

int _isatty(int file)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b2c0:	2301      	movs	r3, #1
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b085      	sub	sp, #20
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	60f8      	str	r0, [r7, #12]
 800b2d6:	60b9      	str	r1, [r7, #8]
 800b2d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b2f0:	4a14      	ldr	r2, [pc, #80]	@ (800b344 <_sbrk+0x5c>)
 800b2f2:	4b15      	ldr	r3, [pc, #84]	@ (800b348 <_sbrk+0x60>)
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b2fc:	4b13      	ldr	r3, [pc, #76]	@ (800b34c <_sbrk+0x64>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d102      	bne.n	800b30a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b304:	4b11      	ldr	r3, [pc, #68]	@ (800b34c <_sbrk+0x64>)
 800b306:	4a12      	ldr	r2, [pc, #72]	@ (800b350 <_sbrk+0x68>)
 800b308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b30a:	4b10      	ldr	r3, [pc, #64]	@ (800b34c <_sbrk+0x64>)
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4413      	add	r3, r2
 800b312:	693a      	ldr	r2, [r7, #16]
 800b314:	429a      	cmp	r2, r3
 800b316:	d207      	bcs.n	800b328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b318:	f01a f936 	bl	8025588 <__errno>
 800b31c:	4603      	mov	r3, r0
 800b31e:	220c      	movs	r2, #12
 800b320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b322:	f04f 33ff 	mov.w	r3, #4294967295
 800b326:	e009      	b.n	800b33c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b328:	4b08      	ldr	r3, [pc, #32]	@ (800b34c <_sbrk+0x64>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b32e:	4b07      	ldr	r3, [pc, #28]	@ (800b34c <_sbrk+0x64>)
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4413      	add	r3, r2
 800b336:	4a05      	ldr	r2, [pc, #20]	@ (800b34c <_sbrk+0x64>)
 800b338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b33a:	68fb      	ldr	r3, [r7, #12]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3718      	adds	r7, #24
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	24050000 	.word	0x24050000
 800b348:	00000400 	.word	0x00000400
 800b34c:	24018784 	.word	0x24018784
 800b350:	2402acb8 	.word	0x2402acb8

0800b354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b354:	b480      	push	{r7}
 800b356:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b358:	4b3e      	ldr	r3, [pc, #248]	@ (800b454 <SystemInit+0x100>)
 800b35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b35e:	4a3d      	ldr	r2, [pc, #244]	@ (800b454 <SystemInit+0x100>)
 800b360:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b364:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b368:	4b3b      	ldr	r3, [pc, #236]	@ (800b458 <SystemInit+0x104>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 030f 	and.w	r3, r3, #15
 800b370:	2b06      	cmp	r3, #6
 800b372:	d807      	bhi.n	800b384 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b374:	4b38      	ldr	r3, [pc, #224]	@ (800b458 <SystemInit+0x104>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f023 030f 	bic.w	r3, r3, #15
 800b37c:	4a36      	ldr	r2, [pc, #216]	@ (800b458 <SystemInit+0x104>)
 800b37e:	f043 0307 	orr.w	r3, r3, #7
 800b382:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b384:	4b35      	ldr	r3, [pc, #212]	@ (800b45c <SystemInit+0x108>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a34      	ldr	r2, [pc, #208]	@ (800b45c <SystemInit+0x108>)
 800b38a:	f043 0301 	orr.w	r3, r3, #1
 800b38e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b390:	4b32      	ldr	r3, [pc, #200]	@ (800b45c <SystemInit+0x108>)
 800b392:	2200      	movs	r2, #0
 800b394:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b396:	4b31      	ldr	r3, [pc, #196]	@ (800b45c <SystemInit+0x108>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	4930      	ldr	r1, [pc, #192]	@ (800b45c <SystemInit+0x108>)
 800b39c:	4b30      	ldr	r3, [pc, #192]	@ (800b460 <SystemInit+0x10c>)
 800b39e:	4013      	ands	r3, r2
 800b3a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b3a2:	4b2d      	ldr	r3, [pc, #180]	@ (800b458 <SystemInit+0x104>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f003 0308 	and.w	r3, r3, #8
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d007      	beq.n	800b3be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b3ae:	4b2a      	ldr	r3, [pc, #168]	@ (800b458 <SystemInit+0x104>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f023 030f 	bic.w	r3, r3, #15
 800b3b6:	4a28      	ldr	r2, [pc, #160]	@ (800b458 <SystemInit+0x104>)
 800b3b8:	f043 0307 	orr.w	r3, r3, #7
 800b3bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b3be:	4b27      	ldr	r3, [pc, #156]	@ (800b45c <SystemInit+0x108>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b3c4:	4b25      	ldr	r3, [pc, #148]	@ (800b45c <SystemInit+0x108>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b3ca:	4b24      	ldr	r3, [pc, #144]	@ (800b45c <SystemInit+0x108>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b3d0:	4b22      	ldr	r3, [pc, #136]	@ (800b45c <SystemInit+0x108>)
 800b3d2:	4a24      	ldr	r2, [pc, #144]	@ (800b464 <SystemInit+0x110>)
 800b3d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b3d6:	4b21      	ldr	r3, [pc, #132]	@ (800b45c <SystemInit+0x108>)
 800b3d8:	4a23      	ldr	r2, [pc, #140]	@ (800b468 <SystemInit+0x114>)
 800b3da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b3dc:	4b1f      	ldr	r3, [pc, #124]	@ (800b45c <SystemInit+0x108>)
 800b3de:	4a23      	ldr	r2, [pc, #140]	@ (800b46c <SystemInit+0x118>)
 800b3e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b3e2:	4b1e      	ldr	r3, [pc, #120]	@ (800b45c <SystemInit+0x108>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b3e8:	4b1c      	ldr	r3, [pc, #112]	@ (800b45c <SystemInit+0x108>)
 800b3ea:	4a20      	ldr	r2, [pc, #128]	@ (800b46c <SystemInit+0x118>)
 800b3ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b3ee:	4b1b      	ldr	r3, [pc, #108]	@ (800b45c <SystemInit+0x108>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b3f4:	4b19      	ldr	r3, [pc, #100]	@ (800b45c <SystemInit+0x108>)
 800b3f6:	4a1d      	ldr	r2, [pc, #116]	@ (800b46c <SystemInit+0x118>)
 800b3f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b3fa:	4b18      	ldr	r3, [pc, #96]	@ (800b45c <SystemInit+0x108>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b400:	4b16      	ldr	r3, [pc, #88]	@ (800b45c <SystemInit+0x108>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a15      	ldr	r2, [pc, #84]	@ (800b45c <SystemInit+0x108>)
 800b406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b40a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b40c:	4b13      	ldr	r3, [pc, #76]	@ (800b45c <SystemInit+0x108>)
 800b40e:	2200      	movs	r2, #0
 800b410:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800b412:	4b12      	ldr	r3, [pc, #72]	@ (800b45c <SystemInit+0x108>)
 800b414:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b418:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d113      	bne.n	800b448 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800b420:	4b0e      	ldr	r3, [pc, #56]	@ (800b45c <SystemInit+0x108>)
 800b422:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b426:	4a0d      	ldr	r2, [pc, #52]	@ (800b45c <SystemInit+0x108>)
 800b428:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b42c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b430:	4b0f      	ldr	r3, [pc, #60]	@ (800b470 <SystemInit+0x11c>)
 800b432:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800b436:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800b438:	4b08      	ldr	r3, [pc, #32]	@ (800b45c <SystemInit+0x108>)
 800b43a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b43e:	4a07      	ldr	r2, [pc, #28]	@ (800b45c <SystemInit+0x108>)
 800b440:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b444:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800b448:	bf00      	nop
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	e000ed00 	.word	0xe000ed00
 800b458:	52002000 	.word	0x52002000
 800b45c:	58024400 	.word	0x58024400
 800b460:	eaf6ed7f 	.word	0xeaf6ed7f
 800b464:	02020200 	.word	0x02020200
 800b468:	01ff0000 	.word	0x01ff0000
 800b46c:	01010280 	.word	0x01010280
 800b470:	52004000 	.word	0x52004000

0800b474 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800b474:	b480      	push	{r7}
 800b476:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800b478:	4b09      	ldr	r3, [pc, #36]	@ (800b4a0 <ExitRun0Mode+0x2c>)
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	4a08      	ldr	r2, [pc, #32]	@ (800b4a0 <ExitRun0Mode+0x2c>)
 800b47e:	f043 0302 	orr.w	r3, r3, #2
 800b482:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800b484:	bf00      	nop
 800b486:	4b06      	ldr	r3, [pc, #24]	@ (800b4a0 <ExitRun0Mode+0x2c>)
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d0f9      	beq.n	800b486 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800b492:	bf00      	nop
 800b494:	bf00      	nop
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	58024800 	.word	0x58024800

0800b4a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800b4a4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800b4e0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800b4a8:	f7ff ffe4 	bl	800b474 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800b4ac:	f7ff ff52 	bl	800b354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b4b0:	480c      	ldr	r0, [pc, #48]	@ (800b4e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b4b2:	490d      	ldr	r1, [pc, #52]	@ (800b4e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b4b4:	4a0d      	ldr	r2, [pc, #52]	@ (800b4ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b4b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b4b8:	e002      	b.n	800b4c0 <LoopCopyDataInit>

0800b4ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b4ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b4bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b4be:	3304      	adds	r3, #4

0800b4c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b4c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b4c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b4c4:	d3f9      	bcc.n	800b4ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b4c6:	4a0a      	ldr	r2, [pc, #40]	@ (800b4f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b4c8:	4c0a      	ldr	r4, [pc, #40]	@ (800b4f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b4ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b4cc:	e001      	b.n	800b4d2 <LoopFillZerobss>

0800b4ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b4ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b4d0:	3204      	adds	r2, #4

0800b4d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b4d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b4d4:	d3fb      	bcc.n	800b4ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b4d6:	f01a f85d 	bl	8025594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b4da:	f7fe f97f 	bl	80097dc <main>
  bx  lr
 800b4de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b4e0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800b4e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800b4e8:	24000560 	.word	0x24000560
  ldr r2, =_sidata
 800b4ec:	0802c688 	.word	0x0802c688
  ldr r2, =_sbss
 800b4f0:	24000560 	.word	0x24000560
  ldr r4, =_ebss
 800b4f4:	2402acb4 	.word	0x2402acb4

0800b4f8 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b4f8:	e7fe      	b.n	800b4f8 <BDMA_Channel0_IRQHandler>
	...

0800b4fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b502:	2003      	movs	r0, #3
 800b504:	f002 fb97 	bl	800dc36 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b508:	f008 fad0 	bl	8013aac <HAL_RCC_GetSysClockFreq>
 800b50c:	4602      	mov	r2, r0
 800b50e:	4b15      	ldr	r3, [pc, #84]	@ (800b564 <HAL_Init+0x68>)
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	0a1b      	lsrs	r3, r3, #8
 800b514:	f003 030f 	and.w	r3, r3, #15
 800b518:	4913      	ldr	r1, [pc, #76]	@ (800b568 <HAL_Init+0x6c>)
 800b51a:	5ccb      	ldrb	r3, [r1, r3]
 800b51c:	f003 031f 	and.w	r3, r3, #31
 800b520:	fa22 f303 	lsr.w	r3, r2, r3
 800b524:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b526:	4b0f      	ldr	r3, [pc, #60]	@ (800b564 <HAL_Init+0x68>)
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	f003 030f 	and.w	r3, r3, #15
 800b52e:	4a0e      	ldr	r2, [pc, #56]	@ (800b568 <HAL_Init+0x6c>)
 800b530:	5cd3      	ldrb	r3, [r2, r3]
 800b532:	f003 031f 	and.w	r3, r3, #31
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	fa22 f303 	lsr.w	r3, r2, r3
 800b53c:	4a0b      	ldr	r2, [pc, #44]	@ (800b56c <HAL_Init+0x70>)
 800b53e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b540:	4a0b      	ldr	r2, [pc, #44]	@ (800b570 <HAL_Init+0x74>)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b546:	200f      	movs	r0, #15
 800b548:	f7ff fcf8 	bl	800af3c <HAL_InitTick>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e002      	b.n	800b55c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800b556:	f7fe ffed 	bl	800a534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	58024400 	.word	0x58024400
 800b568:	0802be58 	.word	0x0802be58
 800b56c:	24000294 	.word	0x24000294
 800b570:	24000290 	.word	0x24000290

0800b574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b574:	b480      	push	{r7}
 800b576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b578:	4b06      	ldr	r3, [pc, #24]	@ (800b594 <HAL_IncTick+0x20>)
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	461a      	mov	r2, r3
 800b57e:	4b06      	ldr	r3, [pc, #24]	@ (800b598 <HAL_IncTick+0x24>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4413      	add	r3, r2
 800b584:	4a04      	ldr	r2, [pc, #16]	@ (800b598 <HAL_IncTick+0x24>)
 800b586:	6013      	str	r3, [r2, #0]
}
 800b588:	bf00      	nop
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	2400029c 	.word	0x2400029c
 800b598:	24018788 	.word	0x24018788

0800b59c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
  return uwTick;
 800b5a0:	4b03      	ldr	r3, [pc, #12]	@ (800b5b0 <HAL_GetTick+0x14>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	24018788 	.word	0x24018788

0800b5b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b5bc:	f7ff ffee 	bl	800b59c <HAL_GetTick>
 800b5c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5cc:	d005      	beq.n	800b5da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b5ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b5f8 <HAL_Delay+0x44>)
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b5da:	bf00      	nop
 800b5dc:	f7ff ffde 	bl	800b59c <HAL_GetTick>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d8f7      	bhi.n	800b5dc <HAL_Delay+0x28>
  {
  }
}
 800b5ec:	bf00      	nop
 800b5ee:	bf00      	nop
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	2400029c 	.word	0x2400029c

0800b5fc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800b604:	4b06      	ldr	r3, [pc, #24]	@ (800b620 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f023 0202 	bic.w	r2, r3, #2
 800b60c:	4904      	ldr	r1, [pc, #16]	@ (800b620 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4313      	orrs	r3, r2
 800b612:	600b      	str	r3, [r1, #0]
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	58003c00 	.word	0x58003c00

0800b624 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 800b624:	b480      	push	{r7}
 800b626:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800b628:	4b05      	ldr	r3, [pc, #20]	@ (800b640 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a04      	ldr	r2, [pc, #16]	@ (800b640 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800b62e:	f023 0301 	bic.w	r3, r3, #1
 800b632:	6013      	str	r3, [r2, #0]
}
 800b634:	bf00      	nop
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	58003c00 	.word	0x58003c00

0800b644 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800b64e:	4b07      	ldr	r3, [pc, #28]	@ (800b66c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800b650:	685a      	ldr	r2, [r3, #4]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	43db      	mvns	r3, r3
 800b656:	401a      	ands	r2, r3
 800b658:	4904      	ldr	r1, [pc, #16]	@ (800b66c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	604b      	str	r3, [r1, #4]
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	58000400 	.word	0x58000400

0800b670 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	431a      	orrs	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	609a      	str	r2, [r3, #8]
}
 800b68a:	bf00      	nop
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b696:	b480      	push	{r7}
 800b698:	b083      	sub	sp, #12
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	609a      	str	r2, [r3, #8]
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a18      	ldr	r2, [pc, #96]	@ (800b748 <LL_ADC_SetChannelPreselection+0x70>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d027      	beq.n	800b73a <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d107      	bne.n	800b704 <LL_ADC_SetChannelPreselection+0x2c>
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	0e9b      	lsrs	r3, r3, #26
 800b6f8:	f003 031f 	and.w	r3, r3, #31
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b702:	e015      	b.n	800b730 <LL_ADC_SetChannelPreselection+0x58>
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	fa93 f3a3 	rbit	r3, r3
 800b70e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800b71a:	2320      	movs	r3, #32
 800b71c:	e003      	b.n	800b726 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	fab3 f383 	clz	r3, r3
 800b724:	b2db      	uxtb	r3, r3
 800b726:	f003 031f 	and.w	r3, r3, #31
 800b72a:	2201      	movs	r2, #1
 800b72c:	fa02 f303 	lsl.w	r3, r2, r3
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	69d2      	ldr	r2, [r2, #28]
 800b734:	431a      	orrs	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 800b73a:	bf00      	nop
 800b73c:	371c      	adds	r7, #28
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	58026000 	.word	0x58026000

0800b74c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
 800b758:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3360      	adds	r3, #96	@ 0x60
 800b75e:	461a      	mov	r2, r3
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4a10      	ldr	r2, [pc, #64]	@ (800b7ac <LL_ADC_SetOffset+0x60>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d10b      	bne.n	800b788 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800b786:	e00b      	b.n	800b7a0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	430b      	orrs	r3, r1
 800b79a:	431a      	orrs	r2, r3
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	601a      	str	r2, [r3, #0]
}
 800b7a0:	bf00      	nop
 800b7a2:	371c      	adds	r7, #28
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	58026000 	.word	0x58026000

0800b7b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3360      	adds	r3, #96	@ 0x60
 800b7be:	461a      	mov	r2, r3
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4413      	add	r3, r2
 800b7c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	f003 031f 	and.w	r3, r3, #31
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	611a      	str	r2, [r3, #16]
}
 800b802:	bf00      	nop
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
	...

0800b810 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800b810:	b480      	push	{r7}
 800b812:	b087      	sub	sp, #28
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	4a0c      	ldr	r2, [pc, #48]	@ (800b850 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d00e      	beq.n	800b842 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	3360      	adds	r3, #96	@ 0x60
 800b828:	461a      	mov	r2, r3
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	4413      	add	r3, r2
 800b830:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	431a      	orrs	r2, r3
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	601a      	str	r2, [r3, #0]
  }
}
 800b842:	bf00      	nop
 800b844:	371c      	adds	r7, #28
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	58026000 	.word	0x58026000

0800b854 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800b854:	b480      	push	{r7}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4a0c      	ldr	r2, [pc, #48]	@ (800b894 <LL_ADC_SetOffsetSaturation+0x40>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d10e      	bne.n	800b886 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3360      	adds	r3, #96	@ 0x60
 800b86c:	461a      	mov	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4413      	add	r3, r2
 800b874:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	431a      	orrs	r2, r3
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800b886:	bf00      	nop
 800b888:	371c      	adds	r7, #28
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	58026000 	.word	0x58026000

0800b898 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800b898:	b480      	push	{r7}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	4a0c      	ldr	r2, [pc, #48]	@ (800b8d8 <LL_ADC_SetOffsetSign+0x40>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d10e      	bne.n	800b8ca <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	3360      	adds	r3, #96	@ 0x60
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	4413      	add	r3, r2
 800b8b8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800b8ca:	bf00      	nop
 800b8cc:	371c      	adds	r7, #28
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	58026000 	.word	0x58026000

0800b8dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	3360      	adds	r3, #96	@ 0x60
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4413      	add	r3, r2
 800b8f4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	4a0c      	ldr	r2, [pc, #48]	@ (800b92c <LL_ADC_SetOffsetState+0x50>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d108      	bne.n	800b910 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	431a      	orrs	r2, r3
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800b90e:	e007      	b.n	800b920 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	431a      	orrs	r2, r3
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	601a      	str	r2, [r3, #0]
}
 800b920:	bf00      	nop
 800b922:	371c      	adds	r7, #28
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr
 800b92c:	58026000 	.word	0x58026000

0800b930 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b940:	2b00      	cmp	r3, #0
 800b942:	d101      	bne.n	800b948 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b944:	2301      	movs	r3, #1
 800b946:	e000      	b.n	800b94a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	370c      	adds	r7, #12
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b956:	b480      	push	{r7}
 800b958:	b087      	sub	sp, #28
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	60f8      	str	r0, [r7, #12]
 800b95e:	60b9      	str	r1, [r7, #8]
 800b960:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3330      	adds	r3, #48	@ 0x30
 800b966:	461a      	mov	r2, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	0a1b      	lsrs	r3, r3, #8
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	f003 030c 	and.w	r3, r3, #12
 800b972:	4413      	add	r3, r2
 800b974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	f003 031f 	and.w	r3, r3, #31
 800b980:	211f      	movs	r1, #31
 800b982:	fa01 f303 	lsl.w	r3, r1, r3
 800b986:	43db      	mvns	r3, r3
 800b988:	401a      	ands	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	0e9b      	lsrs	r3, r3, #26
 800b98e:	f003 011f 	and.w	r1, r3, #31
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	f003 031f 	and.w	r3, r3, #31
 800b998:	fa01 f303 	lsl.w	r3, r1, r3
 800b99c:	431a      	orrs	r2, r3
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b9a2:	bf00      	nop
 800b9a4:	371c      	adds	r7, #28
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b083      	sub	sp, #12
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	f023 0203 	bic.w	r2, r3, #3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	431a      	orrs	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	60da      	str	r2, [r3, #12]
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	f043 0201 	orr.w	r2, r3, #1
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	60da      	str	r2, [r3, #12]
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a08      	ldr	r2, [pc, #32]	@ (800ba24 <LL_ADC_REG_SetDMATransferMode+0x30>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d107      	bne.n	800ba16 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	f023 0203 	bic.w	r2, r3, #3
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	431a      	orrs	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	60da      	str	r2, [r3, #12]
  }
}
 800ba16:	bf00      	nop
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	58026000 	.word	0x58026000

0800ba28 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba34:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d101      	bne.n	800ba40 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e000      	b.n	800ba42 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b087      	sub	sp, #28
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	60f8      	str	r0, [r7, #12]
 800ba56:	60b9      	str	r1, [r7, #8]
 800ba58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	3314      	adds	r3, #20
 800ba5e:	461a      	mov	r2, r3
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	0e5b      	lsrs	r3, r3, #25
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	f003 0304 	and.w	r3, r3, #4
 800ba6a:	4413      	add	r3, r2
 800ba6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	0d1b      	lsrs	r3, r3, #20
 800ba76:	f003 031f 	and.w	r3, r3, #31
 800ba7a:	2107      	movs	r1, #7
 800ba7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba80:	43db      	mvns	r3, r3
 800ba82:	401a      	ands	r2, r3
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	0d1b      	lsrs	r3, r3, #20
 800ba88:	f003 031f 	and.w	r3, r3, #31
 800ba8c:	6879      	ldr	r1, [r7, #4]
 800ba8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ba92:	431a      	orrs	r2, r3
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800ba98:	bf00      	nop
 800ba9a:	371c      	adds	r7, #28
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4a1a      	ldr	r2, [pc, #104]	@ (800bb1c <LL_ADC_SetChannelSingleDiff+0x78>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d115      	bne.n	800bae4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bac4:	43db      	mvns	r3, r3
 800bac6:	401a      	ands	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f003 0318 	and.w	r3, r3, #24
 800bace:	4914      	ldr	r1, [pc, #80]	@ (800bb20 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800bad0:	40d9      	lsrs	r1, r3
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	400b      	ands	r3, r1
 800bad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bada:	431a      	orrs	r2, r3
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800bae2:	e014      	b.n	800bb0e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800baf0:	43db      	mvns	r3, r3
 800baf2:	401a      	ands	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f003 0318 	and.w	r3, r3, #24
 800bafa:	4909      	ldr	r1, [pc, #36]	@ (800bb20 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800bafc:	40d9      	lsrs	r1, r3
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	400b      	ands	r3, r1
 800bb02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb06:	431a      	orrs	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800bb0e:	bf00      	nop
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	58026000 	.word	0x58026000
 800bb20:	000fffff 	.word	0x000fffff

0800bb24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f003 031f 	and.w	r3, r3, #31
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	689a      	ldr	r2, [r3, #8]
 800bb68:	4b04      	ldr	r3, [pc, #16]	@ (800bb7c <LL_ADC_DisableDeepPowerDown+0x20>)
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	6093      	str	r3, [r2, #8]
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr
 800bb7c:	5fffffc0 	.word	0x5fffffc0

0800bb80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb94:	d101      	bne.n	800bb9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800bb96:	2301      	movs	r3, #1
 800bb98:	e000      	b.n	800bb9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	689a      	ldr	r2, [r3, #8]
 800bbb4:	4b05      	ldr	r3, [pc, #20]	@ (800bbcc <LL_ADC_EnableInternalRegulator+0x24>)
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	6fffffc0 	.word	0x6fffffc0

0800bbd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bbe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbe4:	d101      	bne.n	800bbea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e000      	b.n	800bbec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	689a      	ldr	r2, [r3, #8]
 800bc04:	4b05      	ldr	r3, [pc, #20]	@ (800bc1c <LL_ADC_Enable+0x24>)
 800bc06:	4013      	ands	r3, r2
 800bc08:	f043 0201 	orr.w	r2, r3, #1
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	7fffffc0 	.word	0x7fffffc0

0800bc20 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	689a      	ldr	r2, [r3, #8]
 800bc2c:	4b05      	ldr	r3, [pc, #20]	@ (800bc44 <LL_ADC_Disable+0x24>)
 800bc2e:	4013      	ands	r3, r2
 800bc30:	f043 0202 	orr.w	r2, r3, #2
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	7fffffc0 	.word	0x7fffffc0

0800bc48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	f003 0301 	and.w	r3, r3, #1
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d101      	bne.n	800bc60 <LL_ADC_IsEnabled+0x18>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e000      	b.n	800bc62 <LL_ADC_IsEnabled+0x1a>
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	370c      	adds	r7, #12
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b083      	sub	sp, #12
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d101      	bne.n	800bc86 <LL_ADC_IsDisableOngoing+0x18>
 800bc82:	2301      	movs	r3, #1
 800bc84:	e000      	b.n	800bc88 <LL_ADC_IsDisableOngoing+0x1a>
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	689a      	ldr	r2, [r3, #8]
 800bca0:	4b05      	ldr	r3, [pc, #20]	@ (800bcb8 <LL_ADC_REG_StartConversion+0x24>)
 800bca2:	4013      	ands	r3, r2
 800bca4:	f043 0204 	orr.w	r2, r3, #4
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	7fffffc0 	.word	0x7fffffc0

0800bcbc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689a      	ldr	r2, [r3, #8]
 800bcc8:	4b05      	ldr	r3, [pc, #20]	@ (800bce0 <LL_ADC_REG_StopConversion+0x24>)
 800bcca:	4013      	ands	r3, r2
 800bccc:	f043 0210 	orr.w	r2, r3, #16
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	7fffffc0 	.word	0x7fffffc0

0800bce4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	f003 0304 	and.w	r3, r3, #4
 800bcf4:	2b04      	cmp	r3, #4
 800bcf6:	d101      	bne.n	800bcfc <LL_ADC_REG_IsConversionOngoing+0x18>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e000      	b.n	800bcfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
	...

0800bd0c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	689a      	ldr	r2, [r3, #8]
 800bd18:	4b05      	ldr	r3, [pc, #20]	@ (800bd30 <LL_ADC_INJ_StopConversion+0x24>)
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	f043 0220 	orr.w	r2, r3, #32
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	7fffffc0 	.word	0x7fffffc0

0800bd34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	f003 0308 	and.w	r3, r3, #8
 800bd44:	2b08      	cmp	r3, #8
 800bd46:	d101      	bne.n	800bd4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e000      	b.n	800bd4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
	...

0800bd5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b089      	sub	sp, #36	@ 0x24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	e1ee      	b.n	800c154 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d109      	bne.n	800bd98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7fe fc07 	bl	800a598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff feef 	bl	800bb80 <LL_ADC_IsDeepPowerDownEnabled>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d004      	beq.n	800bdb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7ff fed5 	bl	800bb5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7ff ff0a 	bl	800bbd0 <LL_ADC_IsInternalRegulatorEnabled>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d114      	bne.n	800bdec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7ff feee 	bl	800bba8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bdcc:	4b8e      	ldr	r3, [pc, #568]	@ (800c008 <HAL_ADC_Init+0x2ac>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	099b      	lsrs	r3, r3, #6
 800bdd2:	4a8e      	ldr	r2, [pc, #568]	@ (800c00c <HAL_ADC_Init+0x2b0>)
 800bdd4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd8:	099b      	lsrs	r3, r3, #6
 800bdda:	3301      	adds	r3, #1
 800bddc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800bdde:	e002      	b.n	800bde6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	3b01      	subs	r3, #1
 800bde4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1f9      	bne.n	800bde0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7ff feed 	bl	800bbd0 <LL_ADC_IsInternalRegulatorEnabled>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10d      	bne.n	800be18 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be00:	f043 0210 	orr.w	r2, r3, #16
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be0c:	f043 0201 	orr.w	r2, r3, #1
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7ff ff61 	bl	800bce4 <LL_ADC_REG_IsConversionOngoing>
 800be22:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be28:	f003 0310 	and.w	r3, r3, #16
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f040 8188 	bne.w	800c142 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f040 8184 	bne.w	800c142 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be3e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800be42:	f043 0202 	orr.w	r2, r3, #2
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4618      	mov	r0, r3
 800be50:	f7ff fefa 	bl	800bc48 <LL_ADC_IsEnabled>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d136      	bne.n	800bec8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a6c      	ldr	r2, [pc, #432]	@ (800c010 <HAL_ADC_Init+0x2b4>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d004      	beq.n	800be6e <HAL_ADC_Init+0x112>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a6a      	ldr	r2, [pc, #424]	@ (800c014 <HAL_ADC_Init+0x2b8>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d10e      	bne.n	800be8c <HAL_ADC_Init+0x130>
 800be6e:	4868      	ldr	r0, [pc, #416]	@ (800c010 <HAL_ADC_Init+0x2b4>)
 800be70:	f7ff feea 	bl	800bc48 <LL_ADC_IsEnabled>
 800be74:	4604      	mov	r4, r0
 800be76:	4867      	ldr	r0, [pc, #412]	@ (800c014 <HAL_ADC_Init+0x2b8>)
 800be78:	f7ff fee6 	bl	800bc48 <LL_ADC_IsEnabled>
 800be7c:	4603      	mov	r3, r0
 800be7e:	4323      	orrs	r3, r4
 800be80:	2b00      	cmp	r3, #0
 800be82:	bf0c      	ite	eq
 800be84:	2301      	moveq	r3, #1
 800be86:	2300      	movne	r3, #0
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	e008      	b.n	800be9e <HAL_ADC_Init+0x142>
 800be8c:	4862      	ldr	r0, [pc, #392]	@ (800c018 <HAL_ADC_Init+0x2bc>)
 800be8e:	f7ff fedb 	bl	800bc48 <LL_ADC_IsEnabled>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	bf0c      	ite	eq
 800be98:	2301      	moveq	r3, #1
 800be9a:	2300      	movne	r3, #0
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d012      	beq.n	800bec8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a5a      	ldr	r2, [pc, #360]	@ (800c010 <HAL_ADC_Init+0x2b4>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d004      	beq.n	800beb6 <HAL_ADC_Init+0x15a>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a58      	ldr	r2, [pc, #352]	@ (800c014 <HAL_ADC_Init+0x2b8>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d101      	bne.n	800beba <HAL_ADC_Init+0x15e>
 800beb6:	4a59      	ldr	r2, [pc, #356]	@ (800c01c <HAL_ADC_Init+0x2c0>)
 800beb8:	e000      	b.n	800bebc <HAL_ADC_Init+0x160>
 800beba:	4a59      	ldr	r2, [pc, #356]	@ (800c020 <HAL_ADC_Init+0x2c4>)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	4619      	mov	r1, r3
 800bec2:	4610      	mov	r0, r2
 800bec4:	f7ff fbd4 	bl	800b670 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a52      	ldr	r2, [pc, #328]	@ (800c018 <HAL_ADC_Init+0x2bc>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d129      	bne.n	800bf26 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7e5b      	ldrb	r3, [r3, #25]
 800bed6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800bedc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800bee2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	2b08      	cmp	r3, #8
 800beea:	d013      	beq.n	800bf14 <HAL_ADC_Init+0x1b8>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	2b0c      	cmp	r3, #12
 800bef2:	d00d      	beq.n	800bf10 <HAL_ADC_Init+0x1b4>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	2b1c      	cmp	r3, #28
 800befa:	d007      	beq.n	800bf0c <HAL_ADC_Init+0x1b0>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	2b18      	cmp	r3, #24
 800bf02:	d101      	bne.n	800bf08 <HAL_ADC_Init+0x1ac>
 800bf04:	2318      	movs	r3, #24
 800bf06:	e006      	b.n	800bf16 <HAL_ADC_Init+0x1ba>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	e004      	b.n	800bf16 <HAL_ADC_Init+0x1ba>
 800bf0c:	2310      	movs	r3, #16
 800bf0e:	e002      	b.n	800bf16 <HAL_ADC_Init+0x1ba>
 800bf10:	2308      	movs	r3, #8
 800bf12:	e000      	b.n	800bf16 <HAL_ADC_Init+0x1ba>
 800bf14:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800bf16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bf1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800bf20:	4313      	orrs	r3, r2
 800bf22:	61bb      	str	r3, [r7, #24]
 800bf24:	e00e      	b.n	800bf44 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	7e5b      	ldrb	r3, [r3, #25]
 800bf2a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800bf30:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800bf36:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bf3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800bf40:	4313      	orrs	r3, r2
 800bf42:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d106      	bne.n	800bf5c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf52:	3b01      	subs	r3, #1
 800bf54:	045b      	lsls	r3, r3, #17
 800bf56:	69ba      	ldr	r2, [r7, #24]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d009      	beq.n	800bf78 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf68:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a26      	ldr	r2, [pc, #152]	@ (800c018 <HAL_ADC_Init+0x2bc>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d115      	bne.n	800bfae <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68da      	ldr	r2, [r3, #12]
 800bf88:	4b26      	ldr	r3, [pc, #152]	@ (800c024 <HAL_ADC_Init+0x2c8>)
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	6812      	ldr	r2, [r2, #0]
 800bf90:	69b9      	ldr	r1, [r7, #24]
 800bf92:	430b      	orrs	r3, r1
 800bf94:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	430a      	orrs	r2, r1
 800bfaa:	611a      	str	r2, [r3, #16]
 800bfac:	e009      	b.n	800bfc2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68da      	ldr	r2, [r3, #12]
 800bfb4:	4b1c      	ldr	r3, [pc, #112]	@ (800c028 <HAL_ADC_Init+0x2cc>)
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	6812      	ldr	r2, [r2, #0]
 800bfbc:	69b9      	ldr	r1, [r7, #24]
 800bfbe:	430b      	orrs	r3, r1
 800bfc0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7ff fe8c 	bl	800bce4 <LL_ADC_REG_IsConversionOngoing>
 800bfcc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7ff feae 	bl	800bd34 <LL_ADC_INJ_IsConversionOngoing>
 800bfd8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f040 808e 	bne.w	800c0fe <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f040 808a 	bne.w	800c0fe <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a0a      	ldr	r2, [pc, #40]	@ (800c018 <HAL_ADC_Init+0x2bc>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d11b      	bne.n	800c02c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	7e1b      	ldrb	r3, [r3, #24]
 800bff8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c000:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800c002:	4313      	orrs	r3, r2
 800c004:	61bb      	str	r3, [r7, #24]
 800c006:	e018      	b.n	800c03a <HAL_ADC_Init+0x2de>
 800c008:	24000290 	.word	0x24000290
 800c00c:	053e2d63 	.word	0x053e2d63
 800c010:	40022000 	.word	0x40022000
 800c014:	40022100 	.word	0x40022100
 800c018:	58026000 	.word	0x58026000
 800c01c:	40022300 	.word	0x40022300
 800c020:	58026300 	.word	0x58026300
 800c024:	fff04007 	.word	0xfff04007
 800c028:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	7e1b      	ldrb	r3, [r3, #24]
 800c030:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800c036:	4313      	orrs	r3, r2
 800c038:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68da      	ldr	r2, [r3, #12]
 800c040:	4b46      	ldr	r3, [pc, #280]	@ (800c15c <HAL_ADC_Init+0x400>)
 800c042:	4013      	ands	r3, r2
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	6812      	ldr	r2, [r2, #0]
 800c048:	69b9      	ldr	r1, [r7, #24]
 800c04a:	430b      	orrs	r3, r1
 800c04c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c054:	2b01      	cmp	r3, #1
 800c056:	d137      	bne.n	800c0c8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c05c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a3f      	ldr	r2, [pc, #252]	@ (800c160 <HAL_ADC_Init+0x404>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d116      	bne.n	800c096 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	691a      	ldr	r2, [r3, #16]
 800c06e:	4b3d      	ldr	r3, [pc, #244]	@ (800c164 <HAL_ADC_Init+0x408>)
 800c070:	4013      	ands	r3, r2
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c07a:	4311      	orrs	r1, r2
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c080:	4311      	orrs	r1, r2
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c086:	430a      	orrs	r2, r1
 800c088:	431a      	orrs	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f042 0201 	orr.w	r2, r2, #1
 800c092:	611a      	str	r2, [r3, #16]
 800c094:	e020      	b.n	800c0d8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	691a      	ldr	r2, [r3, #16]
 800c09c:	4b32      	ldr	r3, [pc, #200]	@ (800c168 <HAL_ADC_Init+0x40c>)
 800c09e:	4013      	ands	r3, r2
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c0a4:	3a01      	subs	r2, #1
 800c0a6:	0411      	lsls	r1, r2, #16
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c0ac:	4311      	orrs	r1, r2
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c0b2:	4311      	orrs	r1, r2
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c0b8:	430a      	orrs	r2, r1
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f042 0201 	orr.w	r2, r2, #1
 800c0c4:	611a      	str	r2, [r3, #16]
 800c0c6:	e007      	b.n	800c0d8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	691a      	ldr	r2, [r3, #16]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f022 0201 	bic.w	r2, r2, #1
 800c0d6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	430a      	orrs	r2, r1
 800c0ec:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a1b      	ldr	r2, [pc, #108]	@ (800c160 <HAL_ADC_Init+0x404>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d002      	beq.n	800c0fe <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f001 fac7 	bl	800d68c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	2b01      	cmp	r3, #1
 800c104:	d10c      	bne.n	800c120 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c10c:	f023 010f 	bic.w	r1, r3, #15
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	69db      	ldr	r3, [r3, #28]
 800c114:	1e5a      	subs	r2, r3, #1
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	430a      	orrs	r2, r1
 800c11c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c11e:	e007      	b.n	800c130 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f022 020f 	bic.w	r2, r2, #15
 800c12e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c134:	f023 0303 	bic.w	r3, r3, #3
 800c138:	f043 0201 	orr.w	r2, r3, #1
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	661a      	str	r2, [r3, #96]	@ 0x60
 800c140:	e007      	b.n	800c152 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c146:	f043 0210 	orr.w	r2, r3, #16
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800c152:	7ffb      	ldrb	r3, [r7, #31]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3724      	adds	r7, #36	@ 0x24
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd90      	pop	{r4, r7, pc}
 800c15c:	ffffbffc 	.word	0xffffbffc
 800c160:	58026000 	.word	0x58026000
 800c164:	fc00f81f 	.word	0xfc00f81f
 800c168:	fc00f81e 	.word	0xfc00f81e

0800c16c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a60      	ldr	r2, [pc, #384]	@ (800c300 <HAL_ADC_Start_DMA+0x194>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d004      	beq.n	800c18c <HAL_ADC_Start_DMA+0x20>
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a5f      	ldr	r2, [pc, #380]	@ (800c304 <HAL_ADC_Start_DMA+0x198>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d101      	bne.n	800c190 <HAL_ADC_Start_DMA+0x24>
 800c18c:	4b5e      	ldr	r3, [pc, #376]	@ (800c308 <HAL_ADC_Start_DMA+0x19c>)
 800c18e:	e000      	b.n	800c192 <HAL_ADC_Start_DMA+0x26>
 800c190:	4b5e      	ldr	r3, [pc, #376]	@ (800c30c <HAL_ADC_Start_DMA+0x1a0>)
 800c192:	4618      	mov	r0, r3
 800c194:	f7ff fcc6 	bl	800bb24 <LL_ADC_GetMultimode>
 800c198:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7ff fda0 	bl	800bce4 <LL_ADC_REG_IsConversionOngoing>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f040 80a2 	bne.w	800c2f0 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d101      	bne.n	800c1ba <HAL_ADC_Start_DMA+0x4e>
 800c1b6:	2302      	movs	r3, #2
 800c1b8:	e09d      	b.n	800c2f6 <HAL_ADC_Start_DMA+0x18a>
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2201      	movs	r2, #1
 800c1be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d006      	beq.n	800c1d6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	2b05      	cmp	r3, #5
 800c1cc:	d003      	beq.n	800c1d6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2b09      	cmp	r3, #9
 800c1d2:	f040 8086 	bne.w	800c2e2 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f001 f8da 	bl	800d390 <ADC_Enable>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d178      	bne.n	800c2d8 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c1ea:	4b49      	ldr	r3, [pc, #292]	@ (800c310 <HAL_ADC_Start_DMA+0x1a4>)
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a42      	ldr	r2, [pc, #264]	@ (800c304 <HAL_ADC_Start_DMA+0x198>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d002      	beq.n	800c206 <HAL_ADC_Start_DMA+0x9a>
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	e000      	b.n	800c208 <HAL_ADC_Start_DMA+0x9c>
 800c206:	4b3e      	ldr	r3, [pc, #248]	@ (800c300 <HAL_ADC_Start_DMA+0x194>)
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	6812      	ldr	r2, [r2, #0]
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d002      	beq.n	800c216 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d105      	bne.n	800c222 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c21a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c226:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d006      	beq.n	800c23c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c232:	f023 0206 	bic.w	r2, r3, #6
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	665a      	str	r2, [r3, #100]	@ 0x64
 800c23a:	e002      	b.n	800c242 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c246:	4a33      	ldr	r2, [pc, #204]	@ (800c314 <HAL_ADC_Start_DMA+0x1a8>)
 800c248:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c24e:	4a32      	ldr	r2, [pc, #200]	@ (800c318 <HAL_ADC_Start_DMA+0x1ac>)
 800c250:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c256:	4a31      	ldr	r2, [pc, #196]	@ (800c31c <HAL_ADC_Start_DMA+0x1b0>)
 800c258:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	221c      	movs	r2, #28
 800c260:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f042 0210 	orr.w	r2, r2, #16
 800c278:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a28      	ldr	r2, [pc, #160]	@ (800c320 <HAL_ADC_Start_DMA+0x1b4>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d10f      	bne.n	800c2a4 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	4619      	mov	r1, r3
 800c292:	4610      	mov	r0, r2
 800c294:	f7ff fbae 	bl	800b9f4 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7ff fb99 	bl	800b9d4 <LL_ADC_EnableDMAReq>
 800c2a2:	e007      	b.n	800c2b4 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	4610      	mov	r0, r2
 800c2b0:	f7ff fb7d 	bl	800b9ae <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3340      	adds	r3, #64	@ 0x40
 800c2be:	4619      	mov	r1, r3
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f002 fcbe 	bl	800ec44 <HAL_DMA_Start_IT>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7ff fcdf 	bl	800bc94 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800c2d6:	e00d      	b.n	800c2f4 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800c2e0:	e008      	b.n	800c2f4 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800c2ee:	e001      	b.n	800c2f4 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3718      	adds	r7, #24
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	40022000 	.word	0x40022000
 800c304:	40022100 	.word	0x40022100
 800c308:	40022300 	.word	0x40022300
 800c30c:	58026300 	.word	0x58026300
 800c310:	fffff0fe 	.word	0xfffff0fe
 800c314:	0800d563 	.word	0x0800d563
 800c318:	0800d63b 	.word	0x0800d63b
 800c31c:	0800d657 	.word	0x0800d657
 800c320:	58026000 	.word	0x58026000

0800c324 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c332:	2b01      	cmp	r3, #1
 800c334:	d101      	bne.n	800c33a <HAL_ADC_Stop_DMA+0x16>
 800c336:	2302      	movs	r3, #2
 800c338:	e04f      	b.n	800c3da <HAL_ADC_Stop_DMA+0xb6>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800c342:	2103      	movs	r1, #3
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 ff67 	bl	800d218 <ADC_ConversionStop>
 800c34a:	4603      	mov	r3, r0
 800c34c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d13d      	bne.n	800c3d0 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68da      	ldr	r2, [r3, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f022 0203 	bic.w	r2, r2, #3
 800c362:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c368:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d10f      	bne.n	800c392 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c376:	4618      	mov	r0, r3
 800c378:	f002 fece 	bl	800f118 <HAL_DMA_Abort>
 800c37c:	4603      	mov	r3, r0
 800c37e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800c380:	7bfb      	ldrb	r3, [r7, #15]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d005      	beq.n	800c392 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c38a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	685a      	ldr	r2, [r3, #4]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 0210 	bic.w	r2, r2, #16
 800c3a0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d105      	bne.n	800c3b4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f001 f87b 	bl	800d4a4 <ADC_Disable>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	73fb      	strb	r3, [r7, #15]
 800c3b2:	e002      	b.n	800c3ba <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f001 f875 	bl	800d4a4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800c3ba:	7bfb      	ldrb	r3, [r7, #15]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d107      	bne.n	800c3d0 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c3c4:	4b07      	ldr	r3, [pc, #28]	@ (800c3e4 <HAL_ADC_Stop_DMA+0xc0>)
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	f043 0201 	orr.w	r2, r3, #1
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	661a      	str	r2, [r3, #96]	@ 0x60
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800c3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	ffffeefe 	.word	0xffffeefe

0800c3e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08a      	sub	sp, #40	@ 0x28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a87      	ldr	r2, [pc, #540]	@ (800c628 <HAL_ADC_IRQHandler+0x240>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d004      	beq.n	800c418 <HAL_ADC_IRQHandler+0x30>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a86      	ldr	r2, [pc, #536]	@ (800c62c <HAL_ADC_IRQHandler+0x244>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d101      	bne.n	800c41c <HAL_ADC_IRQHandler+0x34>
 800c418:	4b85      	ldr	r3, [pc, #532]	@ (800c630 <HAL_ADC_IRQHandler+0x248>)
 800c41a:	e000      	b.n	800c41e <HAL_ADC_IRQHandler+0x36>
 800c41c:	4b85      	ldr	r3, [pc, #532]	@ (800c634 <HAL_ADC_IRQHandler+0x24c>)
 800c41e:	4618      	mov	r0, r3
 800c420:	f7ff fb80 	bl	800bb24 <LL_ADC_GetMultimode>
 800c424:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	f003 0302 	and.w	r3, r3, #2
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d017      	beq.n	800c460 <HAL_ADC_IRQHandler+0x78>
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	f003 0302 	and.w	r3, r3, #2
 800c436:	2b00      	cmp	r3, #0
 800c438:	d012      	beq.n	800c460 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c43e:	f003 0310 	and.w	r3, r3, #16
 800c442:	2b00      	cmp	r3, #0
 800c444:	d105      	bne.n	800c452 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c44a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f001 fa56 	bl	800d904 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2202      	movs	r2, #2
 800c45e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	f003 0304 	and.w	r3, r3, #4
 800c466:	2b00      	cmp	r3, #0
 800c468:	d004      	beq.n	800c474 <HAL_ADC_IRQHandler+0x8c>
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	f003 0304 	and.w	r3, r3, #4
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10a      	bne.n	800c48a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f000 8083 	beq.w	800c586 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	f003 0308 	and.w	r3, r3, #8
 800c486:	2b00      	cmp	r3, #0
 800c488:	d07d      	beq.n	800c586 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c48e:	f003 0310 	and.w	r3, r3, #16
 800c492:	2b00      	cmp	r3, #0
 800c494:	d105      	bne.n	800c4a2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c49a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff fa42 	bl	800b930 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d062      	beq.n	800c578 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a5d      	ldr	r2, [pc, #372]	@ (800c62c <HAL_ADC_IRQHandler+0x244>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d002      	beq.n	800c4c2 <HAL_ADC_IRQHandler+0xda>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	e000      	b.n	800c4c4 <HAL_ADC_IRQHandler+0xdc>
 800c4c2:	4b59      	ldr	r3, [pc, #356]	@ (800c628 <HAL_ADC_IRQHandler+0x240>)
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	6812      	ldr	r2, [r2, #0]
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d008      	beq.n	800c4de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d005      	beq.n	800c4de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	2b05      	cmp	r3, #5
 800c4d6:	d002      	beq.n	800c4de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	2b09      	cmp	r3, #9
 800c4dc:	d104      	bne.n	800c4e8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	623b      	str	r3, [r7, #32]
 800c4e6:	e00c      	b.n	800c502 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a4f      	ldr	r2, [pc, #316]	@ (800c62c <HAL_ADC_IRQHandler+0x244>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d002      	beq.n	800c4f8 <HAL_ADC_IRQHandler+0x110>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	e000      	b.n	800c4fa <HAL_ADC_IRQHandler+0x112>
 800c4f8:	4b4b      	ldr	r3, [pc, #300]	@ (800c628 <HAL_ADC_IRQHandler+0x240>)
 800c4fa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800c502:	6a3b      	ldr	r3, [r7, #32]
 800c504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d135      	bne.n	800c578 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f003 0308 	and.w	r3, r3, #8
 800c516:	2b08      	cmp	r3, #8
 800c518:	d12e      	bne.n	800c578 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff fbe0 	bl	800bce4 <LL_ADC_REG_IsConversionOngoing>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d11a      	bne.n	800c560 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f022 020c 	bic.w	r2, r2, #12
 800c538:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c53e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c54a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d112      	bne.n	800c578 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c556:	f043 0201 	orr.w	r2, r3, #1
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	661a      	str	r2, [r3, #96]	@ 0x60
 800c55e:	e00b      	b.n	800c578 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c564:	f043 0210 	orr.w	r2, r3, #16
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c570:	f043 0201 	orr.w	r2, r3, #1
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7f8 fd19 	bl	8004fb0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	220c      	movs	r2, #12
 800c584:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	f003 0320 	and.w	r3, r3, #32
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d004      	beq.n	800c59a <HAL_ADC_IRQHandler+0x1b2>
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	f003 0320 	and.w	r3, r3, #32
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10b      	bne.n	800c5b2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f000 80a0 	beq.w	800c6e6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f000 809a 	beq.w	800c6e6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5b6:	f003 0310 	and.w	r3, r3, #16
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d105      	bne.n	800c5ca <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7ff fa2a 	bl	800ba28 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800c5d4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7ff f9a8 	bl	800b930 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c5e0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a11      	ldr	r2, [pc, #68]	@ (800c62c <HAL_ADC_IRQHandler+0x244>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d002      	beq.n	800c5f2 <HAL_ADC_IRQHandler+0x20a>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	e000      	b.n	800c5f4 <HAL_ADC_IRQHandler+0x20c>
 800c5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c628 <HAL_ADC_IRQHandler+0x240>)
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	6812      	ldr	r2, [r2, #0]
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d008      	beq.n	800c60e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d005      	beq.n	800c60e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	2b06      	cmp	r3, #6
 800c606:	d002      	beq.n	800c60e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	2b07      	cmp	r3, #7
 800c60c:	d104      	bne.n	800c618 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	623b      	str	r3, [r7, #32]
 800c616:	e014      	b.n	800c642 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a03      	ldr	r2, [pc, #12]	@ (800c62c <HAL_ADC_IRQHandler+0x244>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d00a      	beq.n	800c638 <HAL_ADC_IRQHandler+0x250>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	e008      	b.n	800c63a <HAL_ADC_IRQHandler+0x252>
 800c628:	40022000 	.word	0x40022000
 800c62c:	40022100 	.word	0x40022100
 800c630:	40022300 	.word	0x40022300
 800c634:	58026300 	.word	0x58026300
 800c638:	4b84      	ldr	r3, [pc, #528]	@ (800c84c <HAL_ADC_IRQHandler+0x464>)
 800c63a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d047      	beq.n	800c6d8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800c648:	6a3b      	ldr	r3, [r7, #32]
 800c64a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d007      	beq.n	800c662 <HAL_ADC_IRQHandler+0x27a>
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d03f      	beq.n	800c6d8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800c658:	6a3b      	ldr	r3, [r7, #32]
 800c65a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d13a      	bne.n	800c6d8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c66c:	2b40      	cmp	r3, #64	@ 0x40
 800c66e:	d133      	bne.n	800c6d8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800c670:	6a3b      	ldr	r3, [r7, #32]
 800c672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c676:	2b00      	cmp	r3, #0
 800c678:	d12e      	bne.n	800c6d8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4618      	mov	r0, r3
 800c680:	f7ff fb58 	bl	800bd34 <LL_ADC_INJ_IsConversionOngoing>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d11a      	bne.n	800c6c0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	685a      	ldr	r2, [r3, #4]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800c698:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c69e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d112      	bne.n	800c6d8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6b6:	f043 0201 	orr.w	r2, r3, #1
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	661a      	str	r2, [r3, #96]	@ 0x60
 800c6be:	e00b      	b.n	800c6d8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6c4:	f043 0210 	orr.w	r2, r3, #16
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6d0:	f043 0201 	orr.w	r2, r3, #1
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f001 f8eb 	bl	800d8b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2260      	movs	r2, #96	@ 0x60
 800c6e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d011      	beq.n	800c714 <HAL_ADC_IRQHandler+0x32c>
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00c      	beq.n	800c714 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 f8a8 	bl	800c85c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2280      	movs	r2, #128	@ 0x80
 800c712:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d012      	beq.n	800c744 <HAL_ADC_IRQHandler+0x35c>
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00d      	beq.n	800c744 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c72c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f001 f8d1 	bl	800d8dc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c742:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d012      	beq.n	800c774 <HAL_ADC_IRQHandler+0x38c>
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00d      	beq.n	800c774 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c75c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f001 f8c3 	bl	800d8f0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c772:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	f003 0310 	and.w	r3, r3, #16
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d043      	beq.n	800c806 <HAL_ADC_IRQHandler+0x41e>
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	f003 0310 	and.w	r3, r3, #16
 800c784:	2b00      	cmp	r3, #0
 800c786:	d03e      	beq.n	800c806 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d102      	bne.n	800c796 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800c790:	2301      	movs	r3, #1
 800c792:	627b      	str	r3, [r7, #36]	@ 0x24
 800c794:	e021      	b.n	800c7da <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d015      	beq.n	800c7c8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a2a      	ldr	r2, [pc, #168]	@ (800c84c <HAL_ADC_IRQHandler+0x464>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d004      	beq.n	800c7b0 <HAL_ADC_IRQHandler+0x3c8>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a29      	ldr	r2, [pc, #164]	@ (800c850 <HAL_ADC_IRQHandler+0x468>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d101      	bne.n	800c7b4 <HAL_ADC_IRQHandler+0x3cc>
 800c7b0:	4b28      	ldr	r3, [pc, #160]	@ (800c854 <HAL_ADC_IRQHandler+0x46c>)
 800c7b2:	e000      	b.n	800c7b6 <HAL_ADC_IRQHandler+0x3ce>
 800c7b4:	4b28      	ldr	r3, [pc, #160]	@ (800c858 <HAL_ADC_IRQHandler+0x470>)
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7ff f9c2 	bl	800bb40 <LL_ADC_GetMultiDMATransfer>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00b      	beq.n	800c7da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7c6:	e008      	b.n	800c7da <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	f003 0303 	and.w	r3, r3, #3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d001      	beq.n	800c7da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800c7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d10e      	bne.n	800c7fe <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7e4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7f0:	f043 0202 	orr.w	r2, r3, #2
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7f8 fbf5 	bl	8004fe8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2210      	movs	r2, #16
 800c804:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d018      	beq.n	800c842 <HAL_ADC_IRQHandler+0x45a>
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c816:	2b00      	cmp	r3, #0
 800c818:	d013      	beq.n	800c842 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c81e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c82a:	f043 0208 	orr.w	r2, r3, #8
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c83a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f001 f843 	bl	800d8c8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800c842:	bf00      	nop
 800c844:	3728      	adds	r7, #40	@ 0x28
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	40022000 	.word	0x40022000
 800c850:	40022100 	.word	0x40022100
 800c854:	40022300 	.word	0x40022300
 800c858:	58026300 	.word	0x58026300

0800c85c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800c864:	bf00      	nop
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c870:	b590      	push	{r4, r7, lr}
 800c872:	b0a5      	sub	sp, #148	@ 0x94
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c87a:	2300      	movs	r3, #0
 800c87c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c88a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	4aa4      	ldr	r2, [pc, #656]	@ (800cb24 <HAL_ADC_ConfigChannel+0x2b4>)
 800c892:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d102      	bne.n	800c8a4 <HAL_ADC_ConfigChannel+0x34>
 800c89e:	2302      	movs	r3, #2
 800c8a0:	f000 bca2 	b.w	800d1e8 <HAL_ADC_ConfigChannel+0x978>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff fa17 	bl	800bce4 <LL_ADC_REG_IsConversionOngoing>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f040 8486 	bne.w	800d1ca <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	db31      	blt.n	800c92a <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a97      	ldr	r2, [pc, #604]	@ (800cb28 <HAL_ADC_ConfigChannel+0x2b8>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d02c      	beq.n	800c92a <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d108      	bne.n	800c8ee <HAL_ADC_ConfigChannel+0x7e>
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	0e9b      	lsrs	r3, r3, #26
 800c8e2:	f003 031f 	and.w	r3, r3, #31
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ec:	e016      	b.n	800c91c <HAL_ADC_ConfigChannel+0xac>
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8f6:	fa93 f3a3 	rbit	r3, r3
 800c8fa:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800c8fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8fe:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800c900:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800c906:	2320      	movs	r3, #32
 800c908:	e003      	b.n	800c912 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800c90a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c90c:	fab3 f383 	clz	r3, r3
 800c910:	b2db      	uxtb	r3, r3
 800c912:	f003 031f 	and.w	r3, r3, #31
 800c916:	2201      	movs	r2, #1
 800c918:	fa02 f303 	lsl.w	r3, r2, r3
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	6812      	ldr	r2, [r2, #0]
 800c920:	69d1      	ldr	r1, [r2, #28]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	6812      	ldr	r2, [r2, #0]
 800c926:	430b      	orrs	r3, r1
 800c928:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6818      	ldr	r0, [r3, #0]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	6859      	ldr	r1, [r3, #4]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	461a      	mov	r2, r3
 800c938:	f7ff f80d 	bl	800b956 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4618      	mov	r0, r3
 800c942:	f7ff f9cf 	bl	800bce4 <LL_ADC_REG_IsConversionOngoing>
 800c946:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff f9f0 	bl	800bd34 <LL_ADC_INJ_IsConversionOngoing>
 800c954:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c958:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f040 824a 	bne.w	800cdf6 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c962:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c966:	2b00      	cmp	r3, #0
 800c968:	f040 8245 	bne.w	800cdf6 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6818      	ldr	r0, [r3, #0]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	6819      	ldr	r1, [r3, #0]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	461a      	mov	r2, r3
 800c97a:	f7ff f868 	bl	800ba4e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a69      	ldr	r2, [pc, #420]	@ (800cb28 <HAL_ADC_ConfigChannel+0x2b8>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d10d      	bne.n	800c9a4 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	695a      	ldr	r2, [r3, #20]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	08db      	lsrs	r3, r3, #3
 800c994:	f003 0303 	and.w	r3, r3, #3
 800c998:	005b      	lsls	r3, r3, #1
 800c99a:	fa02 f303 	lsl.w	r3, r2, r3
 800c99e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c9a2:	e032      	b.n	800ca0a <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800c9a4:	4b61      	ldr	r3, [pc, #388]	@ (800cb2c <HAL_ADC_ConfigChannel+0x2bc>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c9ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9b0:	d10b      	bne.n	800c9ca <HAL_ADC_ConfigChannel+0x15a>
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	695a      	ldr	r2, [r3, #20]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	089b      	lsrs	r3, r3, #2
 800c9be:	f003 0307 	and.w	r3, r3, #7
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c8:	e01d      	b.n	800ca06 <HAL_ADC_ConfigChannel+0x196>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	f003 0310 	and.w	r3, r3, #16
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10b      	bne.n	800c9f0 <HAL_ADC_ConfigChannel+0x180>
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	695a      	ldr	r2, [r3, #20]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	089b      	lsrs	r3, r3, #2
 800c9e4:	f003 0307 	and.w	r3, r3, #7
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ee:	e00a      	b.n	800ca06 <HAL_ADC_ConfigChannel+0x196>
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	695a      	ldr	r2, [r3, #20]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	089b      	lsrs	r3, r3, #2
 800c9fc:	f003 0304 	and.w	r3, r3, #4
 800ca00:	005b      	lsls	r3, r3, #1
 800ca02:	fa02 f303 	lsl.w	r3, r2, r3
 800ca06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	2b04      	cmp	r3, #4
 800ca10:	d048      	beq.n	800caa4 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6818      	ldr	r0, [r3, #0]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	6919      	ldr	r1, [r3, #16]
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ca22:	f7fe fe93 	bl	800b74c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a3f      	ldr	r2, [pc, #252]	@ (800cb28 <HAL_ADC_ConfigChannel+0x2b8>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d119      	bne.n	800ca64 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6818      	ldr	r0, [r3, #0]
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	6919      	ldr	r1, [r3, #16]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	69db      	ldr	r3, [r3, #28]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	f7fe ff2b 	bl	800b898 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6818      	ldr	r0, [r3, #0]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	6919      	ldr	r1, [r3, #16]
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d102      	bne.n	800ca5a <HAL_ADC_ConfigChannel+0x1ea>
 800ca54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ca58:	e000      	b.n	800ca5c <HAL_ADC_ConfigChannel+0x1ec>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	f7fe fef9 	bl	800b854 <LL_ADC_SetOffsetSaturation>
 800ca62:	e1c8      	b.n	800cdf6 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6818      	ldr	r0, [r3, #0]
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	6919      	ldr	r1, [r3, #16]
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d102      	bne.n	800ca7c <HAL_ADC_ConfigChannel+0x20c>
 800ca76:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ca7a:	e000      	b.n	800ca7e <HAL_ADC_ConfigChannel+0x20e>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	461a      	mov	r2, r3
 800ca80:	f7fe fec6 	bl	800b810 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6818      	ldr	r0, [r3, #0]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	6919      	ldr	r1, [r3, #16]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	7e1b      	ldrb	r3, [r3, #24]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d102      	bne.n	800ca9a <HAL_ADC_ConfigChannel+0x22a>
 800ca94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ca98:	e000      	b.n	800ca9c <HAL_ADC_ConfigChannel+0x22c>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	f7fe fe9d 	bl	800b7dc <LL_ADC_SetDataRightShift>
 800caa2:	e1a8      	b.n	800cdf6 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a1f      	ldr	r2, [pc, #124]	@ (800cb28 <HAL_ADC_ConfigChannel+0x2b8>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	f040 815b 	bne.w	800cd66 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2100      	movs	r1, #0
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fe fe7a 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800cabc:	4603      	mov	r3, r0
 800cabe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10a      	bne.n	800cadc <HAL_ADC_ConfigChannel+0x26c>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2100      	movs	r1, #0
 800cacc:	4618      	mov	r0, r3
 800cace:	f7fe fe6f 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800cad2:	4603      	mov	r3, r0
 800cad4:	0e9b      	lsrs	r3, r3, #26
 800cad6:	f003 021f 	and.w	r2, r3, #31
 800cada:	e017      	b.n	800cb0c <HAL_ADC_ConfigChannel+0x29c>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2100      	movs	r1, #0
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fe fe64 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800cae8:	4603      	mov	r3, r0
 800caea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800caec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800caee:	fa93 f3a3 	rbit	r3, r3
 800caf2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800caf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800caf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800caf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800cafe:	2320      	movs	r3, #32
 800cb00:	e003      	b.n	800cb0a <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800cb02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb04:	fab3 f383 	clz	r3, r3
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d10b      	bne.n	800cb30 <HAL_ADC_ConfigChannel+0x2c0>
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	0e9b      	lsrs	r3, r3, #26
 800cb1e:	f003 031f 	and.w	r3, r3, #31
 800cb22:	e017      	b.n	800cb54 <HAL_ADC_ConfigChannel+0x2e4>
 800cb24:	47ff0000 	.word	0x47ff0000
 800cb28:	58026000 	.word	0x58026000
 800cb2c:	5c001000 	.word	0x5c001000
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb38:	fa93 f3a3 	rbit	r3, r3
 800cb3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800cb3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb40:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800cb42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d101      	bne.n	800cb4c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800cb48:	2320      	movs	r3, #32
 800cb4a:	e003      	b.n	800cb54 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800cb4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb4e:	fab3 f383 	clz	r3, r3
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d106      	bne.n	800cb66 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	2100      	movs	r1, #0
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7fe febb 	bl	800b8dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2101      	movs	r1, #1
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fe fe1f 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800cb72:	4603      	mov	r3, r0
 800cb74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <HAL_ADC_ConfigChannel+0x322>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2101      	movs	r1, #1
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fe fe14 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	0e9b      	lsrs	r3, r3, #26
 800cb8c:	f003 021f 	and.w	r2, r3, #31
 800cb90:	e017      	b.n	800cbc2 <HAL_ADC_ConfigChannel+0x352>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2101      	movs	r1, #1
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fe fe09 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cba4:	fa93 f3a3 	rbit	r3, r3
 800cba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800cbaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800cbae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d101      	bne.n	800cbb8 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800cbb4:	2320      	movs	r3, #32
 800cbb6:	e003      	b.n	800cbc0 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800cbb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbba:	fab3 f383 	clz	r3, r3
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d105      	bne.n	800cbda <HAL_ADC_ConfigChannel+0x36a>
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	0e9b      	lsrs	r3, r3, #26
 800cbd4:	f003 031f 	and.w	r3, r3, #31
 800cbd8:	e011      	b.n	800cbfe <HAL_ADC_ConfigChannel+0x38e>
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cbe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbe2:	fa93 f3a3 	rbit	r3, r3
 800cbe6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800cbe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800cbec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800cbf2:	2320      	movs	r3, #32
 800cbf4:	e003      	b.n	800cbfe <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800cbf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbf8:	fab3 f383 	clz	r3, r3
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d106      	bne.n	800cc10 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2200      	movs	r2, #0
 800cc08:	2101      	movs	r1, #1
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fe fe66 	bl	800b8dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2102      	movs	r1, #2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7fe fdca 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d10a      	bne.n	800cc3c <HAL_ADC_ConfigChannel+0x3cc>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2102      	movs	r1, #2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fe fdbf 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800cc32:	4603      	mov	r3, r0
 800cc34:	0e9b      	lsrs	r3, r3, #26
 800cc36:	f003 021f 	and.w	r2, r3, #31
 800cc3a:	e017      	b.n	800cc6c <HAL_ADC_ConfigChannel+0x3fc>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2102      	movs	r1, #2
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fe fdb4 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4e:	fa93 f3a3 	rbit	r3, r3
 800cc52:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800cc54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800cc58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d101      	bne.n	800cc62 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800cc5e:	2320      	movs	r3, #32
 800cc60:	e003      	b.n	800cc6a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800cc62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc64:	fab3 f383 	clz	r3, r3
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d105      	bne.n	800cc84 <HAL_ADC_ConfigChannel+0x414>
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	0e9b      	lsrs	r3, r3, #26
 800cc7e:	f003 031f 	and.w	r3, r3, #31
 800cc82:	e011      	b.n	800cca8 <HAL_ADC_ConfigChannel+0x438>
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8c:	fa93 f3a3 	rbit	r3, r3
 800cc90:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800cc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc94:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800cc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d101      	bne.n	800cca0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800cc9c:	2320      	movs	r3, #32
 800cc9e:	e003      	b.n	800cca8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800cca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca2:	fab3 f383 	clz	r3, r3
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d106      	bne.n	800ccba <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	2102      	movs	r1, #2
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fe fe11 	bl	800b8dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2103      	movs	r1, #3
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fe fd75 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10a      	bne.n	800cce6 <HAL_ADC_ConfigChannel+0x476>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2103      	movs	r1, #3
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fe fd6a 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	0e9b      	lsrs	r3, r3, #26
 800cce0:	f003 021f 	and.w	r2, r3, #31
 800cce4:	e017      	b.n	800cd16 <HAL_ADC_ConfigChannel+0x4a6>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2103      	movs	r1, #3
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fe fd5f 	bl	800b7b0 <LL_ADC_GetOffsetChannel>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccf6:	6a3b      	ldr	r3, [r7, #32]
 800ccf8:	fa93 f3a3 	rbit	r3, r3
 800ccfc:	61fb      	str	r3, [r7, #28]
  return result;
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800cd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d101      	bne.n	800cd0c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800cd08:	2320      	movs	r3, #32
 800cd0a:	e003      	b.n	800cd14 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0e:	fab3 f383 	clz	r3, r3
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	461a      	mov	r2, r3
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d105      	bne.n	800cd2e <HAL_ADC_ConfigChannel+0x4be>
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	0e9b      	lsrs	r3, r3, #26
 800cd28:	f003 031f 	and.w	r3, r3, #31
 800cd2c:	e011      	b.n	800cd52 <HAL_ADC_ConfigChannel+0x4e2>
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	fa93 f3a3 	rbit	r3, r3
 800cd3a:	613b      	str	r3, [r7, #16]
  return result;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800cd46:	2320      	movs	r3, #32
 800cd48:	e003      	b.n	800cd52 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	fab3 f383 	clz	r3, r3
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d14f      	bne.n	800cdf6 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	2103      	movs	r1, #3
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fe fdbc 	bl	800b8dc <LL_ADC_SetOffsetState>
 800cd64:	e047      	b.n	800cdf6 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	069b      	lsls	r3, r3, #26
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d107      	bne.n	800cd8a <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800cd88:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	069b      	lsls	r3, r3, #26
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d107      	bne.n	800cdae <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800cdac:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	069b      	lsls	r3, r3, #26
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d107      	bne.n	800cdd2 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800cdd0:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	069b      	lsls	r3, r3, #26
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d107      	bne.n	800cdf6 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800cdf4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fe ff24 	bl	800bc48 <LL_ADC_IsEnabled>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f040 81ea 	bne.w	800d1dc <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6818      	ldr	r0, [r3, #0]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	6819      	ldr	r1, [r3, #0]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	461a      	mov	r2, r3
 800ce16:	f7fe fe45 	bl	800baa4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	4a7a      	ldr	r2, [pc, #488]	@ (800d008 <HAL_ADC_ConfigChannel+0x798>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	f040 80e0 	bne.w	800cfe6 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4977      	ldr	r1, [pc, #476]	@ (800d00c <HAL_ADC_ConfigChannel+0x79c>)
 800ce30:	428b      	cmp	r3, r1
 800ce32:	d147      	bne.n	800cec4 <HAL_ADC_ConfigChannel+0x654>
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4975      	ldr	r1, [pc, #468]	@ (800d010 <HAL_ADC_ConfigChannel+0x7a0>)
 800ce3a:	428b      	cmp	r3, r1
 800ce3c:	d040      	beq.n	800cec0 <HAL_ADC_ConfigChannel+0x650>
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4974      	ldr	r1, [pc, #464]	@ (800d014 <HAL_ADC_ConfigChannel+0x7a4>)
 800ce44:	428b      	cmp	r3, r1
 800ce46:	d039      	beq.n	800cebc <HAL_ADC_ConfigChannel+0x64c>
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4972      	ldr	r1, [pc, #456]	@ (800d018 <HAL_ADC_ConfigChannel+0x7a8>)
 800ce4e:	428b      	cmp	r3, r1
 800ce50:	d032      	beq.n	800ceb8 <HAL_ADC_ConfigChannel+0x648>
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4971      	ldr	r1, [pc, #452]	@ (800d01c <HAL_ADC_ConfigChannel+0x7ac>)
 800ce58:	428b      	cmp	r3, r1
 800ce5a:	d02b      	beq.n	800ceb4 <HAL_ADC_ConfigChannel+0x644>
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	496f      	ldr	r1, [pc, #444]	@ (800d020 <HAL_ADC_ConfigChannel+0x7b0>)
 800ce62:	428b      	cmp	r3, r1
 800ce64:	d024      	beq.n	800ceb0 <HAL_ADC_ConfigChannel+0x640>
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	496e      	ldr	r1, [pc, #440]	@ (800d024 <HAL_ADC_ConfigChannel+0x7b4>)
 800ce6c:	428b      	cmp	r3, r1
 800ce6e:	d01d      	beq.n	800ceac <HAL_ADC_ConfigChannel+0x63c>
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	496c      	ldr	r1, [pc, #432]	@ (800d028 <HAL_ADC_ConfigChannel+0x7b8>)
 800ce76:	428b      	cmp	r3, r1
 800ce78:	d016      	beq.n	800cea8 <HAL_ADC_ConfigChannel+0x638>
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	496b      	ldr	r1, [pc, #428]	@ (800d02c <HAL_ADC_ConfigChannel+0x7bc>)
 800ce80:	428b      	cmp	r3, r1
 800ce82:	d00f      	beq.n	800cea4 <HAL_ADC_ConfigChannel+0x634>
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4969      	ldr	r1, [pc, #420]	@ (800d030 <HAL_ADC_ConfigChannel+0x7c0>)
 800ce8a:	428b      	cmp	r3, r1
 800ce8c:	d008      	beq.n	800cea0 <HAL_ADC_ConfigChannel+0x630>
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4968      	ldr	r1, [pc, #416]	@ (800d034 <HAL_ADC_ConfigChannel+0x7c4>)
 800ce94:	428b      	cmp	r3, r1
 800ce96:	d101      	bne.n	800ce9c <HAL_ADC_ConfigChannel+0x62c>
 800ce98:	4b67      	ldr	r3, [pc, #412]	@ (800d038 <HAL_ADC_ConfigChannel+0x7c8>)
 800ce9a:	e0a0      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	e09e      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cea0:	4b66      	ldr	r3, [pc, #408]	@ (800d03c <HAL_ADC_ConfigChannel+0x7cc>)
 800cea2:	e09c      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cea4:	4b66      	ldr	r3, [pc, #408]	@ (800d040 <HAL_ADC_ConfigChannel+0x7d0>)
 800cea6:	e09a      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cea8:	4b60      	ldr	r3, [pc, #384]	@ (800d02c <HAL_ADC_ConfigChannel+0x7bc>)
 800ceaa:	e098      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800ceac:	4b5e      	ldr	r3, [pc, #376]	@ (800d028 <HAL_ADC_ConfigChannel+0x7b8>)
 800ceae:	e096      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800ceb0:	4b64      	ldr	r3, [pc, #400]	@ (800d044 <HAL_ADC_ConfigChannel+0x7d4>)
 800ceb2:	e094      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800ceb4:	4b64      	ldr	r3, [pc, #400]	@ (800d048 <HAL_ADC_ConfigChannel+0x7d8>)
 800ceb6:	e092      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800ceb8:	4b64      	ldr	r3, [pc, #400]	@ (800d04c <HAL_ADC_ConfigChannel+0x7dc>)
 800ceba:	e090      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cebc:	4b64      	ldr	r3, [pc, #400]	@ (800d050 <HAL_ADC_ConfigChannel+0x7e0>)
 800cebe:	e08e      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cec0:	2301      	movs	r3, #1
 800cec2:	e08c      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4962      	ldr	r1, [pc, #392]	@ (800d054 <HAL_ADC_ConfigChannel+0x7e4>)
 800ceca:	428b      	cmp	r3, r1
 800cecc:	d140      	bne.n	800cf50 <HAL_ADC_ConfigChannel+0x6e0>
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	494f      	ldr	r1, [pc, #316]	@ (800d010 <HAL_ADC_ConfigChannel+0x7a0>)
 800ced4:	428b      	cmp	r3, r1
 800ced6:	d039      	beq.n	800cf4c <HAL_ADC_ConfigChannel+0x6dc>
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	494d      	ldr	r1, [pc, #308]	@ (800d014 <HAL_ADC_ConfigChannel+0x7a4>)
 800cede:	428b      	cmp	r3, r1
 800cee0:	d032      	beq.n	800cf48 <HAL_ADC_ConfigChannel+0x6d8>
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	494c      	ldr	r1, [pc, #304]	@ (800d018 <HAL_ADC_ConfigChannel+0x7a8>)
 800cee8:	428b      	cmp	r3, r1
 800ceea:	d02b      	beq.n	800cf44 <HAL_ADC_ConfigChannel+0x6d4>
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	494a      	ldr	r1, [pc, #296]	@ (800d01c <HAL_ADC_ConfigChannel+0x7ac>)
 800cef2:	428b      	cmp	r3, r1
 800cef4:	d024      	beq.n	800cf40 <HAL_ADC_ConfigChannel+0x6d0>
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4949      	ldr	r1, [pc, #292]	@ (800d020 <HAL_ADC_ConfigChannel+0x7b0>)
 800cefc:	428b      	cmp	r3, r1
 800cefe:	d01d      	beq.n	800cf3c <HAL_ADC_ConfigChannel+0x6cc>
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4947      	ldr	r1, [pc, #284]	@ (800d024 <HAL_ADC_ConfigChannel+0x7b4>)
 800cf06:	428b      	cmp	r3, r1
 800cf08:	d016      	beq.n	800cf38 <HAL_ADC_ConfigChannel+0x6c8>
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4946      	ldr	r1, [pc, #280]	@ (800d028 <HAL_ADC_ConfigChannel+0x7b8>)
 800cf10:	428b      	cmp	r3, r1
 800cf12:	d00f      	beq.n	800cf34 <HAL_ADC_ConfigChannel+0x6c4>
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4944      	ldr	r1, [pc, #272]	@ (800d02c <HAL_ADC_ConfigChannel+0x7bc>)
 800cf1a:	428b      	cmp	r3, r1
 800cf1c:	d008      	beq.n	800cf30 <HAL_ADC_ConfigChannel+0x6c0>
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4944      	ldr	r1, [pc, #272]	@ (800d034 <HAL_ADC_ConfigChannel+0x7c4>)
 800cf24:	428b      	cmp	r3, r1
 800cf26:	d101      	bne.n	800cf2c <HAL_ADC_ConfigChannel+0x6bc>
 800cf28:	4b43      	ldr	r3, [pc, #268]	@ (800d038 <HAL_ADC_ConfigChannel+0x7c8>)
 800cf2a:	e058      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	e056      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cf30:	4b43      	ldr	r3, [pc, #268]	@ (800d040 <HAL_ADC_ConfigChannel+0x7d0>)
 800cf32:	e054      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cf34:	4b3d      	ldr	r3, [pc, #244]	@ (800d02c <HAL_ADC_ConfigChannel+0x7bc>)
 800cf36:	e052      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cf38:	4b3b      	ldr	r3, [pc, #236]	@ (800d028 <HAL_ADC_ConfigChannel+0x7b8>)
 800cf3a:	e050      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cf3c:	4b41      	ldr	r3, [pc, #260]	@ (800d044 <HAL_ADC_ConfigChannel+0x7d4>)
 800cf3e:	e04e      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cf40:	4b41      	ldr	r3, [pc, #260]	@ (800d048 <HAL_ADC_ConfigChannel+0x7d8>)
 800cf42:	e04c      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cf44:	4b41      	ldr	r3, [pc, #260]	@ (800d04c <HAL_ADC_ConfigChannel+0x7dc>)
 800cf46:	e04a      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cf48:	4b41      	ldr	r3, [pc, #260]	@ (800d050 <HAL_ADC_ConfigChannel+0x7e0>)
 800cf4a:	e048      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e046      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4940      	ldr	r1, [pc, #256]	@ (800d058 <HAL_ADC_ConfigChannel+0x7e8>)
 800cf56:	428b      	cmp	r3, r1
 800cf58:	d140      	bne.n	800cfdc <HAL_ADC_ConfigChannel+0x76c>
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	492c      	ldr	r1, [pc, #176]	@ (800d010 <HAL_ADC_ConfigChannel+0x7a0>)
 800cf60:	428b      	cmp	r3, r1
 800cf62:	d039      	beq.n	800cfd8 <HAL_ADC_ConfigChannel+0x768>
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	492a      	ldr	r1, [pc, #168]	@ (800d014 <HAL_ADC_ConfigChannel+0x7a4>)
 800cf6a:	428b      	cmp	r3, r1
 800cf6c:	d032      	beq.n	800cfd4 <HAL_ADC_ConfigChannel+0x764>
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4929      	ldr	r1, [pc, #164]	@ (800d018 <HAL_ADC_ConfigChannel+0x7a8>)
 800cf74:	428b      	cmp	r3, r1
 800cf76:	d02b      	beq.n	800cfd0 <HAL_ADC_ConfigChannel+0x760>
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4927      	ldr	r1, [pc, #156]	@ (800d01c <HAL_ADC_ConfigChannel+0x7ac>)
 800cf7e:	428b      	cmp	r3, r1
 800cf80:	d024      	beq.n	800cfcc <HAL_ADC_ConfigChannel+0x75c>
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4926      	ldr	r1, [pc, #152]	@ (800d020 <HAL_ADC_ConfigChannel+0x7b0>)
 800cf88:	428b      	cmp	r3, r1
 800cf8a:	d01d      	beq.n	800cfc8 <HAL_ADC_ConfigChannel+0x758>
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4924      	ldr	r1, [pc, #144]	@ (800d024 <HAL_ADC_ConfigChannel+0x7b4>)
 800cf92:	428b      	cmp	r3, r1
 800cf94:	d016      	beq.n	800cfc4 <HAL_ADC_ConfigChannel+0x754>
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4923      	ldr	r1, [pc, #140]	@ (800d028 <HAL_ADC_ConfigChannel+0x7b8>)
 800cf9c:	428b      	cmp	r3, r1
 800cf9e:	d00f      	beq.n	800cfc0 <HAL_ADC_ConfigChannel+0x750>
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4926      	ldr	r1, [pc, #152]	@ (800d040 <HAL_ADC_ConfigChannel+0x7d0>)
 800cfa6:	428b      	cmp	r3, r1
 800cfa8:	d008      	beq.n	800cfbc <HAL_ADC_ConfigChannel+0x74c>
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	492b      	ldr	r1, [pc, #172]	@ (800d05c <HAL_ADC_ConfigChannel+0x7ec>)
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	d101      	bne.n	800cfb8 <HAL_ADC_ConfigChannel+0x748>
 800cfb4:	4b2a      	ldr	r3, [pc, #168]	@ (800d060 <HAL_ADC_ConfigChannel+0x7f0>)
 800cfb6:	e012      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	e010      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cfbc:	4b27      	ldr	r3, [pc, #156]	@ (800d05c <HAL_ADC_ConfigChannel+0x7ec>)
 800cfbe:	e00e      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cfc0:	4b1a      	ldr	r3, [pc, #104]	@ (800d02c <HAL_ADC_ConfigChannel+0x7bc>)
 800cfc2:	e00c      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cfc4:	4b18      	ldr	r3, [pc, #96]	@ (800d028 <HAL_ADC_ConfigChannel+0x7b8>)
 800cfc6:	e00a      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cfc8:	4b1e      	ldr	r3, [pc, #120]	@ (800d044 <HAL_ADC_ConfigChannel+0x7d4>)
 800cfca:	e008      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cfcc:	4b1e      	ldr	r3, [pc, #120]	@ (800d048 <HAL_ADC_ConfigChannel+0x7d8>)
 800cfce:	e006      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cfd0:	4b1e      	ldr	r3, [pc, #120]	@ (800d04c <HAL_ADC_ConfigChannel+0x7dc>)
 800cfd2:	e004      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cfd4:	4b1e      	ldr	r3, [pc, #120]	@ (800d050 <HAL_ADC_ConfigChannel+0x7e0>)
 800cfd6:	e002      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e000      	b.n	800cfde <HAL_ADC_ConfigChannel+0x76e>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	4619      	mov	r1, r3
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	f7fe fb79 	bl	800b6d8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f280 80f6 	bge.w	800d1dc <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a05      	ldr	r2, [pc, #20]	@ (800d00c <HAL_ADC_ConfigChannel+0x79c>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d004      	beq.n	800d004 <HAL_ADC_ConfigChannel+0x794>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a15      	ldr	r2, [pc, #84]	@ (800d054 <HAL_ADC_ConfigChannel+0x7e4>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d131      	bne.n	800d068 <HAL_ADC_ConfigChannel+0x7f8>
 800d004:	4b17      	ldr	r3, [pc, #92]	@ (800d064 <HAL_ADC_ConfigChannel+0x7f4>)
 800d006:	e030      	b.n	800d06a <HAL_ADC_ConfigChannel+0x7fa>
 800d008:	47ff0000 	.word	0x47ff0000
 800d00c:	40022000 	.word	0x40022000
 800d010:	04300002 	.word	0x04300002
 800d014:	08600004 	.word	0x08600004
 800d018:	0c900008 	.word	0x0c900008
 800d01c:	10c00010 	.word	0x10c00010
 800d020:	14f00020 	.word	0x14f00020
 800d024:	2a000400 	.word	0x2a000400
 800d028:	2e300800 	.word	0x2e300800
 800d02c:	32601000 	.word	0x32601000
 800d030:	43210000 	.word	0x43210000
 800d034:	4b840000 	.word	0x4b840000
 800d038:	4fb80000 	.word	0x4fb80000
 800d03c:	47520000 	.word	0x47520000
 800d040:	36902000 	.word	0x36902000
 800d044:	25b00200 	.word	0x25b00200
 800d048:	21800100 	.word	0x21800100
 800d04c:	1d500080 	.word	0x1d500080
 800d050:	19200040 	.word	0x19200040
 800d054:	40022100 	.word	0x40022100
 800d058:	58026000 	.word	0x58026000
 800d05c:	3ac04000 	.word	0x3ac04000
 800d060:	3ef08000 	.word	0x3ef08000
 800d064:	40022300 	.word	0x40022300
 800d068:	4b61      	ldr	r3, [pc, #388]	@ (800d1f0 <HAL_ADC_ConfigChannel+0x980>)
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fb26 	bl	800b6bc <LL_ADC_GetCommonPathInternalCh>
 800d070:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a5f      	ldr	r2, [pc, #380]	@ (800d1f4 <HAL_ADC_ConfigChannel+0x984>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d004      	beq.n	800d086 <HAL_ADC_ConfigChannel+0x816>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a5d      	ldr	r2, [pc, #372]	@ (800d1f8 <HAL_ADC_ConfigChannel+0x988>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d10e      	bne.n	800d0a4 <HAL_ADC_ConfigChannel+0x834>
 800d086:	485b      	ldr	r0, [pc, #364]	@ (800d1f4 <HAL_ADC_ConfigChannel+0x984>)
 800d088:	f7fe fdde 	bl	800bc48 <LL_ADC_IsEnabled>
 800d08c:	4604      	mov	r4, r0
 800d08e:	485a      	ldr	r0, [pc, #360]	@ (800d1f8 <HAL_ADC_ConfigChannel+0x988>)
 800d090:	f7fe fdda 	bl	800bc48 <LL_ADC_IsEnabled>
 800d094:	4603      	mov	r3, r0
 800d096:	4323      	orrs	r3, r4
 800d098:	2b00      	cmp	r3, #0
 800d09a:	bf0c      	ite	eq
 800d09c:	2301      	moveq	r3, #1
 800d09e:	2300      	movne	r3, #0
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	e008      	b.n	800d0b6 <HAL_ADC_ConfigChannel+0x846>
 800d0a4:	4855      	ldr	r0, [pc, #340]	@ (800d1fc <HAL_ADC_ConfigChannel+0x98c>)
 800d0a6:	f7fe fdcf 	bl	800bc48 <LL_ADC_IsEnabled>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	bf0c      	ite	eq
 800d0b0:	2301      	moveq	r3, #1
 800d0b2:	2300      	movne	r3, #0
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d07d      	beq.n	800d1b6 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a50      	ldr	r2, [pc, #320]	@ (800d200 <HAL_ADC_ConfigChannel+0x990>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d130      	bne.n	800d126 <HAL_ADC_ConfigChannel+0x8b6>
 800d0c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d0c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d12b      	bne.n	800d126 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a4a      	ldr	r2, [pc, #296]	@ (800d1fc <HAL_ADC_ConfigChannel+0x98c>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	f040 8081 	bne.w	800d1dc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a45      	ldr	r2, [pc, #276]	@ (800d1f4 <HAL_ADC_ConfigChannel+0x984>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d004      	beq.n	800d0ee <HAL_ADC_ConfigChannel+0x87e>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a43      	ldr	r2, [pc, #268]	@ (800d1f8 <HAL_ADC_ConfigChannel+0x988>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d101      	bne.n	800d0f2 <HAL_ADC_ConfigChannel+0x882>
 800d0ee:	4a45      	ldr	r2, [pc, #276]	@ (800d204 <HAL_ADC_ConfigChannel+0x994>)
 800d0f0:	e000      	b.n	800d0f4 <HAL_ADC_ConfigChannel+0x884>
 800d0f2:	4a3f      	ldr	r2, [pc, #252]	@ (800d1f0 <HAL_ADC_ConfigChannel+0x980>)
 800d0f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d0f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	4610      	mov	r0, r2
 800d0fe:	f7fe faca 	bl	800b696 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d102:	4b41      	ldr	r3, [pc, #260]	@ (800d208 <HAL_ADC_ConfigChannel+0x998>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	099b      	lsrs	r3, r3, #6
 800d108:	4a40      	ldr	r2, [pc, #256]	@ (800d20c <HAL_ADC_ConfigChannel+0x99c>)
 800d10a:	fba2 2303 	umull	r2, r3, r2, r3
 800d10e:	099b      	lsrs	r3, r3, #6
 800d110:	3301      	adds	r3, #1
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800d116:	e002      	b.n	800d11e <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	3b01      	subs	r3, #1
 800d11c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1f9      	bne.n	800d118 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800d124:	e05a      	b.n	800d1dc <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a39      	ldr	r2, [pc, #228]	@ (800d210 <HAL_ADC_ConfigChannel+0x9a0>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d11e      	bne.n	800d16e <HAL_ADC_ConfigChannel+0x8fe>
 800d130:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d132:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d136:	2b00      	cmp	r3, #0
 800d138:	d119      	bne.n	800d16e <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4a2f      	ldr	r2, [pc, #188]	@ (800d1fc <HAL_ADC_ConfigChannel+0x98c>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d14b      	bne.n	800d1dc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a2a      	ldr	r2, [pc, #168]	@ (800d1f4 <HAL_ADC_ConfigChannel+0x984>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d004      	beq.n	800d158 <HAL_ADC_ConfigChannel+0x8e8>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a29      	ldr	r2, [pc, #164]	@ (800d1f8 <HAL_ADC_ConfigChannel+0x988>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d101      	bne.n	800d15c <HAL_ADC_ConfigChannel+0x8ec>
 800d158:	4a2a      	ldr	r2, [pc, #168]	@ (800d204 <HAL_ADC_ConfigChannel+0x994>)
 800d15a:	e000      	b.n	800d15e <HAL_ADC_ConfigChannel+0x8ee>
 800d15c:	4a24      	ldr	r2, [pc, #144]	@ (800d1f0 <HAL_ADC_ConfigChannel+0x980>)
 800d15e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d160:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d164:	4619      	mov	r1, r3
 800d166:	4610      	mov	r0, r2
 800d168:	f7fe fa95 	bl	800b696 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800d16c:	e036      	b.n	800d1dc <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a28      	ldr	r2, [pc, #160]	@ (800d214 <HAL_ADC_ConfigChannel+0x9a4>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d131      	bne.n	800d1dc <HAL_ADC_ConfigChannel+0x96c>
 800d178:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d17a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d12c      	bne.n	800d1dc <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a1d      	ldr	r2, [pc, #116]	@ (800d1fc <HAL_ADC_ConfigChannel+0x98c>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d127      	bne.n	800d1dc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a18      	ldr	r2, [pc, #96]	@ (800d1f4 <HAL_ADC_ConfigChannel+0x984>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d004      	beq.n	800d1a0 <HAL_ADC_ConfigChannel+0x930>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a17      	ldr	r2, [pc, #92]	@ (800d1f8 <HAL_ADC_ConfigChannel+0x988>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d101      	bne.n	800d1a4 <HAL_ADC_ConfigChannel+0x934>
 800d1a0:	4a18      	ldr	r2, [pc, #96]	@ (800d204 <HAL_ADC_ConfigChannel+0x994>)
 800d1a2:	e000      	b.n	800d1a6 <HAL_ADC_ConfigChannel+0x936>
 800d1a4:	4a12      	ldr	r2, [pc, #72]	@ (800d1f0 <HAL_ADC_ConfigChannel+0x980>)
 800d1a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d1a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	f7fe fa71 	bl	800b696 <LL_ADC_SetCommonPathInternalCh>
 800d1b4:	e012      	b.n	800d1dc <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d1ba:	f043 0220 	orr.w	r2, r3, #32
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800d1c8:	e008      	b.n	800d1dc <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d1ce:	f043 0220 	orr.w	r2, r3, #32
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800d1e4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3794      	adds	r7, #148	@ 0x94
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd90      	pop	{r4, r7, pc}
 800d1f0:	58026300 	.word	0x58026300
 800d1f4:	40022000 	.word	0x40022000
 800d1f8:	40022100 	.word	0x40022100
 800d1fc:	58026000 	.word	0x58026000
 800d200:	c7520000 	.word	0xc7520000
 800d204:	40022300 	.word	0x40022300
 800d208:	24000290 	.word	0x24000290
 800d20c:	053e2d63 	.word	0x053e2d63
 800d210:	c3210000 	.word	0xc3210000
 800d214:	cb840000 	.word	0xcb840000

0800d218 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b088      	sub	sp, #32
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800d222:	2300      	movs	r3, #0
 800d224:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fe fd58 	bl	800bce4 <LL_ADC_REG_IsConversionOngoing>
 800d234:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7fe fd7a 	bl	800bd34 <LL_ADC_INJ_IsConversionOngoing>
 800d240:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d103      	bne.n	800d250 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f000 8098 	beq.w	800d380 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d02a      	beq.n	800d2b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	7e5b      	ldrb	r3, [r3, #25]
 800d262:	2b01      	cmp	r3, #1
 800d264:	d126      	bne.n	800d2b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	7e1b      	ldrb	r3, [r3, #24]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d122      	bne.n	800d2b4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800d26e:	2301      	movs	r3, #1
 800d270:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800d272:	e014      	b.n	800d29e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	4a45      	ldr	r2, [pc, #276]	@ (800d38c <ADC_ConversionStop+0x174>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d90d      	bls.n	800d298 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d280:	f043 0210 	orr.w	r2, r3, #16
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d28c:	f043 0201 	orr.w	r2, r3, #1
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	e074      	b.n	800d382 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	3301      	adds	r3, #1
 800d29c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2a8:	2b40      	cmp	r3, #64	@ 0x40
 800d2aa:	d1e3      	bne.n	800d274 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2240      	movs	r2, #64	@ 0x40
 800d2b2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	d014      	beq.n	800d2e4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe fd10 	bl	800bce4 <LL_ADC_REG_IsConversionOngoing>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00c      	beq.n	800d2e4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fe fccd 	bl	800bc6e <LL_ADC_IsDisableOngoing>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d104      	bne.n	800d2e4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7fe fcec 	bl	800bcbc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d014      	beq.n	800d314 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fe fd20 	bl	800bd34 <LL_ADC_INJ_IsConversionOngoing>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00c      	beq.n	800d314 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fe fcb5 	bl	800bc6e <LL_ADC_IsDisableOngoing>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d104      	bne.n	800d314 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fe fcfc 	bl	800bd0c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	2b02      	cmp	r3, #2
 800d318:	d005      	beq.n	800d326 <ADC_ConversionStop+0x10e>
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	2b03      	cmp	r3, #3
 800d31e:	d105      	bne.n	800d32c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800d320:	230c      	movs	r3, #12
 800d322:	617b      	str	r3, [r7, #20]
        break;
 800d324:	e005      	b.n	800d332 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800d326:	2308      	movs	r3, #8
 800d328:	617b      	str	r3, [r7, #20]
        break;
 800d32a:	e002      	b.n	800d332 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800d32c:	2304      	movs	r3, #4
 800d32e:	617b      	str	r3, [r7, #20]
        break;
 800d330:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800d332:	f7fe f933 	bl	800b59c <HAL_GetTick>
 800d336:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800d338:	e01b      	b.n	800d372 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800d33a:	f7fe f92f 	bl	800b59c <HAL_GetTick>
 800d33e:	4602      	mov	r2, r0
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	2b05      	cmp	r3, #5
 800d346:	d914      	bls.n	800d372 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	689a      	ldr	r2, [r3, #8]
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	4013      	ands	r3, r2
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00d      	beq.n	800d372 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d35a:	f043 0210 	orr.w	r2, r3, #16
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d366:	f043 0201 	orr.w	r2, r3, #1
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e007      	b.n	800d382 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	689a      	ldr	r2, [r3, #8]
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	4013      	ands	r3, r2
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1dc      	bne.n	800d33a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800d380:	2300      	movs	r3, #0
}
 800d382:	4618      	mov	r0, r3
 800d384:	3720      	adds	r7, #32
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	000cdbff 	.word	0x000cdbff

0800d390 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7fe fc53 	bl	800bc48 <LL_ADC_IsEnabled>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d16e      	bne.n	800d486 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	689a      	ldr	r2, [r3, #8]
 800d3ae:	4b38      	ldr	r3, [pc, #224]	@ (800d490 <ADC_Enable+0x100>)
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00d      	beq.n	800d3d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3ba:	f043 0210 	orr.w	r2, r3, #16
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3c6:	f043 0201 	orr.w	r2, r3, #1
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	e05a      	b.n	800d488 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7fe fc0e 	bl	800bbf8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800d3dc:	f7fe f8de 	bl	800b59c <HAL_GetTick>
 800d3e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a2b      	ldr	r2, [pc, #172]	@ (800d494 <ADC_Enable+0x104>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d004      	beq.n	800d3f6 <ADC_Enable+0x66>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a29      	ldr	r2, [pc, #164]	@ (800d498 <ADC_Enable+0x108>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d101      	bne.n	800d3fa <ADC_Enable+0x6a>
 800d3f6:	4b29      	ldr	r3, [pc, #164]	@ (800d49c <ADC_Enable+0x10c>)
 800d3f8:	e000      	b.n	800d3fc <ADC_Enable+0x6c>
 800d3fa:	4b29      	ldr	r3, [pc, #164]	@ (800d4a0 <ADC_Enable+0x110>)
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fe fb91 	bl	800bb24 <LL_ADC_GetMultimode>
 800d402:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a23      	ldr	r2, [pc, #140]	@ (800d498 <ADC_Enable+0x108>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d002      	beq.n	800d414 <ADC_Enable+0x84>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	e000      	b.n	800d416 <ADC_Enable+0x86>
 800d414:	4b1f      	ldr	r3, [pc, #124]	@ (800d494 <ADC_Enable+0x104>)
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	6812      	ldr	r2, [r2, #0]
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d02c      	beq.n	800d478 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d130      	bne.n	800d486 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d424:	e028      	b.n	800d478 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fe fc0c 	bl	800bc48 <LL_ADC_IsEnabled>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d104      	bne.n	800d440 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7fe fbdc 	bl	800bbf8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800d440:	f7fe f8ac 	bl	800b59c <HAL_GetTick>
 800d444:	4602      	mov	r2, r0
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	1ad3      	subs	r3, r2, r3
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d914      	bls.n	800d478 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f003 0301 	and.w	r3, r3, #1
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d00d      	beq.n	800d478 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d460:	f043 0210 	orr.w	r2, r3, #16
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d46c:	f043 0201 	orr.w	r2, r3, #1
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800d474:	2301      	movs	r3, #1
 800d476:	e007      	b.n	800d488 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f003 0301 	and.w	r3, r3, #1
 800d482:	2b01      	cmp	r3, #1
 800d484:	d1cf      	bne.n	800d426 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800d486:	2300      	movs	r3, #0
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	8000003f 	.word	0x8000003f
 800d494:	40022000 	.word	0x40022000
 800d498:	40022100 	.word	0x40022100
 800d49c:	40022300 	.word	0x40022300
 800d4a0:	58026300 	.word	0x58026300

0800d4a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fe fbdc 	bl	800bc6e <LL_ADC_IsDisableOngoing>
 800d4b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fe fbc3 	bl	800bc48 <LL_ADC_IsEnabled>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d047      	beq.n	800d558 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d144      	bne.n	800d558 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	f003 030d 	and.w	r3, r3, #13
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d10c      	bne.n	800d4f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fe fb9d 	bl	800bc20 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	2203      	movs	r2, #3
 800d4ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800d4ee:	f7fe f855 	bl	800b59c <HAL_GetTick>
 800d4f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800d4f4:	e029      	b.n	800d54a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4fa:	f043 0210 	orr.w	r2, r3, #16
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d506:	f043 0201 	orr.w	r2, r3, #1
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 800d50e:	2301      	movs	r3, #1
 800d510:	e023      	b.n	800d55a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800d512:	f7fe f843 	bl	800b59c <HAL_GetTick>
 800d516:	4602      	mov	r2, r0
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	d914      	bls.n	800d54a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00d      	beq.n	800d54a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d532:	f043 0210 	orr.w	r2, r3, #16
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d53e:	f043 0201 	orr.w	r2, r3, #1
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	e007      	b.n	800d55a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	f003 0301 	and.w	r3, r3, #1
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1dc      	bne.n	800d512 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b084      	sub	sp, #16
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d56e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d574:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d14b      	bne.n	800d614 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d580:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f003 0308 	and.w	r3, r3, #8
 800d592:	2b00      	cmp	r3, #0
 800d594:	d021      	beq.n	800d5da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fe f9c8 	bl	800b930 <LL_ADC_REG_IsTriggerSourceSWStart>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d032      	beq.n	800d60c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d12b      	bne.n	800d60c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d11f      	bne.n	800d60c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5d0:	f043 0201 	orr.w	r2, r3, #1
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	661a      	str	r2, [r3, #96]	@ 0x60
 800d5d8:	e018      	b.n	800d60c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	68db      	ldr	r3, [r3, #12]
 800d5e0:	f003 0303 	and.w	r3, r3, #3
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d111      	bne.n	800d60c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d105      	bne.n	800d60c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d604:	f043 0201 	orr.w	r2, r3, #1
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d60c:	68f8      	ldr	r0, [r7, #12]
 800d60e:	f7f7 fccf 	bl	8004fb0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800d612:	e00e      	b.n	800d632 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d618:	f003 0310 	and.w	r3, r3, #16
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d003      	beq.n	800d628 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f7f7 fce1 	bl	8004fe8 <HAL_ADC_ErrorCallback>
}
 800d626:	e004      	b.n	800d632 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d62c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	4798      	blx	r3
}
 800d632:	bf00      	nop
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b084      	sub	sp, #16
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d646:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f7f7 fc95 	bl	8004f78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800d64e:	bf00      	nop
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b084      	sub	sp, #16
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d662:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d668:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d674:	f043 0204 	orr.w	r2, r3, #4
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800d67c:	68f8      	ldr	r0, [r7, #12]
 800d67e:	f7f7 fcb3 	bl	8004fe8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800d682:	bf00      	nop
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
	...

0800d68c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4a6c      	ldr	r2, [pc, #432]	@ (800d84c <ADC_ConfigureBoostMode+0x1c0>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d004      	beq.n	800d6a8 <ADC_ConfigureBoostMode+0x1c>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4a6b      	ldr	r2, [pc, #428]	@ (800d850 <ADC_ConfigureBoostMode+0x1c4>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d109      	bne.n	800d6bc <ADC_ConfigureBoostMode+0x30>
 800d6a8:	4b6a      	ldr	r3, [pc, #424]	@ (800d854 <ADC_ConfigureBoostMode+0x1c8>)
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	bf14      	ite	ne
 800d6b4:	2301      	movne	r3, #1
 800d6b6:	2300      	moveq	r3, #0
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	e008      	b.n	800d6ce <ADC_ConfigureBoostMode+0x42>
 800d6bc:	4b66      	ldr	r3, [pc, #408]	@ (800d858 <ADC_ConfigureBoostMode+0x1cc>)
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bf14      	ite	ne
 800d6c8:	2301      	movne	r3, #1
 800d6ca:	2300      	moveq	r3, #0
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d01c      	beq.n	800d70c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800d6d2:	f006 fb65 	bl	8013da0 <HAL_RCC_GetHCLKFreq>
 800d6d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d6e0:	d010      	beq.n	800d704 <ADC_ConfigureBoostMode+0x78>
 800d6e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d6e6:	d873      	bhi.n	800d7d0 <ADC_ConfigureBoostMode+0x144>
 800d6e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6ec:	d002      	beq.n	800d6f4 <ADC_ConfigureBoostMode+0x68>
 800d6ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d6f2:	d16d      	bne.n	800d7d0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	0c1b      	lsrs	r3, r3, #16
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d700:	60fb      	str	r3, [r7, #12]
        break;
 800d702:	e068      	b.n	800d7d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	089b      	lsrs	r3, r3, #2
 800d708:	60fb      	str	r3, [r7, #12]
        break;
 800d70a:	e064      	b.n	800d7d6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800d70c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d710:	f04f 0100 	mov.w	r1, #0
 800d714:	f007 fd82 	bl	801521c <HAL_RCCEx_GetPeriphCLKFreq>
 800d718:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800d722:	d051      	beq.n	800d7c8 <ADC_ConfigureBoostMode+0x13c>
 800d724:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800d728:	d854      	bhi.n	800d7d4 <ADC_ConfigureBoostMode+0x148>
 800d72a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800d72e:	d047      	beq.n	800d7c0 <ADC_ConfigureBoostMode+0x134>
 800d730:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800d734:	d84e      	bhi.n	800d7d4 <ADC_ConfigureBoostMode+0x148>
 800d736:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800d73a:	d03d      	beq.n	800d7b8 <ADC_ConfigureBoostMode+0x12c>
 800d73c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800d740:	d848      	bhi.n	800d7d4 <ADC_ConfigureBoostMode+0x148>
 800d742:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d746:	d033      	beq.n	800d7b0 <ADC_ConfigureBoostMode+0x124>
 800d748:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d74c:	d842      	bhi.n	800d7d4 <ADC_ConfigureBoostMode+0x148>
 800d74e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800d752:	d029      	beq.n	800d7a8 <ADC_ConfigureBoostMode+0x11c>
 800d754:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800d758:	d83c      	bhi.n	800d7d4 <ADC_ConfigureBoostMode+0x148>
 800d75a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800d75e:	d01a      	beq.n	800d796 <ADC_ConfigureBoostMode+0x10a>
 800d760:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800d764:	d836      	bhi.n	800d7d4 <ADC_ConfigureBoostMode+0x148>
 800d766:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800d76a:	d014      	beq.n	800d796 <ADC_ConfigureBoostMode+0x10a>
 800d76c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800d770:	d830      	bhi.n	800d7d4 <ADC_ConfigureBoostMode+0x148>
 800d772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d776:	d00e      	beq.n	800d796 <ADC_ConfigureBoostMode+0x10a>
 800d778:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d77c:	d82a      	bhi.n	800d7d4 <ADC_ConfigureBoostMode+0x148>
 800d77e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d782:	d008      	beq.n	800d796 <ADC_ConfigureBoostMode+0x10a>
 800d784:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d788:	d824      	bhi.n	800d7d4 <ADC_ConfigureBoostMode+0x148>
 800d78a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d78e:	d002      	beq.n	800d796 <ADC_ConfigureBoostMode+0x10a>
 800d790:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d794:	d11e      	bne.n	800d7d4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	0c9b      	lsrs	r3, r3, #18
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	68fa      	ldr	r2, [r7, #12]
 800d7a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7a4:	60fb      	str	r3, [r7, #12]
        break;
 800d7a6:	e016      	b.n	800d7d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	091b      	lsrs	r3, r3, #4
 800d7ac:	60fb      	str	r3, [r7, #12]
        break;
 800d7ae:	e012      	b.n	800d7d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	095b      	lsrs	r3, r3, #5
 800d7b4:	60fb      	str	r3, [r7, #12]
        break;
 800d7b6:	e00e      	b.n	800d7d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	099b      	lsrs	r3, r3, #6
 800d7bc:	60fb      	str	r3, [r7, #12]
        break;
 800d7be:	e00a      	b.n	800d7d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	09db      	lsrs	r3, r3, #7
 800d7c4:	60fb      	str	r3, [r7, #12]
        break;
 800d7c6:	e006      	b.n	800d7d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	0a1b      	lsrs	r3, r3, #8
 800d7cc:	60fb      	str	r3, [r7, #12]
        break;
 800d7ce:	e002      	b.n	800d7d6 <ADC_ConfigureBoostMode+0x14a>
        break;
 800d7d0:	bf00      	nop
 800d7d2:	e000      	b.n	800d7d6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800d7d4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	085b      	lsrs	r3, r3, #1
 800d7da:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	4a1f      	ldr	r2, [pc, #124]	@ (800d85c <ADC_ConfigureBoostMode+0x1d0>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d808      	bhi.n	800d7f6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	689a      	ldr	r2, [r3, #8]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800d7f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800d7f4:	e025      	b.n	800d842 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	4a19      	ldr	r2, [pc, #100]	@ (800d860 <ADC_ConfigureBoostMode+0x1d4>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d80a      	bhi.n	800d814 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	689b      	ldr	r3, [r3, #8]
 800d804:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d810:	609a      	str	r2, [r3, #8]
}
 800d812:	e016      	b.n	800d842 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	4a13      	ldr	r2, [pc, #76]	@ (800d864 <ADC_ConfigureBoostMode+0x1d8>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d80a      	bhi.n	800d832 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d82e:	609a      	str	r2, [r3, #8]
}
 800d830:	e007      	b.n	800d842 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	689a      	ldr	r2, [r3, #8]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800d840:	609a      	str	r2, [r3, #8]
}
 800d842:	bf00      	nop
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	40022000 	.word	0x40022000
 800d850:	40022100 	.word	0x40022100
 800d854:	40022300 	.word	0x40022300
 800d858:	58026300 	.word	0x58026300
 800d85c:	005f5e10 	.word	0x005f5e10
 800d860:	00bebc20 	.word	0x00bebc20
 800d864:	017d7840 	.word	0x017d7840

0800d868 <LL_ADC_IsEnabled>:
{
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	f003 0301 	and.w	r3, r3, #1
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d101      	bne.n	800d880 <LL_ADC_IsEnabled+0x18>
 800d87c:	2301      	movs	r3, #1
 800d87e:	e000      	b.n	800d882 <LL_ADC_IsEnabled+0x1a>
 800d880:	2300      	movs	r3, #0
}
 800d882:	4618      	mov	r0, r3
 800d884:	370c      	adds	r7, #12
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <LL_ADC_REG_IsConversionOngoing>:
{
 800d88e:	b480      	push	{r7}
 800d890:	b083      	sub	sp, #12
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	f003 0304 	and.w	r3, r3, #4
 800d89e:	2b04      	cmp	r3, #4
 800d8a0:	d101      	bne.n	800d8a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e000      	b.n	800d8a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800d8bc:	bf00      	nop
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800d8e4:	bf00      	nop
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800d90c:	bf00      	nop
 800d90e:	370c      	adds	r7, #12
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800d918:	b590      	push	{r4, r7, lr}
 800d91a:	b0a3      	sub	sp, #140	@ 0x8c
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d922:	2300      	movs	r3, #0
 800d924:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d101      	bne.n	800d936 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800d932:	2302      	movs	r3, #2
 800d934:	e0c1      	b.n	800daba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2201      	movs	r2, #1
 800d93a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800d93e:	2300      	movs	r3, #0
 800d940:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800d942:	2300      	movs	r3, #0
 800d944:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a5e      	ldr	r2, [pc, #376]	@ (800dac4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d102      	bne.n	800d956 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800d950:	4b5d      	ldr	r3, [pc, #372]	@ (800dac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800d952:	60fb      	str	r3, [r7, #12]
 800d954:	e001      	b.n	800d95a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800d956:	2300      	movs	r3, #0
 800d958:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d10b      	bne.n	800d978 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d964:	f043 0220 	orr.w	r2, r3, #32
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800d974:	2301      	movs	r3, #1
 800d976:	e0a0      	b.n	800daba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7ff ff87 	bl	800d88e <LL_ADC_REG_IsConversionOngoing>
 800d980:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4618      	mov	r0, r3
 800d98a:	f7ff ff80 	bl	800d88e <LL_ADC_REG_IsConversionOngoing>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	f040 8081 	bne.w	800da98 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800d996:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d17c      	bne.n	800da98 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a48      	ldr	r2, [pc, #288]	@ (800dac4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d004      	beq.n	800d9b2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a46      	ldr	r2, [pc, #280]	@ (800dac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d101      	bne.n	800d9b6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800d9b2:	4b46      	ldr	r3, [pc, #280]	@ (800dacc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800d9b4:	e000      	b.n	800d9b8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800d9b6:	4b46      	ldr	r3, [pc, #280]	@ (800dad0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800d9b8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d039      	beq.n	800da36 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800d9c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	431a      	orrs	r2, r3
 800d9d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a3a      	ldr	r2, [pc, #232]	@ (800dac4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d004      	beq.n	800d9e8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a39      	ldr	r2, [pc, #228]	@ (800dac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d10e      	bne.n	800da06 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800d9e8:	4836      	ldr	r0, [pc, #216]	@ (800dac4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800d9ea:	f7ff ff3d 	bl	800d868 <LL_ADC_IsEnabled>
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	4835      	ldr	r0, [pc, #212]	@ (800dac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800d9f2:	f7ff ff39 	bl	800d868 <LL_ADC_IsEnabled>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	4323      	orrs	r3, r4
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	bf0c      	ite	eq
 800d9fe:	2301      	moveq	r3, #1
 800da00:	2300      	movne	r3, #0
 800da02:	b2db      	uxtb	r3, r3
 800da04:	e008      	b.n	800da18 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800da06:	4833      	ldr	r0, [pc, #204]	@ (800dad4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800da08:	f7ff ff2e 	bl	800d868 <LL_ADC_IsEnabled>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	bf0c      	ite	eq
 800da12:	2301      	moveq	r3, #1
 800da14:	2300      	movne	r3, #0
 800da16:	b2db      	uxtb	r3, r3
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d047      	beq.n	800daac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800da1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da1e:	689a      	ldr	r2, [r3, #8]
 800da20:	4b2d      	ldr	r3, [pc, #180]	@ (800dad8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800da22:	4013      	ands	r3, r2
 800da24:	683a      	ldr	r2, [r7, #0]
 800da26:	6811      	ldr	r1, [r2, #0]
 800da28:	683a      	ldr	r2, [r7, #0]
 800da2a:	6892      	ldr	r2, [r2, #8]
 800da2c:	430a      	orrs	r2, r1
 800da2e:	431a      	orrs	r2, r3
 800da30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da32:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800da34:	e03a      	b.n	800daac <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800da36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800da3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da40:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a1f      	ldr	r2, [pc, #124]	@ (800dac4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d004      	beq.n	800da56 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a1d      	ldr	r2, [pc, #116]	@ (800dac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d10e      	bne.n	800da74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800da56:	481b      	ldr	r0, [pc, #108]	@ (800dac4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800da58:	f7ff ff06 	bl	800d868 <LL_ADC_IsEnabled>
 800da5c:	4604      	mov	r4, r0
 800da5e:	481a      	ldr	r0, [pc, #104]	@ (800dac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800da60:	f7ff ff02 	bl	800d868 <LL_ADC_IsEnabled>
 800da64:	4603      	mov	r3, r0
 800da66:	4323      	orrs	r3, r4
 800da68:	2b00      	cmp	r3, #0
 800da6a:	bf0c      	ite	eq
 800da6c:	2301      	moveq	r3, #1
 800da6e:	2300      	movne	r3, #0
 800da70:	b2db      	uxtb	r3, r3
 800da72:	e008      	b.n	800da86 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800da74:	4817      	ldr	r0, [pc, #92]	@ (800dad4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800da76:	f7ff fef7 	bl	800d868 <LL_ADC_IsEnabled>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	bf0c      	ite	eq
 800da80:	2301      	moveq	r3, #1
 800da82:	2300      	movne	r3, #0
 800da84:	b2db      	uxtb	r3, r3
 800da86:	2b00      	cmp	r3, #0
 800da88:	d010      	beq.n	800daac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800da8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da8c:	689a      	ldr	r2, [r3, #8]
 800da8e:	4b12      	ldr	r3, [pc, #72]	@ (800dad8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800da90:	4013      	ands	r3, r2
 800da92:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800da94:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800da96:	e009      	b.n	800daac <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da9c:	f043 0220 	orr.w	r2, r3, #32
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800daa4:	2301      	movs	r3, #1
 800daa6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800daaa:	e000      	b.n	800daae <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800daac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800dab6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800daba:	4618      	mov	r0, r3
 800dabc:	378c      	adds	r7, #140	@ 0x8c
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd90      	pop	{r4, r7, pc}
 800dac2:	bf00      	nop
 800dac4:	40022000 	.word	0x40022000
 800dac8:	40022100 	.word	0x40022100
 800dacc:	40022300 	.word	0x40022300
 800dad0:	58026300 	.word	0x58026300
 800dad4:	58026000 	.word	0x58026000
 800dad8:	fffff0e0 	.word	0xfffff0e0

0800dadc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f003 0307 	and.w	r3, r3, #7
 800daea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800daec:	4b0b      	ldr	r3, [pc, #44]	@ (800db1c <__NVIC_SetPriorityGrouping+0x40>)
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800daf2:	68ba      	ldr	r2, [r7, #8]
 800daf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800daf8:	4013      	ands	r3, r2
 800dafa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800db04:	4b06      	ldr	r3, [pc, #24]	@ (800db20 <__NVIC_SetPriorityGrouping+0x44>)
 800db06:	4313      	orrs	r3, r2
 800db08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800db0a:	4a04      	ldr	r2, [pc, #16]	@ (800db1c <__NVIC_SetPriorityGrouping+0x40>)
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	60d3      	str	r3, [r2, #12]
}
 800db10:	bf00      	nop
 800db12:	3714      	adds	r7, #20
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	e000ed00 	.word	0xe000ed00
 800db20:	05fa0000 	.word	0x05fa0000

0800db24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800db24:	b480      	push	{r7}
 800db26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800db28:	4b04      	ldr	r3, [pc, #16]	@ (800db3c <__NVIC_GetPriorityGrouping+0x18>)
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	0a1b      	lsrs	r3, r3, #8
 800db2e:	f003 0307 	and.w	r3, r3, #7
}
 800db32:	4618      	mov	r0, r3
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	e000ed00 	.word	0xe000ed00

0800db40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	4603      	mov	r3, r0
 800db48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800db4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	db0b      	blt.n	800db6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800db52:	88fb      	ldrh	r3, [r7, #6]
 800db54:	f003 021f 	and.w	r2, r3, #31
 800db58:	4907      	ldr	r1, [pc, #28]	@ (800db78 <__NVIC_EnableIRQ+0x38>)
 800db5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db5e:	095b      	lsrs	r3, r3, #5
 800db60:	2001      	movs	r0, #1
 800db62:	fa00 f202 	lsl.w	r2, r0, r2
 800db66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800db6a:	bf00      	nop
 800db6c:	370c      	adds	r7, #12
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	e000e100 	.word	0xe000e100

0800db7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	4603      	mov	r3, r0
 800db84:	6039      	str	r1, [r7, #0]
 800db86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800db88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	db0a      	blt.n	800dba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	b2da      	uxtb	r2, r3
 800db94:	490c      	ldr	r1, [pc, #48]	@ (800dbc8 <__NVIC_SetPriority+0x4c>)
 800db96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db9a:	0112      	lsls	r2, r2, #4
 800db9c:	b2d2      	uxtb	r2, r2
 800db9e:	440b      	add	r3, r1
 800dba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800dba4:	e00a      	b.n	800dbbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	4908      	ldr	r1, [pc, #32]	@ (800dbcc <__NVIC_SetPriority+0x50>)
 800dbac:	88fb      	ldrh	r3, [r7, #6]
 800dbae:	f003 030f 	and.w	r3, r3, #15
 800dbb2:	3b04      	subs	r3, #4
 800dbb4:	0112      	lsls	r2, r2, #4
 800dbb6:	b2d2      	uxtb	r2, r2
 800dbb8:	440b      	add	r3, r1
 800dbba:	761a      	strb	r2, [r3, #24]
}
 800dbbc:	bf00      	nop
 800dbbe:	370c      	adds	r7, #12
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr
 800dbc8:	e000e100 	.word	0xe000e100
 800dbcc:	e000ed00 	.word	0xe000ed00

0800dbd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b089      	sub	sp, #36	@ 0x24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f003 0307 	and.w	r3, r3, #7
 800dbe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	f1c3 0307 	rsb	r3, r3, #7
 800dbea:	2b04      	cmp	r3, #4
 800dbec:	bf28      	it	cs
 800dbee:	2304      	movcs	r3, #4
 800dbf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	3304      	adds	r3, #4
 800dbf6:	2b06      	cmp	r3, #6
 800dbf8:	d902      	bls.n	800dc00 <NVIC_EncodePriority+0x30>
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	3b03      	subs	r3, #3
 800dbfe:	e000      	b.n	800dc02 <NVIC_EncodePriority+0x32>
 800dc00:	2300      	movs	r3, #0
 800dc02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dc04:	f04f 32ff 	mov.w	r2, #4294967295
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc0e:	43da      	mvns	r2, r3
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	401a      	ands	r2, r3
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800dc18:	f04f 31ff 	mov.w	r1, #4294967295
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	fa01 f303 	lsl.w	r3, r1, r3
 800dc22:	43d9      	mvns	r1, r3
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dc28:	4313      	orrs	r3, r2
         );
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3724      	adds	r7, #36	@ 0x24
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr

0800dc36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b082      	sub	sp, #8
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7ff ff4c 	bl	800dadc <__NVIC_SetPriorityGrouping>
}
 800dc44:	bf00      	nop
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	4603      	mov	r3, r0
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
 800dc58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800dc5a:	f7ff ff63 	bl	800db24 <__NVIC_GetPriorityGrouping>
 800dc5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	68b9      	ldr	r1, [r7, #8]
 800dc64:	6978      	ldr	r0, [r7, #20]
 800dc66:	f7ff ffb3 	bl	800dbd0 <NVIC_EncodePriority>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc70:	4611      	mov	r1, r2
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7ff ff82 	bl	800db7c <__NVIC_SetPriority>
}
 800dc78:	bf00      	nop
 800dc7a:	3718      	adds	r7, #24
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	4603      	mov	r3, r0
 800dc88:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dc8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff ff56 	bl	800db40 <__NVIC_EnableIRQ>
}
 800dc94:	bf00      	nop
 800dc96:	3708      	adds	r7, #8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800dca0:	f3bf 8f5f 	dmb	sy
}
 800dca4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800dca6:	4b07      	ldr	r3, [pc, #28]	@ (800dcc4 <HAL_MPU_Disable+0x28>)
 800dca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcaa:	4a06      	ldr	r2, [pc, #24]	@ (800dcc4 <HAL_MPU_Disable+0x28>)
 800dcac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dcb0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800dcb2:	4b05      	ldr	r3, [pc, #20]	@ (800dcc8 <HAL_MPU_Disable+0x2c>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	605a      	str	r2, [r3, #4]
}
 800dcb8:	bf00      	nop
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop
 800dcc4:	e000ed00 	.word	0xe000ed00
 800dcc8:	e000ed90 	.word	0xe000ed90

0800dccc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800dcd4:	4a0b      	ldr	r2, [pc, #44]	@ (800dd04 <HAL_MPU_Enable+0x38>)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f043 0301 	orr.w	r3, r3, #1
 800dcdc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800dcde:	4b0a      	ldr	r3, [pc, #40]	@ (800dd08 <HAL_MPU_Enable+0x3c>)
 800dce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dce2:	4a09      	ldr	r2, [pc, #36]	@ (800dd08 <HAL_MPU_Enable+0x3c>)
 800dce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dce8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800dcea:	f3bf 8f4f 	dsb	sy
}
 800dcee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800dcf0:	f3bf 8f6f 	isb	sy
}
 800dcf4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800dcf6:	bf00      	nop
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	e000ed90 	.word	0xe000ed90
 800dd08:	e000ed00 	.word	0xe000ed00

0800dd0c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	785a      	ldrb	r2, [r3, #1]
 800dd18:	4b1b      	ldr	r3, [pc, #108]	@ (800dd88 <HAL_MPU_ConfigRegion+0x7c>)
 800dd1a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800dd1c:	4b1a      	ldr	r3, [pc, #104]	@ (800dd88 <HAL_MPU_ConfigRegion+0x7c>)
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	4a19      	ldr	r2, [pc, #100]	@ (800dd88 <HAL_MPU_ConfigRegion+0x7c>)
 800dd22:	f023 0301 	bic.w	r3, r3, #1
 800dd26:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800dd28:	4a17      	ldr	r2, [pc, #92]	@ (800dd88 <HAL_MPU_ConfigRegion+0x7c>)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	7b1b      	ldrb	r3, [r3, #12]
 800dd34:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	7adb      	ldrb	r3, [r3, #11]
 800dd3a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800dd3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	7a9b      	ldrb	r3, [r3, #10]
 800dd42:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800dd44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	7b5b      	ldrb	r3, [r3, #13]
 800dd4a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800dd4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	7b9b      	ldrb	r3, [r3, #14]
 800dd52:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800dd54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	7bdb      	ldrb	r3, [r3, #15]
 800dd5a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800dd5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	7a5b      	ldrb	r3, [r3, #9]
 800dd62:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800dd64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	7a1b      	ldrb	r3, [r3, #8]
 800dd6a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800dd6c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	7812      	ldrb	r2, [r2, #0]
 800dd72:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800dd74:	4a04      	ldr	r2, [pc, #16]	@ (800dd88 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800dd76:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800dd78:	6113      	str	r3, [r2, #16]
}
 800dd7a:	bf00      	nop
 800dd7c:	370c      	adds	r7, #12
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	e000ed90 	.word	0xe000ed90

0800dd8c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d101      	bne.n	800dd9e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	e014      	b.n	800ddc8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	791b      	ldrb	r3, [r3, #4]
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d105      	bne.n	800ddb4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7fc fcfa 	bl	800a7a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2202      	movs	r2, #2
 800ddb8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d101      	bne.n	800dde4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800dde0:	2301      	movs	r3, #1
 800dde2:	e046      	b.n	800de72 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	795b      	ldrb	r3, [r3, #5]
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d101      	bne.n	800ddf0 <HAL_DAC_Start+0x20>
 800ddec:	2302      	movs	r3, #2
 800ddee:	e040      	b.n	800de72 <HAL_DAC_Start+0xa2>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2202      	movs	r2, #2
 800ddfa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	6819      	ldr	r1, [r3, #0]
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	f003 0310 	and.w	r3, r3, #16
 800de08:	2201      	movs	r2, #1
 800de0a:	409a      	lsls	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	430a      	orrs	r2, r1
 800de12:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d10f      	bne.n	800de3a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800de24:	2b02      	cmp	r3, #2
 800de26:	d11d      	bne.n	800de64 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	685a      	ldr	r2, [r3, #4]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f042 0201 	orr.w	r2, r2, #1
 800de36:	605a      	str	r2, [r3, #4]
 800de38:	e014      	b.n	800de64 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	f003 0310 	and.w	r3, r3, #16
 800de4a:	2102      	movs	r1, #2
 800de4c:	fa01 f303 	lsl.w	r3, r1, r3
 800de50:	429a      	cmp	r2, r3
 800de52:	d107      	bne.n	800de64 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	685a      	ldr	r2, [r3, #4]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f042 0202 	orr.w	r2, r2, #2
 800de62:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2201      	movs	r2, #1
 800de68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2200      	movs	r2, #0
 800de6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800de7e:	b480      	push	{r7}
 800de80:	b083      	sub	sp, #12
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
 800de86:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d101      	bne.n	800de92 <HAL_DAC_Stop+0x14>
  {
    return HAL_ERROR;
 800de8e:	2301      	movs	r3, #1
 800de90:	e011      	b.n	800deb6 <HAL_DAC_Stop+0x38>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	6819      	ldr	r1, [r3, #0]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	f003 0310 	and.w	r3, r3, #16
 800de9e:	2201      	movs	r2, #1
 800dea0:	fa02 f303 	lsl.w	r3, r2, r3
 800dea4:	43da      	mvns	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	400a      	ands	r2, r1
 800deac:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2201      	movs	r2, #1
 800deb2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
	...

0800dec4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b086      	sub	sp, #24
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
 800ded0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d101      	bne.n	800dedc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800ded8:	2301      	movs	r3, #1
 800deda:	e0a2      	b.n	800e022 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	795b      	ldrb	r3, [r3, #5]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d101      	bne.n	800dee8 <HAL_DAC_Start_DMA+0x24>
 800dee4:	2302      	movs	r3, #2
 800dee6:	e09c      	b.n	800e022 <HAL_DAC_Start_DMA+0x15e>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2201      	movs	r2, #1
 800deec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2202      	movs	r2, #2
 800def2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d129      	bne.n	800df4e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	689b      	ldr	r3, [r3, #8]
 800defe:	4a4b      	ldr	r2, [pc, #300]	@ (800e02c <HAL_DAC_Start_DMA+0x168>)
 800df00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	689b      	ldr	r3, [r3, #8]
 800df06:	4a4a      	ldr	r2, [pc, #296]	@ (800e030 <HAL_DAC_Start_DMA+0x16c>)
 800df08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	689b      	ldr	r3, [r3, #8]
 800df0e:	4a49      	ldr	r2, [pc, #292]	@ (800e034 <HAL_DAC_Start_DMA+0x170>)
 800df10:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800df20:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800df22:	6a3b      	ldr	r3, [r7, #32]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <HAL_DAC_Start_DMA+0x6c>
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	2b04      	cmp	r3, #4
 800df2c:	d005      	beq.n	800df3a <HAL_DAC_Start_DMA+0x76>
 800df2e:	e009      	b.n	800df44 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3308      	adds	r3, #8
 800df36:	613b      	str	r3, [r7, #16]
        break;
 800df38:	e033      	b.n	800dfa2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	330c      	adds	r3, #12
 800df40:	613b      	str	r3, [r7, #16]
        break;
 800df42:	e02e      	b.n	800dfa2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	3310      	adds	r3, #16
 800df4a:	613b      	str	r3, [r7, #16]
        break;
 800df4c:	e029      	b.n	800dfa2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	4a39      	ldr	r2, [pc, #228]	@ (800e038 <HAL_DAC_Start_DMA+0x174>)
 800df54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	4a38      	ldr	r2, [pc, #224]	@ (800e03c <HAL_DAC_Start_DMA+0x178>)
 800df5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	4a37      	ldr	r2, [pc, #220]	@ (800e040 <HAL_DAC_Start_DMA+0x17c>)
 800df64:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800df74:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800df76:	6a3b      	ldr	r3, [r7, #32]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d003      	beq.n	800df84 <HAL_DAC_Start_DMA+0xc0>
 800df7c:	6a3b      	ldr	r3, [r7, #32]
 800df7e:	2b04      	cmp	r3, #4
 800df80:	d005      	beq.n	800df8e <HAL_DAC_Start_DMA+0xca>
 800df82:	e009      	b.n	800df98 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	3314      	adds	r3, #20
 800df8a:	613b      	str	r3, [r7, #16]
        break;
 800df8c:	e009      	b.n	800dfa2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	3318      	adds	r3, #24
 800df94:	613b      	str	r3, [r7, #16]
        break;
 800df96:	e004      	b.n	800dfa2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	331c      	adds	r3, #28
 800df9e:	613b      	str	r3, [r7, #16]
        break;
 800dfa0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d111      	bne.n	800dfcc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dfb6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	6898      	ldr	r0, [r3, #8]
 800dfbc:	6879      	ldr	r1, [r7, #4]
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	f000 fe3f 	bl	800ec44 <HAL_DMA_Start_IT>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	75fb      	strb	r3, [r7, #23]
 800dfca:	e010      	b.n	800dfee <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800dfda:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	68d8      	ldr	r0, [r3, #12]
 800dfe0:	6879      	ldr	r1, [r7, #4]
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	693a      	ldr	r2, [r7, #16]
 800dfe6:	f000 fe2d 	bl	800ec44 <HAL_DMA_Start_IT>
 800dfea:	4603      	mov	r3, r0
 800dfec:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2200      	movs	r2, #0
 800dff2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800dff4:	7dfb      	ldrb	r3, [r7, #23]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10c      	bne.n	800e014 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	6819      	ldr	r1, [r3, #0]
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	f003 0310 	and.w	r3, r3, #16
 800e006:	2201      	movs	r2, #1
 800e008:	409a      	lsls	r2, r3
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	430a      	orrs	r2, r1
 800e010:	601a      	str	r2, [r3, #0]
 800e012:	e005      	b.n	800e020 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	691b      	ldr	r3, [r3, #16]
 800e018:	f043 0204 	orr.w	r2, r3, #4
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800e020:	7dfb      	ldrb	r3, [r7, #23]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3718      	adds	r7, #24
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	0800e495 	.word	0x0800e495
 800e030:	0800e4b7 	.word	0x0800e4b7
 800e034:	0800e4d3 	.word	0x0800e4d3
 800e038:	0800e529 	.word	0x0800e529
 800e03c:	0800e54b 	.word	0x0800e54b
 800e040:	0800e567 	.word	0x0800e567

0800e044 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800e054:	2301      	movs	r3, #1
 800e056:	e03e      	b.n	800e0d6 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	6819      	ldr	r1, [r3, #0]
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	f003 0310 	and.w	r3, r3, #16
 800e064:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e068:	fa02 f303 	lsl.w	r3, r2, r3
 800e06c:	43da      	mvns	r2, r3
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	400a      	ands	r2, r1
 800e074:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	6819      	ldr	r1, [r3, #0]
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	f003 0310 	and.w	r3, r3, #16
 800e082:	2201      	movs	r2, #1
 800e084:	fa02 f303 	lsl.w	r3, r2, r3
 800e088:	43da      	mvns	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	400a      	ands	r2, r1
 800e090:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10d      	bne.n	800e0b4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	689b      	ldr	r3, [r3, #8]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f001 f83b 	bl	800f118 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e0b0:	601a      	str	r2, [r3, #0]
 800e0b2:	e00c      	b.n	800e0ce <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f001 f82d 	bl	800f118 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800e0cc:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800e0d4:	2300      	movs	r3, #0
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b084      	sub	sp, #16
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0f4:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d01d      	beq.n	800e13c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e106:	2b00      	cmp	r3, #0
 800e108:	d018      	beq.n	800e13c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2204      	movs	r2, #4
 800e10e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	691b      	ldr	r3, [r3, #16]
 800e114:	f043 0201 	orr.w	r2, r3, #1
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e124:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	681a      	ldr	r2, [r3, #0]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e134:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f85b 	bl	800e1f2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e142:	2b00      	cmp	r3, #0
 800e144:	d01d      	beq.n	800e182 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d018      	beq.n	800e182 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2204      	movs	r2, #4
 800e154:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	691b      	ldr	r3, [r3, #16]
 800e15a:	f043 0202 	orr.w	r2, r3, #2
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800e16a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800e17a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f000 f9c9 	bl	800e514 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800e182:	bf00      	nop
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800e18a:	b480      	push	{r7}
 800e18c:	b087      	sub	sp, #28
 800e18e:	af00      	add	r7, sp, #0
 800e190:	60f8      	str	r0, [r7, #12]
 800e192:	60b9      	str	r1, [r7, #8]
 800e194:	607a      	str	r2, [r7, #4]
 800e196:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800e198:	2300      	movs	r3, #0
 800e19a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d101      	bne.n	800e1a6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e015      	b.n	800e1d2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d105      	bne.n	800e1be <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800e1b2:	697a      	ldr	r2, [r7, #20]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	3308      	adds	r3, #8
 800e1ba:	617b      	str	r3, [r7, #20]
 800e1bc:	e004      	b.n	800e1c8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4413      	add	r3, r2
 800e1c4:	3314      	adds	r3, #20
 800e1c6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	371c      	adds	r7, #28
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr

0800e1de <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800e1de:	b480      	push	{r7}
 800e1e0:	b083      	sub	sp, #12
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800e1e6:	bf00      	nop
 800e1e8:	370c      	adds	r7, #12
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr

0800e1f2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800e1f2:	b480      	push	{r7}
 800e1f4:	b083      	sub	sp, #12
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800e1fa:	bf00      	nop
 800e1fc:	370c      	adds	r7, #12
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
	...

0800e208 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b08a      	sub	sp, #40	@ 0x28
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e214:	2300      	movs	r3, #0
 800e216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d002      	beq.n	800e226 <HAL_DAC_ConfigChannel+0x1e>
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d101      	bne.n	800e22a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800e226:	2301      	movs	r3, #1
 800e228:	e12d      	b.n	800e486 <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	795b      	ldrb	r3, [r3, #5]
 800e234:	2b01      	cmp	r3, #1
 800e236:	d101      	bne.n	800e23c <HAL_DAC_ConfigChannel+0x34>
 800e238:	2302      	movs	r3, #2
 800e23a:	e124      	b.n	800e486 <HAL_DAC_ConfigChannel+0x27e>
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2201      	movs	r2, #1
 800e240:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2202      	movs	r2, #2
 800e246:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b04      	cmp	r3, #4
 800e24e:	d17a      	bne.n	800e346 <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800e250:	f7fd f9a4 	bl	800b59c <HAL_GetTick>
 800e254:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d13d      	bne.n	800e2d8 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800e25c:	e018      	b.n	800e290 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800e25e:	f7fd f99d 	bl	800b59c <HAL_GetTick>
 800e262:	4602      	mov	r2, r0
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	1ad3      	subs	r3, r2, r3
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d911      	bls.n	800e290 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e272:	4b87      	ldr	r3, [pc, #540]	@ (800e490 <HAL_DAC_ConfigChannel+0x288>)
 800e274:	4013      	ands	r3, r2
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00a      	beq.n	800e290 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	f043 0208 	orr.w	r2, r3, #8
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2203      	movs	r2, #3
 800e28a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800e28c:	2303      	movs	r3, #3
 800e28e:	e0fa      	b.n	800e486 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e296:	4b7e      	ldr	r3, [pc, #504]	@ (800e490 <HAL_DAC_ConfigChannel+0x288>)
 800e298:	4013      	ands	r3, r2
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d1df      	bne.n	800e25e <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	6992      	ldr	r2, [r2, #24]
 800e2a6:	641a      	str	r2, [r3, #64]	@ 0x40
 800e2a8:	e020      	b.n	800e2ec <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800e2aa:	f7fd f977 	bl	800b59c <HAL_GetTick>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	1ad3      	subs	r3, r2, r3
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d90f      	bls.n	800e2d8 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	da0a      	bge.n	800e2d8 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	f043 0208 	orr.w	r2, r3, #8
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2203      	movs	r2, #3
 800e2d2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800e2d4:	2303      	movs	r3, #3
 800e2d6:	e0d6      	b.n	800e486 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	dbe3      	blt.n	800e2aa <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68ba      	ldr	r2, [r7, #8]
 800e2e8:	6992      	ldr	r2, [r2, #24]
 800e2ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f003 0310 	and.w	r3, r3, #16
 800e2f8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800e2fc:	fa01 f303 	lsl.w	r3, r1, r3
 800e300:	43db      	mvns	r3, r3
 800e302:	ea02 0103 	and.w	r1, r2, r3
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	69da      	ldr	r2, [r3, #28]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f003 0310 	and.w	r3, r3, #16
 800e310:	409a      	lsls	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	430a      	orrs	r2, r1
 800e318:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f003 0310 	and.w	r3, r3, #16
 800e326:	21ff      	movs	r1, #255	@ 0xff
 800e328:	fa01 f303 	lsl.w	r3, r1, r3
 800e32c:	43db      	mvns	r3, r3
 800e32e:	ea02 0103 	and.w	r1, r2, r3
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	6a1a      	ldr	r2, [r3, #32]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f003 0310 	and.w	r3, r3, #16
 800e33c:	409a      	lsls	r2, r3
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	430a      	orrs	r2, r1
 800e344:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	691b      	ldr	r3, [r3, #16]
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d11d      	bne.n	800e38a <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e354:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f003 0310 	and.w	r3, r3, #16
 800e35c:	221f      	movs	r2, #31
 800e35e:	fa02 f303 	lsl.w	r3, r2, r3
 800e362:	43db      	mvns	r3, r3
 800e364:	69ba      	ldr	r2, [r7, #24]
 800e366:	4013      	ands	r3, r2
 800e368:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	695b      	ldr	r3, [r3, #20]
 800e36e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f003 0310 	and.w	r3, r3, #16
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	fa02 f303 	lsl.w	r3, r2, r3
 800e37c:	69ba      	ldr	r2, [r7, #24]
 800e37e:	4313      	orrs	r3, r2
 800e380:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	69ba      	ldr	r2, [r7, #24]
 800e388:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e390:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f003 0310 	and.w	r3, r3, #16
 800e398:	2207      	movs	r2, #7
 800e39a:	fa02 f303 	lsl.w	r3, r2, r3
 800e39e:	43db      	mvns	r3, r3
 800e3a0:	69ba      	ldr	r2, [r7, #24]
 800e3a2:	4013      	ands	r3, r2
 800e3a4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	68db      	ldr	r3, [r3, #12]
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d102      	bne.n	800e3b4 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3b2:	e00f      	b.n	800e3d4 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d102      	bne.n	800e3c2 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3c0:	e008      	b.n	800e3d4 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d102      	bne.n	800e3d0 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3ce:	e001      	b.n	800e3d4 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	689b      	ldr	r3, [r3, #8]
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f003 0310 	and.w	r3, r3, #16
 800e3ea:	697a      	ldr	r2, [r7, #20]
 800e3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f0:	69ba      	ldr	r2, [r7, #24]
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	69ba      	ldr	r2, [r7, #24]
 800e3fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	6819      	ldr	r1, [r3, #0]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f003 0310 	and.w	r3, r3, #16
 800e40a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800e40e:	fa02 f303 	lsl.w	r3, r2, r3
 800e412:	43da      	mvns	r2, r3
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	400a      	ands	r2, r1
 800e41a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f003 0310 	and.w	r3, r3, #16
 800e42a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800e42e:	fa02 f303 	lsl.w	r3, r2, r3
 800e432:	43db      	mvns	r3, r3
 800e434:	69ba      	ldr	r2, [r7, #24]
 800e436:	4013      	ands	r3, r2
 800e438:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f003 0310 	and.w	r3, r3, #16
 800e446:	697a      	ldr	r2, [r7, #20]
 800e448:	fa02 f303 	lsl.w	r3, r2, r3
 800e44c:	69ba      	ldr	r2, [r7, #24]
 800e44e:	4313      	orrs	r3, r2
 800e450:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	69ba      	ldr	r2, [r7, #24]
 800e458:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	6819      	ldr	r1, [r3, #0]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f003 0310 	and.w	r3, r3, #16
 800e466:	22c0      	movs	r2, #192	@ 0xc0
 800e468:	fa02 f303 	lsl.w	r3, r2, r3
 800e46c:	43da      	mvns	r2, r3
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	400a      	ands	r2, r1
 800e474:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2201      	movs	r2, #1
 800e47a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2200      	movs	r2, #0
 800e480:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800e482:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800e486:	4618      	mov	r0, r3
 800e488:	3728      	adds	r7, #40	@ 0x28
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	20008000 	.word	0x20008000

0800e494 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f7fa fcce 	bl	8008e44 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	711a      	strb	r2, [r3, #4]
}
 800e4ae:	bf00      	nop
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b084      	sub	sp, #16
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f7fa fcb3 	bl	8008e30 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800e4ca:	bf00      	nop
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800e4d2:	b580      	push	{r7, lr}
 800e4d4:	b084      	sub	sp, #16
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	691b      	ldr	r3, [r3, #16]
 800e4e4:	f043 0204 	orr.w	r2, r3, #4
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f7ff fe76 	bl	800e1de <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	711a      	strb	r2, [r3, #4]
}
 800e4f8:	bf00      	nop
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800e508:	bf00      	nop
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e534:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f7fa fc98 	bl	8008e6c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2201      	movs	r2, #1
 800e540:	711a      	strb	r2, [r3, #4]
}
 800e542:	bf00      	nop
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b084      	sub	sp, #16
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e556:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f7fa fc7d 	bl	8008e58 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800e55e:	bf00      	nop
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800e566:	b580      	push	{r7, lr}
 800e568:	b084      	sub	sp, #16
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e572:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	f043 0204 	orr.w	r2, r3, #4
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f7ff ffbd 	bl	800e500 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2201      	movs	r2, #1
 800e58a:	711a      	strb	r2, [r3, #4]
}
 800e58c:	bf00      	nop
 800e58e:	3710      	adds	r7, #16
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b086      	sub	sp, #24
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800e59c:	f7fc fffe 	bl	800b59c <HAL_GetTick>
 800e5a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d101      	bne.n	800e5ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e312      	b.n	800ebd2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a66      	ldr	r2, [pc, #408]	@ (800e74c <HAL_DMA_Init+0x1b8>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d04a      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a65      	ldr	r2, [pc, #404]	@ (800e750 <HAL_DMA_Init+0x1bc>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d045      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a63      	ldr	r2, [pc, #396]	@ (800e754 <HAL_DMA_Init+0x1c0>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d040      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	4a62      	ldr	r2, [pc, #392]	@ (800e758 <HAL_DMA_Init+0x1c4>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d03b      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a60      	ldr	r2, [pc, #384]	@ (800e75c <HAL_DMA_Init+0x1c8>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d036      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4a5f      	ldr	r2, [pc, #380]	@ (800e760 <HAL_DMA_Init+0x1cc>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d031      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a5d      	ldr	r2, [pc, #372]	@ (800e764 <HAL_DMA_Init+0x1d0>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d02c      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4a5c      	ldr	r2, [pc, #368]	@ (800e768 <HAL_DMA_Init+0x1d4>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d027      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4a5a      	ldr	r2, [pc, #360]	@ (800e76c <HAL_DMA_Init+0x1d8>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d022      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a59      	ldr	r2, [pc, #356]	@ (800e770 <HAL_DMA_Init+0x1dc>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d01d      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a57      	ldr	r2, [pc, #348]	@ (800e774 <HAL_DMA_Init+0x1e0>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d018      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a56      	ldr	r2, [pc, #344]	@ (800e778 <HAL_DMA_Init+0x1e4>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d013      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a54      	ldr	r2, [pc, #336]	@ (800e77c <HAL_DMA_Init+0x1e8>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d00e      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a53      	ldr	r2, [pc, #332]	@ (800e780 <HAL_DMA_Init+0x1ec>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d009      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a51      	ldr	r2, [pc, #324]	@ (800e784 <HAL_DMA_Init+0x1f0>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d004      	beq.n	800e64c <HAL_DMA_Init+0xb8>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a50      	ldr	r2, [pc, #320]	@ (800e788 <HAL_DMA_Init+0x1f4>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d101      	bne.n	800e650 <HAL_DMA_Init+0xbc>
 800e64c:	2301      	movs	r3, #1
 800e64e:	e000      	b.n	800e652 <HAL_DMA_Init+0xbe>
 800e650:	2300      	movs	r3, #0
 800e652:	2b00      	cmp	r3, #0
 800e654:	f000 813c 	beq.w	800e8d0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2202      	movs	r2, #2
 800e65c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a37      	ldr	r2, [pc, #220]	@ (800e74c <HAL_DMA_Init+0x1b8>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d04a      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a36      	ldr	r2, [pc, #216]	@ (800e750 <HAL_DMA_Init+0x1bc>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d045      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a34      	ldr	r2, [pc, #208]	@ (800e754 <HAL_DMA_Init+0x1c0>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d040      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a33      	ldr	r2, [pc, #204]	@ (800e758 <HAL_DMA_Init+0x1c4>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d03b      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a31      	ldr	r2, [pc, #196]	@ (800e75c <HAL_DMA_Init+0x1c8>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d036      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a30      	ldr	r2, [pc, #192]	@ (800e760 <HAL_DMA_Init+0x1cc>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d031      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a2e      	ldr	r2, [pc, #184]	@ (800e764 <HAL_DMA_Init+0x1d0>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d02c      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a2d      	ldr	r2, [pc, #180]	@ (800e768 <HAL_DMA_Init+0x1d4>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d027      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a2b      	ldr	r2, [pc, #172]	@ (800e76c <HAL_DMA_Init+0x1d8>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d022      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a2a      	ldr	r2, [pc, #168]	@ (800e770 <HAL_DMA_Init+0x1dc>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d01d      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a28      	ldr	r2, [pc, #160]	@ (800e774 <HAL_DMA_Init+0x1e0>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d018      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4a27      	ldr	r2, [pc, #156]	@ (800e778 <HAL_DMA_Init+0x1e4>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d013      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4a25      	ldr	r2, [pc, #148]	@ (800e77c <HAL_DMA_Init+0x1e8>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d00e      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	4a24      	ldr	r2, [pc, #144]	@ (800e780 <HAL_DMA_Init+0x1ec>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d009      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a22      	ldr	r2, [pc, #136]	@ (800e784 <HAL_DMA_Init+0x1f0>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d004      	beq.n	800e708 <HAL_DMA_Init+0x174>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a21      	ldr	r2, [pc, #132]	@ (800e788 <HAL_DMA_Init+0x1f4>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d108      	bne.n	800e71a <HAL_DMA_Init+0x186>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f022 0201 	bic.w	r2, r2, #1
 800e716:	601a      	str	r2, [r3, #0]
 800e718:	e007      	b.n	800e72a <HAL_DMA_Init+0x196>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f022 0201 	bic.w	r2, r2, #1
 800e728:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e72a:	e02f      	b.n	800e78c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e72c:	f7fc ff36 	bl	800b59c <HAL_GetTick>
 800e730:	4602      	mov	r2, r0
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	2b05      	cmp	r3, #5
 800e738:	d928      	bls.n	800e78c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2220      	movs	r2, #32
 800e73e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2203      	movs	r2, #3
 800e744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800e748:	2301      	movs	r3, #1
 800e74a:	e242      	b.n	800ebd2 <HAL_DMA_Init+0x63e>
 800e74c:	40020010 	.word	0x40020010
 800e750:	40020028 	.word	0x40020028
 800e754:	40020040 	.word	0x40020040
 800e758:	40020058 	.word	0x40020058
 800e75c:	40020070 	.word	0x40020070
 800e760:	40020088 	.word	0x40020088
 800e764:	400200a0 	.word	0x400200a0
 800e768:	400200b8 	.word	0x400200b8
 800e76c:	40020410 	.word	0x40020410
 800e770:	40020428 	.word	0x40020428
 800e774:	40020440 	.word	0x40020440
 800e778:	40020458 	.word	0x40020458
 800e77c:	40020470 	.word	0x40020470
 800e780:	40020488 	.word	0x40020488
 800e784:	400204a0 	.word	0x400204a0
 800e788:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f003 0301 	and.w	r3, r3, #1
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1c8      	bne.n	800e72c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e7a2:	697a      	ldr	r2, [r7, #20]
 800e7a4:	4b83      	ldr	r3, [pc, #524]	@ (800e9b4 <HAL_DMA_Init+0x420>)
 800e7a6:	4013      	ands	r3, r2
 800e7a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800e7b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e7be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	699b      	ldr	r3, [r3, #24]
 800e7c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e7ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6a1b      	ldr	r3, [r3, #32]
 800e7d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800e7d2:	697a      	ldr	r2, [r7, #20]
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7dc:	2b04      	cmp	r3, #4
 800e7de:	d107      	bne.n	800e7f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	697a      	ldr	r2, [r7, #20]
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	2b28      	cmp	r3, #40	@ 0x28
 800e7f6:	d903      	bls.n	800e800 <HAL_DMA_Init+0x26c>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7fe:	d91f      	bls.n	800e840 <HAL_DMA_Init+0x2ac>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	2b3e      	cmp	r3, #62	@ 0x3e
 800e806:	d903      	bls.n	800e810 <HAL_DMA_Init+0x27c>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	2b42      	cmp	r3, #66	@ 0x42
 800e80e:	d917      	bls.n	800e840 <HAL_DMA_Init+0x2ac>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	2b46      	cmp	r3, #70	@ 0x46
 800e816:	d903      	bls.n	800e820 <HAL_DMA_Init+0x28c>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	2b48      	cmp	r3, #72	@ 0x48
 800e81e:	d90f      	bls.n	800e840 <HAL_DMA_Init+0x2ac>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	2b4e      	cmp	r3, #78	@ 0x4e
 800e826:	d903      	bls.n	800e830 <HAL_DMA_Init+0x29c>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	2b52      	cmp	r3, #82	@ 0x52
 800e82e:	d907      	bls.n	800e840 <HAL_DMA_Init+0x2ac>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	2b73      	cmp	r3, #115	@ 0x73
 800e836:	d905      	bls.n	800e844 <HAL_DMA_Init+0x2b0>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	2b77      	cmp	r3, #119	@ 0x77
 800e83e:	d801      	bhi.n	800e844 <HAL_DMA_Init+0x2b0>
 800e840:	2301      	movs	r3, #1
 800e842:	e000      	b.n	800e846 <HAL_DMA_Init+0x2b2>
 800e844:	2300      	movs	r3, #0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d003      	beq.n	800e852 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e850:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	697a      	ldr	r2, [r7, #20]
 800e858:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	695b      	ldr	r3, [r3, #20]
 800e860:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	f023 0307 	bic.w	r3, r3, #7
 800e868:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e86e:	697a      	ldr	r2, [r7, #20]
 800e870:	4313      	orrs	r3, r2
 800e872:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e878:	2b04      	cmp	r3, #4
 800e87a:	d117      	bne.n	800e8ac <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e880:	697a      	ldr	r2, [r7, #20]
 800e882:	4313      	orrs	r3, r2
 800e884:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00e      	beq.n	800e8ac <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f002 fb3a 	bl	8010f08 <DMA_CheckFifoParam>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d008      	beq.n	800e8ac <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2240      	movs	r2, #64	@ 0x40
 800e89e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	e192      	b.n	800ebd2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	697a      	ldr	r2, [r7, #20]
 800e8b2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f002 fa75 	bl	8010da4 <DMA_CalcBaseAndBitshift>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8c2:	f003 031f 	and.w	r3, r3, #31
 800e8c6:	223f      	movs	r2, #63	@ 0x3f
 800e8c8:	409a      	lsls	r2, r3
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	609a      	str	r2, [r3, #8]
 800e8ce:	e0c8      	b.n	800ea62 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4a38      	ldr	r2, [pc, #224]	@ (800e9b8 <HAL_DMA_Init+0x424>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d022      	beq.n	800e920 <HAL_DMA_Init+0x38c>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a37      	ldr	r2, [pc, #220]	@ (800e9bc <HAL_DMA_Init+0x428>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d01d      	beq.n	800e920 <HAL_DMA_Init+0x38c>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a35      	ldr	r2, [pc, #212]	@ (800e9c0 <HAL_DMA_Init+0x42c>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d018      	beq.n	800e920 <HAL_DMA_Init+0x38c>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4a34      	ldr	r2, [pc, #208]	@ (800e9c4 <HAL_DMA_Init+0x430>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d013      	beq.n	800e920 <HAL_DMA_Init+0x38c>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4a32      	ldr	r2, [pc, #200]	@ (800e9c8 <HAL_DMA_Init+0x434>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d00e      	beq.n	800e920 <HAL_DMA_Init+0x38c>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4a31      	ldr	r2, [pc, #196]	@ (800e9cc <HAL_DMA_Init+0x438>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d009      	beq.n	800e920 <HAL_DMA_Init+0x38c>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a2f      	ldr	r2, [pc, #188]	@ (800e9d0 <HAL_DMA_Init+0x43c>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d004      	beq.n	800e920 <HAL_DMA_Init+0x38c>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a2e      	ldr	r2, [pc, #184]	@ (800e9d4 <HAL_DMA_Init+0x440>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d101      	bne.n	800e924 <HAL_DMA_Init+0x390>
 800e920:	2301      	movs	r3, #1
 800e922:	e000      	b.n	800e926 <HAL_DMA_Init+0x392>
 800e924:	2300      	movs	r3, #0
 800e926:	2b00      	cmp	r3, #0
 800e928:	f000 8092 	beq.w	800ea50 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a21      	ldr	r2, [pc, #132]	@ (800e9b8 <HAL_DMA_Init+0x424>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d021      	beq.n	800e97a <HAL_DMA_Init+0x3e6>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4a20      	ldr	r2, [pc, #128]	@ (800e9bc <HAL_DMA_Init+0x428>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d01c      	beq.n	800e97a <HAL_DMA_Init+0x3e6>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a1e      	ldr	r2, [pc, #120]	@ (800e9c0 <HAL_DMA_Init+0x42c>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d017      	beq.n	800e97a <HAL_DMA_Init+0x3e6>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a1d      	ldr	r2, [pc, #116]	@ (800e9c4 <HAL_DMA_Init+0x430>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d012      	beq.n	800e97a <HAL_DMA_Init+0x3e6>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a1b      	ldr	r2, [pc, #108]	@ (800e9c8 <HAL_DMA_Init+0x434>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d00d      	beq.n	800e97a <HAL_DMA_Init+0x3e6>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4a1a      	ldr	r2, [pc, #104]	@ (800e9cc <HAL_DMA_Init+0x438>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d008      	beq.n	800e97a <HAL_DMA_Init+0x3e6>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a18      	ldr	r2, [pc, #96]	@ (800e9d0 <HAL_DMA_Init+0x43c>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d003      	beq.n	800e97a <HAL_DMA_Init+0x3e6>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4a17      	ldr	r2, [pc, #92]	@ (800e9d4 <HAL_DMA_Init+0x440>)
 800e978:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2202      	movs	r2, #2
 800e97e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2200      	movs	r2, #0
 800e986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	4b10      	ldr	r3, [pc, #64]	@ (800e9d8 <HAL_DMA_Init+0x444>)
 800e996:	4013      	ands	r3, r2
 800e998:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	689b      	ldr	r3, [r3, #8]
 800e99e:	2b40      	cmp	r3, #64	@ 0x40
 800e9a0:	d01c      	beq.n	800e9dc <HAL_DMA_Init+0x448>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	2b80      	cmp	r3, #128	@ 0x80
 800e9a8:	d102      	bne.n	800e9b0 <HAL_DMA_Init+0x41c>
 800e9aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e9ae:	e016      	b.n	800e9de <HAL_DMA_Init+0x44a>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	e014      	b.n	800e9de <HAL_DMA_Init+0x44a>
 800e9b4:	fe10803f 	.word	0xfe10803f
 800e9b8:	58025408 	.word	0x58025408
 800e9bc:	5802541c 	.word	0x5802541c
 800e9c0:	58025430 	.word	0x58025430
 800e9c4:	58025444 	.word	0x58025444
 800e9c8:	58025458 	.word	0x58025458
 800e9cc:	5802546c 	.word	0x5802546c
 800e9d0:	58025480 	.word	0x58025480
 800e9d4:	58025494 	.word	0x58025494
 800e9d8:	fffe000f 	.word	0xfffe000f
 800e9dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	68d2      	ldr	r2, [r2, #12]
 800e9e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e9e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	691b      	ldr	r3, [r3, #16]
 800e9ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800e9ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800e9f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	699b      	ldr	r3, [r3, #24]
 800e9fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800e9fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	69db      	ldr	r3, [r3, #28]
 800ea02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800ea04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6a1b      	ldr	r3, [r3, #32]
 800ea0a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800ea0c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800ea0e:	697a      	ldr	r2, [r7, #20]
 800ea10:	4313      	orrs	r3, r2
 800ea12:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	697a      	ldr	r2, [r7, #20]
 800ea1a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	461a      	mov	r2, r3
 800ea22:	4b6e      	ldr	r3, [pc, #440]	@ (800ebdc <HAL_DMA_Init+0x648>)
 800ea24:	4413      	add	r3, r2
 800ea26:	4a6e      	ldr	r2, [pc, #440]	@ (800ebe0 <HAL_DMA_Init+0x64c>)
 800ea28:	fba2 2303 	umull	r2, r3, r2, r3
 800ea2c:	091b      	lsrs	r3, r3, #4
 800ea2e:	009a      	lsls	r2, r3, #2
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f002 f9b5 	bl	8010da4 <DMA_CalcBaseAndBitshift>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ea42:	f003 031f 	and.w	r3, r3, #31
 800ea46:	2201      	movs	r2, #1
 800ea48:	409a      	lsls	r2, r3
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	605a      	str	r2, [r3, #4]
 800ea4e:	e008      	b.n	800ea62 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2240      	movs	r2, #64	@ 0x40
 800ea54:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2203      	movs	r2, #3
 800ea5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e0b7      	b.n	800ebd2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4a5f      	ldr	r2, [pc, #380]	@ (800ebe4 <HAL_DMA_Init+0x650>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d072      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a5d      	ldr	r2, [pc, #372]	@ (800ebe8 <HAL_DMA_Init+0x654>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d06d      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4a5c      	ldr	r2, [pc, #368]	@ (800ebec <HAL_DMA_Init+0x658>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d068      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4a5a      	ldr	r2, [pc, #360]	@ (800ebf0 <HAL_DMA_Init+0x65c>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d063      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4a59      	ldr	r2, [pc, #356]	@ (800ebf4 <HAL_DMA_Init+0x660>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d05e      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a57      	ldr	r2, [pc, #348]	@ (800ebf8 <HAL_DMA_Init+0x664>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d059      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a56      	ldr	r2, [pc, #344]	@ (800ebfc <HAL_DMA_Init+0x668>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d054      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a54      	ldr	r2, [pc, #336]	@ (800ec00 <HAL_DMA_Init+0x66c>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d04f      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4a53      	ldr	r2, [pc, #332]	@ (800ec04 <HAL_DMA_Init+0x670>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d04a      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a51      	ldr	r2, [pc, #324]	@ (800ec08 <HAL_DMA_Init+0x674>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d045      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a50      	ldr	r2, [pc, #320]	@ (800ec0c <HAL_DMA_Init+0x678>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d040      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a4e      	ldr	r2, [pc, #312]	@ (800ec10 <HAL_DMA_Init+0x67c>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d03b      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4a4d      	ldr	r2, [pc, #308]	@ (800ec14 <HAL_DMA_Init+0x680>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d036      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4a4b      	ldr	r2, [pc, #300]	@ (800ec18 <HAL_DMA_Init+0x684>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d031      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	4a4a      	ldr	r2, [pc, #296]	@ (800ec1c <HAL_DMA_Init+0x688>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d02c      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a48      	ldr	r2, [pc, #288]	@ (800ec20 <HAL_DMA_Init+0x68c>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d027      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4a47      	ldr	r2, [pc, #284]	@ (800ec24 <HAL_DMA_Init+0x690>)
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d022      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4a45      	ldr	r2, [pc, #276]	@ (800ec28 <HAL_DMA_Init+0x694>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d01d      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4a44      	ldr	r2, [pc, #272]	@ (800ec2c <HAL_DMA_Init+0x698>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d018      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a42      	ldr	r2, [pc, #264]	@ (800ec30 <HAL_DMA_Init+0x69c>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d013      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4a41      	ldr	r2, [pc, #260]	@ (800ec34 <HAL_DMA_Init+0x6a0>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d00e      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a3f      	ldr	r2, [pc, #252]	@ (800ec38 <HAL_DMA_Init+0x6a4>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d009      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a3e      	ldr	r2, [pc, #248]	@ (800ec3c <HAL_DMA_Init+0x6a8>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d004      	beq.n	800eb52 <HAL_DMA_Init+0x5be>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a3c      	ldr	r2, [pc, #240]	@ (800ec40 <HAL_DMA_Init+0x6ac>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d101      	bne.n	800eb56 <HAL_DMA_Init+0x5c2>
 800eb52:	2301      	movs	r3, #1
 800eb54:	e000      	b.n	800eb58 <HAL_DMA_Init+0x5c4>
 800eb56:	2300      	movs	r3, #0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d032      	beq.n	800ebc2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f002 fa4f 	bl	8011000 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	2b80      	cmp	r3, #128	@ 0x80
 800eb68:	d102      	bne.n	800eb70 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	685a      	ldr	r2, [r3, #4]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb78:	b2d2      	uxtb	r2, r2
 800eb7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800eb84:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d010      	beq.n	800ebb0 <HAL_DMA_Init+0x61c>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	2b08      	cmp	r3, #8
 800eb94:	d80c      	bhi.n	800ebb0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f002 facc 	bl	8011134 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eba0:	2200      	movs	r2, #0
 800eba2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ebac:	605a      	str	r2, [r3, #4]
 800ebae:	e008      	b.n	800ebc2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	a7fdabf8 	.word	0xa7fdabf8
 800ebe0:	cccccccd 	.word	0xcccccccd
 800ebe4:	40020010 	.word	0x40020010
 800ebe8:	40020028 	.word	0x40020028
 800ebec:	40020040 	.word	0x40020040
 800ebf0:	40020058 	.word	0x40020058
 800ebf4:	40020070 	.word	0x40020070
 800ebf8:	40020088 	.word	0x40020088
 800ebfc:	400200a0 	.word	0x400200a0
 800ec00:	400200b8 	.word	0x400200b8
 800ec04:	40020410 	.word	0x40020410
 800ec08:	40020428 	.word	0x40020428
 800ec0c:	40020440 	.word	0x40020440
 800ec10:	40020458 	.word	0x40020458
 800ec14:	40020470 	.word	0x40020470
 800ec18:	40020488 	.word	0x40020488
 800ec1c:	400204a0 	.word	0x400204a0
 800ec20:	400204b8 	.word	0x400204b8
 800ec24:	58025408 	.word	0x58025408
 800ec28:	5802541c 	.word	0x5802541c
 800ec2c:	58025430 	.word	0x58025430
 800ec30:	58025444 	.word	0x58025444
 800ec34:	58025458 	.word	0x58025458
 800ec38:	5802546c 	.word	0x5802546c
 800ec3c:	58025480 	.word	0x58025480
 800ec40:	58025494 	.word	0x58025494

0800ec44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b086      	sub	sp, #24
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	607a      	str	r2, [r7, #4]
 800ec50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d101      	bne.n	800ec60 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	e226      	b.n	800f0ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d101      	bne.n	800ec6e <HAL_DMA_Start_IT+0x2a>
 800ec6a:	2302      	movs	r3, #2
 800ec6c:	e21f      	b.n	800f0ae <HAL_DMA_Start_IT+0x46a>
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2201      	movs	r2, #1
 800ec72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	f040 820a 	bne.w	800f098 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2202      	movs	r2, #2
 800ec88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a68      	ldr	r2, [pc, #416]	@ (800ee38 <HAL_DMA_Start_IT+0x1f4>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d04a      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a66      	ldr	r2, [pc, #408]	@ (800ee3c <HAL_DMA_Start_IT+0x1f8>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d045      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4a65      	ldr	r2, [pc, #404]	@ (800ee40 <HAL_DMA_Start_IT+0x1fc>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d040      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a63      	ldr	r2, [pc, #396]	@ (800ee44 <HAL_DMA_Start_IT+0x200>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d03b      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4a62      	ldr	r2, [pc, #392]	@ (800ee48 <HAL_DMA_Start_IT+0x204>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d036      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a60      	ldr	r2, [pc, #384]	@ (800ee4c <HAL_DMA_Start_IT+0x208>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d031      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a5f      	ldr	r2, [pc, #380]	@ (800ee50 <HAL_DMA_Start_IT+0x20c>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d02c      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a5d      	ldr	r2, [pc, #372]	@ (800ee54 <HAL_DMA_Start_IT+0x210>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d027      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a5c      	ldr	r2, [pc, #368]	@ (800ee58 <HAL_DMA_Start_IT+0x214>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d022      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a5a      	ldr	r2, [pc, #360]	@ (800ee5c <HAL_DMA_Start_IT+0x218>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d01d      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a59      	ldr	r2, [pc, #356]	@ (800ee60 <HAL_DMA_Start_IT+0x21c>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d018      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a57      	ldr	r2, [pc, #348]	@ (800ee64 <HAL_DMA_Start_IT+0x220>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d013      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4a56      	ldr	r2, [pc, #344]	@ (800ee68 <HAL_DMA_Start_IT+0x224>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d00e      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4a54      	ldr	r2, [pc, #336]	@ (800ee6c <HAL_DMA_Start_IT+0x228>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d009      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4a53      	ldr	r2, [pc, #332]	@ (800ee70 <HAL_DMA_Start_IT+0x22c>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d004      	beq.n	800ed32 <HAL_DMA_Start_IT+0xee>
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a51      	ldr	r2, [pc, #324]	@ (800ee74 <HAL_DMA_Start_IT+0x230>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d108      	bne.n	800ed44 <HAL_DMA_Start_IT+0x100>
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f022 0201 	bic.w	r2, r2, #1
 800ed40:	601a      	str	r2, [r3, #0]
 800ed42:	e007      	b.n	800ed54 <HAL_DMA_Start_IT+0x110>
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f022 0201 	bic.w	r2, r2, #1
 800ed52:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	68b9      	ldr	r1, [r7, #8]
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f001 fe76 	bl	8010a4c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a34      	ldr	r2, [pc, #208]	@ (800ee38 <HAL_DMA_Start_IT+0x1f4>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d04a      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4a33      	ldr	r2, [pc, #204]	@ (800ee3c <HAL_DMA_Start_IT+0x1f8>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d045      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4a31      	ldr	r2, [pc, #196]	@ (800ee40 <HAL_DMA_Start_IT+0x1fc>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d040      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4a30      	ldr	r2, [pc, #192]	@ (800ee44 <HAL_DMA_Start_IT+0x200>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d03b      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a2e      	ldr	r2, [pc, #184]	@ (800ee48 <HAL_DMA_Start_IT+0x204>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d036      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4a2d      	ldr	r2, [pc, #180]	@ (800ee4c <HAL_DMA_Start_IT+0x208>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d031      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a2b      	ldr	r2, [pc, #172]	@ (800ee50 <HAL_DMA_Start_IT+0x20c>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d02c      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	4a2a      	ldr	r2, [pc, #168]	@ (800ee54 <HAL_DMA_Start_IT+0x210>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d027      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a28      	ldr	r2, [pc, #160]	@ (800ee58 <HAL_DMA_Start_IT+0x214>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d022      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a27      	ldr	r2, [pc, #156]	@ (800ee5c <HAL_DMA_Start_IT+0x218>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d01d      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a25      	ldr	r2, [pc, #148]	@ (800ee60 <HAL_DMA_Start_IT+0x21c>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d018      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4a24      	ldr	r2, [pc, #144]	@ (800ee64 <HAL_DMA_Start_IT+0x220>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d013      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4a22      	ldr	r2, [pc, #136]	@ (800ee68 <HAL_DMA_Start_IT+0x224>)
 800edde:	4293      	cmp	r3, r2
 800ede0:	d00e      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a21      	ldr	r2, [pc, #132]	@ (800ee6c <HAL_DMA_Start_IT+0x228>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d009      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4a1f      	ldr	r2, [pc, #124]	@ (800ee70 <HAL_DMA_Start_IT+0x22c>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d004      	beq.n	800ee00 <HAL_DMA_Start_IT+0x1bc>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a1e      	ldr	r2, [pc, #120]	@ (800ee74 <HAL_DMA_Start_IT+0x230>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d101      	bne.n	800ee04 <HAL_DMA_Start_IT+0x1c0>
 800ee00:	2301      	movs	r3, #1
 800ee02:	e000      	b.n	800ee06 <HAL_DMA_Start_IT+0x1c2>
 800ee04:	2300      	movs	r3, #0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d036      	beq.n	800ee78 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f023 021e 	bic.w	r2, r3, #30
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f042 0216 	orr.w	r2, r2, #22
 800ee1c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d03e      	beq.n	800eea4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f042 0208 	orr.w	r2, r2, #8
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	e035      	b.n	800eea4 <HAL_DMA_Start_IT+0x260>
 800ee38:	40020010 	.word	0x40020010
 800ee3c:	40020028 	.word	0x40020028
 800ee40:	40020040 	.word	0x40020040
 800ee44:	40020058 	.word	0x40020058
 800ee48:	40020070 	.word	0x40020070
 800ee4c:	40020088 	.word	0x40020088
 800ee50:	400200a0 	.word	0x400200a0
 800ee54:	400200b8 	.word	0x400200b8
 800ee58:	40020410 	.word	0x40020410
 800ee5c:	40020428 	.word	0x40020428
 800ee60:	40020440 	.word	0x40020440
 800ee64:	40020458 	.word	0x40020458
 800ee68:	40020470 	.word	0x40020470
 800ee6c:	40020488 	.word	0x40020488
 800ee70:	400204a0 	.word	0x400204a0
 800ee74:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f023 020e 	bic.w	r2, r3, #14
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f042 020a 	orr.w	r2, r2, #10
 800ee8a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d007      	beq.n	800eea4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f042 0204 	orr.w	r2, r2, #4
 800eea2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a83      	ldr	r2, [pc, #524]	@ (800f0b8 <HAL_DMA_Start_IT+0x474>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d072      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a82      	ldr	r2, [pc, #520]	@ (800f0bc <HAL_DMA_Start_IT+0x478>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d06d      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a80      	ldr	r2, [pc, #512]	@ (800f0c0 <HAL_DMA_Start_IT+0x47c>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d068      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a7f      	ldr	r2, [pc, #508]	@ (800f0c4 <HAL_DMA_Start_IT+0x480>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d063      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a7d      	ldr	r2, [pc, #500]	@ (800f0c8 <HAL_DMA_Start_IT+0x484>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d05e      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4a7c      	ldr	r2, [pc, #496]	@ (800f0cc <HAL_DMA_Start_IT+0x488>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d059      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4a7a      	ldr	r2, [pc, #488]	@ (800f0d0 <HAL_DMA_Start_IT+0x48c>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d054      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	4a79      	ldr	r2, [pc, #484]	@ (800f0d4 <HAL_DMA_Start_IT+0x490>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d04f      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	4a77      	ldr	r2, [pc, #476]	@ (800f0d8 <HAL_DMA_Start_IT+0x494>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d04a      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	4a76      	ldr	r2, [pc, #472]	@ (800f0dc <HAL_DMA_Start_IT+0x498>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d045      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a74      	ldr	r2, [pc, #464]	@ (800f0e0 <HAL_DMA_Start_IT+0x49c>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d040      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a73      	ldr	r2, [pc, #460]	@ (800f0e4 <HAL_DMA_Start_IT+0x4a0>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d03b      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a71      	ldr	r2, [pc, #452]	@ (800f0e8 <HAL_DMA_Start_IT+0x4a4>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d036      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4a70      	ldr	r2, [pc, #448]	@ (800f0ec <HAL_DMA_Start_IT+0x4a8>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d031      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a6e      	ldr	r2, [pc, #440]	@ (800f0f0 <HAL_DMA_Start_IT+0x4ac>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d02c      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4a6d      	ldr	r2, [pc, #436]	@ (800f0f4 <HAL_DMA_Start_IT+0x4b0>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d027      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4a6b      	ldr	r2, [pc, #428]	@ (800f0f8 <HAL_DMA_Start_IT+0x4b4>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d022      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	4a6a      	ldr	r2, [pc, #424]	@ (800f0fc <HAL_DMA_Start_IT+0x4b8>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d01d      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4a68      	ldr	r2, [pc, #416]	@ (800f100 <HAL_DMA_Start_IT+0x4bc>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d018      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4a67      	ldr	r2, [pc, #412]	@ (800f104 <HAL_DMA_Start_IT+0x4c0>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d013      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a65      	ldr	r2, [pc, #404]	@ (800f108 <HAL_DMA_Start_IT+0x4c4>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d00e      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a64      	ldr	r2, [pc, #400]	@ (800f10c <HAL_DMA_Start_IT+0x4c8>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d009      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4a62      	ldr	r2, [pc, #392]	@ (800f110 <HAL_DMA_Start_IT+0x4cc>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d004      	beq.n	800ef94 <HAL_DMA_Start_IT+0x350>
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	4a61      	ldr	r2, [pc, #388]	@ (800f114 <HAL_DMA_Start_IT+0x4d0>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d101      	bne.n	800ef98 <HAL_DMA_Start_IT+0x354>
 800ef94:	2301      	movs	r3, #1
 800ef96:	e000      	b.n	800ef9a <HAL_DMA_Start_IT+0x356>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d01a      	beq.n	800efd4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d007      	beq.n	800efbc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800efb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800efba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d007      	beq.n	800efd4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800efd2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4a37      	ldr	r2, [pc, #220]	@ (800f0b8 <HAL_DMA_Start_IT+0x474>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d04a      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	4a36      	ldr	r2, [pc, #216]	@ (800f0bc <HAL_DMA_Start_IT+0x478>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d045      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4a34      	ldr	r2, [pc, #208]	@ (800f0c0 <HAL_DMA_Start_IT+0x47c>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d040      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	4a33      	ldr	r2, [pc, #204]	@ (800f0c4 <HAL_DMA_Start_IT+0x480>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d03b      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a31      	ldr	r2, [pc, #196]	@ (800f0c8 <HAL_DMA_Start_IT+0x484>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d036      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a30      	ldr	r2, [pc, #192]	@ (800f0cc <HAL_DMA_Start_IT+0x488>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d031      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4a2e      	ldr	r2, [pc, #184]	@ (800f0d0 <HAL_DMA_Start_IT+0x48c>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d02c      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4a2d      	ldr	r2, [pc, #180]	@ (800f0d4 <HAL_DMA_Start_IT+0x490>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d027      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4a2b      	ldr	r2, [pc, #172]	@ (800f0d8 <HAL_DMA_Start_IT+0x494>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d022      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a2a      	ldr	r2, [pc, #168]	@ (800f0dc <HAL_DMA_Start_IT+0x498>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d01d      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a28      	ldr	r2, [pc, #160]	@ (800f0e0 <HAL_DMA_Start_IT+0x49c>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d018      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a27      	ldr	r2, [pc, #156]	@ (800f0e4 <HAL_DMA_Start_IT+0x4a0>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d013      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4a25      	ldr	r2, [pc, #148]	@ (800f0e8 <HAL_DMA_Start_IT+0x4a4>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d00e      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a24      	ldr	r2, [pc, #144]	@ (800f0ec <HAL_DMA_Start_IT+0x4a8>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d009      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a22      	ldr	r2, [pc, #136]	@ (800f0f0 <HAL_DMA_Start_IT+0x4ac>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d004      	beq.n	800f074 <HAL_DMA_Start_IT+0x430>
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4a21      	ldr	r2, [pc, #132]	@ (800f0f4 <HAL_DMA_Start_IT+0x4b0>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d108      	bne.n	800f086 <HAL_DMA_Start_IT+0x442>
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f042 0201 	orr.w	r2, r2, #1
 800f082:	601a      	str	r2, [r3, #0]
 800f084:	e012      	b.n	800f0ac <HAL_DMA_Start_IT+0x468>
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f042 0201 	orr.w	r2, r2, #1
 800f094:	601a      	str	r2, [r3, #0]
 800f096:	e009      	b.n	800f0ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f09e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3718      	adds	r7, #24
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	40020010 	.word	0x40020010
 800f0bc:	40020028 	.word	0x40020028
 800f0c0:	40020040 	.word	0x40020040
 800f0c4:	40020058 	.word	0x40020058
 800f0c8:	40020070 	.word	0x40020070
 800f0cc:	40020088 	.word	0x40020088
 800f0d0:	400200a0 	.word	0x400200a0
 800f0d4:	400200b8 	.word	0x400200b8
 800f0d8:	40020410 	.word	0x40020410
 800f0dc:	40020428 	.word	0x40020428
 800f0e0:	40020440 	.word	0x40020440
 800f0e4:	40020458 	.word	0x40020458
 800f0e8:	40020470 	.word	0x40020470
 800f0ec:	40020488 	.word	0x40020488
 800f0f0:	400204a0 	.word	0x400204a0
 800f0f4:	400204b8 	.word	0x400204b8
 800f0f8:	58025408 	.word	0x58025408
 800f0fc:	5802541c 	.word	0x5802541c
 800f100:	58025430 	.word	0x58025430
 800f104:	58025444 	.word	0x58025444
 800f108:	58025458 	.word	0x58025458
 800f10c:	5802546c 	.word	0x5802546c
 800f110:	58025480 	.word	0x58025480
 800f114:	58025494 	.word	0x58025494

0800f118 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b086      	sub	sp, #24
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800f120:	f7fc fa3c 	bl	800b59c <HAL_GetTick>
 800f124:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d101      	bne.n	800f130 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800f12c:	2301      	movs	r3, #1
 800f12e:	e2dc      	b.n	800f6ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f136:	b2db      	uxtb	r3, r3
 800f138:	2b02      	cmp	r3, #2
 800f13a:	d008      	beq.n	800f14e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2280      	movs	r2, #128	@ 0x80
 800f140:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2200      	movs	r2, #0
 800f146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800f14a:	2301      	movs	r3, #1
 800f14c:	e2cd      	b.n	800f6ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	4a76      	ldr	r2, [pc, #472]	@ (800f32c <HAL_DMA_Abort+0x214>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d04a      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4a74      	ldr	r2, [pc, #464]	@ (800f330 <HAL_DMA_Abort+0x218>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d045      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	4a73      	ldr	r2, [pc, #460]	@ (800f334 <HAL_DMA_Abort+0x21c>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d040      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4a71      	ldr	r2, [pc, #452]	@ (800f338 <HAL_DMA_Abort+0x220>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d03b      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	4a70      	ldr	r2, [pc, #448]	@ (800f33c <HAL_DMA_Abort+0x224>)
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d036      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	4a6e      	ldr	r2, [pc, #440]	@ (800f340 <HAL_DMA_Abort+0x228>)
 800f186:	4293      	cmp	r3, r2
 800f188:	d031      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	4a6d      	ldr	r2, [pc, #436]	@ (800f344 <HAL_DMA_Abort+0x22c>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d02c      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	4a6b      	ldr	r2, [pc, #428]	@ (800f348 <HAL_DMA_Abort+0x230>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d027      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	4a6a      	ldr	r2, [pc, #424]	@ (800f34c <HAL_DMA_Abort+0x234>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d022      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4a68      	ldr	r2, [pc, #416]	@ (800f350 <HAL_DMA_Abort+0x238>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d01d      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4a67      	ldr	r2, [pc, #412]	@ (800f354 <HAL_DMA_Abort+0x23c>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d018      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4a65      	ldr	r2, [pc, #404]	@ (800f358 <HAL_DMA_Abort+0x240>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d013      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4a64      	ldr	r2, [pc, #400]	@ (800f35c <HAL_DMA_Abort+0x244>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d00e      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4a62      	ldr	r2, [pc, #392]	@ (800f360 <HAL_DMA_Abort+0x248>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d009      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	4a61      	ldr	r2, [pc, #388]	@ (800f364 <HAL_DMA_Abort+0x24c>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d004      	beq.n	800f1ee <HAL_DMA_Abort+0xd6>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4a5f      	ldr	r2, [pc, #380]	@ (800f368 <HAL_DMA_Abort+0x250>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d101      	bne.n	800f1f2 <HAL_DMA_Abort+0xda>
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e000      	b.n	800f1f4 <HAL_DMA_Abort+0xdc>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d013      	beq.n	800f220 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	681a      	ldr	r2, [r3, #0]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f022 021e 	bic.w	r2, r2, #30
 800f206:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	695a      	ldr	r2, [r3, #20]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f216:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	617b      	str	r3, [r7, #20]
 800f21e:	e00a      	b.n	800f236 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	681a      	ldr	r2, [r3, #0]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f022 020e 	bic.w	r2, r2, #14
 800f22e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	4a3c      	ldr	r2, [pc, #240]	@ (800f32c <HAL_DMA_Abort+0x214>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d072      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a3a      	ldr	r2, [pc, #232]	@ (800f330 <HAL_DMA_Abort+0x218>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d06d      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4a39      	ldr	r2, [pc, #228]	@ (800f334 <HAL_DMA_Abort+0x21c>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d068      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a37      	ldr	r2, [pc, #220]	@ (800f338 <HAL_DMA_Abort+0x220>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d063      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4a36      	ldr	r2, [pc, #216]	@ (800f33c <HAL_DMA_Abort+0x224>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d05e      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4a34      	ldr	r2, [pc, #208]	@ (800f340 <HAL_DMA_Abort+0x228>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d059      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4a33      	ldr	r2, [pc, #204]	@ (800f344 <HAL_DMA_Abort+0x22c>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d054      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a31      	ldr	r2, [pc, #196]	@ (800f348 <HAL_DMA_Abort+0x230>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d04f      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4a30      	ldr	r2, [pc, #192]	@ (800f34c <HAL_DMA_Abort+0x234>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d04a      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a2e      	ldr	r2, [pc, #184]	@ (800f350 <HAL_DMA_Abort+0x238>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d045      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4a2d      	ldr	r2, [pc, #180]	@ (800f354 <HAL_DMA_Abort+0x23c>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d040      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4a2b      	ldr	r2, [pc, #172]	@ (800f358 <HAL_DMA_Abort+0x240>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d03b      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4a2a      	ldr	r2, [pc, #168]	@ (800f35c <HAL_DMA_Abort+0x244>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d036      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a28      	ldr	r2, [pc, #160]	@ (800f360 <HAL_DMA_Abort+0x248>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d031      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4a27      	ldr	r2, [pc, #156]	@ (800f364 <HAL_DMA_Abort+0x24c>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d02c      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a25      	ldr	r2, [pc, #148]	@ (800f368 <HAL_DMA_Abort+0x250>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d027      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a24      	ldr	r2, [pc, #144]	@ (800f36c <HAL_DMA_Abort+0x254>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d022      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	4a22      	ldr	r2, [pc, #136]	@ (800f370 <HAL_DMA_Abort+0x258>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d01d      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4a21      	ldr	r2, [pc, #132]	@ (800f374 <HAL_DMA_Abort+0x25c>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d018      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a1f      	ldr	r2, [pc, #124]	@ (800f378 <HAL_DMA_Abort+0x260>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d013      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4a1e      	ldr	r2, [pc, #120]	@ (800f37c <HAL_DMA_Abort+0x264>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d00e      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a1c      	ldr	r2, [pc, #112]	@ (800f380 <HAL_DMA_Abort+0x268>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d009      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4a1b      	ldr	r2, [pc, #108]	@ (800f384 <HAL_DMA_Abort+0x26c>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d004      	beq.n	800f326 <HAL_DMA_Abort+0x20e>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4a19      	ldr	r2, [pc, #100]	@ (800f388 <HAL_DMA_Abort+0x270>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d132      	bne.n	800f38c <HAL_DMA_Abort+0x274>
 800f326:	2301      	movs	r3, #1
 800f328:	e031      	b.n	800f38e <HAL_DMA_Abort+0x276>
 800f32a:	bf00      	nop
 800f32c:	40020010 	.word	0x40020010
 800f330:	40020028 	.word	0x40020028
 800f334:	40020040 	.word	0x40020040
 800f338:	40020058 	.word	0x40020058
 800f33c:	40020070 	.word	0x40020070
 800f340:	40020088 	.word	0x40020088
 800f344:	400200a0 	.word	0x400200a0
 800f348:	400200b8 	.word	0x400200b8
 800f34c:	40020410 	.word	0x40020410
 800f350:	40020428 	.word	0x40020428
 800f354:	40020440 	.word	0x40020440
 800f358:	40020458 	.word	0x40020458
 800f35c:	40020470 	.word	0x40020470
 800f360:	40020488 	.word	0x40020488
 800f364:	400204a0 	.word	0x400204a0
 800f368:	400204b8 	.word	0x400204b8
 800f36c:	58025408 	.word	0x58025408
 800f370:	5802541c 	.word	0x5802541c
 800f374:	58025430 	.word	0x58025430
 800f378:	58025444 	.word	0x58025444
 800f37c:	58025458 	.word	0x58025458
 800f380:	5802546c 	.word	0x5802546c
 800f384:	58025480 	.word	0x58025480
 800f388:	58025494 	.word	0x58025494
 800f38c:	2300      	movs	r3, #0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d007      	beq.n	800f3a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f39c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f3a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a6d      	ldr	r2, [pc, #436]	@ (800f55c <HAL_DMA_Abort+0x444>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d04a      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a6b      	ldr	r2, [pc, #428]	@ (800f560 <HAL_DMA_Abort+0x448>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d045      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a6a      	ldr	r2, [pc, #424]	@ (800f564 <HAL_DMA_Abort+0x44c>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d040      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	4a68      	ldr	r2, [pc, #416]	@ (800f568 <HAL_DMA_Abort+0x450>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d03b      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	4a67      	ldr	r2, [pc, #412]	@ (800f56c <HAL_DMA_Abort+0x454>)
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d036      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4a65      	ldr	r2, [pc, #404]	@ (800f570 <HAL_DMA_Abort+0x458>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d031      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	4a64      	ldr	r2, [pc, #400]	@ (800f574 <HAL_DMA_Abort+0x45c>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d02c      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	4a62      	ldr	r2, [pc, #392]	@ (800f578 <HAL_DMA_Abort+0x460>)
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d027      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	4a61      	ldr	r2, [pc, #388]	@ (800f57c <HAL_DMA_Abort+0x464>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d022      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4a5f      	ldr	r2, [pc, #380]	@ (800f580 <HAL_DMA_Abort+0x468>)
 800f402:	4293      	cmp	r3, r2
 800f404:	d01d      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4a5e      	ldr	r2, [pc, #376]	@ (800f584 <HAL_DMA_Abort+0x46c>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d018      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	4a5c      	ldr	r2, [pc, #368]	@ (800f588 <HAL_DMA_Abort+0x470>)
 800f416:	4293      	cmp	r3, r2
 800f418:	d013      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	4a5b      	ldr	r2, [pc, #364]	@ (800f58c <HAL_DMA_Abort+0x474>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d00e      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4a59      	ldr	r2, [pc, #356]	@ (800f590 <HAL_DMA_Abort+0x478>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d009      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	4a58      	ldr	r2, [pc, #352]	@ (800f594 <HAL_DMA_Abort+0x47c>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d004      	beq.n	800f442 <HAL_DMA_Abort+0x32a>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4a56      	ldr	r2, [pc, #344]	@ (800f598 <HAL_DMA_Abort+0x480>)
 800f43e:	4293      	cmp	r3, r2
 800f440:	d108      	bne.n	800f454 <HAL_DMA_Abort+0x33c>
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	f022 0201 	bic.w	r2, r2, #1
 800f450:	601a      	str	r2, [r3, #0]
 800f452:	e007      	b.n	800f464 <HAL_DMA_Abort+0x34c>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f022 0201 	bic.w	r2, r2, #1
 800f462:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800f464:	e013      	b.n	800f48e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f466:	f7fc f899 	bl	800b59c <HAL_GetTick>
 800f46a:	4602      	mov	r2, r0
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	1ad3      	subs	r3, r2, r3
 800f470:	2b05      	cmp	r3, #5
 800f472:	d90c      	bls.n	800f48e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2220      	movs	r2, #32
 800f478:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2203      	movs	r2, #3
 800f47e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2200      	movs	r2, #0
 800f486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e12d      	b.n	800f6ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f003 0301 	and.w	r3, r3, #1
 800f496:	2b00      	cmp	r3, #0
 800f498:	d1e5      	bne.n	800f466 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	4a2f      	ldr	r2, [pc, #188]	@ (800f55c <HAL_DMA_Abort+0x444>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d04a      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4a2d      	ldr	r2, [pc, #180]	@ (800f560 <HAL_DMA_Abort+0x448>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d045      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	4a2c      	ldr	r2, [pc, #176]	@ (800f564 <HAL_DMA_Abort+0x44c>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d040      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4a2a      	ldr	r2, [pc, #168]	@ (800f568 <HAL_DMA_Abort+0x450>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d03b      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4a29      	ldr	r2, [pc, #164]	@ (800f56c <HAL_DMA_Abort+0x454>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d036      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a27      	ldr	r2, [pc, #156]	@ (800f570 <HAL_DMA_Abort+0x458>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d031      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	4a26      	ldr	r2, [pc, #152]	@ (800f574 <HAL_DMA_Abort+0x45c>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d02c      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4a24      	ldr	r2, [pc, #144]	@ (800f578 <HAL_DMA_Abort+0x460>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d027      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	4a23      	ldr	r2, [pc, #140]	@ (800f57c <HAL_DMA_Abort+0x464>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d022      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	4a21      	ldr	r2, [pc, #132]	@ (800f580 <HAL_DMA_Abort+0x468>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d01d      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4a20      	ldr	r2, [pc, #128]	@ (800f584 <HAL_DMA_Abort+0x46c>)
 800f504:	4293      	cmp	r3, r2
 800f506:	d018      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	4a1e      	ldr	r2, [pc, #120]	@ (800f588 <HAL_DMA_Abort+0x470>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d013      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	4a1d      	ldr	r2, [pc, #116]	@ (800f58c <HAL_DMA_Abort+0x474>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d00e      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a1b      	ldr	r2, [pc, #108]	@ (800f590 <HAL_DMA_Abort+0x478>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d009      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a1a      	ldr	r2, [pc, #104]	@ (800f594 <HAL_DMA_Abort+0x47c>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d004      	beq.n	800f53a <HAL_DMA_Abort+0x422>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	4a18      	ldr	r2, [pc, #96]	@ (800f598 <HAL_DMA_Abort+0x480>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d101      	bne.n	800f53e <HAL_DMA_Abort+0x426>
 800f53a:	2301      	movs	r3, #1
 800f53c:	e000      	b.n	800f540 <HAL_DMA_Abort+0x428>
 800f53e:	2300      	movs	r3, #0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d02b      	beq.n	800f59c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f548:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f54e:	f003 031f 	and.w	r3, r3, #31
 800f552:	223f      	movs	r2, #63	@ 0x3f
 800f554:	409a      	lsls	r2, r3
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	609a      	str	r2, [r3, #8]
 800f55a:	e02a      	b.n	800f5b2 <HAL_DMA_Abort+0x49a>
 800f55c:	40020010 	.word	0x40020010
 800f560:	40020028 	.word	0x40020028
 800f564:	40020040 	.word	0x40020040
 800f568:	40020058 	.word	0x40020058
 800f56c:	40020070 	.word	0x40020070
 800f570:	40020088 	.word	0x40020088
 800f574:	400200a0 	.word	0x400200a0
 800f578:	400200b8 	.word	0x400200b8
 800f57c:	40020410 	.word	0x40020410
 800f580:	40020428 	.word	0x40020428
 800f584:	40020440 	.word	0x40020440
 800f588:	40020458 	.word	0x40020458
 800f58c:	40020470 	.word	0x40020470
 800f590:	40020488 	.word	0x40020488
 800f594:	400204a0 	.word	0x400204a0
 800f598:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f5a6:	f003 031f 	and.w	r3, r3, #31
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	409a      	lsls	r2, r3
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4a4f      	ldr	r2, [pc, #316]	@ (800f6f4 <HAL_DMA_Abort+0x5dc>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d072      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a4d      	ldr	r2, [pc, #308]	@ (800f6f8 <HAL_DMA_Abort+0x5e0>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d06d      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4a4c      	ldr	r2, [pc, #304]	@ (800f6fc <HAL_DMA_Abort+0x5e4>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d068      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4a4a      	ldr	r2, [pc, #296]	@ (800f700 <HAL_DMA_Abort+0x5e8>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d063      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	4a49      	ldr	r2, [pc, #292]	@ (800f704 <HAL_DMA_Abort+0x5ec>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d05e      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4a47      	ldr	r2, [pc, #284]	@ (800f708 <HAL_DMA_Abort+0x5f0>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d059      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a46      	ldr	r2, [pc, #280]	@ (800f70c <HAL_DMA_Abort+0x5f4>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d054      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a44      	ldr	r2, [pc, #272]	@ (800f710 <HAL_DMA_Abort+0x5f8>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d04f      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a43      	ldr	r2, [pc, #268]	@ (800f714 <HAL_DMA_Abort+0x5fc>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d04a      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a41      	ldr	r2, [pc, #260]	@ (800f718 <HAL_DMA_Abort+0x600>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d045      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a40      	ldr	r2, [pc, #256]	@ (800f71c <HAL_DMA_Abort+0x604>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d040      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a3e      	ldr	r2, [pc, #248]	@ (800f720 <HAL_DMA_Abort+0x608>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d03b      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4a3d      	ldr	r2, [pc, #244]	@ (800f724 <HAL_DMA_Abort+0x60c>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d036      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a3b      	ldr	r2, [pc, #236]	@ (800f728 <HAL_DMA_Abort+0x610>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d031      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4a3a      	ldr	r2, [pc, #232]	@ (800f72c <HAL_DMA_Abort+0x614>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d02c      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a38      	ldr	r2, [pc, #224]	@ (800f730 <HAL_DMA_Abort+0x618>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d027      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a37      	ldr	r2, [pc, #220]	@ (800f734 <HAL_DMA_Abort+0x61c>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d022      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a35      	ldr	r2, [pc, #212]	@ (800f738 <HAL_DMA_Abort+0x620>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d01d      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a34      	ldr	r2, [pc, #208]	@ (800f73c <HAL_DMA_Abort+0x624>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d018      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a32      	ldr	r2, [pc, #200]	@ (800f740 <HAL_DMA_Abort+0x628>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d013      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	4a31      	ldr	r2, [pc, #196]	@ (800f744 <HAL_DMA_Abort+0x62c>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d00e      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4a2f      	ldr	r2, [pc, #188]	@ (800f748 <HAL_DMA_Abort+0x630>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d009      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4a2e      	ldr	r2, [pc, #184]	@ (800f74c <HAL_DMA_Abort+0x634>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d004      	beq.n	800f6a2 <HAL_DMA_Abort+0x58a>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4a2c      	ldr	r2, [pc, #176]	@ (800f750 <HAL_DMA_Abort+0x638>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d101      	bne.n	800f6a6 <HAL_DMA_Abort+0x58e>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e000      	b.n	800f6a8 <HAL_DMA_Abort+0x590>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d015      	beq.n	800f6d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f6b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d00c      	beq.n	800f6d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f6cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f6d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2201      	movs	r2, #1
 800f6dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3718      	adds	r7, #24
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	40020010 	.word	0x40020010
 800f6f8:	40020028 	.word	0x40020028
 800f6fc:	40020040 	.word	0x40020040
 800f700:	40020058 	.word	0x40020058
 800f704:	40020070 	.word	0x40020070
 800f708:	40020088 	.word	0x40020088
 800f70c:	400200a0 	.word	0x400200a0
 800f710:	400200b8 	.word	0x400200b8
 800f714:	40020410 	.word	0x40020410
 800f718:	40020428 	.word	0x40020428
 800f71c:	40020440 	.word	0x40020440
 800f720:	40020458 	.word	0x40020458
 800f724:	40020470 	.word	0x40020470
 800f728:	40020488 	.word	0x40020488
 800f72c:	400204a0 	.word	0x400204a0
 800f730:	400204b8 	.word	0x400204b8
 800f734:	58025408 	.word	0x58025408
 800f738:	5802541c 	.word	0x5802541c
 800f73c:	58025430 	.word	0x58025430
 800f740:	58025444 	.word	0x58025444
 800f744:	58025458 	.word	0x58025458
 800f748:	5802546c 	.word	0x5802546c
 800f74c:	58025480 	.word	0x58025480
 800f750:	58025494 	.word	0x58025494

0800f754 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d101      	bne.n	800f766 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800f762:	2301      	movs	r3, #1
 800f764:	e237      	b.n	800fbd6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	2b02      	cmp	r3, #2
 800f770:	d004      	beq.n	800f77c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2280      	movs	r2, #128	@ 0x80
 800f776:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800f778:	2301      	movs	r3, #1
 800f77a:	e22c      	b.n	800fbd6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4a5c      	ldr	r2, [pc, #368]	@ (800f8f4 <HAL_DMA_Abort_IT+0x1a0>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d04a      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	4a5b      	ldr	r2, [pc, #364]	@ (800f8f8 <HAL_DMA_Abort_IT+0x1a4>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d045      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a59      	ldr	r2, [pc, #356]	@ (800f8fc <HAL_DMA_Abort_IT+0x1a8>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d040      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4a58      	ldr	r2, [pc, #352]	@ (800f900 <HAL_DMA_Abort_IT+0x1ac>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d03b      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a56      	ldr	r2, [pc, #344]	@ (800f904 <HAL_DMA_Abort_IT+0x1b0>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d036      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4a55      	ldr	r2, [pc, #340]	@ (800f908 <HAL_DMA_Abort_IT+0x1b4>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d031      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a53      	ldr	r2, [pc, #332]	@ (800f90c <HAL_DMA_Abort_IT+0x1b8>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d02c      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4a52      	ldr	r2, [pc, #328]	@ (800f910 <HAL_DMA_Abort_IT+0x1bc>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d027      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4a50      	ldr	r2, [pc, #320]	@ (800f914 <HAL_DMA_Abort_IT+0x1c0>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d022      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a4f      	ldr	r2, [pc, #316]	@ (800f918 <HAL_DMA_Abort_IT+0x1c4>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d01d      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4a4d      	ldr	r2, [pc, #308]	@ (800f91c <HAL_DMA_Abort_IT+0x1c8>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d018      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4a4c      	ldr	r2, [pc, #304]	@ (800f920 <HAL_DMA_Abort_IT+0x1cc>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d013      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	4a4a      	ldr	r2, [pc, #296]	@ (800f924 <HAL_DMA_Abort_IT+0x1d0>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d00e      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	4a49      	ldr	r2, [pc, #292]	@ (800f928 <HAL_DMA_Abort_IT+0x1d4>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d009      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4a47      	ldr	r2, [pc, #284]	@ (800f92c <HAL_DMA_Abort_IT+0x1d8>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d004      	beq.n	800f81c <HAL_DMA_Abort_IT+0xc8>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	4a46      	ldr	r2, [pc, #280]	@ (800f930 <HAL_DMA_Abort_IT+0x1dc>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	d101      	bne.n	800f820 <HAL_DMA_Abort_IT+0xcc>
 800f81c:	2301      	movs	r3, #1
 800f81e:	e000      	b.n	800f822 <HAL_DMA_Abort_IT+0xce>
 800f820:	2300      	movs	r3, #0
 800f822:	2b00      	cmp	r3, #0
 800f824:	f000 8086 	beq.w	800f934 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2204      	movs	r2, #4
 800f82c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	4a2f      	ldr	r2, [pc, #188]	@ (800f8f4 <HAL_DMA_Abort_IT+0x1a0>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d04a      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4a2e      	ldr	r2, [pc, #184]	@ (800f8f8 <HAL_DMA_Abort_IT+0x1a4>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d045      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a2c      	ldr	r2, [pc, #176]	@ (800f8fc <HAL_DMA_Abort_IT+0x1a8>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d040      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4a2b      	ldr	r2, [pc, #172]	@ (800f900 <HAL_DMA_Abort_IT+0x1ac>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d03b      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4a29      	ldr	r2, [pc, #164]	@ (800f904 <HAL_DMA_Abort_IT+0x1b0>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d036      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4a28      	ldr	r2, [pc, #160]	@ (800f908 <HAL_DMA_Abort_IT+0x1b4>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d031      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a26      	ldr	r2, [pc, #152]	@ (800f90c <HAL_DMA_Abort_IT+0x1b8>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d02c      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4a25      	ldr	r2, [pc, #148]	@ (800f910 <HAL_DMA_Abort_IT+0x1bc>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d027      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	4a23      	ldr	r2, [pc, #140]	@ (800f914 <HAL_DMA_Abort_IT+0x1c0>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d022      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	4a22      	ldr	r2, [pc, #136]	@ (800f918 <HAL_DMA_Abort_IT+0x1c4>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d01d      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4a20      	ldr	r2, [pc, #128]	@ (800f91c <HAL_DMA_Abort_IT+0x1c8>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d018      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	4a1f      	ldr	r2, [pc, #124]	@ (800f920 <HAL_DMA_Abort_IT+0x1cc>)
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d013      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4a1d      	ldr	r2, [pc, #116]	@ (800f924 <HAL_DMA_Abort_IT+0x1d0>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d00e      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4a1c      	ldr	r2, [pc, #112]	@ (800f928 <HAL_DMA_Abort_IT+0x1d4>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d009      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a1a      	ldr	r2, [pc, #104]	@ (800f92c <HAL_DMA_Abort_IT+0x1d8>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d004      	beq.n	800f8d0 <HAL_DMA_Abort_IT+0x17c>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4a19      	ldr	r2, [pc, #100]	@ (800f930 <HAL_DMA_Abort_IT+0x1dc>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d108      	bne.n	800f8e2 <HAL_DMA_Abort_IT+0x18e>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f022 0201 	bic.w	r2, r2, #1
 800f8de:	601a      	str	r2, [r3, #0]
 800f8e0:	e178      	b.n	800fbd4 <HAL_DMA_Abort_IT+0x480>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f022 0201 	bic.w	r2, r2, #1
 800f8f0:	601a      	str	r2, [r3, #0]
 800f8f2:	e16f      	b.n	800fbd4 <HAL_DMA_Abort_IT+0x480>
 800f8f4:	40020010 	.word	0x40020010
 800f8f8:	40020028 	.word	0x40020028
 800f8fc:	40020040 	.word	0x40020040
 800f900:	40020058 	.word	0x40020058
 800f904:	40020070 	.word	0x40020070
 800f908:	40020088 	.word	0x40020088
 800f90c:	400200a0 	.word	0x400200a0
 800f910:	400200b8 	.word	0x400200b8
 800f914:	40020410 	.word	0x40020410
 800f918:	40020428 	.word	0x40020428
 800f91c:	40020440 	.word	0x40020440
 800f920:	40020458 	.word	0x40020458
 800f924:	40020470 	.word	0x40020470
 800f928:	40020488 	.word	0x40020488
 800f92c:	400204a0 	.word	0x400204a0
 800f930:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f022 020e 	bic.w	r2, r2, #14
 800f942:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4a6c      	ldr	r2, [pc, #432]	@ (800fafc <HAL_DMA_Abort_IT+0x3a8>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d04a      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	4a6b      	ldr	r2, [pc, #428]	@ (800fb00 <HAL_DMA_Abort_IT+0x3ac>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d045      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4a69      	ldr	r2, [pc, #420]	@ (800fb04 <HAL_DMA_Abort_IT+0x3b0>)
 800f95e:	4293      	cmp	r3, r2
 800f960:	d040      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4a68      	ldr	r2, [pc, #416]	@ (800fb08 <HAL_DMA_Abort_IT+0x3b4>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d03b      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a66      	ldr	r2, [pc, #408]	@ (800fb0c <HAL_DMA_Abort_IT+0x3b8>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d036      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	4a65      	ldr	r2, [pc, #404]	@ (800fb10 <HAL_DMA_Abort_IT+0x3bc>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d031      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4a63      	ldr	r2, [pc, #396]	@ (800fb14 <HAL_DMA_Abort_IT+0x3c0>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d02c      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4a62      	ldr	r2, [pc, #392]	@ (800fb18 <HAL_DMA_Abort_IT+0x3c4>)
 800f990:	4293      	cmp	r3, r2
 800f992:	d027      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	4a60      	ldr	r2, [pc, #384]	@ (800fb1c <HAL_DMA_Abort_IT+0x3c8>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d022      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a5f      	ldr	r2, [pc, #380]	@ (800fb20 <HAL_DMA_Abort_IT+0x3cc>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d01d      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a5d      	ldr	r2, [pc, #372]	@ (800fb24 <HAL_DMA_Abort_IT+0x3d0>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d018      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4a5c      	ldr	r2, [pc, #368]	@ (800fb28 <HAL_DMA_Abort_IT+0x3d4>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d013      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a5a      	ldr	r2, [pc, #360]	@ (800fb2c <HAL_DMA_Abort_IT+0x3d8>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d00e      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4a59      	ldr	r2, [pc, #356]	@ (800fb30 <HAL_DMA_Abort_IT+0x3dc>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d009      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a57      	ldr	r2, [pc, #348]	@ (800fb34 <HAL_DMA_Abort_IT+0x3e0>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d004      	beq.n	800f9e4 <HAL_DMA_Abort_IT+0x290>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a56      	ldr	r2, [pc, #344]	@ (800fb38 <HAL_DMA_Abort_IT+0x3e4>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d108      	bne.n	800f9f6 <HAL_DMA_Abort_IT+0x2a2>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f022 0201 	bic.w	r2, r2, #1
 800f9f2:	601a      	str	r2, [r3, #0]
 800f9f4:	e007      	b.n	800fa06 <HAL_DMA_Abort_IT+0x2b2>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	681a      	ldr	r2, [r3, #0]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f022 0201 	bic.w	r2, r2, #1
 800fa04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	4a3c      	ldr	r2, [pc, #240]	@ (800fafc <HAL_DMA_Abort_IT+0x3a8>)
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d072      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4a3a      	ldr	r2, [pc, #232]	@ (800fb00 <HAL_DMA_Abort_IT+0x3ac>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d06d      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4a39      	ldr	r2, [pc, #228]	@ (800fb04 <HAL_DMA_Abort_IT+0x3b0>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d068      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	4a37      	ldr	r2, [pc, #220]	@ (800fb08 <HAL_DMA_Abort_IT+0x3b4>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d063      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4a36      	ldr	r2, [pc, #216]	@ (800fb0c <HAL_DMA_Abort_IT+0x3b8>)
 800fa34:	4293      	cmp	r3, r2
 800fa36:	d05e      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a34      	ldr	r2, [pc, #208]	@ (800fb10 <HAL_DMA_Abort_IT+0x3bc>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d059      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4a33      	ldr	r2, [pc, #204]	@ (800fb14 <HAL_DMA_Abort_IT+0x3c0>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d054      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a31      	ldr	r2, [pc, #196]	@ (800fb18 <HAL_DMA_Abort_IT+0x3c4>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d04f      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4a30      	ldr	r2, [pc, #192]	@ (800fb1c <HAL_DMA_Abort_IT+0x3c8>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d04a      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a2e      	ldr	r2, [pc, #184]	@ (800fb20 <HAL_DMA_Abort_IT+0x3cc>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d045      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	4a2d      	ldr	r2, [pc, #180]	@ (800fb24 <HAL_DMA_Abort_IT+0x3d0>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d040      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4a2b      	ldr	r2, [pc, #172]	@ (800fb28 <HAL_DMA_Abort_IT+0x3d4>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d03b      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	4a2a      	ldr	r2, [pc, #168]	@ (800fb2c <HAL_DMA_Abort_IT+0x3d8>)
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d036      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a28      	ldr	r2, [pc, #160]	@ (800fb30 <HAL_DMA_Abort_IT+0x3dc>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d031      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4a27      	ldr	r2, [pc, #156]	@ (800fb34 <HAL_DMA_Abort_IT+0x3e0>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d02c      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a25      	ldr	r2, [pc, #148]	@ (800fb38 <HAL_DMA_Abort_IT+0x3e4>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d027      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4a24      	ldr	r2, [pc, #144]	@ (800fb3c <HAL_DMA_Abort_IT+0x3e8>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d022      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4a22      	ldr	r2, [pc, #136]	@ (800fb40 <HAL_DMA_Abort_IT+0x3ec>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d01d      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4a21      	ldr	r2, [pc, #132]	@ (800fb44 <HAL_DMA_Abort_IT+0x3f0>)
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d018      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4a1f      	ldr	r2, [pc, #124]	@ (800fb48 <HAL_DMA_Abort_IT+0x3f4>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d013      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	4a1e      	ldr	r2, [pc, #120]	@ (800fb4c <HAL_DMA_Abort_IT+0x3f8>)
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d00e      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4a1c      	ldr	r2, [pc, #112]	@ (800fb50 <HAL_DMA_Abort_IT+0x3fc>)
 800fade:	4293      	cmp	r3, r2
 800fae0:	d009      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	4a1b      	ldr	r2, [pc, #108]	@ (800fb54 <HAL_DMA_Abort_IT+0x400>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d004      	beq.n	800faf6 <HAL_DMA_Abort_IT+0x3a2>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4a19      	ldr	r2, [pc, #100]	@ (800fb58 <HAL_DMA_Abort_IT+0x404>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d132      	bne.n	800fb5c <HAL_DMA_Abort_IT+0x408>
 800faf6:	2301      	movs	r3, #1
 800faf8:	e031      	b.n	800fb5e <HAL_DMA_Abort_IT+0x40a>
 800fafa:	bf00      	nop
 800fafc:	40020010 	.word	0x40020010
 800fb00:	40020028 	.word	0x40020028
 800fb04:	40020040 	.word	0x40020040
 800fb08:	40020058 	.word	0x40020058
 800fb0c:	40020070 	.word	0x40020070
 800fb10:	40020088 	.word	0x40020088
 800fb14:	400200a0 	.word	0x400200a0
 800fb18:	400200b8 	.word	0x400200b8
 800fb1c:	40020410 	.word	0x40020410
 800fb20:	40020428 	.word	0x40020428
 800fb24:	40020440 	.word	0x40020440
 800fb28:	40020458 	.word	0x40020458
 800fb2c:	40020470 	.word	0x40020470
 800fb30:	40020488 	.word	0x40020488
 800fb34:	400204a0 	.word	0x400204a0
 800fb38:	400204b8 	.word	0x400204b8
 800fb3c:	58025408 	.word	0x58025408
 800fb40:	5802541c 	.word	0x5802541c
 800fb44:	58025430 	.word	0x58025430
 800fb48:	58025444 	.word	0x58025444
 800fb4c:	58025458 	.word	0x58025458
 800fb50:	5802546c 	.word	0x5802546c
 800fb54:	58025480 	.word	0x58025480
 800fb58:	58025494 	.word	0x58025494
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d028      	beq.n	800fbb4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fb70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb7c:	f003 031f 	and.w	r3, r3, #31
 800fb80:	2201      	movs	r2, #1
 800fb82:	409a      	lsls	r2, r3
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800fb90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d00c      	beq.n	800fbb4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fba8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800fbb2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d003      	beq.n	800fbd4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800fbd4:	2300      	movs	r3, #0
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3710      	adds	r7, #16
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop

0800fbe0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b08a      	sub	sp, #40	@ 0x28
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800fbec:	4b67      	ldr	r3, [pc, #412]	@ (800fd8c <HAL_DMA_IRQHandler+0x1ac>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4a67      	ldr	r2, [pc, #412]	@ (800fd90 <HAL_DMA_IRQHandler+0x1b0>)
 800fbf2:	fba2 2303 	umull	r2, r3, r2, r3
 800fbf6:	0a9b      	lsrs	r3, r3, #10
 800fbf8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbfe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc04:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800fc06:	6a3b      	ldr	r3, [r7, #32]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a5f      	ldr	r2, [pc, #380]	@ (800fd94 <HAL_DMA_IRQHandler+0x1b4>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d04a      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a5d      	ldr	r2, [pc, #372]	@ (800fd98 <HAL_DMA_IRQHandler+0x1b8>)
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d045      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4a5c      	ldr	r2, [pc, #368]	@ (800fd9c <HAL_DMA_IRQHandler+0x1bc>)
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d040      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	4a5a      	ldr	r2, [pc, #360]	@ (800fda0 <HAL_DMA_IRQHandler+0x1c0>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d03b      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	4a59      	ldr	r2, [pc, #356]	@ (800fda4 <HAL_DMA_IRQHandler+0x1c4>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d036      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4a57      	ldr	r2, [pc, #348]	@ (800fda8 <HAL_DMA_IRQHandler+0x1c8>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d031      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	4a56      	ldr	r2, [pc, #344]	@ (800fdac <HAL_DMA_IRQHandler+0x1cc>)
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d02c      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4a54      	ldr	r2, [pc, #336]	@ (800fdb0 <HAL_DMA_IRQHandler+0x1d0>)
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d027      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a53      	ldr	r2, [pc, #332]	@ (800fdb4 <HAL_DMA_IRQHandler+0x1d4>)
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d022      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	4a51      	ldr	r2, [pc, #324]	@ (800fdb8 <HAL_DMA_IRQHandler+0x1d8>)
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d01d      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4a50      	ldr	r2, [pc, #320]	@ (800fdbc <HAL_DMA_IRQHandler+0x1dc>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d018      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	4a4e      	ldr	r2, [pc, #312]	@ (800fdc0 <HAL_DMA_IRQHandler+0x1e0>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d013      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4a4d      	ldr	r2, [pc, #308]	@ (800fdc4 <HAL_DMA_IRQHandler+0x1e4>)
 800fc90:	4293      	cmp	r3, r2
 800fc92:	d00e      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4a4b      	ldr	r2, [pc, #300]	@ (800fdc8 <HAL_DMA_IRQHandler+0x1e8>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d009      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	4a4a      	ldr	r2, [pc, #296]	@ (800fdcc <HAL_DMA_IRQHandler+0x1ec>)
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d004      	beq.n	800fcb2 <HAL_DMA_IRQHandler+0xd2>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4a48      	ldr	r2, [pc, #288]	@ (800fdd0 <HAL_DMA_IRQHandler+0x1f0>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d101      	bne.n	800fcb6 <HAL_DMA_IRQHandler+0xd6>
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	e000      	b.n	800fcb8 <HAL_DMA_IRQHandler+0xd8>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 842b 	beq.w	8010514 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fcc2:	f003 031f 	and.w	r3, r3, #31
 800fcc6:	2208      	movs	r2, #8
 800fcc8:	409a      	lsls	r2, r3
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	4013      	ands	r3, r2
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f000 80a2 	beq.w	800fe18 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4a2e      	ldr	r2, [pc, #184]	@ (800fd94 <HAL_DMA_IRQHandler+0x1b4>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d04a      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4a2d      	ldr	r2, [pc, #180]	@ (800fd98 <HAL_DMA_IRQHandler+0x1b8>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d045      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4a2b      	ldr	r2, [pc, #172]	@ (800fd9c <HAL_DMA_IRQHandler+0x1bc>)
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d040      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	4a2a      	ldr	r2, [pc, #168]	@ (800fda0 <HAL_DMA_IRQHandler+0x1c0>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d03b      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4a28      	ldr	r2, [pc, #160]	@ (800fda4 <HAL_DMA_IRQHandler+0x1c4>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d036      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4a27      	ldr	r2, [pc, #156]	@ (800fda8 <HAL_DMA_IRQHandler+0x1c8>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d031      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4a25      	ldr	r2, [pc, #148]	@ (800fdac <HAL_DMA_IRQHandler+0x1cc>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d02c      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4a24      	ldr	r2, [pc, #144]	@ (800fdb0 <HAL_DMA_IRQHandler+0x1d0>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d027      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	4a22      	ldr	r2, [pc, #136]	@ (800fdb4 <HAL_DMA_IRQHandler+0x1d4>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d022      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4a21      	ldr	r2, [pc, #132]	@ (800fdb8 <HAL_DMA_IRQHandler+0x1d8>)
 800fd34:	4293      	cmp	r3, r2
 800fd36:	d01d      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	4a1f      	ldr	r2, [pc, #124]	@ (800fdbc <HAL_DMA_IRQHandler+0x1dc>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d018      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4a1e      	ldr	r2, [pc, #120]	@ (800fdc0 <HAL_DMA_IRQHandler+0x1e0>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d013      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4a1c      	ldr	r2, [pc, #112]	@ (800fdc4 <HAL_DMA_IRQHandler+0x1e4>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d00e      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a1b      	ldr	r2, [pc, #108]	@ (800fdc8 <HAL_DMA_IRQHandler+0x1e8>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d009      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a19      	ldr	r2, [pc, #100]	@ (800fdcc <HAL_DMA_IRQHandler+0x1ec>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d004      	beq.n	800fd74 <HAL_DMA_IRQHandler+0x194>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4a18      	ldr	r2, [pc, #96]	@ (800fdd0 <HAL_DMA_IRQHandler+0x1f0>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d12f      	bne.n	800fdd4 <HAL_DMA_IRQHandler+0x1f4>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f003 0304 	and.w	r3, r3, #4
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	bf14      	ite	ne
 800fd82:	2301      	movne	r3, #1
 800fd84:	2300      	moveq	r3, #0
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	e02e      	b.n	800fde8 <HAL_DMA_IRQHandler+0x208>
 800fd8a:	bf00      	nop
 800fd8c:	24000290 	.word	0x24000290
 800fd90:	1b4e81b5 	.word	0x1b4e81b5
 800fd94:	40020010 	.word	0x40020010
 800fd98:	40020028 	.word	0x40020028
 800fd9c:	40020040 	.word	0x40020040
 800fda0:	40020058 	.word	0x40020058
 800fda4:	40020070 	.word	0x40020070
 800fda8:	40020088 	.word	0x40020088
 800fdac:	400200a0 	.word	0x400200a0
 800fdb0:	400200b8 	.word	0x400200b8
 800fdb4:	40020410 	.word	0x40020410
 800fdb8:	40020428 	.word	0x40020428
 800fdbc:	40020440 	.word	0x40020440
 800fdc0:	40020458 	.word	0x40020458
 800fdc4:	40020470 	.word	0x40020470
 800fdc8:	40020488 	.word	0x40020488
 800fdcc:	400204a0 	.word	0x400204a0
 800fdd0:	400204b8 	.word	0x400204b8
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f003 0308 	and.w	r3, r3, #8
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	bf14      	ite	ne
 800fde2:	2301      	movne	r3, #1
 800fde4:	2300      	moveq	r3, #0
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d015      	beq.n	800fe18 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f022 0204 	bic.w	r2, r2, #4
 800fdfa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fe00:	f003 031f 	and.w	r3, r3, #31
 800fe04:	2208      	movs	r2, #8
 800fe06:	409a      	lsls	r2, r3
 800fe08:	6a3b      	ldr	r3, [r7, #32]
 800fe0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe10:	f043 0201 	orr.w	r2, r3, #1
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fe1c:	f003 031f 	and.w	r3, r3, #31
 800fe20:	69ba      	ldr	r2, [r7, #24]
 800fe22:	fa22 f303 	lsr.w	r3, r2, r3
 800fe26:	f003 0301 	and.w	r3, r3, #1
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d06e      	beq.n	800ff0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a69      	ldr	r2, [pc, #420]	@ (800ffd8 <HAL_DMA_IRQHandler+0x3f8>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d04a      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a67      	ldr	r2, [pc, #412]	@ (800ffdc <HAL_DMA_IRQHandler+0x3fc>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d045      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a66      	ldr	r2, [pc, #408]	@ (800ffe0 <HAL_DMA_IRQHandler+0x400>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d040      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a64      	ldr	r2, [pc, #400]	@ (800ffe4 <HAL_DMA_IRQHandler+0x404>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d03b      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4a63      	ldr	r2, [pc, #396]	@ (800ffe8 <HAL_DMA_IRQHandler+0x408>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d036      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	4a61      	ldr	r2, [pc, #388]	@ (800ffec <HAL_DMA_IRQHandler+0x40c>)
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d031      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4a60      	ldr	r2, [pc, #384]	@ (800fff0 <HAL_DMA_IRQHandler+0x410>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d02c      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4a5e      	ldr	r2, [pc, #376]	@ (800fff4 <HAL_DMA_IRQHandler+0x414>)
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	d027      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	4a5d      	ldr	r2, [pc, #372]	@ (800fff8 <HAL_DMA_IRQHandler+0x418>)
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d022      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	4a5b      	ldr	r2, [pc, #364]	@ (800fffc <HAL_DMA_IRQHandler+0x41c>)
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d01d      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	4a5a      	ldr	r2, [pc, #360]	@ (8010000 <HAL_DMA_IRQHandler+0x420>)
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d018      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a58      	ldr	r2, [pc, #352]	@ (8010004 <HAL_DMA_IRQHandler+0x424>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d013      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a57      	ldr	r2, [pc, #348]	@ (8010008 <HAL_DMA_IRQHandler+0x428>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d00e      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	4a55      	ldr	r2, [pc, #340]	@ (801000c <HAL_DMA_IRQHandler+0x42c>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d009      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	4a54      	ldr	r2, [pc, #336]	@ (8010010 <HAL_DMA_IRQHandler+0x430>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d004      	beq.n	800fece <HAL_DMA_IRQHandler+0x2ee>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4a52      	ldr	r2, [pc, #328]	@ (8010014 <HAL_DMA_IRQHandler+0x434>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d10a      	bne.n	800fee4 <HAL_DMA_IRQHandler+0x304>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	695b      	ldr	r3, [r3, #20]
 800fed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fed8:	2b00      	cmp	r3, #0
 800feda:	bf14      	ite	ne
 800fedc:	2301      	movne	r3, #1
 800fede:	2300      	moveq	r3, #0
 800fee0:	b2db      	uxtb	r3, r3
 800fee2:	e003      	b.n	800feec <HAL_DMA_IRQHandler+0x30c>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	2300      	movs	r3, #0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d00d      	beq.n	800ff0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fef4:	f003 031f 	and.w	r3, r3, #31
 800fef8:	2201      	movs	r2, #1
 800fefa:	409a      	lsls	r2, r3
 800fefc:	6a3b      	ldr	r3, [r7, #32]
 800fefe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff04:	f043 0202 	orr.w	r2, r3, #2
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff10:	f003 031f 	and.w	r3, r3, #31
 800ff14:	2204      	movs	r2, #4
 800ff16:	409a      	lsls	r2, r3
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	4013      	ands	r3, r2
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f000 808f 	beq.w	8010040 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4a2c      	ldr	r2, [pc, #176]	@ (800ffd8 <HAL_DMA_IRQHandler+0x3f8>)
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	d04a      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4a2a      	ldr	r2, [pc, #168]	@ (800ffdc <HAL_DMA_IRQHandler+0x3fc>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d045      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	4a29      	ldr	r2, [pc, #164]	@ (800ffe0 <HAL_DMA_IRQHandler+0x400>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d040      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	4a27      	ldr	r2, [pc, #156]	@ (800ffe4 <HAL_DMA_IRQHandler+0x404>)
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d03b      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	4a26      	ldr	r2, [pc, #152]	@ (800ffe8 <HAL_DMA_IRQHandler+0x408>)
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d036      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	4a24      	ldr	r2, [pc, #144]	@ (800ffec <HAL_DMA_IRQHandler+0x40c>)
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d031      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4a23      	ldr	r2, [pc, #140]	@ (800fff0 <HAL_DMA_IRQHandler+0x410>)
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d02c      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4a21      	ldr	r2, [pc, #132]	@ (800fff4 <HAL_DMA_IRQHandler+0x414>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d027      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4a20      	ldr	r2, [pc, #128]	@ (800fff8 <HAL_DMA_IRQHandler+0x418>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d022      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4a1e      	ldr	r2, [pc, #120]	@ (800fffc <HAL_DMA_IRQHandler+0x41c>)
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d01d      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a1d      	ldr	r2, [pc, #116]	@ (8010000 <HAL_DMA_IRQHandler+0x420>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d018      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4a1b      	ldr	r2, [pc, #108]	@ (8010004 <HAL_DMA_IRQHandler+0x424>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d013      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4a1a      	ldr	r2, [pc, #104]	@ (8010008 <HAL_DMA_IRQHandler+0x428>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d00e      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4a18      	ldr	r2, [pc, #96]	@ (801000c <HAL_DMA_IRQHandler+0x42c>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d009      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a17      	ldr	r2, [pc, #92]	@ (8010010 <HAL_DMA_IRQHandler+0x430>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d004      	beq.n	800ffc2 <HAL_DMA_IRQHandler+0x3e2>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4a15      	ldr	r2, [pc, #84]	@ (8010014 <HAL_DMA_IRQHandler+0x434>)
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d12a      	bne.n	8010018 <HAL_DMA_IRQHandler+0x438>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f003 0302 	and.w	r3, r3, #2
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	bf14      	ite	ne
 800ffd0:	2301      	movne	r3, #1
 800ffd2:	2300      	moveq	r3, #0
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	e023      	b.n	8010020 <HAL_DMA_IRQHandler+0x440>
 800ffd8:	40020010 	.word	0x40020010
 800ffdc:	40020028 	.word	0x40020028
 800ffe0:	40020040 	.word	0x40020040
 800ffe4:	40020058 	.word	0x40020058
 800ffe8:	40020070 	.word	0x40020070
 800ffec:	40020088 	.word	0x40020088
 800fff0:	400200a0 	.word	0x400200a0
 800fff4:	400200b8 	.word	0x400200b8
 800fff8:	40020410 	.word	0x40020410
 800fffc:	40020428 	.word	0x40020428
 8010000:	40020440 	.word	0x40020440
 8010004:	40020458 	.word	0x40020458
 8010008:	40020470 	.word	0x40020470
 801000c:	40020488 	.word	0x40020488
 8010010:	400204a0 	.word	0x400204a0
 8010014:	400204b8 	.word	0x400204b8
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2300      	movs	r3, #0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d00d      	beq.n	8010040 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010028:	f003 031f 	and.w	r3, r3, #31
 801002c:	2204      	movs	r2, #4
 801002e:	409a      	lsls	r2, r3
 8010030:	6a3b      	ldr	r3, [r7, #32]
 8010032:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010038:	f043 0204 	orr.w	r2, r3, #4
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010044:	f003 031f 	and.w	r3, r3, #31
 8010048:	2210      	movs	r2, #16
 801004a:	409a      	lsls	r2, r3
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	4013      	ands	r3, r2
 8010050:	2b00      	cmp	r3, #0
 8010052:	f000 80a6 	beq.w	80101a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4a85      	ldr	r2, [pc, #532]	@ (8010270 <HAL_DMA_IRQHandler+0x690>)
 801005c:	4293      	cmp	r3, r2
 801005e:	d04a      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4a83      	ldr	r2, [pc, #524]	@ (8010274 <HAL_DMA_IRQHandler+0x694>)
 8010066:	4293      	cmp	r3, r2
 8010068:	d045      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a82      	ldr	r2, [pc, #520]	@ (8010278 <HAL_DMA_IRQHandler+0x698>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d040      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4a80      	ldr	r2, [pc, #512]	@ (801027c <HAL_DMA_IRQHandler+0x69c>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d03b      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4a7f      	ldr	r2, [pc, #508]	@ (8010280 <HAL_DMA_IRQHandler+0x6a0>)
 8010084:	4293      	cmp	r3, r2
 8010086:	d036      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4a7d      	ldr	r2, [pc, #500]	@ (8010284 <HAL_DMA_IRQHandler+0x6a4>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d031      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4a7c      	ldr	r2, [pc, #496]	@ (8010288 <HAL_DMA_IRQHandler+0x6a8>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d02c      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a7a      	ldr	r2, [pc, #488]	@ (801028c <HAL_DMA_IRQHandler+0x6ac>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d027      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4a79      	ldr	r2, [pc, #484]	@ (8010290 <HAL_DMA_IRQHandler+0x6b0>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d022      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a77      	ldr	r2, [pc, #476]	@ (8010294 <HAL_DMA_IRQHandler+0x6b4>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d01d      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4a76      	ldr	r2, [pc, #472]	@ (8010298 <HAL_DMA_IRQHandler+0x6b8>)
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d018      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a74      	ldr	r2, [pc, #464]	@ (801029c <HAL_DMA_IRQHandler+0x6bc>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d013      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4a73      	ldr	r2, [pc, #460]	@ (80102a0 <HAL_DMA_IRQHandler+0x6c0>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d00e      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4a71      	ldr	r2, [pc, #452]	@ (80102a4 <HAL_DMA_IRQHandler+0x6c4>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d009      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	4a70      	ldr	r2, [pc, #448]	@ (80102a8 <HAL_DMA_IRQHandler+0x6c8>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d004      	beq.n	80100f6 <HAL_DMA_IRQHandler+0x516>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a6e      	ldr	r2, [pc, #440]	@ (80102ac <HAL_DMA_IRQHandler+0x6cc>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d10a      	bne.n	801010c <HAL_DMA_IRQHandler+0x52c>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	f003 0308 	and.w	r3, r3, #8
 8010100:	2b00      	cmp	r3, #0
 8010102:	bf14      	ite	ne
 8010104:	2301      	movne	r3, #1
 8010106:	2300      	moveq	r3, #0
 8010108:	b2db      	uxtb	r3, r3
 801010a:	e009      	b.n	8010120 <HAL_DMA_IRQHandler+0x540>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f003 0304 	and.w	r3, r3, #4
 8010116:	2b00      	cmp	r3, #0
 8010118:	bf14      	ite	ne
 801011a:	2301      	movne	r3, #1
 801011c:	2300      	moveq	r3, #0
 801011e:	b2db      	uxtb	r3, r3
 8010120:	2b00      	cmp	r3, #0
 8010122:	d03e      	beq.n	80101a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010128:	f003 031f 	and.w	r3, r3, #31
 801012c:	2210      	movs	r2, #16
 801012e:	409a      	lsls	r2, r3
 8010130:	6a3b      	ldr	r3, [r7, #32]
 8010132:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801013e:	2b00      	cmp	r3, #0
 8010140:	d018      	beq.n	8010174 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801014c:	2b00      	cmp	r3, #0
 801014e:	d108      	bne.n	8010162 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010154:	2b00      	cmp	r3, #0
 8010156:	d024      	beq.n	80101a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	4798      	blx	r3
 8010160:	e01f      	b.n	80101a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010166:	2b00      	cmp	r3, #0
 8010168:	d01b      	beq.n	80101a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	4798      	blx	r3
 8010172:	e016      	b.n	80101a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801017e:	2b00      	cmp	r3, #0
 8010180:	d107      	bne.n	8010192 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f022 0208 	bic.w	r2, r2, #8
 8010190:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010196:	2b00      	cmp	r3, #0
 8010198:	d003      	beq.n	80101a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101a6:	f003 031f 	and.w	r3, r3, #31
 80101aa:	2220      	movs	r2, #32
 80101ac:	409a      	lsls	r2, r3
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	4013      	ands	r3, r2
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	f000 8110 	beq.w	80103d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4a2c      	ldr	r2, [pc, #176]	@ (8010270 <HAL_DMA_IRQHandler+0x690>)
 80101be:	4293      	cmp	r3, r2
 80101c0:	d04a      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	4a2b      	ldr	r2, [pc, #172]	@ (8010274 <HAL_DMA_IRQHandler+0x694>)
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d045      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4a29      	ldr	r2, [pc, #164]	@ (8010278 <HAL_DMA_IRQHandler+0x698>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d040      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	4a28      	ldr	r2, [pc, #160]	@ (801027c <HAL_DMA_IRQHandler+0x69c>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d03b      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4a26      	ldr	r2, [pc, #152]	@ (8010280 <HAL_DMA_IRQHandler+0x6a0>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d036      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	4a25      	ldr	r2, [pc, #148]	@ (8010284 <HAL_DMA_IRQHandler+0x6a4>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d031      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	4a23      	ldr	r2, [pc, #140]	@ (8010288 <HAL_DMA_IRQHandler+0x6a8>)
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d02c      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4a22      	ldr	r2, [pc, #136]	@ (801028c <HAL_DMA_IRQHandler+0x6ac>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d027      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	4a20      	ldr	r2, [pc, #128]	@ (8010290 <HAL_DMA_IRQHandler+0x6b0>)
 801020e:	4293      	cmp	r3, r2
 8010210:	d022      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4a1f      	ldr	r2, [pc, #124]	@ (8010294 <HAL_DMA_IRQHandler+0x6b4>)
 8010218:	4293      	cmp	r3, r2
 801021a:	d01d      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4a1d      	ldr	r2, [pc, #116]	@ (8010298 <HAL_DMA_IRQHandler+0x6b8>)
 8010222:	4293      	cmp	r3, r2
 8010224:	d018      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	4a1c      	ldr	r2, [pc, #112]	@ (801029c <HAL_DMA_IRQHandler+0x6bc>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d013      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4a1a      	ldr	r2, [pc, #104]	@ (80102a0 <HAL_DMA_IRQHandler+0x6c0>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d00e      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	4a19      	ldr	r2, [pc, #100]	@ (80102a4 <HAL_DMA_IRQHandler+0x6c4>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d009      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4a17      	ldr	r2, [pc, #92]	@ (80102a8 <HAL_DMA_IRQHandler+0x6c8>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d004      	beq.n	8010258 <HAL_DMA_IRQHandler+0x678>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4a16      	ldr	r2, [pc, #88]	@ (80102ac <HAL_DMA_IRQHandler+0x6cc>)
 8010254:	4293      	cmp	r3, r2
 8010256:	d12b      	bne.n	80102b0 <HAL_DMA_IRQHandler+0x6d0>
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f003 0310 	and.w	r3, r3, #16
 8010262:	2b00      	cmp	r3, #0
 8010264:	bf14      	ite	ne
 8010266:	2301      	movne	r3, #1
 8010268:	2300      	moveq	r3, #0
 801026a:	b2db      	uxtb	r3, r3
 801026c:	e02a      	b.n	80102c4 <HAL_DMA_IRQHandler+0x6e4>
 801026e:	bf00      	nop
 8010270:	40020010 	.word	0x40020010
 8010274:	40020028 	.word	0x40020028
 8010278:	40020040 	.word	0x40020040
 801027c:	40020058 	.word	0x40020058
 8010280:	40020070 	.word	0x40020070
 8010284:	40020088 	.word	0x40020088
 8010288:	400200a0 	.word	0x400200a0
 801028c:	400200b8 	.word	0x400200b8
 8010290:	40020410 	.word	0x40020410
 8010294:	40020428 	.word	0x40020428
 8010298:	40020440 	.word	0x40020440
 801029c:	40020458 	.word	0x40020458
 80102a0:	40020470 	.word	0x40020470
 80102a4:	40020488 	.word	0x40020488
 80102a8:	400204a0 	.word	0x400204a0
 80102ac:	400204b8 	.word	0x400204b8
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f003 0302 	and.w	r3, r3, #2
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	bf14      	ite	ne
 80102be:	2301      	movne	r3, #1
 80102c0:	2300      	moveq	r3, #0
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	f000 8087 	beq.w	80103d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80102ce:	f003 031f 	and.w	r3, r3, #31
 80102d2:	2220      	movs	r2, #32
 80102d4:	409a      	lsls	r2, r3
 80102d6:	6a3b      	ldr	r3, [r7, #32]
 80102d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	2b04      	cmp	r3, #4
 80102e4:	d139      	bne.n	801035a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f022 0216 	bic.w	r2, r2, #22
 80102f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	695a      	ldr	r2, [r3, #20]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010304:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801030a:	2b00      	cmp	r3, #0
 801030c:	d103      	bne.n	8010316 <HAL_DMA_IRQHandler+0x736>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010312:	2b00      	cmp	r3, #0
 8010314:	d007      	beq.n	8010326 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f022 0208 	bic.w	r2, r2, #8
 8010324:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801032a:	f003 031f 	and.w	r3, r3, #31
 801032e:	223f      	movs	r2, #63	@ 0x3f
 8010330:	409a      	lsls	r2, r3
 8010332:	6a3b      	ldr	r3, [r7, #32]
 8010334:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2201      	movs	r2, #1
 801033a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2200      	movs	r2, #0
 8010342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801034a:	2b00      	cmp	r3, #0
 801034c:	f000 834a 	beq.w	80109e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	4798      	blx	r3
          }
          return;
 8010358:	e344      	b.n	80109e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010364:	2b00      	cmp	r3, #0
 8010366:	d018      	beq.n	801039a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010372:	2b00      	cmp	r3, #0
 8010374:	d108      	bne.n	8010388 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801037a:	2b00      	cmp	r3, #0
 801037c:	d02c      	beq.n	80103d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	4798      	blx	r3
 8010386:	e027      	b.n	80103d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801038c:	2b00      	cmp	r3, #0
 801038e:	d023      	beq.n	80103d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	4798      	blx	r3
 8010398:	e01e      	b.n	80103d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d10f      	bne.n	80103c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f022 0210 	bic.w	r2, r2, #16
 80103b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2201      	movs	r2, #1
 80103bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2200      	movs	r2, #0
 80103c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d003      	beq.n	80103d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103dc:	2b00      	cmp	r3, #0
 80103de:	f000 8306 	beq.w	80109ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103e6:	f003 0301 	and.w	r3, r3, #1
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	f000 8088 	beq.w	8010500 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2204      	movs	r2, #4
 80103f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	4a7a      	ldr	r2, [pc, #488]	@ (80105e8 <HAL_DMA_IRQHandler+0xa08>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d04a      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4a79      	ldr	r2, [pc, #484]	@ (80105ec <HAL_DMA_IRQHandler+0xa0c>)
 8010408:	4293      	cmp	r3, r2
 801040a:	d045      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a77      	ldr	r2, [pc, #476]	@ (80105f0 <HAL_DMA_IRQHandler+0xa10>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d040      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	4a76      	ldr	r2, [pc, #472]	@ (80105f4 <HAL_DMA_IRQHandler+0xa14>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d03b      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4a74      	ldr	r2, [pc, #464]	@ (80105f8 <HAL_DMA_IRQHandler+0xa18>)
 8010426:	4293      	cmp	r3, r2
 8010428:	d036      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	4a73      	ldr	r2, [pc, #460]	@ (80105fc <HAL_DMA_IRQHandler+0xa1c>)
 8010430:	4293      	cmp	r3, r2
 8010432:	d031      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	4a71      	ldr	r2, [pc, #452]	@ (8010600 <HAL_DMA_IRQHandler+0xa20>)
 801043a:	4293      	cmp	r3, r2
 801043c:	d02c      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	4a70      	ldr	r2, [pc, #448]	@ (8010604 <HAL_DMA_IRQHandler+0xa24>)
 8010444:	4293      	cmp	r3, r2
 8010446:	d027      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a6e      	ldr	r2, [pc, #440]	@ (8010608 <HAL_DMA_IRQHandler+0xa28>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d022      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4a6d      	ldr	r2, [pc, #436]	@ (801060c <HAL_DMA_IRQHandler+0xa2c>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d01d      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	4a6b      	ldr	r2, [pc, #428]	@ (8010610 <HAL_DMA_IRQHandler+0xa30>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d018      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	4a6a      	ldr	r2, [pc, #424]	@ (8010614 <HAL_DMA_IRQHandler+0xa34>)
 801046c:	4293      	cmp	r3, r2
 801046e:	d013      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4a68      	ldr	r2, [pc, #416]	@ (8010618 <HAL_DMA_IRQHandler+0xa38>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d00e      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	4a67      	ldr	r2, [pc, #412]	@ (801061c <HAL_DMA_IRQHandler+0xa3c>)
 8010480:	4293      	cmp	r3, r2
 8010482:	d009      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4a65      	ldr	r2, [pc, #404]	@ (8010620 <HAL_DMA_IRQHandler+0xa40>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d004      	beq.n	8010498 <HAL_DMA_IRQHandler+0x8b8>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4a64      	ldr	r2, [pc, #400]	@ (8010624 <HAL_DMA_IRQHandler+0xa44>)
 8010494:	4293      	cmp	r3, r2
 8010496:	d108      	bne.n	80104aa <HAL_DMA_IRQHandler+0x8ca>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f022 0201 	bic.w	r2, r2, #1
 80104a6:	601a      	str	r2, [r3, #0]
 80104a8:	e007      	b.n	80104ba <HAL_DMA_IRQHandler+0x8da>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f022 0201 	bic.w	r2, r2, #1
 80104b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	3301      	adds	r3, #1
 80104be:	60fb      	str	r3, [r7, #12]
 80104c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d307      	bcc.n	80104d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f003 0301 	and.w	r3, r3, #1
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d1f2      	bne.n	80104ba <HAL_DMA_IRQHandler+0x8da>
 80104d4:	e000      	b.n	80104d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80104d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	f003 0301 	and.w	r3, r3, #1
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d004      	beq.n	80104f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2203      	movs	r2, #3
 80104ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80104ee:	e003      	b.n	80104f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2201      	movs	r2, #1
 80104f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2200      	movs	r2, #0
 80104fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010504:	2b00      	cmp	r3, #0
 8010506:	f000 8272 	beq.w	80109ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	4798      	blx	r3
 8010512:	e26c      	b.n	80109ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	4a43      	ldr	r2, [pc, #268]	@ (8010628 <HAL_DMA_IRQHandler+0xa48>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d022      	beq.n	8010564 <HAL_DMA_IRQHandler+0x984>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4a42      	ldr	r2, [pc, #264]	@ (801062c <HAL_DMA_IRQHandler+0xa4c>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d01d      	beq.n	8010564 <HAL_DMA_IRQHandler+0x984>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4a40      	ldr	r2, [pc, #256]	@ (8010630 <HAL_DMA_IRQHandler+0xa50>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d018      	beq.n	8010564 <HAL_DMA_IRQHandler+0x984>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4a3f      	ldr	r2, [pc, #252]	@ (8010634 <HAL_DMA_IRQHandler+0xa54>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d013      	beq.n	8010564 <HAL_DMA_IRQHandler+0x984>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4a3d      	ldr	r2, [pc, #244]	@ (8010638 <HAL_DMA_IRQHandler+0xa58>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d00e      	beq.n	8010564 <HAL_DMA_IRQHandler+0x984>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4a3c      	ldr	r2, [pc, #240]	@ (801063c <HAL_DMA_IRQHandler+0xa5c>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d009      	beq.n	8010564 <HAL_DMA_IRQHandler+0x984>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a3a      	ldr	r2, [pc, #232]	@ (8010640 <HAL_DMA_IRQHandler+0xa60>)
 8010556:	4293      	cmp	r3, r2
 8010558:	d004      	beq.n	8010564 <HAL_DMA_IRQHandler+0x984>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	4a39      	ldr	r2, [pc, #228]	@ (8010644 <HAL_DMA_IRQHandler+0xa64>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d101      	bne.n	8010568 <HAL_DMA_IRQHandler+0x988>
 8010564:	2301      	movs	r3, #1
 8010566:	e000      	b.n	801056a <HAL_DMA_IRQHandler+0x98a>
 8010568:	2300      	movs	r3, #0
 801056a:	2b00      	cmp	r3, #0
 801056c:	f000 823f 	beq.w	80109ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801057c:	f003 031f 	and.w	r3, r3, #31
 8010580:	2204      	movs	r2, #4
 8010582:	409a      	lsls	r2, r3
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	4013      	ands	r3, r2
 8010588:	2b00      	cmp	r3, #0
 801058a:	f000 80cd 	beq.w	8010728 <HAL_DMA_IRQHandler+0xb48>
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	f003 0304 	and.w	r3, r3, #4
 8010594:	2b00      	cmp	r3, #0
 8010596:	f000 80c7 	beq.w	8010728 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801059e:	f003 031f 	and.w	r3, r3, #31
 80105a2:	2204      	movs	r2, #4
 80105a4:	409a      	lsls	r2, r3
 80105a6:	69fb      	ldr	r3, [r7, #28]
 80105a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d049      	beq.n	8010648 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d109      	bne.n	80105d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	f000 8210 	beq.w	80109e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80105d0:	e20a      	b.n	80109e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f000 8206 	beq.w	80109e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80105e4:	e200      	b.n	80109e8 <HAL_DMA_IRQHandler+0xe08>
 80105e6:	bf00      	nop
 80105e8:	40020010 	.word	0x40020010
 80105ec:	40020028 	.word	0x40020028
 80105f0:	40020040 	.word	0x40020040
 80105f4:	40020058 	.word	0x40020058
 80105f8:	40020070 	.word	0x40020070
 80105fc:	40020088 	.word	0x40020088
 8010600:	400200a0 	.word	0x400200a0
 8010604:	400200b8 	.word	0x400200b8
 8010608:	40020410 	.word	0x40020410
 801060c:	40020428 	.word	0x40020428
 8010610:	40020440 	.word	0x40020440
 8010614:	40020458 	.word	0x40020458
 8010618:	40020470 	.word	0x40020470
 801061c:	40020488 	.word	0x40020488
 8010620:	400204a0 	.word	0x400204a0
 8010624:	400204b8 	.word	0x400204b8
 8010628:	58025408 	.word	0x58025408
 801062c:	5802541c 	.word	0x5802541c
 8010630:	58025430 	.word	0x58025430
 8010634:	58025444 	.word	0x58025444
 8010638:	58025458 	.word	0x58025458
 801063c:	5802546c 	.word	0x5802546c
 8010640:	58025480 	.word	0x58025480
 8010644:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	f003 0320 	and.w	r3, r3, #32
 801064e:	2b00      	cmp	r3, #0
 8010650:	d160      	bne.n	8010714 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a7f      	ldr	r2, [pc, #508]	@ (8010854 <HAL_DMA_IRQHandler+0xc74>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d04a      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a7d      	ldr	r2, [pc, #500]	@ (8010858 <HAL_DMA_IRQHandler+0xc78>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d045      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a7c      	ldr	r2, [pc, #496]	@ (801085c <HAL_DMA_IRQHandler+0xc7c>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d040      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4a7a      	ldr	r2, [pc, #488]	@ (8010860 <HAL_DMA_IRQHandler+0xc80>)
 8010676:	4293      	cmp	r3, r2
 8010678:	d03b      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4a79      	ldr	r2, [pc, #484]	@ (8010864 <HAL_DMA_IRQHandler+0xc84>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d036      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4a77      	ldr	r2, [pc, #476]	@ (8010868 <HAL_DMA_IRQHandler+0xc88>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d031      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4a76      	ldr	r2, [pc, #472]	@ (801086c <HAL_DMA_IRQHandler+0xc8c>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d02c      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a74      	ldr	r2, [pc, #464]	@ (8010870 <HAL_DMA_IRQHandler+0xc90>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d027      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4a73      	ldr	r2, [pc, #460]	@ (8010874 <HAL_DMA_IRQHandler+0xc94>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d022      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4a71      	ldr	r2, [pc, #452]	@ (8010878 <HAL_DMA_IRQHandler+0xc98>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d01d      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	4a70      	ldr	r2, [pc, #448]	@ (801087c <HAL_DMA_IRQHandler+0xc9c>)
 80106bc:	4293      	cmp	r3, r2
 80106be:	d018      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	4a6e      	ldr	r2, [pc, #440]	@ (8010880 <HAL_DMA_IRQHandler+0xca0>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d013      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	4a6d      	ldr	r2, [pc, #436]	@ (8010884 <HAL_DMA_IRQHandler+0xca4>)
 80106d0:	4293      	cmp	r3, r2
 80106d2:	d00e      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4a6b      	ldr	r2, [pc, #428]	@ (8010888 <HAL_DMA_IRQHandler+0xca8>)
 80106da:	4293      	cmp	r3, r2
 80106dc:	d009      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	4a6a      	ldr	r2, [pc, #424]	@ (801088c <HAL_DMA_IRQHandler+0xcac>)
 80106e4:	4293      	cmp	r3, r2
 80106e6:	d004      	beq.n	80106f2 <HAL_DMA_IRQHandler+0xb12>
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	4a68      	ldr	r2, [pc, #416]	@ (8010890 <HAL_DMA_IRQHandler+0xcb0>)
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d108      	bne.n	8010704 <HAL_DMA_IRQHandler+0xb24>
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	681a      	ldr	r2, [r3, #0]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f022 0208 	bic.w	r2, r2, #8
 8010700:	601a      	str	r2, [r3, #0]
 8010702:	e007      	b.n	8010714 <HAL_DMA_IRQHandler+0xb34>
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f022 0204 	bic.w	r2, r2, #4
 8010712:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010718:	2b00      	cmp	r3, #0
 801071a:	f000 8165 	beq.w	80109e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8010726:	e15f      	b.n	80109e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801072c:	f003 031f 	and.w	r3, r3, #31
 8010730:	2202      	movs	r2, #2
 8010732:	409a      	lsls	r2, r3
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	4013      	ands	r3, r2
 8010738:	2b00      	cmp	r3, #0
 801073a:	f000 80c5 	beq.w	80108c8 <HAL_DMA_IRQHandler+0xce8>
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	f003 0302 	and.w	r3, r3, #2
 8010744:	2b00      	cmp	r3, #0
 8010746:	f000 80bf 	beq.w	80108c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801074e:	f003 031f 	and.w	r3, r3, #31
 8010752:	2202      	movs	r2, #2
 8010754:	409a      	lsls	r2, r3
 8010756:	69fb      	ldr	r3, [r7, #28]
 8010758:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010760:	2b00      	cmp	r3, #0
 8010762:	d018      	beq.n	8010796 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801076a:	2b00      	cmp	r3, #0
 801076c:	d109      	bne.n	8010782 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010772:	2b00      	cmp	r3, #0
 8010774:	f000 813a 	beq.w	80109ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8010780:	e134      	b.n	80109ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010786:	2b00      	cmp	r3, #0
 8010788:	f000 8130 	beq.w	80109ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8010794:	e12a      	b.n	80109ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	f003 0320 	and.w	r3, r3, #32
 801079c:	2b00      	cmp	r3, #0
 801079e:	f040 8089 	bne.w	80108b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4a2b      	ldr	r2, [pc, #172]	@ (8010854 <HAL_DMA_IRQHandler+0xc74>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d04a      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4a29      	ldr	r2, [pc, #164]	@ (8010858 <HAL_DMA_IRQHandler+0xc78>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d045      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a28      	ldr	r2, [pc, #160]	@ (801085c <HAL_DMA_IRQHandler+0xc7c>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d040      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4a26      	ldr	r2, [pc, #152]	@ (8010860 <HAL_DMA_IRQHandler+0xc80>)
 80107c6:	4293      	cmp	r3, r2
 80107c8:	d03b      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	4a25      	ldr	r2, [pc, #148]	@ (8010864 <HAL_DMA_IRQHandler+0xc84>)
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d036      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	4a23      	ldr	r2, [pc, #140]	@ (8010868 <HAL_DMA_IRQHandler+0xc88>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d031      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	4a22      	ldr	r2, [pc, #136]	@ (801086c <HAL_DMA_IRQHandler+0xc8c>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d02c      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4a20      	ldr	r2, [pc, #128]	@ (8010870 <HAL_DMA_IRQHandler+0xc90>)
 80107ee:	4293      	cmp	r3, r2
 80107f0:	d027      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	4a1f      	ldr	r2, [pc, #124]	@ (8010874 <HAL_DMA_IRQHandler+0xc94>)
 80107f8:	4293      	cmp	r3, r2
 80107fa:	d022      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4a1d      	ldr	r2, [pc, #116]	@ (8010878 <HAL_DMA_IRQHandler+0xc98>)
 8010802:	4293      	cmp	r3, r2
 8010804:	d01d      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	4a1c      	ldr	r2, [pc, #112]	@ (801087c <HAL_DMA_IRQHandler+0xc9c>)
 801080c:	4293      	cmp	r3, r2
 801080e:	d018      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4a1a      	ldr	r2, [pc, #104]	@ (8010880 <HAL_DMA_IRQHandler+0xca0>)
 8010816:	4293      	cmp	r3, r2
 8010818:	d013      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	4a19      	ldr	r2, [pc, #100]	@ (8010884 <HAL_DMA_IRQHandler+0xca4>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d00e      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	4a17      	ldr	r2, [pc, #92]	@ (8010888 <HAL_DMA_IRQHandler+0xca8>)
 801082a:	4293      	cmp	r3, r2
 801082c:	d009      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4a16      	ldr	r2, [pc, #88]	@ (801088c <HAL_DMA_IRQHandler+0xcac>)
 8010834:	4293      	cmp	r3, r2
 8010836:	d004      	beq.n	8010842 <HAL_DMA_IRQHandler+0xc62>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	4a14      	ldr	r2, [pc, #80]	@ (8010890 <HAL_DMA_IRQHandler+0xcb0>)
 801083e:	4293      	cmp	r3, r2
 8010840:	d128      	bne.n	8010894 <HAL_DMA_IRQHandler+0xcb4>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f022 0214 	bic.w	r2, r2, #20
 8010850:	601a      	str	r2, [r3, #0]
 8010852:	e027      	b.n	80108a4 <HAL_DMA_IRQHandler+0xcc4>
 8010854:	40020010 	.word	0x40020010
 8010858:	40020028 	.word	0x40020028
 801085c:	40020040 	.word	0x40020040
 8010860:	40020058 	.word	0x40020058
 8010864:	40020070 	.word	0x40020070
 8010868:	40020088 	.word	0x40020088
 801086c:	400200a0 	.word	0x400200a0
 8010870:	400200b8 	.word	0x400200b8
 8010874:	40020410 	.word	0x40020410
 8010878:	40020428 	.word	0x40020428
 801087c:	40020440 	.word	0x40020440
 8010880:	40020458 	.word	0x40020458
 8010884:	40020470 	.word	0x40020470
 8010888:	40020488 	.word	0x40020488
 801088c:	400204a0 	.word	0x400204a0
 8010890:	400204b8 	.word	0x400204b8
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f022 020a 	bic.w	r2, r2, #10
 80108a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2201      	movs	r2, #1
 80108a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2200      	movs	r2, #0
 80108b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	f000 8097 	beq.w	80109ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80108c6:	e091      	b.n	80109ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80108cc:	f003 031f 	and.w	r3, r3, #31
 80108d0:	2208      	movs	r2, #8
 80108d2:	409a      	lsls	r2, r3
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	4013      	ands	r3, r2
 80108d8:	2b00      	cmp	r3, #0
 80108da:	f000 8088 	beq.w	80109ee <HAL_DMA_IRQHandler+0xe0e>
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	f003 0308 	and.w	r3, r3, #8
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f000 8082 	beq.w	80109ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4a41      	ldr	r2, [pc, #260]	@ (80109f4 <HAL_DMA_IRQHandler+0xe14>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d04a      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4a3f      	ldr	r2, [pc, #252]	@ (80109f8 <HAL_DMA_IRQHandler+0xe18>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d045      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	4a3e      	ldr	r2, [pc, #248]	@ (80109fc <HAL_DMA_IRQHandler+0xe1c>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d040      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4a3c      	ldr	r2, [pc, #240]	@ (8010a00 <HAL_DMA_IRQHandler+0xe20>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d03b      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4a3b      	ldr	r2, [pc, #236]	@ (8010a04 <HAL_DMA_IRQHandler+0xe24>)
 8010918:	4293      	cmp	r3, r2
 801091a:	d036      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4a39      	ldr	r2, [pc, #228]	@ (8010a08 <HAL_DMA_IRQHandler+0xe28>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d031      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	4a38      	ldr	r2, [pc, #224]	@ (8010a0c <HAL_DMA_IRQHandler+0xe2c>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d02c      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	4a36      	ldr	r2, [pc, #216]	@ (8010a10 <HAL_DMA_IRQHandler+0xe30>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d027      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	4a35      	ldr	r2, [pc, #212]	@ (8010a14 <HAL_DMA_IRQHandler+0xe34>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d022      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4a33      	ldr	r2, [pc, #204]	@ (8010a18 <HAL_DMA_IRQHandler+0xe38>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d01d      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4a32      	ldr	r2, [pc, #200]	@ (8010a1c <HAL_DMA_IRQHandler+0xe3c>)
 8010954:	4293      	cmp	r3, r2
 8010956:	d018      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	4a30      	ldr	r2, [pc, #192]	@ (8010a20 <HAL_DMA_IRQHandler+0xe40>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d013      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	4a2f      	ldr	r2, [pc, #188]	@ (8010a24 <HAL_DMA_IRQHandler+0xe44>)
 8010968:	4293      	cmp	r3, r2
 801096a:	d00e      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4a2d      	ldr	r2, [pc, #180]	@ (8010a28 <HAL_DMA_IRQHandler+0xe48>)
 8010972:	4293      	cmp	r3, r2
 8010974:	d009      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4a2c      	ldr	r2, [pc, #176]	@ (8010a2c <HAL_DMA_IRQHandler+0xe4c>)
 801097c:	4293      	cmp	r3, r2
 801097e:	d004      	beq.n	801098a <HAL_DMA_IRQHandler+0xdaa>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4a2a      	ldr	r2, [pc, #168]	@ (8010a30 <HAL_DMA_IRQHandler+0xe50>)
 8010986:	4293      	cmp	r3, r2
 8010988:	d108      	bne.n	801099c <HAL_DMA_IRQHandler+0xdbc>
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f022 021c 	bic.w	r2, r2, #28
 8010998:	601a      	str	r2, [r3, #0]
 801099a:	e007      	b.n	80109ac <HAL_DMA_IRQHandler+0xdcc>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f022 020e 	bic.w	r2, r2, #14
 80109aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109b0:	f003 031f 	and.w	r3, r3, #31
 80109b4:	2201      	movs	r2, #1
 80109b6:	409a      	lsls	r2, r3
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2201      	movs	r2, #1
 80109c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2201      	movs	r2, #1
 80109c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2200      	movs	r2, #0
 80109ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d009      	beq.n	80109ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	4798      	blx	r3
 80109e2:	e004      	b.n	80109ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80109e4:	bf00      	nop
 80109e6:	e002      	b.n	80109ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80109e8:	bf00      	nop
 80109ea:	e000      	b.n	80109ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80109ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80109ee:	3728      	adds	r7, #40	@ 0x28
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	40020010 	.word	0x40020010
 80109f8:	40020028 	.word	0x40020028
 80109fc:	40020040 	.word	0x40020040
 8010a00:	40020058 	.word	0x40020058
 8010a04:	40020070 	.word	0x40020070
 8010a08:	40020088 	.word	0x40020088
 8010a0c:	400200a0 	.word	0x400200a0
 8010a10:	400200b8 	.word	0x400200b8
 8010a14:	40020410 	.word	0x40020410
 8010a18:	40020428 	.word	0x40020428
 8010a1c:	40020440 	.word	0x40020440
 8010a20:	40020458 	.word	0x40020458
 8010a24:	40020470 	.word	0x40020470
 8010a28:	40020488 	.word	0x40020488
 8010a2c:	400204a0 	.word	0x400204a0
 8010a30:	400204b8 	.word	0x400204b8

08010a34 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b083      	sub	sp, #12
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	370c      	adds	r7, #12
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b087      	sub	sp, #28
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	60f8      	str	r0, [r7, #12]
 8010a54:	60b9      	str	r1, [r7, #8]
 8010a56:	607a      	str	r2, [r7, #4]
 8010a58:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a5e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a64:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4a7f      	ldr	r2, [pc, #508]	@ (8010c68 <DMA_SetConfig+0x21c>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d072      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	4a7d      	ldr	r2, [pc, #500]	@ (8010c6c <DMA_SetConfig+0x220>)
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d06d      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8010c70 <DMA_SetConfig+0x224>)
 8010a80:	4293      	cmp	r3, r2
 8010a82:	d068      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4a7a      	ldr	r2, [pc, #488]	@ (8010c74 <DMA_SetConfig+0x228>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d063      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	4a79      	ldr	r2, [pc, #484]	@ (8010c78 <DMA_SetConfig+0x22c>)
 8010a94:	4293      	cmp	r3, r2
 8010a96:	d05e      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	4a77      	ldr	r2, [pc, #476]	@ (8010c7c <DMA_SetConfig+0x230>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d059      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4a76      	ldr	r2, [pc, #472]	@ (8010c80 <DMA_SetConfig+0x234>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d054      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4a74      	ldr	r2, [pc, #464]	@ (8010c84 <DMA_SetConfig+0x238>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d04f      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	4a73      	ldr	r2, [pc, #460]	@ (8010c88 <DMA_SetConfig+0x23c>)
 8010abc:	4293      	cmp	r3, r2
 8010abe:	d04a      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4a71      	ldr	r2, [pc, #452]	@ (8010c8c <DMA_SetConfig+0x240>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d045      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	4a70      	ldr	r2, [pc, #448]	@ (8010c90 <DMA_SetConfig+0x244>)
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d040      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4a6e      	ldr	r2, [pc, #440]	@ (8010c94 <DMA_SetConfig+0x248>)
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d03b      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4a6d      	ldr	r2, [pc, #436]	@ (8010c98 <DMA_SetConfig+0x24c>)
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	d036      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	4a6b      	ldr	r2, [pc, #428]	@ (8010c9c <DMA_SetConfig+0x250>)
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d031      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	4a6a      	ldr	r2, [pc, #424]	@ (8010ca0 <DMA_SetConfig+0x254>)
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d02c      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	4a68      	ldr	r2, [pc, #416]	@ (8010ca4 <DMA_SetConfig+0x258>)
 8010b02:	4293      	cmp	r3, r2
 8010b04:	d027      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4a67      	ldr	r2, [pc, #412]	@ (8010ca8 <DMA_SetConfig+0x25c>)
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d022      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4a65      	ldr	r2, [pc, #404]	@ (8010cac <DMA_SetConfig+0x260>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d01d      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	4a64      	ldr	r2, [pc, #400]	@ (8010cb0 <DMA_SetConfig+0x264>)
 8010b20:	4293      	cmp	r3, r2
 8010b22:	d018      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4a62      	ldr	r2, [pc, #392]	@ (8010cb4 <DMA_SetConfig+0x268>)
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	d013      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	4a61      	ldr	r2, [pc, #388]	@ (8010cb8 <DMA_SetConfig+0x26c>)
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d00e      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4a5f      	ldr	r2, [pc, #380]	@ (8010cbc <DMA_SetConfig+0x270>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d009      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4a5e      	ldr	r2, [pc, #376]	@ (8010cc0 <DMA_SetConfig+0x274>)
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d004      	beq.n	8010b56 <DMA_SetConfig+0x10a>
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4a5c      	ldr	r2, [pc, #368]	@ (8010cc4 <DMA_SetConfig+0x278>)
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d101      	bne.n	8010b5a <DMA_SetConfig+0x10e>
 8010b56:	2301      	movs	r3, #1
 8010b58:	e000      	b.n	8010b5c <DMA_SetConfig+0x110>
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d00d      	beq.n	8010b7c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8010b68:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d004      	beq.n	8010b7c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b76:	68fa      	ldr	r2, [r7, #12]
 8010b78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8010b7a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4a39      	ldr	r2, [pc, #228]	@ (8010c68 <DMA_SetConfig+0x21c>)
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d04a      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4a38      	ldr	r2, [pc, #224]	@ (8010c6c <DMA_SetConfig+0x220>)
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d045      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	4a36      	ldr	r2, [pc, #216]	@ (8010c70 <DMA_SetConfig+0x224>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d040      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	4a35      	ldr	r2, [pc, #212]	@ (8010c74 <DMA_SetConfig+0x228>)
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	d03b      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a33      	ldr	r2, [pc, #204]	@ (8010c78 <DMA_SetConfig+0x22c>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d036      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	4a32      	ldr	r2, [pc, #200]	@ (8010c7c <DMA_SetConfig+0x230>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d031      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4a30      	ldr	r2, [pc, #192]	@ (8010c80 <DMA_SetConfig+0x234>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d02c      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8010c84 <DMA_SetConfig+0x238>)
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d027      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8010c88 <DMA_SetConfig+0x23c>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d022      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	4a2c      	ldr	r2, [pc, #176]	@ (8010c8c <DMA_SetConfig+0x240>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d01d      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4a2a      	ldr	r2, [pc, #168]	@ (8010c90 <DMA_SetConfig+0x244>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d018      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4a29      	ldr	r2, [pc, #164]	@ (8010c94 <DMA_SetConfig+0x248>)
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d013      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	4a27      	ldr	r2, [pc, #156]	@ (8010c98 <DMA_SetConfig+0x24c>)
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	d00e      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	4a26      	ldr	r2, [pc, #152]	@ (8010c9c <DMA_SetConfig+0x250>)
 8010c04:	4293      	cmp	r3, r2
 8010c06:	d009      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4a24      	ldr	r2, [pc, #144]	@ (8010ca0 <DMA_SetConfig+0x254>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d004      	beq.n	8010c1c <DMA_SetConfig+0x1d0>
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4a23      	ldr	r2, [pc, #140]	@ (8010ca4 <DMA_SetConfig+0x258>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d101      	bne.n	8010c20 <DMA_SetConfig+0x1d4>
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	e000      	b.n	8010c22 <DMA_SetConfig+0x1d6>
 8010c20:	2300      	movs	r3, #0
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d059      	beq.n	8010cda <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c2a:	f003 031f 	and.w	r3, r3, #31
 8010c2e:	223f      	movs	r2, #63	@ 0x3f
 8010c30:	409a      	lsls	r2, r3
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010c44:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	683a      	ldr	r2, [r7, #0]
 8010c4c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	689b      	ldr	r3, [r3, #8]
 8010c52:	2b40      	cmp	r3, #64	@ 0x40
 8010c54:	d138      	bne.n	8010cc8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	68ba      	ldr	r2, [r7, #8]
 8010c64:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8010c66:	e086      	b.n	8010d76 <DMA_SetConfig+0x32a>
 8010c68:	40020010 	.word	0x40020010
 8010c6c:	40020028 	.word	0x40020028
 8010c70:	40020040 	.word	0x40020040
 8010c74:	40020058 	.word	0x40020058
 8010c78:	40020070 	.word	0x40020070
 8010c7c:	40020088 	.word	0x40020088
 8010c80:	400200a0 	.word	0x400200a0
 8010c84:	400200b8 	.word	0x400200b8
 8010c88:	40020410 	.word	0x40020410
 8010c8c:	40020428 	.word	0x40020428
 8010c90:	40020440 	.word	0x40020440
 8010c94:	40020458 	.word	0x40020458
 8010c98:	40020470 	.word	0x40020470
 8010c9c:	40020488 	.word	0x40020488
 8010ca0:	400204a0 	.word	0x400204a0
 8010ca4:	400204b8 	.word	0x400204b8
 8010ca8:	58025408 	.word	0x58025408
 8010cac:	5802541c 	.word	0x5802541c
 8010cb0:	58025430 	.word	0x58025430
 8010cb4:	58025444 	.word	0x58025444
 8010cb8:	58025458 	.word	0x58025458
 8010cbc:	5802546c 	.word	0x5802546c
 8010cc0:	58025480 	.word	0x58025480
 8010cc4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	68ba      	ldr	r2, [r7, #8]
 8010cce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	60da      	str	r2, [r3, #12]
}
 8010cd8:	e04d      	b.n	8010d76 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	4a29      	ldr	r2, [pc, #164]	@ (8010d84 <DMA_SetConfig+0x338>)
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d022      	beq.n	8010d2a <DMA_SetConfig+0x2de>
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	4a27      	ldr	r2, [pc, #156]	@ (8010d88 <DMA_SetConfig+0x33c>)
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d01d      	beq.n	8010d2a <DMA_SetConfig+0x2de>
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	4a26      	ldr	r2, [pc, #152]	@ (8010d8c <DMA_SetConfig+0x340>)
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d018      	beq.n	8010d2a <DMA_SetConfig+0x2de>
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	4a24      	ldr	r2, [pc, #144]	@ (8010d90 <DMA_SetConfig+0x344>)
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d013      	beq.n	8010d2a <DMA_SetConfig+0x2de>
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4a23      	ldr	r2, [pc, #140]	@ (8010d94 <DMA_SetConfig+0x348>)
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	d00e      	beq.n	8010d2a <DMA_SetConfig+0x2de>
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4a21      	ldr	r2, [pc, #132]	@ (8010d98 <DMA_SetConfig+0x34c>)
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d009      	beq.n	8010d2a <DMA_SetConfig+0x2de>
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4a20      	ldr	r2, [pc, #128]	@ (8010d9c <DMA_SetConfig+0x350>)
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	d004      	beq.n	8010d2a <DMA_SetConfig+0x2de>
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	4a1e      	ldr	r2, [pc, #120]	@ (8010da0 <DMA_SetConfig+0x354>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d101      	bne.n	8010d2e <DMA_SetConfig+0x2e2>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	e000      	b.n	8010d30 <DMA_SetConfig+0x2e4>
 8010d2e:	2300      	movs	r3, #0
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d020      	beq.n	8010d76 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d38:	f003 031f 	and.w	r3, r3, #31
 8010d3c:	2201      	movs	r2, #1
 8010d3e:	409a      	lsls	r2, r3
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	683a      	ldr	r2, [r7, #0]
 8010d4a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	689b      	ldr	r3, [r3, #8]
 8010d50:	2b40      	cmp	r3, #64	@ 0x40
 8010d52:	d108      	bne.n	8010d66 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	687a      	ldr	r2, [r7, #4]
 8010d5a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	68ba      	ldr	r2, [r7, #8]
 8010d62:	60da      	str	r2, [r3, #12]
}
 8010d64:	e007      	b.n	8010d76 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	68ba      	ldr	r2, [r7, #8]
 8010d6c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	687a      	ldr	r2, [r7, #4]
 8010d74:	60da      	str	r2, [r3, #12]
}
 8010d76:	bf00      	nop
 8010d78:	371c      	adds	r7, #28
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	58025408 	.word	0x58025408
 8010d88:	5802541c 	.word	0x5802541c
 8010d8c:	58025430 	.word	0x58025430
 8010d90:	58025444 	.word	0x58025444
 8010d94:	58025458 	.word	0x58025458
 8010d98:	5802546c 	.word	0x5802546c
 8010d9c:	58025480 	.word	0x58025480
 8010da0:	58025494 	.word	0x58025494

08010da4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b085      	sub	sp, #20
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a42      	ldr	r2, [pc, #264]	@ (8010ebc <DMA_CalcBaseAndBitshift+0x118>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d04a      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	4a41      	ldr	r2, [pc, #260]	@ (8010ec0 <DMA_CalcBaseAndBitshift+0x11c>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d045      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4a3f      	ldr	r2, [pc, #252]	@ (8010ec4 <DMA_CalcBaseAndBitshift+0x120>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d040      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	4a3e      	ldr	r2, [pc, #248]	@ (8010ec8 <DMA_CalcBaseAndBitshift+0x124>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d03b      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8010ecc <DMA_CalcBaseAndBitshift+0x128>)
 8010dda:	4293      	cmp	r3, r2
 8010ddc:	d036      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	4a3b      	ldr	r2, [pc, #236]	@ (8010ed0 <DMA_CalcBaseAndBitshift+0x12c>)
 8010de4:	4293      	cmp	r3, r2
 8010de6:	d031      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	4a39      	ldr	r2, [pc, #228]	@ (8010ed4 <DMA_CalcBaseAndBitshift+0x130>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d02c      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	4a38      	ldr	r2, [pc, #224]	@ (8010ed8 <DMA_CalcBaseAndBitshift+0x134>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d027      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	4a36      	ldr	r2, [pc, #216]	@ (8010edc <DMA_CalcBaseAndBitshift+0x138>)
 8010e02:	4293      	cmp	r3, r2
 8010e04:	d022      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	4a35      	ldr	r2, [pc, #212]	@ (8010ee0 <DMA_CalcBaseAndBitshift+0x13c>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d01d      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	4a33      	ldr	r2, [pc, #204]	@ (8010ee4 <DMA_CalcBaseAndBitshift+0x140>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d018      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	4a32      	ldr	r2, [pc, #200]	@ (8010ee8 <DMA_CalcBaseAndBitshift+0x144>)
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d013      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	4a30      	ldr	r2, [pc, #192]	@ (8010eec <DMA_CalcBaseAndBitshift+0x148>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d00e      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	4a2f      	ldr	r2, [pc, #188]	@ (8010ef0 <DMA_CalcBaseAndBitshift+0x14c>)
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d009      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8010ef4 <DMA_CalcBaseAndBitshift+0x150>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d004      	beq.n	8010e4c <DMA_CalcBaseAndBitshift+0xa8>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4a2c      	ldr	r2, [pc, #176]	@ (8010ef8 <DMA_CalcBaseAndBitshift+0x154>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d101      	bne.n	8010e50 <DMA_CalcBaseAndBitshift+0xac>
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	e000      	b.n	8010e52 <DMA_CalcBaseAndBitshift+0xae>
 8010e50:	2300      	movs	r3, #0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d024      	beq.n	8010ea0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	3b10      	subs	r3, #16
 8010e5e:	4a27      	ldr	r2, [pc, #156]	@ (8010efc <DMA_CalcBaseAndBitshift+0x158>)
 8010e60:	fba2 2303 	umull	r2, r3, r2, r3
 8010e64:	091b      	lsrs	r3, r3, #4
 8010e66:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f003 0307 	and.w	r3, r3, #7
 8010e6e:	4a24      	ldr	r2, [pc, #144]	@ (8010f00 <DMA_CalcBaseAndBitshift+0x15c>)
 8010e70:	5cd3      	ldrb	r3, [r2, r3]
 8010e72:	461a      	mov	r2, r3
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2b03      	cmp	r3, #3
 8010e7c:	d908      	bls.n	8010e90 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	461a      	mov	r2, r3
 8010e84:	4b1f      	ldr	r3, [pc, #124]	@ (8010f04 <DMA_CalcBaseAndBitshift+0x160>)
 8010e86:	4013      	ands	r3, r2
 8010e88:	1d1a      	adds	r2, r3, #4
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8010e8e:	e00d      	b.n	8010eac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	461a      	mov	r2, r3
 8010e96:	4b1b      	ldr	r3, [pc, #108]	@ (8010f04 <DMA_CalcBaseAndBitshift+0x160>)
 8010e98:	4013      	ands	r3, r2
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8010e9e:	e005      	b.n	8010eac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3714      	adds	r7, #20
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eba:	4770      	bx	lr
 8010ebc:	40020010 	.word	0x40020010
 8010ec0:	40020028 	.word	0x40020028
 8010ec4:	40020040 	.word	0x40020040
 8010ec8:	40020058 	.word	0x40020058
 8010ecc:	40020070 	.word	0x40020070
 8010ed0:	40020088 	.word	0x40020088
 8010ed4:	400200a0 	.word	0x400200a0
 8010ed8:	400200b8 	.word	0x400200b8
 8010edc:	40020410 	.word	0x40020410
 8010ee0:	40020428 	.word	0x40020428
 8010ee4:	40020440 	.word	0x40020440
 8010ee8:	40020458 	.word	0x40020458
 8010eec:	40020470 	.word	0x40020470
 8010ef0:	40020488 	.word	0x40020488
 8010ef4:	400204a0 	.word	0x400204a0
 8010ef8:	400204b8 	.word	0x400204b8
 8010efc:	aaaaaaab 	.word	0xaaaaaaab
 8010f00:	0802be68 	.word	0x0802be68
 8010f04:	fffffc00 	.word	0xfffffc00

08010f08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b085      	sub	sp, #20
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010f10:	2300      	movs	r3, #0
 8010f12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	699b      	ldr	r3, [r3, #24]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d120      	bne.n	8010f5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f20:	2b03      	cmp	r3, #3
 8010f22:	d858      	bhi.n	8010fd6 <DMA_CheckFifoParam+0xce>
 8010f24:	a201      	add	r2, pc, #4	@ (adr r2, 8010f2c <DMA_CheckFifoParam+0x24>)
 8010f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f2a:	bf00      	nop
 8010f2c:	08010f3d 	.word	0x08010f3d
 8010f30:	08010f4f 	.word	0x08010f4f
 8010f34:	08010f3d 	.word	0x08010f3d
 8010f38:	08010fd7 	.word	0x08010fd7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d048      	beq.n	8010fda <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8010f48:	2301      	movs	r3, #1
 8010f4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8010f4c:	e045      	b.n	8010fda <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8010f56:	d142      	bne.n	8010fde <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8010f58:	2301      	movs	r3, #1
 8010f5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8010f5c:	e03f      	b.n	8010fde <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	699b      	ldr	r3, [r3, #24]
 8010f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010f66:	d123      	bne.n	8010fb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f6c:	2b03      	cmp	r3, #3
 8010f6e:	d838      	bhi.n	8010fe2 <DMA_CheckFifoParam+0xda>
 8010f70:	a201      	add	r2, pc, #4	@ (adr r2, 8010f78 <DMA_CheckFifoParam+0x70>)
 8010f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f76:	bf00      	nop
 8010f78:	08010f89 	.word	0x08010f89
 8010f7c:	08010f8f 	.word	0x08010f8f
 8010f80:	08010f89 	.word	0x08010f89
 8010f84:	08010fa1 	.word	0x08010fa1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	73fb      	strb	r3, [r7, #15]
        break;
 8010f8c:	e030      	b.n	8010ff0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d025      	beq.n	8010fe6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8010f9e:	e022      	b.n	8010fe6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fa4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8010fa8:	d11f      	bne.n	8010fea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8010faa:	2301      	movs	r3, #1
 8010fac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8010fae:	e01c      	b.n	8010fea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fb4:	2b02      	cmp	r3, #2
 8010fb6:	d902      	bls.n	8010fbe <DMA_CheckFifoParam+0xb6>
 8010fb8:	2b03      	cmp	r3, #3
 8010fba:	d003      	beq.n	8010fc4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8010fbc:	e018      	b.n	8010ff0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	73fb      	strb	r3, [r7, #15]
        break;
 8010fc2:	e015      	b.n	8010ff0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d00e      	beq.n	8010fee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8010fd4:	e00b      	b.n	8010fee <DMA_CheckFifoParam+0xe6>
        break;
 8010fd6:	bf00      	nop
 8010fd8:	e00a      	b.n	8010ff0 <DMA_CheckFifoParam+0xe8>
        break;
 8010fda:	bf00      	nop
 8010fdc:	e008      	b.n	8010ff0 <DMA_CheckFifoParam+0xe8>
        break;
 8010fde:	bf00      	nop
 8010fe0:	e006      	b.n	8010ff0 <DMA_CheckFifoParam+0xe8>
        break;
 8010fe2:	bf00      	nop
 8010fe4:	e004      	b.n	8010ff0 <DMA_CheckFifoParam+0xe8>
        break;
 8010fe6:	bf00      	nop
 8010fe8:	e002      	b.n	8010ff0 <DMA_CheckFifoParam+0xe8>
        break;
 8010fea:	bf00      	nop
 8010fec:	e000      	b.n	8010ff0 <DMA_CheckFifoParam+0xe8>
    break;
 8010fee:	bf00      	nop
    }
  }

  return status;
 8010ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3714      	adds	r7, #20
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr
 8010ffe:	bf00      	nop

08011000 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8011000:	b480      	push	{r7}
 8011002:	b085      	sub	sp, #20
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	4a38      	ldr	r2, [pc, #224]	@ (80110f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8011014:	4293      	cmp	r3, r2
 8011016:	d022      	beq.n	801105e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	4a36      	ldr	r2, [pc, #216]	@ (80110f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d01d      	beq.n	801105e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	4a35      	ldr	r2, [pc, #212]	@ (80110fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8011028:	4293      	cmp	r3, r2
 801102a:	d018      	beq.n	801105e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	4a33      	ldr	r2, [pc, #204]	@ (8011100 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8011032:	4293      	cmp	r3, r2
 8011034:	d013      	beq.n	801105e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	4a32      	ldr	r2, [pc, #200]	@ (8011104 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801103c:	4293      	cmp	r3, r2
 801103e:	d00e      	beq.n	801105e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	4a30      	ldr	r2, [pc, #192]	@ (8011108 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8011046:	4293      	cmp	r3, r2
 8011048:	d009      	beq.n	801105e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4a2f      	ldr	r2, [pc, #188]	@ (801110c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8011050:	4293      	cmp	r3, r2
 8011052:	d004      	beq.n	801105e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	4a2d      	ldr	r2, [pc, #180]	@ (8011110 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801105a:	4293      	cmp	r3, r2
 801105c:	d101      	bne.n	8011062 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801105e:	2301      	movs	r3, #1
 8011060:	e000      	b.n	8011064 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8011062:	2300      	movs	r3, #0
 8011064:	2b00      	cmp	r3, #0
 8011066:	d01a      	beq.n	801109e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	b2db      	uxtb	r3, r3
 801106e:	3b08      	subs	r3, #8
 8011070:	4a28      	ldr	r2, [pc, #160]	@ (8011114 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8011072:	fba2 2303 	umull	r2, r3, r2, r3
 8011076:	091b      	lsrs	r3, r3, #4
 8011078:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801107a:	68fa      	ldr	r2, [r7, #12]
 801107c:	4b26      	ldr	r3, [pc, #152]	@ (8011118 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801107e:	4413      	add	r3, r2
 8011080:	009b      	lsls	r3, r3, #2
 8011082:	461a      	mov	r2, r3
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	4a24      	ldr	r2, [pc, #144]	@ (801111c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801108c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	f003 031f 	and.w	r3, r3, #31
 8011094:	2201      	movs	r2, #1
 8011096:	409a      	lsls	r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801109c:	e024      	b.n	80110e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	3b10      	subs	r3, #16
 80110a6:	4a1e      	ldr	r2, [pc, #120]	@ (8011120 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80110a8:	fba2 2303 	umull	r2, r3, r2, r3
 80110ac:	091b      	lsrs	r3, r3, #4
 80110ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	4a1c      	ldr	r2, [pc, #112]	@ (8011124 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d806      	bhi.n	80110c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	4a1b      	ldr	r2, [pc, #108]	@ (8011128 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d902      	bls.n	80110c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	3308      	adds	r3, #8
 80110c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80110c6:	68fa      	ldr	r2, [r7, #12]
 80110c8:	4b18      	ldr	r3, [pc, #96]	@ (801112c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80110ca:	4413      	add	r3, r2
 80110cc:	009b      	lsls	r3, r3, #2
 80110ce:	461a      	mov	r2, r3
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	4a16      	ldr	r2, [pc, #88]	@ (8011130 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80110d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f003 031f 	and.w	r3, r3, #31
 80110e0:	2201      	movs	r2, #1
 80110e2:	409a      	lsls	r2, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80110e8:	bf00      	nop
 80110ea:	3714      	adds	r7, #20
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr
 80110f4:	58025408 	.word	0x58025408
 80110f8:	5802541c 	.word	0x5802541c
 80110fc:	58025430 	.word	0x58025430
 8011100:	58025444 	.word	0x58025444
 8011104:	58025458 	.word	0x58025458
 8011108:	5802546c 	.word	0x5802546c
 801110c:	58025480 	.word	0x58025480
 8011110:	58025494 	.word	0x58025494
 8011114:	cccccccd 	.word	0xcccccccd
 8011118:	16009600 	.word	0x16009600
 801111c:	58025880 	.word	0x58025880
 8011120:	aaaaaaab 	.word	0xaaaaaaab
 8011124:	400204b8 	.word	0x400204b8
 8011128:	4002040f 	.word	0x4002040f
 801112c:	10008200 	.word	0x10008200
 8011130:	40020880 	.word	0x40020880

08011134 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8011134:	b480      	push	{r7}
 8011136:	b085      	sub	sp, #20
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	b2db      	uxtb	r3, r3
 8011142:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d04a      	beq.n	80111e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	2b08      	cmp	r3, #8
 801114e:	d847      	bhi.n	80111e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	4a25      	ldr	r2, [pc, #148]	@ (80111ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8011156:	4293      	cmp	r3, r2
 8011158:	d022      	beq.n	80111a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4a24      	ldr	r2, [pc, #144]	@ (80111f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8011160:	4293      	cmp	r3, r2
 8011162:	d01d      	beq.n	80111a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4a22      	ldr	r2, [pc, #136]	@ (80111f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801116a:	4293      	cmp	r3, r2
 801116c:	d018      	beq.n	80111a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a21      	ldr	r2, [pc, #132]	@ (80111f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d013      	beq.n	80111a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4a1f      	ldr	r2, [pc, #124]	@ (80111fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d00e      	beq.n	80111a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	4a1e      	ldr	r2, [pc, #120]	@ (8011200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d009      	beq.n	80111a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4a1c      	ldr	r2, [pc, #112]	@ (8011204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d004      	beq.n	80111a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a1b      	ldr	r2, [pc, #108]	@ (8011208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801119c:	4293      	cmp	r3, r2
 801119e:	d101      	bne.n	80111a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80111a0:	2301      	movs	r3, #1
 80111a2:	e000      	b.n	80111a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80111a4:	2300      	movs	r3, #0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d00a      	beq.n	80111c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80111aa:	68fa      	ldr	r2, [r7, #12]
 80111ac:	4b17      	ldr	r3, [pc, #92]	@ (801120c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80111ae:	4413      	add	r3, r2
 80111b0:	009b      	lsls	r3, r3, #2
 80111b2:	461a      	mov	r2, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	4a15      	ldr	r2, [pc, #84]	@ (8011210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80111bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80111be:	e009      	b.n	80111d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80111c0:	68fa      	ldr	r2, [r7, #12]
 80111c2:	4b14      	ldr	r3, [pc, #80]	@ (8011214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80111c4:	4413      	add	r3, r2
 80111c6:	009b      	lsls	r3, r3, #2
 80111c8:	461a      	mov	r2, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	4a11      	ldr	r2, [pc, #68]	@ (8011218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80111d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	3b01      	subs	r3, #1
 80111d8:	2201      	movs	r2, #1
 80111da:	409a      	lsls	r2, r3
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80111e0:	bf00      	nop
 80111e2:	3714      	adds	r7, #20
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr
 80111ec:	58025408 	.word	0x58025408
 80111f0:	5802541c 	.word	0x5802541c
 80111f4:	58025430 	.word	0x58025430
 80111f8:	58025444 	.word	0x58025444
 80111fc:	58025458 	.word	0x58025458
 8011200:	5802546c 	.word	0x5802546c
 8011204:	58025480 	.word	0x58025480
 8011208:	58025494 	.word	0x58025494
 801120c:	1600963f 	.word	0x1600963f
 8011210:	58025940 	.word	0x58025940
 8011214:	1000823f 	.word	0x1000823f
 8011218:	40020940 	.word	0x40020940

0801121c <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d101      	bne.n	801122e <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 801122a:	2301      	movs	r3, #1
 801122c:	e089      	b.n	8011342 <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011234:	b2db      	uxtb	r3, r3
 8011236:	2b00      	cmp	r3, #0
 8011238:	d102      	bne.n	8011240 <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f7f9 fb76 	bl	800a92c <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2202      	movs	r2, #2
 8011244:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	691b      	ldr	r3, [r3, #16]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d101      	bne.n	8011256 <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 8011252:	2301      	movs	r3, #1
 8011254:	e075      	b.n	8011342 <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	689b      	ldr	r3, [r3, #8]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d101      	bne.n	8011264 <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 8011260:	2301      	movs	r3, #1
 8011262:	e06e      	b.n	8011342 <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d108      	bne.n	801127e <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	681a      	ldr	r2, [r3, #0]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 801127a:	601a      	str	r2, [r3, #0]
 801127c:	e00e      	b.n	801129c <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	689b      	ldr	r3, [r3, #8]
 8011282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011286:	d001      	beq.n	801128c <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 8011288:	2301      	movs	r3, #1
 801128a:	e05a      	b.n	8011342 <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 801129a:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	689b      	ldr	r3, [r3, #8]
 80112a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80112a4:	d108      	bne.n	80112b8 <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80112b4:	601a      	str	r2, [r3, #0]
 80112b6:	e007      	b.n	80112c8 <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80112c6:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	695b      	ldr	r3, [r3, #20]
 80112d6:	061a      	lsls	r2, r3, #24
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	430a      	orrs	r2, r1
 80112de:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	691a      	ldr	r2, [r3, #16]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	430a      	orrs	r2, r1
 80112f4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	68da      	ldr	r2, [r3, #12]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	430a      	orrs	r2, r1
 801130a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	695b      	ldr	r3, [r3, #20]
 8011312:	b299      	uxth	r1, r3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	699b      	ldr	r3, [r3, #24]
 8011318:	041a      	lsls	r2, r3, #16
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	430a      	orrs	r2, r1
 8011320:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	695a      	ldr	r2, [r3, #20]
 8011328:	4b08      	ldr	r3, [pc, #32]	@ (801134c <HAL_DTS_Init+0x130>)
 801132a:	4013      	ands	r3, r2
 801132c:	687a      	ldr	r2, [r7, #4]
 801132e:	69d1      	ldr	r1, [r2, #28]
 8011330:	687a      	ldr	r2, [r7, #4]
 8011332:	6812      	ldr	r2, [r2, #0]
 8011334:	430b      	orrs	r3, r1
 8011336:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2201      	movs	r2, #1
 801133c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8011340:	2300      	movs	r3, #0
}
 8011342:	4618      	mov	r0, r3
 8011344:	3708      	adds	r7, #8
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
 801134a:	bf00      	nop
 801134c:	ffff0000 	.word	0xffff0000

08011350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8011350:	b480      	push	{r7}
 8011352:	b089      	sub	sp, #36	@ 0x24
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801135a:	2300      	movs	r3, #0
 801135c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801135e:	4b86      	ldr	r3, [pc, #536]	@ (8011578 <HAL_GPIO_Init+0x228>)
 8011360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8011362:	e18c      	b.n	801167e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	681a      	ldr	r2, [r3, #0]
 8011368:	2101      	movs	r1, #1
 801136a:	69fb      	ldr	r3, [r7, #28]
 801136c:	fa01 f303 	lsl.w	r3, r1, r3
 8011370:	4013      	ands	r3, r2
 8011372:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	2b00      	cmp	r3, #0
 8011378:	f000 817e 	beq.w	8011678 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	f003 0303 	and.w	r3, r3, #3
 8011384:	2b01      	cmp	r3, #1
 8011386:	d005      	beq.n	8011394 <HAL_GPIO_Init+0x44>
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	f003 0303 	and.w	r3, r3, #3
 8011390:	2b02      	cmp	r3, #2
 8011392:	d130      	bne.n	80113f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	689b      	ldr	r3, [r3, #8]
 8011398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801139a:	69fb      	ldr	r3, [r7, #28]
 801139c:	005b      	lsls	r3, r3, #1
 801139e:	2203      	movs	r2, #3
 80113a0:	fa02 f303 	lsl.w	r3, r2, r3
 80113a4:	43db      	mvns	r3, r3
 80113a6:	69ba      	ldr	r2, [r7, #24]
 80113a8:	4013      	ands	r3, r2
 80113aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	68da      	ldr	r2, [r3, #12]
 80113b0:	69fb      	ldr	r3, [r7, #28]
 80113b2:	005b      	lsls	r3, r3, #1
 80113b4:	fa02 f303 	lsl.w	r3, r2, r3
 80113b8:	69ba      	ldr	r2, [r7, #24]
 80113ba:	4313      	orrs	r3, r2
 80113bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	69ba      	ldr	r2, [r7, #24]
 80113c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	685b      	ldr	r3, [r3, #4]
 80113c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80113ca:	2201      	movs	r2, #1
 80113cc:	69fb      	ldr	r3, [r7, #28]
 80113ce:	fa02 f303 	lsl.w	r3, r2, r3
 80113d2:	43db      	mvns	r3, r3
 80113d4:	69ba      	ldr	r2, [r7, #24]
 80113d6:	4013      	ands	r3, r2
 80113d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	091b      	lsrs	r3, r3, #4
 80113e0:	f003 0201 	and.w	r2, r3, #1
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	fa02 f303 	lsl.w	r3, r2, r3
 80113ea:	69ba      	ldr	r2, [r7, #24]
 80113ec:	4313      	orrs	r3, r2
 80113ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	69ba      	ldr	r2, [r7, #24]
 80113f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	f003 0303 	and.w	r3, r3, #3
 80113fe:	2b03      	cmp	r3, #3
 8011400:	d017      	beq.n	8011432 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	005b      	lsls	r3, r3, #1
 801140c:	2203      	movs	r2, #3
 801140e:	fa02 f303 	lsl.w	r3, r2, r3
 8011412:	43db      	mvns	r3, r3
 8011414:	69ba      	ldr	r2, [r7, #24]
 8011416:	4013      	ands	r3, r2
 8011418:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	689a      	ldr	r2, [r3, #8]
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	005b      	lsls	r3, r3, #1
 8011422:	fa02 f303 	lsl.w	r3, r2, r3
 8011426:	69ba      	ldr	r2, [r7, #24]
 8011428:	4313      	orrs	r3, r2
 801142a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	69ba      	ldr	r2, [r7, #24]
 8011430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	f003 0303 	and.w	r3, r3, #3
 801143a:	2b02      	cmp	r3, #2
 801143c:	d123      	bne.n	8011486 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	08da      	lsrs	r2, r3, #3
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	3208      	adds	r2, #8
 8011446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	f003 0307 	and.w	r3, r3, #7
 8011452:	009b      	lsls	r3, r3, #2
 8011454:	220f      	movs	r2, #15
 8011456:	fa02 f303 	lsl.w	r3, r2, r3
 801145a:	43db      	mvns	r3, r3
 801145c:	69ba      	ldr	r2, [r7, #24]
 801145e:	4013      	ands	r3, r2
 8011460:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	691a      	ldr	r2, [r3, #16]
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	f003 0307 	and.w	r3, r3, #7
 801146c:	009b      	lsls	r3, r3, #2
 801146e:	fa02 f303 	lsl.w	r3, r2, r3
 8011472:	69ba      	ldr	r2, [r7, #24]
 8011474:	4313      	orrs	r3, r2
 8011476:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	08da      	lsrs	r2, r3, #3
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	3208      	adds	r2, #8
 8011480:	69b9      	ldr	r1, [r7, #24]
 8011482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801148c:	69fb      	ldr	r3, [r7, #28]
 801148e:	005b      	lsls	r3, r3, #1
 8011490:	2203      	movs	r2, #3
 8011492:	fa02 f303 	lsl.w	r3, r2, r3
 8011496:	43db      	mvns	r3, r3
 8011498:	69ba      	ldr	r2, [r7, #24]
 801149a:	4013      	ands	r3, r2
 801149c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	f003 0203 	and.w	r2, r3, #3
 80114a6:	69fb      	ldr	r3, [r7, #28]
 80114a8:	005b      	lsls	r3, r3, #1
 80114aa:	fa02 f303 	lsl.w	r3, r2, r3
 80114ae:	69ba      	ldr	r2, [r7, #24]
 80114b0:	4313      	orrs	r3, r2
 80114b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	69ba      	ldr	r2, [r7, #24]
 80114b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	f000 80d8 	beq.w	8011678 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80114c8:	4b2c      	ldr	r3, [pc, #176]	@ (801157c <HAL_GPIO_Init+0x22c>)
 80114ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80114ce:	4a2b      	ldr	r2, [pc, #172]	@ (801157c <HAL_GPIO_Init+0x22c>)
 80114d0:	f043 0302 	orr.w	r3, r3, #2
 80114d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80114d8:	4b28      	ldr	r3, [pc, #160]	@ (801157c <HAL_GPIO_Init+0x22c>)
 80114da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80114de:	f003 0302 	and.w	r3, r3, #2
 80114e2:	60fb      	str	r3, [r7, #12]
 80114e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80114e6:	4a26      	ldr	r2, [pc, #152]	@ (8011580 <HAL_GPIO_Init+0x230>)
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	089b      	lsrs	r3, r3, #2
 80114ec:	3302      	adds	r3, #2
 80114ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	f003 0303 	and.w	r3, r3, #3
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	220f      	movs	r2, #15
 80114fe:	fa02 f303 	lsl.w	r3, r2, r3
 8011502:	43db      	mvns	r3, r3
 8011504:	69ba      	ldr	r2, [r7, #24]
 8011506:	4013      	ands	r3, r2
 8011508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4a1d      	ldr	r2, [pc, #116]	@ (8011584 <HAL_GPIO_Init+0x234>)
 801150e:	4293      	cmp	r3, r2
 8011510:	d04a      	beq.n	80115a8 <HAL_GPIO_Init+0x258>
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	4a1c      	ldr	r2, [pc, #112]	@ (8011588 <HAL_GPIO_Init+0x238>)
 8011516:	4293      	cmp	r3, r2
 8011518:	d02b      	beq.n	8011572 <HAL_GPIO_Init+0x222>
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	4a1b      	ldr	r2, [pc, #108]	@ (801158c <HAL_GPIO_Init+0x23c>)
 801151e:	4293      	cmp	r3, r2
 8011520:	d025      	beq.n	801156e <HAL_GPIO_Init+0x21e>
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	4a1a      	ldr	r2, [pc, #104]	@ (8011590 <HAL_GPIO_Init+0x240>)
 8011526:	4293      	cmp	r3, r2
 8011528:	d01f      	beq.n	801156a <HAL_GPIO_Init+0x21a>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4a19      	ldr	r2, [pc, #100]	@ (8011594 <HAL_GPIO_Init+0x244>)
 801152e:	4293      	cmp	r3, r2
 8011530:	d019      	beq.n	8011566 <HAL_GPIO_Init+0x216>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4a18      	ldr	r2, [pc, #96]	@ (8011598 <HAL_GPIO_Init+0x248>)
 8011536:	4293      	cmp	r3, r2
 8011538:	d013      	beq.n	8011562 <HAL_GPIO_Init+0x212>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	4a17      	ldr	r2, [pc, #92]	@ (801159c <HAL_GPIO_Init+0x24c>)
 801153e:	4293      	cmp	r3, r2
 8011540:	d00d      	beq.n	801155e <HAL_GPIO_Init+0x20e>
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	4a16      	ldr	r2, [pc, #88]	@ (80115a0 <HAL_GPIO_Init+0x250>)
 8011546:	4293      	cmp	r3, r2
 8011548:	d007      	beq.n	801155a <HAL_GPIO_Init+0x20a>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	4a15      	ldr	r2, [pc, #84]	@ (80115a4 <HAL_GPIO_Init+0x254>)
 801154e:	4293      	cmp	r3, r2
 8011550:	d101      	bne.n	8011556 <HAL_GPIO_Init+0x206>
 8011552:	2309      	movs	r3, #9
 8011554:	e029      	b.n	80115aa <HAL_GPIO_Init+0x25a>
 8011556:	230a      	movs	r3, #10
 8011558:	e027      	b.n	80115aa <HAL_GPIO_Init+0x25a>
 801155a:	2307      	movs	r3, #7
 801155c:	e025      	b.n	80115aa <HAL_GPIO_Init+0x25a>
 801155e:	2306      	movs	r3, #6
 8011560:	e023      	b.n	80115aa <HAL_GPIO_Init+0x25a>
 8011562:	2305      	movs	r3, #5
 8011564:	e021      	b.n	80115aa <HAL_GPIO_Init+0x25a>
 8011566:	2304      	movs	r3, #4
 8011568:	e01f      	b.n	80115aa <HAL_GPIO_Init+0x25a>
 801156a:	2303      	movs	r3, #3
 801156c:	e01d      	b.n	80115aa <HAL_GPIO_Init+0x25a>
 801156e:	2302      	movs	r3, #2
 8011570:	e01b      	b.n	80115aa <HAL_GPIO_Init+0x25a>
 8011572:	2301      	movs	r3, #1
 8011574:	e019      	b.n	80115aa <HAL_GPIO_Init+0x25a>
 8011576:	bf00      	nop
 8011578:	58000080 	.word	0x58000080
 801157c:	58024400 	.word	0x58024400
 8011580:	58000400 	.word	0x58000400
 8011584:	58020000 	.word	0x58020000
 8011588:	58020400 	.word	0x58020400
 801158c:	58020800 	.word	0x58020800
 8011590:	58020c00 	.word	0x58020c00
 8011594:	58021000 	.word	0x58021000
 8011598:	58021400 	.word	0x58021400
 801159c:	58021800 	.word	0x58021800
 80115a0:	58021c00 	.word	0x58021c00
 80115a4:	58022400 	.word	0x58022400
 80115a8:	2300      	movs	r3, #0
 80115aa:	69fa      	ldr	r2, [r7, #28]
 80115ac:	f002 0203 	and.w	r2, r2, #3
 80115b0:	0092      	lsls	r2, r2, #2
 80115b2:	4093      	lsls	r3, r2
 80115b4:	69ba      	ldr	r2, [r7, #24]
 80115b6:	4313      	orrs	r3, r2
 80115b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80115ba:	4938      	ldr	r1, [pc, #224]	@ (801169c <HAL_GPIO_Init+0x34c>)
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	089b      	lsrs	r3, r3, #2
 80115c0:	3302      	adds	r3, #2
 80115c2:	69ba      	ldr	r2, [r7, #24]
 80115c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80115c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	43db      	mvns	r3, r3
 80115d4:	69ba      	ldr	r2, [r7, #24]
 80115d6:	4013      	ands	r3, r2
 80115d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	685b      	ldr	r3, [r3, #4]
 80115de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d003      	beq.n	80115ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80115e6:	69ba      	ldr	r2, [r7, #24]
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	4313      	orrs	r3, r2
 80115ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80115ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80115f2:	69bb      	ldr	r3, [r7, #24]
 80115f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80115f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	43db      	mvns	r3, r3
 8011602:	69ba      	ldr	r2, [r7, #24]
 8011604:	4013      	ands	r3, r2
 8011606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011610:	2b00      	cmp	r3, #0
 8011612:	d003      	beq.n	801161c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8011614:	69ba      	ldr	r2, [r7, #24]
 8011616:	693b      	ldr	r3, [r7, #16]
 8011618:	4313      	orrs	r3, r2
 801161a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801161c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8011620:	69bb      	ldr	r3, [r7, #24]
 8011622:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	43db      	mvns	r3, r3
 801162e:	69ba      	ldr	r2, [r7, #24]
 8011630:	4013      	ands	r3, r2
 8011632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801163c:	2b00      	cmp	r3, #0
 801163e:	d003      	beq.n	8011648 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8011640:	69ba      	ldr	r2, [r7, #24]
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	4313      	orrs	r3, r2
 8011646:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	69ba      	ldr	r2, [r7, #24]
 801164c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	43db      	mvns	r3, r3
 8011658:	69ba      	ldr	r2, [r7, #24]
 801165a:	4013      	ands	r3, r2
 801165c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011666:	2b00      	cmp	r3, #0
 8011668:	d003      	beq.n	8011672 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 801166a:	69ba      	ldr	r2, [r7, #24]
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	4313      	orrs	r3, r2
 8011670:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	69ba      	ldr	r2, [r7, #24]
 8011676:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8011678:	69fb      	ldr	r3, [r7, #28]
 801167a:	3301      	adds	r3, #1
 801167c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	fa22 f303 	lsr.w	r3, r2, r3
 8011688:	2b00      	cmp	r3, #0
 801168a:	f47f ae6b 	bne.w	8011364 <HAL_GPIO_Init+0x14>
  }
}
 801168e:	bf00      	nop
 8011690:	bf00      	nop
 8011692:	3724      	adds	r7, #36	@ 0x24
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr
 801169c:	58000400 	.word	0x58000400

080116a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80116a0:	b480      	push	{r7}
 80116a2:	b083      	sub	sp, #12
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
 80116a8:	460b      	mov	r3, r1
 80116aa:	807b      	strh	r3, [r7, #2]
 80116ac:	4613      	mov	r3, r2
 80116ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80116b0:	787b      	ldrb	r3, [r7, #1]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d003      	beq.n	80116be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80116b6:	887a      	ldrh	r2, [r7, #2]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80116bc:	e003      	b.n	80116c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80116be:	887b      	ldrh	r3, [r7, #2]
 80116c0:	041a      	lsls	r2, r3, #16
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	619a      	str	r2, [r3, #24]
}
 80116c6:	bf00      	nop
 80116c8:	370c      	adds	r7, #12
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr

080116d2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80116d2:	b580      	push	{r7, lr}
 80116d4:	b082      	sub	sp, #8
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	4603      	mov	r3, r0
 80116da:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80116dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80116e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80116e4:	88fb      	ldrh	r3, [r7, #6]
 80116e6:	4013      	ands	r3, r2
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d008      	beq.n	80116fe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80116ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80116f0:	88fb      	ldrh	r3, [r7, #6]
 80116f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80116f6:	88fb      	ldrh	r3, [r7, #6]
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7f6 fa35 	bl	8007b68 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80116fe:	bf00      	nop
 8011700:	3708      	adds	r7, #8
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
	...

08011708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d101      	bne.n	801171a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011716:	2301      	movs	r3, #1
 8011718:	e08b      	b.n	8011832 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011720:	b2db      	uxtb	r3, r3
 8011722:	2b00      	cmp	r3, #0
 8011724:	d106      	bne.n	8011734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2200      	movs	r2, #0
 801172a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f7f9 f91e 	bl	800a970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2224      	movs	r2, #36	@ 0x24
 8011738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f022 0201 	bic.w	r2, r2, #1
 801174a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	685a      	ldr	r2, [r3, #4]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8011758:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	689a      	ldr	r2, [r3, #8]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011768:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	2b01      	cmp	r3, #1
 8011770:	d107      	bne.n	8011782 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	689a      	ldr	r2, [r3, #8]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801177e:	609a      	str	r2, [r3, #8]
 8011780:	e006      	b.n	8011790 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	689a      	ldr	r2, [r3, #8]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801178e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	68db      	ldr	r3, [r3, #12]
 8011794:	2b02      	cmp	r3, #2
 8011796:	d108      	bne.n	80117aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	685a      	ldr	r2, [r3, #4]
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80117a6:	605a      	str	r2, [r3, #4]
 80117a8:	e007      	b.n	80117ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	685a      	ldr	r2, [r3, #4]
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80117b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	6859      	ldr	r1, [r3, #4]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681a      	ldr	r2, [r3, #0]
 80117c4:	4b1d      	ldr	r3, [pc, #116]	@ (801183c <HAL_I2C_Init+0x134>)
 80117c6:	430b      	orrs	r3, r1
 80117c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	68da      	ldr	r2, [r3, #12]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80117d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	691a      	ldr	r2, [r3, #16]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	695b      	ldr	r3, [r3, #20]
 80117e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	699b      	ldr	r3, [r3, #24]
 80117ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	430a      	orrs	r2, r1
 80117f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	69d9      	ldr	r1, [r3, #28]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6a1a      	ldr	r2, [r3, #32]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	430a      	orrs	r2, r1
 8011802:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	f042 0201 	orr.w	r2, r2, #1
 8011812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2200      	movs	r2, #0
 8011818:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2220      	movs	r2, #32
 801181e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2200      	movs	r2, #0
 8011826:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2200      	movs	r2, #0
 801182c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8011830:	2300      	movs	r3, #0
}
 8011832:	4618      	mov	r0, r3
 8011834:	3708      	adds	r7, #8
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	02008000 	.word	0x02008000

08011840 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011850:	b2db      	uxtb	r3, r3
 8011852:	2b20      	cmp	r3, #32
 8011854:	d138      	bne.n	80118c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801185c:	2b01      	cmp	r3, #1
 801185e:	d101      	bne.n	8011864 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011860:	2302      	movs	r3, #2
 8011862:	e032      	b.n	80118ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2201      	movs	r2, #1
 8011868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2224      	movs	r2, #36	@ 0x24
 8011870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	681a      	ldr	r2, [r3, #0]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f022 0201 	bic.w	r2, r2, #1
 8011882:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011892:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	6819      	ldr	r1, [r3, #0]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	683a      	ldr	r2, [r7, #0]
 80118a0:	430a      	orrs	r2, r1
 80118a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	f042 0201 	orr.w	r2, r2, #1
 80118b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2220      	movs	r2, #32
 80118b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2200      	movs	r2, #0
 80118c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80118c4:	2300      	movs	r3, #0
 80118c6:	e000      	b.n	80118ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80118c8:	2302      	movs	r3, #2
  }
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	370c      	adds	r7, #12
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr

080118d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80118d6:	b480      	push	{r7}
 80118d8:	b085      	sub	sp, #20
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
 80118de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	2b20      	cmp	r3, #32
 80118ea:	d139      	bne.n	8011960 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80118f2:	2b01      	cmp	r3, #1
 80118f4:	d101      	bne.n	80118fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80118f6:	2302      	movs	r3, #2
 80118f8:	e033      	b.n	8011962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2201      	movs	r2, #1
 80118fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2224      	movs	r2, #36	@ 0x24
 8011906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f022 0201 	bic.w	r2, r2, #1
 8011918:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8011928:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	021b      	lsls	r3, r3, #8
 801192e:	68fa      	ldr	r2, [r7, #12]
 8011930:	4313      	orrs	r3, r2
 8011932:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	68fa      	ldr	r2, [r7, #12]
 801193a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	f042 0201 	orr.w	r2, r2, #1
 801194a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2220      	movs	r2, #32
 8011950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2200      	movs	r2, #0
 8011958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801195c:	2300      	movs	r3, #0
 801195e:	e000      	b.n	8011962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011960:	2302      	movs	r3, #2
  }
}
 8011962:	4618      	mov	r0, r3
 8011964:	3714      	adds	r7, #20
 8011966:	46bd      	mov	sp, r7
 8011968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196c:	4770      	bx	lr
	...

08011970 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8011970:	b480      	push	{r7}
 8011972:	b085      	sub	sp, #20
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011978:	4b0d      	ldr	r3, [pc, #52]	@ (80119b0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801197a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801197e:	4a0c      	ldr	r2, [pc, #48]	@ (80119b0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8011980:	f043 0302 	orr.w	r3, r3, #2
 8011984:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011988:	4b09      	ldr	r3, [pc, #36]	@ (80119b0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801198a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801198e:	f003 0302 	and.w	r3, r3, #2
 8011992:	60fb      	str	r3, [r7, #12]
 8011994:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8011996:	4b07      	ldr	r3, [pc, #28]	@ (80119b4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8011998:	685a      	ldr	r2, [r3, #4]
 801199a:	4906      	ldr	r1, [pc, #24]	@ (80119b4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	4313      	orrs	r3, r2
 80119a0:	604b      	str	r3, [r1, #4]
}
 80119a2:	bf00      	nop
 80119a4:	3714      	adds	r7, #20
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr
 80119ae:	bf00      	nop
 80119b0:	58024400 	.word	0x58024400
 80119b4:	58000400 	.word	0x58000400

080119b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b086      	sub	sp, #24
 80119bc:	af02      	add	r7, sp, #8
 80119be:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d101      	bne.n	80119ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80119c6:	2301      	movs	r3, #1
 80119c8:	e0fe      	b.n	8011bc8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80119d0:	b2db      	uxtb	r3, r3
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d106      	bne.n	80119e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2200      	movs	r2, #0
 80119da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f011 f918 	bl	8022c14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2203      	movs	r2, #3
 80119e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	4618      	mov	r0, r3
 80119f2:	f009 fc92 	bl	801b31a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6818      	ldr	r0, [r3, #0]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	7c1a      	ldrb	r2, [r3, #16]
 80119fe:	f88d 2000 	strb.w	r2, [sp]
 8011a02:	3304      	adds	r3, #4
 8011a04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011a06:	f009 fb63 	bl	801b0d0 <USB_CoreInit>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d005      	beq.n	8011a1c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2202      	movs	r2, #2
 8011a14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8011a18:	2301      	movs	r3, #1
 8011a1a:	e0d5      	b.n	8011bc8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2100      	movs	r1, #0
 8011a22:	4618      	mov	r0, r3
 8011a24:	f009 fc8a 	bl	801b33c <USB_SetCurrentMode>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d005      	beq.n	8011a3a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2202      	movs	r2, #2
 8011a32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8011a36:	2301      	movs	r3, #1
 8011a38:	e0c6      	b.n	8011bc8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	73fb      	strb	r3, [r7, #15]
 8011a3e:	e04a      	b.n	8011ad6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8011a40:	7bfa      	ldrb	r2, [r7, #15]
 8011a42:	6879      	ldr	r1, [r7, #4]
 8011a44:	4613      	mov	r3, r2
 8011a46:	00db      	lsls	r3, r3, #3
 8011a48:	4413      	add	r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	440b      	add	r3, r1
 8011a4e:	3315      	adds	r3, #21
 8011a50:	2201      	movs	r2, #1
 8011a52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8011a54:	7bfa      	ldrb	r2, [r7, #15]
 8011a56:	6879      	ldr	r1, [r7, #4]
 8011a58:	4613      	mov	r3, r2
 8011a5a:	00db      	lsls	r3, r3, #3
 8011a5c:	4413      	add	r3, r2
 8011a5e:	009b      	lsls	r3, r3, #2
 8011a60:	440b      	add	r3, r1
 8011a62:	3314      	adds	r3, #20
 8011a64:	7bfa      	ldrb	r2, [r7, #15]
 8011a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8011a68:	7bfa      	ldrb	r2, [r7, #15]
 8011a6a:	7bfb      	ldrb	r3, [r7, #15]
 8011a6c:	b298      	uxth	r0, r3
 8011a6e:	6879      	ldr	r1, [r7, #4]
 8011a70:	4613      	mov	r3, r2
 8011a72:	00db      	lsls	r3, r3, #3
 8011a74:	4413      	add	r3, r2
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	440b      	add	r3, r1
 8011a7a:	332e      	adds	r3, #46	@ 0x2e
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8011a80:	7bfa      	ldrb	r2, [r7, #15]
 8011a82:	6879      	ldr	r1, [r7, #4]
 8011a84:	4613      	mov	r3, r2
 8011a86:	00db      	lsls	r3, r3, #3
 8011a88:	4413      	add	r3, r2
 8011a8a:	009b      	lsls	r3, r3, #2
 8011a8c:	440b      	add	r3, r1
 8011a8e:	3318      	adds	r3, #24
 8011a90:	2200      	movs	r2, #0
 8011a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8011a94:	7bfa      	ldrb	r2, [r7, #15]
 8011a96:	6879      	ldr	r1, [r7, #4]
 8011a98:	4613      	mov	r3, r2
 8011a9a:	00db      	lsls	r3, r3, #3
 8011a9c:	4413      	add	r3, r2
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	440b      	add	r3, r1
 8011aa2:	331c      	adds	r3, #28
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8011aa8:	7bfa      	ldrb	r2, [r7, #15]
 8011aaa:	6879      	ldr	r1, [r7, #4]
 8011aac:	4613      	mov	r3, r2
 8011aae:	00db      	lsls	r3, r3, #3
 8011ab0:	4413      	add	r3, r2
 8011ab2:	009b      	lsls	r3, r3, #2
 8011ab4:	440b      	add	r3, r1
 8011ab6:	3320      	adds	r3, #32
 8011ab8:	2200      	movs	r2, #0
 8011aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011abc:	7bfa      	ldrb	r2, [r7, #15]
 8011abe:	6879      	ldr	r1, [r7, #4]
 8011ac0:	4613      	mov	r3, r2
 8011ac2:	00db      	lsls	r3, r3, #3
 8011ac4:	4413      	add	r3, r2
 8011ac6:	009b      	lsls	r3, r3, #2
 8011ac8:	440b      	add	r3, r1
 8011aca:	3324      	adds	r3, #36	@ 0x24
 8011acc:	2200      	movs	r2, #0
 8011ace:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011ad0:	7bfb      	ldrb	r3, [r7, #15]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	73fb      	strb	r3, [r7, #15]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	791b      	ldrb	r3, [r3, #4]
 8011ada:	7bfa      	ldrb	r2, [r7, #15]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d3af      	bcc.n	8011a40 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	73fb      	strb	r3, [r7, #15]
 8011ae4:	e044      	b.n	8011b70 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8011ae6:	7bfa      	ldrb	r2, [r7, #15]
 8011ae8:	6879      	ldr	r1, [r7, #4]
 8011aea:	4613      	mov	r3, r2
 8011aec:	00db      	lsls	r3, r3, #3
 8011aee:	4413      	add	r3, r2
 8011af0:	009b      	lsls	r3, r3, #2
 8011af2:	440b      	add	r3, r1
 8011af4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8011af8:	2200      	movs	r2, #0
 8011afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011afc:	7bfa      	ldrb	r2, [r7, #15]
 8011afe:	6879      	ldr	r1, [r7, #4]
 8011b00:	4613      	mov	r3, r2
 8011b02:	00db      	lsls	r3, r3, #3
 8011b04:	4413      	add	r3, r2
 8011b06:	009b      	lsls	r3, r3, #2
 8011b08:	440b      	add	r3, r1
 8011b0a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8011b0e:	7bfa      	ldrb	r2, [r7, #15]
 8011b10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8011b12:	7bfa      	ldrb	r2, [r7, #15]
 8011b14:	6879      	ldr	r1, [r7, #4]
 8011b16:	4613      	mov	r3, r2
 8011b18:	00db      	lsls	r3, r3, #3
 8011b1a:	4413      	add	r3, r2
 8011b1c:	009b      	lsls	r3, r3, #2
 8011b1e:	440b      	add	r3, r1
 8011b20:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8011b24:	2200      	movs	r2, #0
 8011b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8011b28:	7bfa      	ldrb	r2, [r7, #15]
 8011b2a:	6879      	ldr	r1, [r7, #4]
 8011b2c:	4613      	mov	r3, r2
 8011b2e:	00db      	lsls	r3, r3, #3
 8011b30:	4413      	add	r3, r2
 8011b32:	009b      	lsls	r3, r3, #2
 8011b34:	440b      	add	r3, r1
 8011b36:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8011b3e:	7bfa      	ldrb	r2, [r7, #15]
 8011b40:	6879      	ldr	r1, [r7, #4]
 8011b42:	4613      	mov	r3, r2
 8011b44:	00db      	lsls	r3, r3, #3
 8011b46:	4413      	add	r3, r2
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	440b      	add	r3, r1
 8011b4c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011b50:	2200      	movs	r2, #0
 8011b52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8011b54:	7bfa      	ldrb	r2, [r7, #15]
 8011b56:	6879      	ldr	r1, [r7, #4]
 8011b58:	4613      	mov	r3, r2
 8011b5a:	00db      	lsls	r3, r3, #3
 8011b5c:	4413      	add	r3, r2
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	440b      	add	r3, r1
 8011b62:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8011b66:	2200      	movs	r2, #0
 8011b68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011b6a:	7bfb      	ldrb	r3, [r7, #15]
 8011b6c:	3301      	adds	r3, #1
 8011b6e:	73fb      	strb	r3, [r7, #15]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	791b      	ldrb	r3, [r3, #4]
 8011b74:	7bfa      	ldrb	r2, [r7, #15]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d3b5      	bcc.n	8011ae6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6818      	ldr	r0, [r3, #0]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	7c1a      	ldrb	r2, [r3, #16]
 8011b82:	f88d 2000 	strb.w	r2, [sp]
 8011b86:	3304      	adds	r3, #4
 8011b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011b8a:	f009 fc23 	bl	801b3d4 <USB_DevInit>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d005      	beq.n	8011ba0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2202      	movs	r2, #2
 8011b98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	e013      	b.n	8011bc8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2201      	movs	r2, #1
 8011baa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	7b1b      	ldrb	r3, [r3, #12]
 8011bb2:	2b01      	cmp	r3, #1
 8011bb4:	d102      	bne.n	8011bbc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f001 f96e 	bl	8012e98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f00a fc66 	bl	801c492 <USB_DevDisconnect>

  return HAL_OK;
 8011bc6:	2300      	movs	r3, #0
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3710      	adds	r7, #16
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}

08011bd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8011be4:	2b01      	cmp	r3, #1
 8011be6:	d101      	bne.n	8011bec <HAL_PCD_Start+0x1c>
 8011be8:	2302      	movs	r3, #2
 8011bea:	e022      	b.n	8011c32 <HAL_PCD_Start+0x62>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2201      	movs	r2, #1
 8011bf0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	68db      	ldr	r3, [r3, #12]
 8011bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d009      	beq.n	8011c14 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8011c04:	2b01      	cmp	r3, #1
 8011c06:	d105      	bne.n	8011c14 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f009 fb6d 	bl	801b2f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f00a fc14 	bl	801c450 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8011c30:	2300      	movs	r3, #0
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3710      	adds	r7, #16
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}

08011c3a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8011c3a:	b590      	push	{r4, r7, lr}
 8011c3c:	b08d      	sub	sp, #52	@ 0x34
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c48:	6a3b      	ldr	r3, [r7, #32]
 8011c4a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	4618      	mov	r0, r3
 8011c52:	f00a fcd2 	bl	801c5fa <USB_GetMode>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	f040 84b9 	bne.w	80125d0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	4618      	mov	r0, r3
 8011c64:	f00a fc36 	bl	801c4d4 <USB_ReadInterrupts>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	f000 84af 	beq.w	80125ce <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c76:	689b      	ldr	r3, [r3, #8]
 8011c78:	0a1b      	lsrs	r3, r3, #8
 8011c7a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f00a fc23 	bl	801c4d4 <USB_ReadInterrupts>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	f003 0302 	and.w	r3, r3, #2
 8011c94:	2b02      	cmp	r3, #2
 8011c96:	d107      	bne.n	8011ca8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	695a      	ldr	r2, [r3, #20]
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	f002 0202 	and.w	r2, r2, #2
 8011ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	4618      	mov	r0, r3
 8011cae:	f00a fc11 	bl	801c4d4 <USB_ReadInterrupts>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	f003 0310 	and.w	r3, r3, #16
 8011cb8:	2b10      	cmp	r3, #16
 8011cba:	d161      	bne.n	8011d80 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	699a      	ldr	r2, [r3, #24]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f022 0210 	bic.w	r2, r2, #16
 8011cca:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8011ccc:	6a3b      	ldr	r3, [r7, #32]
 8011cce:	6a1b      	ldr	r3, [r3, #32]
 8011cd0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8011cd2:	69bb      	ldr	r3, [r7, #24]
 8011cd4:	f003 020f 	and.w	r2, r3, #15
 8011cd8:	4613      	mov	r3, r2
 8011cda:	00db      	lsls	r3, r3, #3
 8011cdc:	4413      	add	r3, r2
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	4413      	add	r3, r2
 8011ce8:	3304      	adds	r3, #4
 8011cea:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8011cec:	69bb      	ldr	r3, [r7, #24]
 8011cee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8011cf2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011cf6:	d124      	bne.n	8011d42 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8011cf8:	69ba      	ldr	r2, [r7, #24]
 8011cfa:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8011cfe:	4013      	ands	r3, r2
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d035      	beq.n	8011d70 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8011d08:	69bb      	ldr	r3, [r7, #24]
 8011d0a:	091b      	lsrs	r3, r3, #4
 8011d0c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8011d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	461a      	mov	r2, r3
 8011d16:	6a38      	ldr	r0, [r7, #32]
 8011d18:	f00a fa48 	bl	801c1ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	68da      	ldr	r2, [r3, #12]
 8011d20:	69bb      	ldr	r3, [r7, #24]
 8011d22:	091b      	lsrs	r3, r3, #4
 8011d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011d28:	441a      	add	r2, r3
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	695a      	ldr	r2, [r3, #20]
 8011d32:	69bb      	ldr	r3, [r7, #24]
 8011d34:	091b      	lsrs	r3, r3, #4
 8011d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011d3a:	441a      	add	r2, r3
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	615a      	str	r2, [r3, #20]
 8011d40:	e016      	b.n	8011d70 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8011d42:	69bb      	ldr	r3, [r7, #24]
 8011d44:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8011d48:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8011d4c:	d110      	bne.n	8011d70 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011d54:	2208      	movs	r2, #8
 8011d56:	4619      	mov	r1, r3
 8011d58:	6a38      	ldr	r0, [r7, #32]
 8011d5a:	f00a fa27 	bl	801c1ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	695a      	ldr	r2, [r3, #20]
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	091b      	lsrs	r3, r3, #4
 8011d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011d6a:	441a      	add	r2, r3
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	699a      	ldr	r2, [r3, #24]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	f042 0210 	orr.w	r2, r2, #16
 8011d7e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	4618      	mov	r0, r3
 8011d86:	f00a fba5 	bl	801c4d4 <USB_ReadInterrupts>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011d90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8011d94:	f040 80a7 	bne.w	8011ee6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4618      	mov	r0, r3
 8011da2:	f00a fbaa 	bl	801c4fa <USB_ReadDevAllOutEpInterrupt>
 8011da6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8011da8:	e099      	b.n	8011ede <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8011daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dac:	f003 0301 	and.w	r3, r3, #1
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	f000 808e 	beq.w	8011ed2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011dbc:	b2d2      	uxtb	r2, r2
 8011dbe:	4611      	mov	r1, r2
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f00a fbce 	bl	801c562 <USB_ReadDevOutEPInterrupt>
 8011dc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	f003 0301 	and.w	r3, r3, #1
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d00c      	beq.n	8011dec <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8011dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dd4:	015a      	lsls	r2, r3, #5
 8011dd6:	69fb      	ldr	r3, [r7, #28]
 8011dd8:	4413      	add	r3, r2
 8011dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dde:	461a      	mov	r2, r3
 8011de0:	2301      	movs	r3, #1
 8011de2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8011de4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f000 fed0 	bl	8012b8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	f003 0308 	and.w	r3, r3, #8
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d00c      	beq.n	8011e10 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8011df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df8:	015a      	lsls	r2, r3, #5
 8011dfa:	69fb      	ldr	r3, [r7, #28]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e02:	461a      	mov	r2, r3
 8011e04:	2308      	movs	r3, #8
 8011e06:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8011e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f000 ffa6 	bl	8012d5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	f003 0310 	and.w	r3, r3, #16
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d008      	beq.n	8011e2c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8011e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e1c:	015a      	lsls	r2, r3, #5
 8011e1e:	69fb      	ldr	r3, [r7, #28]
 8011e20:	4413      	add	r3, r2
 8011e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e26:	461a      	mov	r2, r3
 8011e28:	2310      	movs	r3, #16
 8011e2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	f003 0302 	and.w	r3, r3, #2
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d030      	beq.n	8011e98 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8011e36:	6a3b      	ldr	r3, [r7, #32]
 8011e38:	695b      	ldr	r3, [r3, #20]
 8011e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e3e:	2b80      	cmp	r3, #128	@ 0x80
 8011e40:	d109      	bne.n	8011e56 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8011e42:	69fb      	ldr	r3, [r7, #28]
 8011e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011e48:	685b      	ldr	r3, [r3, #4]
 8011e4a:	69fa      	ldr	r2, [r7, #28]
 8011e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011e50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011e54:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8011e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e58:	4613      	mov	r3, r2
 8011e5a:	00db      	lsls	r3, r3, #3
 8011e5c:	4413      	add	r3, r2
 8011e5e:	009b      	lsls	r3, r3, #2
 8011e60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	4413      	add	r3, r2
 8011e68:	3304      	adds	r3, #4
 8011e6a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	78db      	ldrb	r3, [r3, #3]
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d108      	bne.n	8011e86 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	2200      	movs	r2, #0
 8011e78:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8011e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	4619      	mov	r1, r3
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f010 ffe7 	bl	8022e54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8011e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e88:	015a      	lsls	r2, r3, #5
 8011e8a:	69fb      	ldr	r3, [r7, #28]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e92:	461a      	mov	r2, r3
 8011e94:	2302      	movs	r3, #2
 8011e96:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	f003 0320 	and.w	r3, r3, #32
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d008      	beq.n	8011eb4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8011ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea4:	015a      	lsls	r2, r3, #5
 8011ea6:	69fb      	ldr	r3, [r7, #28]
 8011ea8:	4413      	add	r3, r2
 8011eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011eae:	461a      	mov	r2, r3
 8011eb0:	2320      	movs	r3, #32
 8011eb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d009      	beq.n	8011ed2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ec0:	015a      	lsls	r2, r3, #5
 8011ec2:	69fb      	ldr	r3, [r7, #28]
 8011ec4:	4413      	add	r3, r2
 8011ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011eca:	461a      	mov	r2, r3
 8011ecc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011ed0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8011ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8011ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eda:	085b      	lsrs	r3, r3, #1
 8011edc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8011ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	f47f af62 	bne.w	8011daa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	4618      	mov	r0, r3
 8011eec:	f00a faf2 	bl	801c4d4 <USB_ReadInterrupts>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011ef6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011efa:	f040 80db 	bne.w	80120b4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	4618      	mov	r0, r3
 8011f04:	f00a fb13 	bl	801c52e <USB_ReadDevAllInEpInterrupt>
 8011f08:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8011f0e:	e0cd      	b.n	80120ac <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8011f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f12:	f003 0301 	and.w	r3, r3, #1
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	f000 80c2 	beq.w	80120a0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f22:	b2d2      	uxtb	r2, r2
 8011f24:	4611      	mov	r1, r2
 8011f26:	4618      	mov	r0, r3
 8011f28:	f00a fb39 	bl	801c59e <USB_ReadDevInEPInterrupt>
 8011f2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	f003 0301 	and.w	r3, r3, #1
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d057      	beq.n	8011fe8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8011f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f3a:	f003 030f 	and.w	r3, r3, #15
 8011f3e:	2201      	movs	r2, #1
 8011f40:	fa02 f303 	lsl.w	r3, r2, r3
 8011f44:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8011f46:	69fb      	ldr	r3, [r7, #28]
 8011f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	43db      	mvns	r3, r3
 8011f52:	69f9      	ldr	r1, [r7, #28]
 8011f54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011f58:	4013      	ands	r3, r2
 8011f5a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f5e:	015a      	lsls	r2, r3, #5
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	4413      	add	r3, r2
 8011f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f68:	461a      	mov	r2, r3
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	799b      	ldrb	r3, [r3, #6]
 8011f72:	2b01      	cmp	r3, #1
 8011f74:	d132      	bne.n	8011fdc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8011f76:	6879      	ldr	r1, [r7, #4]
 8011f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f7a:	4613      	mov	r3, r2
 8011f7c:	00db      	lsls	r3, r3, #3
 8011f7e:	4413      	add	r3, r2
 8011f80:	009b      	lsls	r3, r3, #2
 8011f82:	440b      	add	r3, r1
 8011f84:	3320      	adds	r3, #32
 8011f86:	6819      	ldr	r1, [r3, #0]
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	00db      	lsls	r3, r3, #3
 8011f90:	4413      	add	r3, r2
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	4403      	add	r3, r0
 8011f96:	331c      	adds	r3, #28
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	4419      	add	r1, r3
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fa0:	4613      	mov	r3, r2
 8011fa2:	00db      	lsls	r3, r3, #3
 8011fa4:	4413      	add	r3, r2
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	4403      	add	r3, r0
 8011faa:	3320      	adds	r3, #32
 8011fac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8011fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d113      	bne.n	8011fdc <HAL_PCD_IRQHandler+0x3a2>
 8011fb4:	6879      	ldr	r1, [r7, #4]
 8011fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fb8:	4613      	mov	r3, r2
 8011fba:	00db      	lsls	r3, r3, #3
 8011fbc:	4413      	add	r3, r2
 8011fbe:	009b      	lsls	r3, r3, #2
 8011fc0:	440b      	add	r3, r1
 8011fc2:	3324      	adds	r3, #36	@ 0x24
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d108      	bne.n	8011fdc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6818      	ldr	r0, [r3, #0]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	2101      	movs	r1, #1
 8011fd8:	f00a fb42 	bl	801c660 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8011fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	4619      	mov	r1, r3
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f010 feb1 	bl	8022d4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	f003 0308 	and.w	r3, r3, #8
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d008      	beq.n	8012004 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8011ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ff4:	015a      	lsls	r2, r3, #5
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	4413      	add	r3, r2
 8011ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ffe:	461a      	mov	r2, r3
 8012000:	2308      	movs	r3, #8
 8012002:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	f003 0310 	and.w	r3, r3, #16
 801200a:	2b00      	cmp	r3, #0
 801200c:	d008      	beq.n	8012020 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012010:	015a      	lsls	r2, r3, #5
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	4413      	add	r3, r2
 8012016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801201a:	461a      	mov	r2, r3
 801201c:	2310      	movs	r3, #16
 801201e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012026:	2b00      	cmp	r3, #0
 8012028:	d008      	beq.n	801203c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801202c:	015a      	lsls	r2, r3, #5
 801202e:	69fb      	ldr	r3, [r7, #28]
 8012030:	4413      	add	r3, r2
 8012032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012036:	461a      	mov	r2, r3
 8012038:	2340      	movs	r3, #64	@ 0x40
 801203a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	f003 0302 	and.w	r3, r3, #2
 8012042:	2b00      	cmp	r3, #0
 8012044:	d023      	beq.n	801208e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8012046:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012048:	6a38      	ldr	r0, [r7, #32]
 801204a:	f009 fb21 	bl	801b690 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 801204e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012050:	4613      	mov	r3, r2
 8012052:	00db      	lsls	r3, r3, #3
 8012054:	4413      	add	r3, r2
 8012056:	009b      	lsls	r3, r3, #2
 8012058:	3310      	adds	r3, #16
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	4413      	add	r3, r2
 801205e:	3304      	adds	r3, #4
 8012060:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	78db      	ldrb	r3, [r3, #3]
 8012066:	2b01      	cmp	r3, #1
 8012068:	d108      	bne.n	801207c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	2200      	movs	r2, #0
 801206e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8012070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012072:	b2db      	uxtb	r3, r3
 8012074:	4619      	mov	r1, r3
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f010 fefe 	bl	8022e78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801207e:	015a      	lsls	r2, r3, #5
 8012080:	69fb      	ldr	r3, [r7, #28]
 8012082:	4413      	add	r3, r2
 8012084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012088:	461a      	mov	r2, r3
 801208a:	2302      	movs	r3, #2
 801208c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801208e:	693b      	ldr	r3, [r7, #16]
 8012090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012094:	2b00      	cmp	r3, #0
 8012096:	d003      	beq.n	80120a0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8012098:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f000 fcea 	bl	8012a74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80120a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120a2:	3301      	adds	r3, #1
 80120a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80120a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120a8:	085b      	lsrs	r3, r3, #1
 80120aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80120ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	f47f af2e 	bne.w	8011f10 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f00a fa0b 	bl	801c4d4 <USB_ReadInterrupts>
 80120be:	4603      	mov	r3, r0
 80120c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80120c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80120c8:	d122      	bne.n	8012110 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80120ca:	69fb      	ldr	r3, [r7, #28]
 80120cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	69fa      	ldr	r2, [r7, #28]
 80120d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80120d8:	f023 0301 	bic.w	r3, r3, #1
 80120dc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	d108      	bne.n	80120fa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80120f0:	2100      	movs	r1, #0
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 fef4 	bl	8012ee0 <HAL_PCDEx_LPM_Callback>
 80120f8:	e002      	b.n	8012100 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f010 fe9c 	bl	8022e38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	695a      	ldr	r2, [r3, #20]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 801210e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	4618      	mov	r0, r3
 8012116:	f00a f9dd 	bl	801c4d4 <USB_ReadInterrupts>
 801211a:	4603      	mov	r3, r0
 801211c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012124:	d112      	bne.n	801214c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8012126:	69fb      	ldr	r3, [r7, #28]
 8012128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801212c:	689b      	ldr	r3, [r3, #8]
 801212e:	f003 0301 	and.w	r3, r3, #1
 8012132:	2b01      	cmp	r3, #1
 8012134:	d102      	bne.n	801213c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f010 fe58 	bl	8022dec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	695a      	ldr	r2, [r3, #20]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 801214a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	4618      	mov	r0, r3
 8012152:	f00a f9bf 	bl	801c4d4 <USB_ReadInterrupts>
 8012156:	4603      	mov	r3, r0
 8012158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801215c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012160:	d121      	bne.n	80121a6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	695a      	ldr	r2, [r3, #20]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8012170:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8012178:	2b00      	cmp	r3, #0
 801217a:	d111      	bne.n	80121a0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2201      	movs	r2, #1
 8012180:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801218a:	089b      	lsrs	r3, r3, #2
 801218c:	f003 020f 	and.w	r2, r3, #15
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8012196:	2101      	movs	r1, #1
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f000 fea1 	bl	8012ee0 <HAL_PCDEx_LPM_Callback>
 801219e:	e002      	b.n	80121a6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f010 fe23 	bl	8022dec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4618      	mov	r0, r3
 80121ac:	f00a f992 	bl	801c4d4 <USB_ReadInterrupts>
 80121b0:	4603      	mov	r3, r0
 80121b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80121b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80121ba:	f040 80b7 	bne.w	801232c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80121be:	69fb      	ldr	r3, [r7, #28]
 80121c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	69fa      	ldr	r2, [r7, #28]
 80121c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80121cc:	f023 0301 	bic.w	r3, r3, #1
 80121d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	2110      	movs	r1, #16
 80121d8:	4618      	mov	r0, r3
 80121da:	f009 fa59 	bl	801b690 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80121de:	2300      	movs	r3, #0
 80121e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80121e2:	e046      	b.n	8012272 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80121e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121e6:	015a      	lsls	r2, r3, #5
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	4413      	add	r3, r2
 80121ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80121f0:	461a      	mov	r2, r3
 80121f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80121f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80121f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121fa:	015a      	lsls	r2, r3, #5
 80121fc:	69fb      	ldr	r3, [r7, #28]
 80121fe:	4413      	add	r3, r2
 8012200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012208:	0151      	lsls	r1, r2, #5
 801220a:	69fa      	ldr	r2, [r7, #28]
 801220c:	440a      	add	r2, r1
 801220e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012212:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012216:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8012218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801221a:	015a      	lsls	r2, r3, #5
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	4413      	add	r3, r2
 8012220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012224:	461a      	mov	r2, r3
 8012226:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801222a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801222c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801222e:	015a      	lsls	r2, r3, #5
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	4413      	add	r3, r2
 8012234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801223c:	0151      	lsls	r1, r2, #5
 801223e:	69fa      	ldr	r2, [r7, #28]
 8012240:	440a      	add	r2, r1
 8012242:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012246:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801224a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801224c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801224e:	015a      	lsls	r2, r3, #5
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	4413      	add	r3, r2
 8012254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801225c:	0151      	lsls	r1, r2, #5
 801225e:	69fa      	ldr	r2, [r7, #28]
 8012260:	440a      	add	r2, r1
 8012262:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012266:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801226a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801226c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801226e:	3301      	adds	r3, #1
 8012270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	791b      	ldrb	r3, [r3, #4]
 8012276:	461a      	mov	r2, r3
 8012278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801227a:	4293      	cmp	r3, r2
 801227c:	d3b2      	bcc.n	80121e4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801227e:	69fb      	ldr	r3, [r7, #28]
 8012280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012284:	69db      	ldr	r3, [r3, #28]
 8012286:	69fa      	ldr	r2, [r7, #28]
 8012288:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801228c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8012290:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	7bdb      	ldrb	r3, [r3, #15]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d016      	beq.n	80122c8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80122a4:	69fa      	ldr	r2, [r7, #28]
 80122a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80122aa:	f043 030b 	orr.w	r3, r3, #11
 80122ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80122b2:	69fb      	ldr	r3, [r7, #28]
 80122b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80122ba:	69fa      	ldr	r2, [r7, #28]
 80122bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80122c0:	f043 030b 	orr.w	r3, r3, #11
 80122c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80122c6:	e015      	b.n	80122f4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80122c8:	69fb      	ldr	r3, [r7, #28]
 80122ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122ce:	695a      	ldr	r2, [r3, #20]
 80122d0:	69fb      	ldr	r3, [r7, #28]
 80122d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122d6:	4619      	mov	r1, r3
 80122d8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80122dc:	4313      	orrs	r3, r2
 80122de:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122e6:	691b      	ldr	r3, [r3, #16]
 80122e8:	69fa      	ldr	r2, [r7, #28]
 80122ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80122ee:	f043 030b 	orr.w	r3, r3, #11
 80122f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	69fa      	ldr	r2, [r7, #28]
 80122fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012302:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012306:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6818      	ldr	r0, [r3, #0]
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8012316:	461a      	mov	r2, r3
 8012318:	f00a f9a2 	bl	801c660 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	695a      	ldr	r2, [r3, #20]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 801232a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	4618      	mov	r0, r3
 8012332:	f00a f8cf 	bl	801c4d4 <USB_ReadInterrupts>
 8012336:	4603      	mov	r3, r0
 8012338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801233c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012340:	d123      	bne.n	801238a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	4618      	mov	r0, r3
 8012348:	f00a f966 	bl	801c618 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	4618      	mov	r0, r3
 8012352:	f009 fa16 	bl	801b782 <USB_GetDevSpeed>
 8012356:	4603      	mov	r3, r0
 8012358:	461a      	mov	r2, r3
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681c      	ldr	r4, [r3, #0]
 8012362:	f001 fd1d 	bl	8013da0 <HAL_RCC_GetHCLKFreq>
 8012366:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801236c:	461a      	mov	r2, r3
 801236e:	4620      	mov	r0, r4
 8012370:	f008 ff20 	bl	801b1b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f010 fd10 	bl	8022d9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	695a      	ldr	r2, [r3, #20]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8012388:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4618      	mov	r0, r3
 8012390:	f00a f8a0 	bl	801c4d4 <USB_ReadInterrupts>
 8012394:	4603      	mov	r3, r0
 8012396:	f003 0308 	and.w	r3, r3, #8
 801239a:	2b08      	cmp	r3, #8
 801239c:	d10a      	bne.n	80123b4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f010 fced 	bl	8022d7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	695a      	ldr	r2, [r3, #20]
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	f002 0208 	and.w	r2, r2, #8
 80123b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	4618      	mov	r0, r3
 80123ba:	f00a f88b 	bl	801c4d4 <USB_ReadInterrupts>
 80123be:	4603      	mov	r3, r0
 80123c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80123c4:	2b80      	cmp	r3, #128	@ 0x80
 80123c6:	d123      	bne.n	8012410 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80123c8:	6a3b      	ldr	r3, [r7, #32]
 80123ca:	699b      	ldr	r3, [r3, #24]
 80123cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80123d0:	6a3b      	ldr	r3, [r7, #32]
 80123d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80123d4:	2301      	movs	r3, #1
 80123d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80123d8:	e014      	b.n	8012404 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80123da:	6879      	ldr	r1, [r7, #4]
 80123dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123de:	4613      	mov	r3, r2
 80123e0:	00db      	lsls	r3, r3, #3
 80123e2:	4413      	add	r3, r2
 80123e4:	009b      	lsls	r3, r3, #2
 80123e6:	440b      	add	r3, r1
 80123e8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d105      	bne.n	80123fe <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80123f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123f4:	b2db      	uxtb	r3, r3
 80123f6:	4619      	mov	r1, r3
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f000 fb0a 	bl	8012a12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80123fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012400:	3301      	adds	r3, #1
 8012402:	627b      	str	r3, [r7, #36]	@ 0x24
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	791b      	ldrb	r3, [r3, #4]
 8012408:	461a      	mov	r2, r3
 801240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801240c:	4293      	cmp	r3, r2
 801240e:	d3e4      	bcc.n	80123da <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	4618      	mov	r0, r3
 8012416:	f00a f85d 	bl	801c4d4 <USB_ReadInterrupts>
 801241a:	4603      	mov	r3, r0
 801241c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012420:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012424:	d13c      	bne.n	80124a0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012426:	2301      	movs	r3, #1
 8012428:	627b      	str	r3, [r7, #36]	@ 0x24
 801242a:	e02b      	b.n	8012484 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 801242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801242e:	015a      	lsls	r2, r3, #5
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	4413      	add	r3, r2
 8012434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801243c:	6879      	ldr	r1, [r7, #4]
 801243e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012440:	4613      	mov	r3, r2
 8012442:	00db      	lsls	r3, r3, #3
 8012444:	4413      	add	r3, r2
 8012446:	009b      	lsls	r3, r3, #2
 8012448:	440b      	add	r3, r1
 801244a:	3318      	adds	r3, #24
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	2b01      	cmp	r3, #1
 8012450:	d115      	bne.n	801247e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8012452:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8012454:	2b00      	cmp	r3, #0
 8012456:	da12      	bge.n	801247e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8012458:	6879      	ldr	r1, [r7, #4]
 801245a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801245c:	4613      	mov	r3, r2
 801245e:	00db      	lsls	r3, r3, #3
 8012460:	4413      	add	r3, r2
 8012462:	009b      	lsls	r3, r3, #2
 8012464:	440b      	add	r3, r1
 8012466:	3317      	adds	r3, #23
 8012468:	2201      	movs	r2, #1
 801246a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 801246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801246e:	b2db      	uxtb	r3, r3
 8012470:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012474:	b2db      	uxtb	r3, r3
 8012476:	4619      	mov	r1, r3
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f000 faca 	bl	8012a12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012480:	3301      	adds	r3, #1
 8012482:	627b      	str	r3, [r7, #36]	@ 0x24
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	791b      	ldrb	r3, [r3, #4]
 8012488:	461a      	mov	r2, r3
 801248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801248c:	4293      	cmp	r3, r2
 801248e:	d3cd      	bcc.n	801242c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	695a      	ldr	r2, [r3, #20]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 801249e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4618      	mov	r0, r3
 80124a6:	f00a f815 	bl	801c4d4 <USB_ReadInterrupts>
 80124aa:	4603      	mov	r3, r0
 80124ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80124b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80124b4:	d156      	bne.n	8012564 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80124b6:	2301      	movs	r3, #1
 80124b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80124ba:	e045      	b.n	8012548 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80124bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124be:	015a      	lsls	r2, r3, #5
 80124c0:	69fb      	ldr	r3, [r7, #28]
 80124c2:	4413      	add	r3, r2
 80124c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80124cc:	6879      	ldr	r1, [r7, #4]
 80124ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124d0:	4613      	mov	r3, r2
 80124d2:	00db      	lsls	r3, r3, #3
 80124d4:	4413      	add	r3, r2
 80124d6:	009b      	lsls	r3, r3, #2
 80124d8:	440b      	add	r3, r1
 80124da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80124de:	781b      	ldrb	r3, [r3, #0]
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	d12e      	bne.n	8012542 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80124e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	da2b      	bge.n	8012542 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80124ea:	69bb      	ldr	r3, [r7, #24]
 80124ec:	0c1a      	lsrs	r2, r3, #16
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80124f4:	4053      	eors	r3, r2
 80124f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d121      	bne.n	8012542 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80124fe:	6879      	ldr	r1, [r7, #4]
 8012500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012502:	4613      	mov	r3, r2
 8012504:	00db      	lsls	r3, r3, #3
 8012506:	4413      	add	r3, r2
 8012508:	009b      	lsls	r3, r3, #2
 801250a:	440b      	add	r3, r1
 801250c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8012510:	2201      	movs	r2, #1
 8012512:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8012514:	6a3b      	ldr	r3, [r7, #32]
 8012516:	699b      	ldr	r3, [r3, #24]
 8012518:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801251c:	6a3b      	ldr	r3, [r7, #32]
 801251e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8012520:	6a3b      	ldr	r3, [r7, #32]
 8012522:	695b      	ldr	r3, [r3, #20]
 8012524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012528:	2b00      	cmp	r3, #0
 801252a:	d10a      	bne.n	8012542 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 801252c:	69fb      	ldr	r3, [r7, #28]
 801252e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	69fa      	ldr	r2, [r7, #28]
 8012536:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801253a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801253e:	6053      	str	r3, [r2, #4]
            break;
 8012540:	e008      	b.n	8012554 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012544:	3301      	adds	r3, #1
 8012546:	627b      	str	r3, [r7, #36]	@ 0x24
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	791b      	ldrb	r3, [r3, #4]
 801254c:	461a      	mov	r2, r3
 801254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012550:	4293      	cmp	r3, r2
 8012552:	d3b3      	bcc.n	80124bc <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	695a      	ldr	r2, [r3, #20]
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8012562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	4618      	mov	r0, r3
 801256a:	f009 ffb3 	bl	801c4d4 <USB_ReadInterrupts>
 801256e:	4603      	mov	r3, r0
 8012570:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012578:	d10a      	bne.n	8012590 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f010 fc8e 	bl	8022e9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	695a      	ldr	r2, [r3, #20]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 801258e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	4618      	mov	r0, r3
 8012596:	f009 ff9d 	bl	801c4d4 <USB_ReadInterrupts>
 801259a:	4603      	mov	r3, r0
 801259c:	f003 0304 	and.w	r3, r3, #4
 80125a0:	2b04      	cmp	r3, #4
 80125a2:	d115      	bne.n	80125d0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80125ac:	69bb      	ldr	r3, [r7, #24]
 80125ae:	f003 0304 	and.w	r3, r3, #4
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d002      	beq.n	80125bc <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f010 fc7e 	bl	8022eb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	6859      	ldr	r1, [r3, #4]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	69ba      	ldr	r2, [r7, #24]
 80125c8:	430a      	orrs	r2, r1
 80125ca:	605a      	str	r2, [r3, #4]
 80125cc:	e000      	b.n	80125d0 <HAL_PCD_IRQHandler+0x996>
      return;
 80125ce:	bf00      	nop
    }
  }
}
 80125d0:	3734      	adds	r7, #52	@ 0x34
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd90      	pop	{r4, r7, pc}

080125d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80125d6:	b580      	push	{r7, lr}
 80125d8:	b082      	sub	sp, #8
 80125da:	af00      	add	r7, sp, #0
 80125dc:	6078      	str	r0, [r7, #4]
 80125de:	460b      	mov	r3, r1
 80125e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80125e8:	2b01      	cmp	r3, #1
 80125ea:	d101      	bne.n	80125f0 <HAL_PCD_SetAddress+0x1a>
 80125ec:	2302      	movs	r3, #2
 80125ee:	e012      	b.n	8012616 <HAL_PCD_SetAddress+0x40>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2201      	movs	r2, #1
 80125f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	78fa      	ldrb	r2, [r7, #3]
 80125fc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	78fa      	ldrb	r2, [r7, #3]
 8012604:	4611      	mov	r1, r2
 8012606:	4618      	mov	r0, r3
 8012608:	f009 fefc 	bl	801c404 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2200      	movs	r2, #0
 8012610:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8012614:	2300      	movs	r3, #0
}
 8012616:	4618      	mov	r0, r3
 8012618:	3708      	adds	r7, #8
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}

0801261e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801261e:	b580      	push	{r7, lr}
 8012620:	b084      	sub	sp, #16
 8012622:	af00      	add	r7, sp, #0
 8012624:	6078      	str	r0, [r7, #4]
 8012626:	4608      	mov	r0, r1
 8012628:	4611      	mov	r1, r2
 801262a:	461a      	mov	r2, r3
 801262c:	4603      	mov	r3, r0
 801262e:	70fb      	strb	r3, [r7, #3]
 8012630:	460b      	mov	r3, r1
 8012632:	803b      	strh	r3, [r7, #0]
 8012634:	4613      	mov	r3, r2
 8012636:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8012638:	2300      	movs	r3, #0
 801263a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801263c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012640:	2b00      	cmp	r3, #0
 8012642:	da0f      	bge.n	8012664 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012644:	78fb      	ldrb	r3, [r7, #3]
 8012646:	f003 020f 	and.w	r2, r3, #15
 801264a:	4613      	mov	r3, r2
 801264c:	00db      	lsls	r3, r3, #3
 801264e:	4413      	add	r3, r2
 8012650:	009b      	lsls	r3, r3, #2
 8012652:	3310      	adds	r3, #16
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	4413      	add	r3, r2
 8012658:	3304      	adds	r3, #4
 801265a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	2201      	movs	r2, #1
 8012660:	705a      	strb	r2, [r3, #1]
 8012662:	e00f      	b.n	8012684 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012664:	78fb      	ldrb	r3, [r7, #3]
 8012666:	f003 020f 	and.w	r2, r3, #15
 801266a:	4613      	mov	r3, r2
 801266c:	00db      	lsls	r3, r3, #3
 801266e:	4413      	add	r3, r2
 8012670:	009b      	lsls	r3, r3, #2
 8012672:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	4413      	add	r3, r2
 801267a:	3304      	adds	r3, #4
 801267c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	2200      	movs	r2, #0
 8012682:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8012684:	78fb      	ldrb	r3, [r7, #3]
 8012686:	f003 030f 	and.w	r3, r3, #15
 801268a:	b2da      	uxtb	r2, r3
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8012690:	883b      	ldrh	r3, [r7, #0]
 8012692:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	78ba      	ldrb	r2, [r7, #2]
 801269e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	785b      	ldrb	r3, [r3, #1]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d004      	beq.n	80126b2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	461a      	mov	r2, r3
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80126b2:	78bb      	ldrb	r3, [r7, #2]
 80126b4:	2b02      	cmp	r3, #2
 80126b6:	d102      	bne.n	80126be <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	2200      	movs	r2, #0
 80126bc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d101      	bne.n	80126cc <HAL_PCD_EP_Open+0xae>
 80126c8:	2302      	movs	r3, #2
 80126ca:	e00e      	b.n	80126ea <HAL_PCD_EP_Open+0xcc>
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2201      	movs	r2, #1
 80126d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	68f9      	ldr	r1, [r7, #12]
 80126da:	4618      	mov	r0, r3
 80126dc:	f009 f876 	bl	801b7cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2200      	movs	r2, #0
 80126e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80126e8:	7afb      	ldrb	r3, [r7, #11]
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3710      	adds	r7, #16
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}

080126f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80126f2:	b580      	push	{r7, lr}
 80126f4:	b084      	sub	sp, #16
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
 80126fa:	460b      	mov	r3, r1
 80126fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80126fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012702:	2b00      	cmp	r3, #0
 8012704:	da0f      	bge.n	8012726 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012706:	78fb      	ldrb	r3, [r7, #3]
 8012708:	f003 020f 	and.w	r2, r3, #15
 801270c:	4613      	mov	r3, r2
 801270e:	00db      	lsls	r3, r3, #3
 8012710:	4413      	add	r3, r2
 8012712:	009b      	lsls	r3, r3, #2
 8012714:	3310      	adds	r3, #16
 8012716:	687a      	ldr	r2, [r7, #4]
 8012718:	4413      	add	r3, r2
 801271a:	3304      	adds	r3, #4
 801271c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	2201      	movs	r2, #1
 8012722:	705a      	strb	r2, [r3, #1]
 8012724:	e00f      	b.n	8012746 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012726:	78fb      	ldrb	r3, [r7, #3]
 8012728:	f003 020f 	and.w	r2, r3, #15
 801272c:	4613      	mov	r3, r2
 801272e:	00db      	lsls	r3, r3, #3
 8012730:	4413      	add	r3, r2
 8012732:	009b      	lsls	r3, r3, #2
 8012734:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012738:	687a      	ldr	r2, [r7, #4]
 801273a:	4413      	add	r3, r2
 801273c:	3304      	adds	r3, #4
 801273e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2200      	movs	r2, #0
 8012744:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012746:	78fb      	ldrb	r3, [r7, #3]
 8012748:	f003 030f 	and.w	r3, r3, #15
 801274c:	b2da      	uxtb	r2, r3
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8012758:	2b01      	cmp	r3, #1
 801275a:	d101      	bne.n	8012760 <HAL_PCD_EP_Close+0x6e>
 801275c:	2302      	movs	r3, #2
 801275e:	e00e      	b.n	801277e <HAL_PCD_EP_Close+0x8c>
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2201      	movs	r2, #1
 8012764:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	68f9      	ldr	r1, [r7, #12]
 801276e:	4618      	mov	r0, r3
 8012770:	f009 f8b4 	bl	801b8dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2200      	movs	r2, #0
 8012778:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 801277c:	2300      	movs	r3, #0
}
 801277e:	4618      	mov	r0, r3
 8012780:	3710      	adds	r7, #16
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}

08012786 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012786:	b580      	push	{r7, lr}
 8012788:	b086      	sub	sp, #24
 801278a:	af00      	add	r7, sp, #0
 801278c:	60f8      	str	r0, [r7, #12]
 801278e:	607a      	str	r2, [r7, #4]
 8012790:	603b      	str	r3, [r7, #0]
 8012792:	460b      	mov	r3, r1
 8012794:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012796:	7afb      	ldrb	r3, [r7, #11]
 8012798:	f003 020f 	and.w	r2, r3, #15
 801279c:	4613      	mov	r3, r2
 801279e:	00db      	lsls	r3, r3, #3
 80127a0:	4413      	add	r3, r2
 80127a2:	009b      	lsls	r3, r3, #2
 80127a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80127a8:	68fa      	ldr	r2, [r7, #12]
 80127aa:	4413      	add	r3, r2
 80127ac:	3304      	adds	r3, #4
 80127ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	687a      	ldr	r2, [r7, #4]
 80127b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	683a      	ldr	r2, [r7, #0]
 80127ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	2200      	movs	r2, #0
 80127c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	2200      	movs	r2, #0
 80127c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80127c8:	7afb      	ldrb	r3, [r7, #11]
 80127ca:	f003 030f 	and.w	r3, r3, #15
 80127ce:	b2da      	uxtb	r2, r3
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	799b      	ldrb	r3, [r3, #6]
 80127d8:	2b01      	cmp	r3, #1
 80127da:	d102      	bne.n	80127e2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80127dc:	687a      	ldr	r2, [r7, #4]
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	6818      	ldr	r0, [r3, #0]
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	799b      	ldrb	r3, [r3, #6]
 80127ea:	461a      	mov	r2, r3
 80127ec:	6979      	ldr	r1, [r7, #20]
 80127ee:	f009 f951 	bl	801ba94 <USB_EPStartXfer>

  return HAL_OK;
 80127f2:	2300      	movs	r3, #0
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3718      	adds	r7, #24
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80127fc:	b480      	push	{r7}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	460b      	mov	r3, r1
 8012806:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012808:	78fb      	ldrb	r3, [r7, #3]
 801280a:	f003 020f 	and.w	r2, r3, #15
 801280e:	6879      	ldr	r1, [r7, #4]
 8012810:	4613      	mov	r3, r2
 8012812:	00db      	lsls	r3, r3, #3
 8012814:	4413      	add	r3, r2
 8012816:	009b      	lsls	r3, r3, #2
 8012818:	440b      	add	r3, r1
 801281a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 801281e:	681b      	ldr	r3, [r3, #0]
}
 8012820:	4618      	mov	r0, r3
 8012822:	370c      	adds	r7, #12
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr

0801282c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b086      	sub	sp, #24
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	607a      	str	r2, [r7, #4]
 8012836:	603b      	str	r3, [r7, #0]
 8012838:	460b      	mov	r3, r1
 801283a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801283c:	7afb      	ldrb	r3, [r7, #11]
 801283e:	f003 020f 	and.w	r2, r3, #15
 8012842:	4613      	mov	r3, r2
 8012844:	00db      	lsls	r3, r3, #3
 8012846:	4413      	add	r3, r2
 8012848:	009b      	lsls	r3, r3, #2
 801284a:	3310      	adds	r3, #16
 801284c:	68fa      	ldr	r2, [r7, #12]
 801284e:	4413      	add	r3, r2
 8012850:	3304      	adds	r3, #4
 8012852:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	683a      	ldr	r2, [r7, #0]
 801285e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	2200      	movs	r2, #0
 8012864:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	2201      	movs	r2, #1
 801286a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801286c:	7afb      	ldrb	r3, [r7, #11]
 801286e:	f003 030f 	and.w	r3, r3, #15
 8012872:	b2da      	uxtb	r2, r3
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	799b      	ldrb	r3, [r3, #6]
 801287c:	2b01      	cmp	r3, #1
 801287e:	d102      	bne.n	8012886 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8012880:	687a      	ldr	r2, [r7, #4]
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	6818      	ldr	r0, [r3, #0]
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	799b      	ldrb	r3, [r3, #6]
 801288e:	461a      	mov	r2, r3
 8012890:	6979      	ldr	r1, [r7, #20]
 8012892:	f009 f8ff 	bl	801ba94 <USB_EPStartXfer>

  return HAL_OK;
 8012896:	2300      	movs	r3, #0
}
 8012898:	4618      	mov	r0, r3
 801289a:	3718      	adds	r7, #24
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b084      	sub	sp, #16
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	460b      	mov	r3, r1
 80128aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80128ac:	78fb      	ldrb	r3, [r7, #3]
 80128ae:	f003 030f 	and.w	r3, r3, #15
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	7912      	ldrb	r2, [r2, #4]
 80128b6:	4293      	cmp	r3, r2
 80128b8:	d901      	bls.n	80128be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80128ba:	2301      	movs	r3, #1
 80128bc:	e04f      	b.n	801295e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80128be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	da0f      	bge.n	80128e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80128c6:	78fb      	ldrb	r3, [r7, #3]
 80128c8:	f003 020f 	and.w	r2, r3, #15
 80128cc:	4613      	mov	r3, r2
 80128ce:	00db      	lsls	r3, r3, #3
 80128d0:	4413      	add	r3, r2
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	3310      	adds	r3, #16
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	4413      	add	r3, r2
 80128da:	3304      	adds	r3, #4
 80128dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	2201      	movs	r2, #1
 80128e2:	705a      	strb	r2, [r3, #1]
 80128e4:	e00d      	b.n	8012902 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80128e6:	78fa      	ldrb	r2, [r7, #3]
 80128e8:	4613      	mov	r3, r2
 80128ea:	00db      	lsls	r3, r3, #3
 80128ec:	4413      	add	r3, r2
 80128ee:	009b      	lsls	r3, r3, #2
 80128f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80128f4:	687a      	ldr	r2, [r7, #4]
 80128f6:	4413      	add	r3, r2
 80128f8:	3304      	adds	r3, #4
 80128fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	2200      	movs	r2, #0
 8012900:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2201      	movs	r2, #1
 8012906:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012908:	78fb      	ldrb	r3, [r7, #3]
 801290a:	f003 030f 	and.w	r3, r3, #15
 801290e:	b2da      	uxtb	r2, r3
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 801291a:	2b01      	cmp	r3, #1
 801291c:	d101      	bne.n	8012922 <HAL_PCD_EP_SetStall+0x82>
 801291e:	2302      	movs	r3, #2
 8012920:	e01d      	b.n	801295e <HAL_PCD_EP_SetStall+0xbe>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2201      	movs	r2, #1
 8012926:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	68f9      	ldr	r1, [r7, #12]
 8012930:	4618      	mov	r0, r3
 8012932:	f009 fc93 	bl	801c25c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8012936:	78fb      	ldrb	r3, [r7, #3]
 8012938:	f003 030f 	and.w	r3, r3, #15
 801293c:	2b00      	cmp	r3, #0
 801293e:	d109      	bne.n	8012954 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6818      	ldr	r0, [r3, #0]
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	7999      	ldrb	r1, [r3, #6]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801294e:	461a      	mov	r2, r3
 8012950:	f009 fe86 	bl	801c660 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2200      	movs	r2, #0
 8012958:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 801295c:	2300      	movs	r3, #0
}
 801295e:	4618      	mov	r0, r3
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}

08012966 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012966:	b580      	push	{r7, lr}
 8012968:	b084      	sub	sp, #16
 801296a:	af00      	add	r7, sp, #0
 801296c:	6078      	str	r0, [r7, #4]
 801296e:	460b      	mov	r3, r1
 8012970:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8012972:	78fb      	ldrb	r3, [r7, #3]
 8012974:	f003 030f 	and.w	r3, r3, #15
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	7912      	ldrb	r2, [r2, #4]
 801297c:	4293      	cmp	r3, r2
 801297e:	d901      	bls.n	8012984 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8012980:	2301      	movs	r3, #1
 8012982:	e042      	b.n	8012a0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012988:	2b00      	cmp	r3, #0
 801298a:	da0f      	bge.n	80129ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801298c:	78fb      	ldrb	r3, [r7, #3]
 801298e:	f003 020f 	and.w	r2, r3, #15
 8012992:	4613      	mov	r3, r2
 8012994:	00db      	lsls	r3, r3, #3
 8012996:	4413      	add	r3, r2
 8012998:	009b      	lsls	r3, r3, #2
 801299a:	3310      	adds	r3, #16
 801299c:	687a      	ldr	r2, [r7, #4]
 801299e:	4413      	add	r3, r2
 80129a0:	3304      	adds	r3, #4
 80129a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	2201      	movs	r2, #1
 80129a8:	705a      	strb	r2, [r3, #1]
 80129aa:	e00f      	b.n	80129cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80129ac:	78fb      	ldrb	r3, [r7, #3]
 80129ae:	f003 020f 	and.w	r2, r3, #15
 80129b2:	4613      	mov	r3, r2
 80129b4:	00db      	lsls	r3, r3, #3
 80129b6:	4413      	add	r3, r2
 80129b8:	009b      	lsls	r3, r3, #2
 80129ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80129be:	687a      	ldr	r2, [r7, #4]
 80129c0:	4413      	add	r3, r2
 80129c2:	3304      	adds	r3, #4
 80129c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2200      	movs	r2, #0
 80129ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	2200      	movs	r2, #0
 80129d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80129d2:	78fb      	ldrb	r3, [r7, #3]
 80129d4:	f003 030f 	and.w	r3, r3, #15
 80129d8:	b2da      	uxtb	r2, r3
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d101      	bne.n	80129ec <HAL_PCD_EP_ClrStall+0x86>
 80129e8:	2302      	movs	r3, #2
 80129ea:	e00e      	b.n	8012a0a <HAL_PCD_EP_ClrStall+0xa4>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2201      	movs	r2, #1
 80129f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	68f9      	ldr	r1, [r7, #12]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f009 fc9c 	bl	801c338 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2200      	movs	r2, #0
 8012a04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8012a08:	2300      	movs	r3, #0
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3710      	adds	r7, #16
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}

08012a12 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012a12:	b580      	push	{r7, lr}
 8012a14:	b084      	sub	sp, #16
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8012a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	da0c      	bge.n	8012a40 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012a26:	78fb      	ldrb	r3, [r7, #3]
 8012a28:	f003 020f 	and.w	r2, r3, #15
 8012a2c:	4613      	mov	r3, r2
 8012a2e:	00db      	lsls	r3, r3, #3
 8012a30:	4413      	add	r3, r2
 8012a32:	009b      	lsls	r3, r3, #2
 8012a34:	3310      	adds	r3, #16
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	4413      	add	r3, r2
 8012a3a:	3304      	adds	r3, #4
 8012a3c:	60fb      	str	r3, [r7, #12]
 8012a3e:	e00c      	b.n	8012a5a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012a40:	78fb      	ldrb	r3, [r7, #3]
 8012a42:	f003 020f 	and.w	r2, r3, #15
 8012a46:	4613      	mov	r3, r2
 8012a48:	00db      	lsls	r3, r3, #3
 8012a4a:	4413      	add	r3, r2
 8012a4c:	009b      	lsls	r3, r3, #2
 8012a4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	4413      	add	r3, r2
 8012a56:	3304      	adds	r3, #4
 8012a58:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	68f9      	ldr	r1, [r7, #12]
 8012a60:	4618      	mov	r0, r3
 8012a62:	f009 fabb 	bl	801bfdc <USB_EPStopXfer>
 8012a66:	4603      	mov	r3, r0
 8012a68:	72fb      	strb	r3, [r7, #11]

  return ret;
 8012a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3710      	adds	r7, #16
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b08a      	sub	sp, #40	@ 0x28
 8012a78:	af02      	add	r7, sp, #8
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8012a88:	683a      	ldr	r2, [r7, #0]
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	00db      	lsls	r3, r3, #3
 8012a8e:	4413      	add	r3, r2
 8012a90:	009b      	lsls	r3, r3, #2
 8012a92:	3310      	adds	r3, #16
 8012a94:	687a      	ldr	r2, [r7, #4]
 8012a96:	4413      	add	r3, r2
 8012a98:	3304      	adds	r3, #4
 8012a9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	695a      	ldr	r2, [r3, #20]
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	691b      	ldr	r3, [r3, #16]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d901      	bls.n	8012aac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	e06b      	b.n	8012b84 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	691a      	ldr	r2, [r3, #16]
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	695b      	ldr	r3, [r3, #20]
 8012ab4:	1ad3      	subs	r3, r2, r3
 8012ab6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	689b      	ldr	r3, [r3, #8]
 8012abc:	69fa      	ldr	r2, [r7, #28]
 8012abe:	429a      	cmp	r2, r3
 8012ac0:	d902      	bls.n	8012ac8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	689b      	ldr	r3, [r3, #8]
 8012ac6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8012ac8:	69fb      	ldr	r3, [r7, #28]
 8012aca:	3303      	adds	r3, #3
 8012acc:	089b      	lsrs	r3, r3, #2
 8012ace:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8012ad0:	e02a      	b.n	8012b28 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	691a      	ldr	r2, [r3, #16]
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	695b      	ldr	r3, [r3, #20]
 8012ada:	1ad3      	subs	r3, r2, r3
 8012adc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	689b      	ldr	r3, [r3, #8]
 8012ae2:	69fa      	ldr	r2, [r7, #28]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d902      	bls.n	8012aee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	689b      	ldr	r3, [r3, #8]
 8012aec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8012aee:	69fb      	ldr	r3, [r7, #28]
 8012af0:	3303      	adds	r3, #3
 8012af2:	089b      	lsrs	r3, r3, #2
 8012af4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	68d9      	ldr	r1, [r3, #12]
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	b2da      	uxtb	r2, r3
 8012afe:	69fb      	ldr	r3, [r7, #28]
 8012b00:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8012b06:	9300      	str	r3, [sp, #0]
 8012b08:	4603      	mov	r3, r0
 8012b0a:	6978      	ldr	r0, [r7, #20]
 8012b0c:	f009 fb10 	bl	801c130 <USB_WritePacket>

    ep->xfer_buff  += len;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	68da      	ldr	r2, [r3, #12]
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	441a      	add	r2, r3
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	695a      	ldr	r2, [r3, #20]
 8012b20:	69fb      	ldr	r3, [r7, #28]
 8012b22:	441a      	add	r2, r3
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	015a      	lsls	r2, r3, #5
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	4413      	add	r3, r2
 8012b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012b34:	699b      	ldr	r3, [r3, #24]
 8012b36:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8012b38:	69ba      	ldr	r2, [r7, #24]
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d809      	bhi.n	8012b52 <PCD_WriteEmptyTxFifo+0xde>
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	695a      	ldr	r2, [r3, #20]
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d203      	bcs.n	8012b52 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	691b      	ldr	r3, [r3, #16]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d1bf      	bne.n	8012ad2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	691a      	ldr	r2, [r3, #16]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	695b      	ldr	r3, [r3, #20]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d811      	bhi.n	8012b82 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	f003 030f 	and.w	r3, r3, #15
 8012b64:	2201      	movs	r2, #1
 8012b66:	fa02 f303 	lsl.w	r3, r2, r3
 8012b6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	43db      	mvns	r3, r3
 8012b78:	6939      	ldr	r1, [r7, #16]
 8012b7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012b7e:	4013      	ands	r3, r2
 8012b80:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8012b82:	2300      	movs	r3, #0
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3720      	adds	r7, #32
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b088      	sub	sp, #32
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8012ba0:	69fb      	ldr	r3, [r7, #28]
 8012ba2:	333c      	adds	r3, #60	@ 0x3c
 8012ba4:	3304      	adds	r3, #4
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	015a      	lsls	r2, r3, #5
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	4413      	add	r3, r2
 8012bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012bb6:	689b      	ldr	r3, [r3, #8]
 8012bb8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	799b      	ldrb	r3, [r3, #6]
 8012bbe:	2b01      	cmp	r3, #1
 8012bc0:	d17b      	bne.n	8012cba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	f003 0308 	and.w	r3, r3, #8
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d015      	beq.n	8012bf8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	4a61      	ldr	r2, [pc, #388]	@ (8012d54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8012bd0:	4293      	cmp	r3, r2
 8012bd2:	f240 80b9 	bls.w	8012d48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012bd6:	693b      	ldr	r3, [r7, #16]
 8012bd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	f000 80b3 	beq.w	8012d48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	015a      	lsls	r2, r3, #5
 8012be6:	69bb      	ldr	r3, [r7, #24]
 8012be8:	4413      	add	r3, r2
 8012bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012bee:	461a      	mov	r2, r3
 8012bf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012bf4:	6093      	str	r3, [r2, #8]
 8012bf6:	e0a7      	b.n	8012d48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	f003 0320 	and.w	r3, r3, #32
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d009      	beq.n	8012c16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	015a      	lsls	r2, r3, #5
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	4413      	add	r3, r2
 8012c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c0e:	461a      	mov	r2, r3
 8012c10:	2320      	movs	r3, #32
 8012c12:	6093      	str	r3, [r2, #8]
 8012c14:	e098      	b.n	8012d48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	f040 8093 	bne.w	8012d48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012c22:	697b      	ldr	r3, [r7, #20]
 8012c24:	4a4b      	ldr	r2, [pc, #300]	@ (8012d54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8012c26:	4293      	cmp	r3, r2
 8012c28:	d90f      	bls.n	8012c4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d00a      	beq.n	8012c4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	015a      	lsls	r2, r3, #5
 8012c38:	69bb      	ldr	r3, [r7, #24]
 8012c3a:	4413      	add	r3, r2
 8012c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c40:	461a      	mov	r2, r3
 8012c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012c46:	6093      	str	r3, [r2, #8]
 8012c48:	e07e      	b.n	8012d48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8012c4a:	683a      	ldr	r2, [r7, #0]
 8012c4c:	4613      	mov	r3, r2
 8012c4e:	00db      	lsls	r3, r3, #3
 8012c50:	4413      	add	r3, r2
 8012c52:	009b      	lsls	r3, r3, #2
 8012c54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8012c58:	687a      	ldr	r2, [r7, #4]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	3304      	adds	r3, #4
 8012c5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	6a1a      	ldr	r2, [r3, #32]
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	0159      	lsls	r1, r3, #5
 8012c68:	69bb      	ldr	r3, [r7, #24]
 8012c6a:	440b      	add	r3, r1
 8012c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c70:	691b      	ldr	r3, [r3, #16]
 8012c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012c76:	1ad2      	subs	r2, r2, r3
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d114      	bne.n	8012cac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	691b      	ldr	r3, [r3, #16]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d109      	bne.n	8012c9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	6818      	ldr	r0, [r3, #0]
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012c94:	461a      	mov	r2, r3
 8012c96:	2101      	movs	r1, #1
 8012c98:	f009 fce2 	bl	801c660 <USB_EP0_OutStart>
 8012c9c:	e006      	b.n	8012cac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	68da      	ldr	r2, [r3, #12]
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	695b      	ldr	r3, [r3, #20]
 8012ca6:	441a      	add	r2, r3
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	b2db      	uxtb	r3, r3
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f010 f82e 	bl	8022d14 <HAL_PCD_DataOutStageCallback>
 8012cb8:	e046      	b.n	8012d48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	4a26      	ldr	r2, [pc, #152]	@ (8012d58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8012cbe:	4293      	cmp	r3, r2
 8012cc0:	d124      	bne.n	8012d0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8012cc2:	693b      	ldr	r3, [r7, #16]
 8012cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d00a      	beq.n	8012ce2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	015a      	lsls	r2, r3, #5
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	4413      	add	r3, r2
 8012cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012cd8:	461a      	mov	r2, r3
 8012cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012cde:	6093      	str	r3, [r2, #8]
 8012ce0:	e032      	b.n	8012d48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	f003 0320 	and.w	r3, r3, #32
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d008      	beq.n	8012cfe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	015a      	lsls	r2, r3, #5
 8012cf0:	69bb      	ldr	r3, [r7, #24]
 8012cf2:	4413      	add	r3, r2
 8012cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	2320      	movs	r3, #32
 8012cfc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	b2db      	uxtb	r3, r3
 8012d02:	4619      	mov	r1, r3
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f010 f805 	bl	8022d14 <HAL_PCD_DataOutStageCallback>
 8012d0a:	e01d      	b.n	8012d48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d114      	bne.n	8012d3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8012d12:	6879      	ldr	r1, [r7, #4]
 8012d14:	683a      	ldr	r2, [r7, #0]
 8012d16:	4613      	mov	r3, r2
 8012d18:	00db      	lsls	r3, r3, #3
 8012d1a:	4413      	add	r3, r2
 8012d1c:	009b      	lsls	r3, r3, #2
 8012d1e:	440b      	add	r3, r1
 8012d20:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d108      	bne.n	8012d3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6818      	ldr	r0, [r3, #0]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012d34:	461a      	mov	r2, r3
 8012d36:	2100      	movs	r1, #0
 8012d38:	f009 fc92 	bl	801c660 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	b2db      	uxtb	r3, r3
 8012d40:	4619      	mov	r1, r3
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f00f ffe6 	bl	8022d14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8012d48:	2300      	movs	r3, #0
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3720      	adds	r7, #32
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	4f54300a 	.word	0x4f54300a
 8012d58:	4f54310a 	.word	0x4f54310a

08012d5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b086      	sub	sp, #24
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	333c      	adds	r3, #60	@ 0x3c
 8012d74:	3304      	adds	r3, #4
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	015a      	lsls	r2, r3, #5
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	4413      	add	r3, r2
 8012d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012d86:	689b      	ldr	r3, [r3, #8]
 8012d88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	4a15      	ldr	r2, [pc, #84]	@ (8012de4 <PCD_EP_OutSetupPacket_int+0x88>)
 8012d8e:	4293      	cmp	r3, r2
 8012d90:	d90e      	bls.n	8012db0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d009      	beq.n	8012db0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	015a      	lsls	r2, r3, #5
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	4413      	add	r3, r2
 8012da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012da8:	461a      	mov	r2, r3
 8012daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012dae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f00f ff9d 	bl	8022cf0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	4a0a      	ldr	r2, [pc, #40]	@ (8012de4 <PCD_EP_OutSetupPacket_int+0x88>)
 8012dba:	4293      	cmp	r3, r2
 8012dbc:	d90c      	bls.n	8012dd8 <PCD_EP_OutSetupPacket_int+0x7c>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	799b      	ldrb	r3, [r3, #6]
 8012dc2:	2b01      	cmp	r3, #1
 8012dc4:	d108      	bne.n	8012dd8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6818      	ldr	r0, [r3, #0]
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012dd0:	461a      	mov	r2, r3
 8012dd2:	2101      	movs	r1, #1
 8012dd4:	f009 fc44 	bl	801c660 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8012dd8:	2300      	movs	r3, #0
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	3718      	adds	r7, #24
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
 8012de2:	bf00      	nop
 8012de4:	4f54300a 	.word	0x4f54300a

08012de8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b085      	sub	sp, #20
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	460b      	mov	r3, r1
 8012df2:	70fb      	strb	r3, [r7, #3]
 8012df4:	4613      	mov	r3, r2
 8012df6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012dfe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8012e00:	78fb      	ldrb	r3, [r7, #3]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d107      	bne.n	8012e16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8012e06:	883b      	ldrh	r3, [r7, #0]
 8012e08:	0419      	lsls	r1, r3, #16
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	68ba      	ldr	r2, [r7, #8]
 8012e10:	430a      	orrs	r2, r1
 8012e12:	629a      	str	r2, [r3, #40]	@ 0x28
 8012e14:	e028      	b.n	8012e68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e1c:	0c1b      	lsrs	r3, r3, #16
 8012e1e:	68ba      	ldr	r2, [r7, #8]
 8012e20:	4413      	add	r3, r2
 8012e22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8012e24:	2300      	movs	r3, #0
 8012e26:	73fb      	strb	r3, [r7, #15]
 8012e28:	e00d      	b.n	8012e46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681a      	ldr	r2, [r3, #0]
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
 8012e30:	3340      	adds	r3, #64	@ 0x40
 8012e32:	009b      	lsls	r3, r3, #2
 8012e34:	4413      	add	r3, r2
 8012e36:	685b      	ldr	r3, [r3, #4]
 8012e38:	0c1b      	lsrs	r3, r3, #16
 8012e3a:	68ba      	ldr	r2, [r7, #8]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8012e40:	7bfb      	ldrb	r3, [r7, #15]
 8012e42:	3301      	adds	r3, #1
 8012e44:	73fb      	strb	r3, [r7, #15]
 8012e46:	7bfa      	ldrb	r2, [r7, #15]
 8012e48:	78fb      	ldrb	r3, [r7, #3]
 8012e4a:	3b01      	subs	r3, #1
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d3ec      	bcc.n	8012e2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8012e50:	883b      	ldrh	r3, [r7, #0]
 8012e52:	0418      	lsls	r0, r3, #16
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6819      	ldr	r1, [r3, #0]
 8012e58:	78fb      	ldrb	r3, [r7, #3]
 8012e5a:	3b01      	subs	r3, #1
 8012e5c:	68ba      	ldr	r2, [r7, #8]
 8012e5e:	4302      	orrs	r2, r0
 8012e60:	3340      	adds	r3, #64	@ 0x40
 8012e62:	009b      	lsls	r3, r3, #2
 8012e64:	440b      	add	r3, r1
 8012e66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8012e68:	2300      	movs	r3, #0
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3714      	adds	r7, #20
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e74:	4770      	bx	lr

08012e76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8012e76:	b480      	push	{r7}
 8012e78:	b083      	sub	sp, #12
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
 8012e7e:	460b      	mov	r3, r1
 8012e80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	887a      	ldrh	r2, [r7, #2]
 8012e88:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8012e8a:	2300      	movs	r3, #0
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	370c      	adds	r7, #12
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	4770      	bx	lr

08012e98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b085      	sub	sp, #20
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2201      	movs	r2, #1
 8012eaa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	699b      	ldr	r3, [r3, #24]
 8012eba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012ec6:	4b05      	ldr	r3, [pc, #20]	@ (8012edc <HAL_PCDEx_ActivateLPM+0x44>)
 8012ec8:	4313      	orrs	r3, r2
 8012eca:	68fa      	ldr	r2, [r7, #12]
 8012ecc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8012ece:	2300      	movs	r3, #0
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3714      	adds	r7, #20
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr
 8012edc:	10000003 	.word	0x10000003

08012ee0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b083      	sub	sp, #12
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	460b      	mov	r3, r1
 8012eea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8012eec:	bf00      	nop
 8012eee:	370c      	adds	r7, #12
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr

08012ef8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b084      	sub	sp, #16
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8012f00:	4b19      	ldr	r3, [pc, #100]	@ (8012f68 <HAL_PWREx_ConfigSupply+0x70>)
 8012f02:	68db      	ldr	r3, [r3, #12]
 8012f04:	f003 0304 	and.w	r3, r3, #4
 8012f08:	2b04      	cmp	r3, #4
 8012f0a:	d00a      	beq.n	8012f22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8012f0c:	4b16      	ldr	r3, [pc, #88]	@ (8012f68 <HAL_PWREx_ConfigSupply+0x70>)
 8012f0e:	68db      	ldr	r3, [r3, #12]
 8012f10:	f003 0307 	and.w	r3, r3, #7
 8012f14:	687a      	ldr	r2, [r7, #4]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d001      	beq.n	8012f1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	e01f      	b.n	8012f5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8012f1e:	2300      	movs	r3, #0
 8012f20:	e01d      	b.n	8012f5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8012f22:	4b11      	ldr	r3, [pc, #68]	@ (8012f68 <HAL_PWREx_ConfigSupply+0x70>)
 8012f24:	68db      	ldr	r3, [r3, #12]
 8012f26:	f023 0207 	bic.w	r2, r3, #7
 8012f2a:	490f      	ldr	r1, [pc, #60]	@ (8012f68 <HAL_PWREx_ConfigSupply+0x70>)
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	4313      	orrs	r3, r2
 8012f30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8012f32:	f7f8 fb33 	bl	800b59c <HAL_GetTick>
 8012f36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8012f38:	e009      	b.n	8012f4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8012f3a:	f7f8 fb2f 	bl	800b59c <HAL_GetTick>
 8012f3e:	4602      	mov	r2, r0
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	1ad3      	subs	r3, r2, r3
 8012f44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012f48:	d901      	bls.n	8012f4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	e007      	b.n	8012f5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8012f4e:	4b06      	ldr	r3, [pc, #24]	@ (8012f68 <HAL_PWREx_ConfigSupply+0x70>)
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012f5a:	d1ee      	bne.n	8012f3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8012f5c:	2300      	movs	r3, #0
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3710      	adds	r7, #16
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
 8012f66:	bf00      	nop
 8012f68:	58024800 	.word	0x58024800

08012f6c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8012f70:	4b05      	ldr	r3, [pc, #20]	@ (8012f88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8012f72:	68db      	ldr	r3, [r3, #12]
 8012f74:	4a04      	ldr	r2, [pc, #16]	@ (8012f88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8012f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012f7a:	60d3      	str	r3, [r2, #12]
}
 8012f7c:	bf00      	nop
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f84:	4770      	bx	lr
 8012f86:	bf00      	nop
 8012f88:	58024800 	.word	0x58024800

08012f8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b08c      	sub	sp, #48	@ 0x30
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d101      	bne.n	8012f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	e3c8      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	f003 0301 	and.w	r3, r3, #1
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	f000 8087 	beq.w	80130ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012fac:	4b88      	ldr	r3, [pc, #544]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8012fae:	691b      	ldr	r3, [r3, #16]
 8012fb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8012fb6:	4b86      	ldr	r3, [pc, #536]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8012fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8012fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fbe:	2b10      	cmp	r3, #16
 8012fc0:	d007      	beq.n	8012fd2 <HAL_RCC_OscConfig+0x46>
 8012fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fc4:	2b18      	cmp	r3, #24
 8012fc6:	d110      	bne.n	8012fea <HAL_RCC_OscConfig+0x5e>
 8012fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fca:	f003 0303 	and.w	r3, r3, #3
 8012fce:	2b02      	cmp	r3, #2
 8012fd0:	d10b      	bne.n	8012fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d06c      	beq.n	80130b8 <HAL_RCC_OscConfig+0x12c>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	685b      	ldr	r3, [r3, #4]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d168      	bne.n	80130b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	e3a2      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ff2:	d106      	bne.n	8013002 <HAL_RCC_OscConfig+0x76>
 8012ff4:	4b76      	ldr	r3, [pc, #472]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	4a75      	ldr	r2, [pc, #468]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8012ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012ffe:	6013      	str	r3, [r2, #0]
 8013000:	e02e      	b.n	8013060 <HAL_RCC_OscConfig+0xd4>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	685b      	ldr	r3, [r3, #4]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d10c      	bne.n	8013024 <HAL_RCC_OscConfig+0x98>
 801300a:	4b71      	ldr	r3, [pc, #452]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	4a70      	ldr	r2, [pc, #448]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013014:	6013      	str	r3, [r2, #0]
 8013016:	4b6e      	ldr	r3, [pc, #440]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	4a6d      	ldr	r2, [pc, #436]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 801301c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013020:	6013      	str	r3, [r2, #0]
 8013022:	e01d      	b.n	8013060 <HAL_RCC_OscConfig+0xd4>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	685b      	ldr	r3, [r3, #4]
 8013028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801302c:	d10c      	bne.n	8013048 <HAL_RCC_OscConfig+0xbc>
 801302e:	4b68      	ldr	r3, [pc, #416]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	4a67      	ldr	r2, [pc, #412]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013038:	6013      	str	r3, [r2, #0]
 801303a:	4b65      	ldr	r3, [pc, #404]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	4a64      	ldr	r2, [pc, #400]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013044:	6013      	str	r3, [r2, #0]
 8013046:	e00b      	b.n	8013060 <HAL_RCC_OscConfig+0xd4>
 8013048:	4b61      	ldr	r3, [pc, #388]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4a60      	ldr	r2, [pc, #384]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 801304e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013052:	6013      	str	r3, [r2, #0]
 8013054:	4b5e      	ldr	r3, [pc, #376]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	4a5d      	ldr	r2, [pc, #372]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 801305a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801305e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	685b      	ldr	r3, [r3, #4]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d013      	beq.n	8013090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013068:	f7f8 fa98 	bl	800b59c <HAL_GetTick>
 801306c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801306e:	e008      	b.n	8013082 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013070:	f7f8 fa94 	bl	800b59c <HAL_GetTick>
 8013074:	4602      	mov	r2, r0
 8013076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013078:	1ad3      	subs	r3, r2, r3
 801307a:	2b64      	cmp	r3, #100	@ 0x64
 801307c:	d901      	bls.n	8013082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801307e:	2303      	movs	r3, #3
 8013080:	e356      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013082:	4b53      	ldr	r3, [pc, #332]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801308a:	2b00      	cmp	r3, #0
 801308c:	d0f0      	beq.n	8013070 <HAL_RCC_OscConfig+0xe4>
 801308e:	e014      	b.n	80130ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013090:	f7f8 fa84 	bl	800b59c <HAL_GetTick>
 8013094:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8013096:	e008      	b.n	80130aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013098:	f7f8 fa80 	bl	800b59c <HAL_GetTick>
 801309c:	4602      	mov	r2, r0
 801309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130a0:	1ad3      	subs	r3, r2, r3
 80130a2:	2b64      	cmp	r3, #100	@ 0x64
 80130a4:	d901      	bls.n	80130aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80130a6:	2303      	movs	r3, #3
 80130a8:	e342      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80130aa:	4b49      	ldr	r3, [pc, #292]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d1f0      	bne.n	8013098 <HAL_RCC_OscConfig+0x10c>
 80130b6:	e000      	b.n	80130ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80130b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	f003 0302 	and.w	r3, r3, #2
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	f000 808c 	beq.w	80131e0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80130c8:	4b41      	ldr	r3, [pc, #260]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 80130ca:	691b      	ldr	r3, [r3, #16]
 80130cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80130d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80130d2:	4b3f      	ldr	r3, [pc, #252]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 80130d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80130d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80130d8:	6a3b      	ldr	r3, [r7, #32]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d007      	beq.n	80130ee <HAL_RCC_OscConfig+0x162>
 80130de:	6a3b      	ldr	r3, [r7, #32]
 80130e0:	2b18      	cmp	r3, #24
 80130e2:	d137      	bne.n	8013154 <HAL_RCC_OscConfig+0x1c8>
 80130e4:	69fb      	ldr	r3, [r7, #28]
 80130e6:	f003 0303 	and.w	r3, r3, #3
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d132      	bne.n	8013154 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80130ee:	4b38      	ldr	r3, [pc, #224]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	f003 0304 	and.w	r3, r3, #4
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d005      	beq.n	8013106 <HAL_RCC_OscConfig+0x17a>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d101      	bne.n	8013106 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8013102:	2301      	movs	r3, #1
 8013104:	e314      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8013106:	4b32      	ldr	r3, [pc, #200]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f023 0219 	bic.w	r2, r3, #25
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	68db      	ldr	r3, [r3, #12]
 8013112:	492f      	ldr	r1, [pc, #188]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013114:	4313      	orrs	r3, r2
 8013116:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013118:	f7f8 fa40 	bl	800b59c <HAL_GetTick>
 801311c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801311e:	e008      	b.n	8013132 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013120:	f7f8 fa3c 	bl	800b59c <HAL_GetTick>
 8013124:	4602      	mov	r2, r0
 8013126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013128:	1ad3      	subs	r3, r2, r3
 801312a:	2b02      	cmp	r3, #2
 801312c:	d901      	bls.n	8013132 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801312e:	2303      	movs	r3, #3
 8013130:	e2fe      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013132:	4b27      	ldr	r3, [pc, #156]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	f003 0304 	and.w	r3, r3, #4
 801313a:	2b00      	cmp	r3, #0
 801313c:	d0f0      	beq.n	8013120 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801313e:	4b24      	ldr	r3, [pc, #144]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	691b      	ldr	r3, [r3, #16]
 801314a:	061b      	lsls	r3, r3, #24
 801314c:	4920      	ldr	r1, [pc, #128]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 801314e:	4313      	orrs	r3, r2
 8013150:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013152:	e045      	b.n	80131e0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	68db      	ldr	r3, [r3, #12]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d026      	beq.n	80131aa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801315c:	4b1c      	ldr	r3, [pc, #112]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	f023 0219 	bic.w	r2, r3, #25
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	68db      	ldr	r3, [r3, #12]
 8013168:	4919      	ldr	r1, [pc, #100]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 801316a:	4313      	orrs	r3, r2
 801316c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801316e:	f7f8 fa15 	bl	800b59c <HAL_GetTick>
 8013172:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013174:	e008      	b.n	8013188 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013176:	f7f8 fa11 	bl	800b59c <HAL_GetTick>
 801317a:	4602      	mov	r2, r0
 801317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801317e:	1ad3      	subs	r3, r2, r3
 8013180:	2b02      	cmp	r3, #2
 8013182:	d901      	bls.n	8013188 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8013184:	2303      	movs	r3, #3
 8013186:	e2d3      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013188:	4b11      	ldr	r3, [pc, #68]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	f003 0304 	and.w	r3, r3, #4
 8013190:	2b00      	cmp	r3, #0
 8013192:	d0f0      	beq.n	8013176 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013194:	4b0e      	ldr	r3, [pc, #56]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 8013196:	685b      	ldr	r3, [r3, #4]
 8013198:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	691b      	ldr	r3, [r3, #16]
 80131a0:	061b      	lsls	r3, r3, #24
 80131a2:	490b      	ldr	r1, [pc, #44]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 80131a4:	4313      	orrs	r3, r2
 80131a6:	604b      	str	r3, [r1, #4]
 80131a8:	e01a      	b.n	80131e0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80131aa:	4b09      	ldr	r3, [pc, #36]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	4a08      	ldr	r2, [pc, #32]	@ (80131d0 <HAL_RCC_OscConfig+0x244>)
 80131b0:	f023 0301 	bic.w	r3, r3, #1
 80131b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80131b6:	f7f8 f9f1 	bl	800b59c <HAL_GetTick>
 80131ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80131bc:	e00a      	b.n	80131d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80131be:	f7f8 f9ed 	bl	800b59c <HAL_GetTick>
 80131c2:	4602      	mov	r2, r0
 80131c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131c6:	1ad3      	subs	r3, r2, r3
 80131c8:	2b02      	cmp	r3, #2
 80131ca:	d903      	bls.n	80131d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80131cc:	2303      	movs	r3, #3
 80131ce:	e2af      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
 80131d0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80131d4:	4b96      	ldr	r3, [pc, #600]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	f003 0304 	and.w	r3, r3, #4
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d1ee      	bne.n	80131be <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f003 0310 	and.w	r3, r3, #16
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d06a      	beq.n	80132c2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80131ec:	4b90      	ldr	r3, [pc, #576]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 80131ee:	691b      	ldr	r3, [r3, #16]
 80131f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80131f4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80131f6:	4b8e      	ldr	r3, [pc, #568]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 80131f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131fa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80131fc:	69bb      	ldr	r3, [r7, #24]
 80131fe:	2b08      	cmp	r3, #8
 8013200:	d007      	beq.n	8013212 <HAL_RCC_OscConfig+0x286>
 8013202:	69bb      	ldr	r3, [r7, #24]
 8013204:	2b18      	cmp	r3, #24
 8013206:	d11b      	bne.n	8013240 <HAL_RCC_OscConfig+0x2b4>
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	f003 0303 	and.w	r3, r3, #3
 801320e:	2b01      	cmp	r3, #1
 8013210:	d116      	bne.n	8013240 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013212:	4b87      	ldr	r3, [pc, #540]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801321a:	2b00      	cmp	r3, #0
 801321c:	d005      	beq.n	801322a <HAL_RCC_OscConfig+0x29e>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	69db      	ldr	r3, [r3, #28]
 8013222:	2b80      	cmp	r3, #128	@ 0x80
 8013224:	d001      	beq.n	801322a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8013226:	2301      	movs	r3, #1
 8013228:	e282      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801322a:	4b81      	ldr	r3, [pc, #516]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 801322c:	68db      	ldr	r3, [r3, #12]
 801322e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	6a1b      	ldr	r3, [r3, #32]
 8013236:	061b      	lsls	r3, r3, #24
 8013238:	497d      	ldr	r1, [pc, #500]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 801323a:	4313      	orrs	r3, r2
 801323c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801323e:	e040      	b.n	80132c2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	69db      	ldr	r3, [r3, #28]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d023      	beq.n	8013290 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8013248:	4b79      	ldr	r3, [pc, #484]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	4a78      	ldr	r2, [pc, #480]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 801324e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013254:	f7f8 f9a2 	bl	800b59c <HAL_GetTick>
 8013258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801325a:	e008      	b.n	801326e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801325c:	f7f8 f99e 	bl	800b59c <HAL_GetTick>
 8013260:	4602      	mov	r2, r0
 8013262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013264:	1ad3      	subs	r3, r2, r3
 8013266:	2b02      	cmp	r3, #2
 8013268:	d901      	bls.n	801326e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801326a:	2303      	movs	r3, #3
 801326c:	e260      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801326e:	4b70      	ldr	r3, [pc, #448]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013276:	2b00      	cmp	r3, #0
 8013278:	d0f0      	beq.n	801325c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801327a:	4b6d      	ldr	r3, [pc, #436]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 801327c:	68db      	ldr	r3, [r3, #12]
 801327e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	6a1b      	ldr	r3, [r3, #32]
 8013286:	061b      	lsls	r3, r3, #24
 8013288:	4969      	ldr	r1, [pc, #420]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 801328a:	4313      	orrs	r3, r2
 801328c:	60cb      	str	r3, [r1, #12]
 801328e:	e018      	b.n	80132c2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8013290:	4b67      	ldr	r3, [pc, #412]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	4a66      	ldr	r2, [pc, #408]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801329a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801329c:	f7f8 f97e 	bl	800b59c <HAL_GetTick>
 80132a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80132a2:	e008      	b.n	80132b6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80132a4:	f7f8 f97a 	bl	800b59c <HAL_GetTick>
 80132a8:	4602      	mov	r2, r0
 80132aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132ac:	1ad3      	subs	r3, r2, r3
 80132ae:	2b02      	cmp	r3, #2
 80132b0:	d901      	bls.n	80132b6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80132b2:	2303      	movs	r3, #3
 80132b4:	e23c      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80132b6:	4b5e      	ldr	r3, [pc, #376]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d1f0      	bne.n	80132a4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	f003 0308 	and.w	r3, r3, #8
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d036      	beq.n	801333c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	695b      	ldr	r3, [r3, #20]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d019      	beq.n	801330a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80132d6:	4b56      	ldr	r3, [pc, #344]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 80132d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132da:	4a55      	ldr	r2, [pc, #340]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 80132dc:	f043 0301 	orr.w	r3, r3, #1
 80132e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80132e2:	f7f8 f95b 	bl	800b59c <HAL_GetTick>
 80132e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80132e8:	e008      	b.n	80132fc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80132ea:	f7f8 f957 	bl	800b59c <HAL_GetTick>
 80132ee:	4602      	mov	r2, r0
 80132f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f2:	1ad3      	subs	r3, r2, r3
 80132f4:	2b02      	cmp	r3, #2
 80132f6:	d901      	bls.n	80132fc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80132f8:	2303      	movs	r3, #3
 80132fa:	e219      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80132fc:	4b4c      	ldr	r3, [pc, #304]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 80132fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013300:	f003 0302 	and.w	r3, r3, #2
 8013304:	2b00      	cmp	r3, #0
 8013306:	d0f0      	beq.n	80132ea <HAL_RCC_OscConfig+0x35e>
 8013308:	e018      	b.n	801333c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801330a:	4b49      	ldr	r3, [pc, #292]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 801330c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801330e:	4a48      	ldr	r2, [pc, #288]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013310:	f023 0301 	bic.w	r3, r3, #1
 8013314:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013316:	f7f8 f941 	bl	800b59c <HAL_GetTick>
 801331a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801331c:	e008      	b.n	8013330 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801331e:	f7f8 f93d 	bl	800b59c <HAL_GetTick>
 8013322:	4602      	mov	r2, r0
 8013324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013326:	1ad3      	subs	r3, r2, r3
 8013328:	2b02      	cmp	r3, #2
 801332a:	d901      	bls.n	8013330 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801332c:	2303      	movs	r3, #3
 801332e:	e1ff      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013330:	4b3f      	ldr	r3, [pc, #252]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013334:	f003 0302 	and.w	r3, r3, #2
 8013338:	2b00      	cmp	r3, #0
 801333a:	d1f0      	bne.n	801331e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	f003 0320 	and.w	r3, r3, #32
 8013344:	2b00      	cmp	r3, #0
 8013346:	d036      	beq.n	80133b6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	699b      	ldr	r3, [r3, #24]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d019      	beq.n	8013384 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8013350:	4b37      	ldr	r3, [pc, #220]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	4a36      	ldr	r2, [pc, #216]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013356:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801335a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801335c:	f7f8 f91e 	bl	800b59c <HAL_GetTick>
 8013360:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013362:	e008      	b.n	8013376 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013364:	f7f8 f91a 	bl	800b59c <HAL_GetTick>
 8013368:	4602      	mov	r2, r0
 801336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801336c:	1ad3      	subs	r3, r2, r3
 801336e:	2b02      	cmp	r3, #2
 8013370:	d901      	bls.n	8013376 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8013372:	2303      	movs	r3, #3
 8013374:	e1dc      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013376:	4b2e      	ldr	r3, [pc, #184]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801337e:	2b00      	cmp	r3, #0
 8013380:	d0f0      	beq.n	8013364 <HAL_RCC_OscConfig+0x3d8>
 8013382:	e018      	b.n	80133b6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013384:	4b2a      	ldr	r3, [pc, #168]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	4a29      	ldr	r2, [pc, #164]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 801338a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801338e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8013390:	f7f8 f904 	bl	800b59c <HAL_GetTick>
 8013394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013396:	e008      	b.n	80133aa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013398:	f7f8 f900 	bl	800b59c <HAL_GetTick>
 801339c:	4602      	mov	r2, r0
 801339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133a0:	1ad3      	subs	r3, r2, r3
 80133a2:	2b02      	cmp	r3, #2
 80133a4:	d901      	bls.n	80133aa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80133a6:	2303      	movs	r3, #3
 80133a8:	e1c2      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80133aa:	4b21      	ldr	r3, [pc, #132]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d1f0      	bne.n	8013398 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f003 0304 	and.w	r3, r3, #4
 80133be:	2b00      	cmp	r3, #0
 80133c0:	f000 8086 	beq.w	80134d0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80133c4:	4b1b      	ldr	r3, [pc, #108]	@ (8013434 <HAL_RCC_OscConfig+0x4a8>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	4a1a      	ldr	r2, [pc, #104]	@ (8013434 <HAL_RCC_OscConfig+0x4a8>)
 80133ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80133ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80133d0:	f7f8 f8e4 	bl	800b59c <HAL_GetTick>
 80133d4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80133d6:	e008      	b.n	80133ea <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80133d8:	f7f8 f8e0 	bl	800b59c <HAL_GetTick>
 80133dc:	4602      	mov	r2, r0
 80133de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133e0:	1ad3      	subs	r3, r2, r3
 80133e2:	2b64      	cmp	r3, #100	@ 0x64
 80133e4:	d901      	bls.n	80133ea <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80133e6:	2303      	movs	r3, #3
 80133e8:	e1a2      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80133ea:	4b12      	ldr	r3, [pc, #72]	@ (8013434 <HAL_RCC_OscConfig+0x4a8>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d0f0      	beq.n	80133d8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	689b      	ldr	r3, [r3, #8]
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d106      	bne.n	801340c <HAL_RCC_OscConfig+0x480>
 80133fe:	4b0c      	ldr	r3, [pc, #48]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013402:	4a0b      	ldr	r2, [pc, #44]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013404:	f043 0301 	orr.w	r3, r3, #1
 8013408:	6713      	str	r3, [r2, #112]	@ 0x70
 801340a:	e032      	b.n	8013472 <HAL_RCC_OscConfig+0x4e6>
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	689b      	ldr	r3, [r3, #8]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d111      	bne.n	8013438 <HAL_RCC_OscConfig+0x4ac>
 8013414:	4b06      	ldr	r3, [pc, #24]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013418:	4a05      	ldr	r2, [pc, #20]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 801341a:	f023 0301 	bic.w	r3, r3, #1
 801341e:	6713      	str	r3, [r2, #112]	@ 0x70
 8013420:	4b03      	ldr	r3, [pc, #12]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013424:	4a02      	ldr	r2, [pc, #8]	@ (8013430 <HAL_RCC_OscConfig+0x4a4>)
 8013426:	f023 0304 	bic.w	r3, r3, #4
 801342a:	6713      	str	r3, [r2, #112]	@ 0x70
 801342c:	e021      	b.n	8013472 <HAL_RCC_OscConfig+0x4e6>
 801342e:	bf00      	nop
 8013430:	58024400 	.word	0x58024400
 8013434:	58024800 	.word	0x58024800
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	689b      	ldr	r3, [r3, #8]
 801343c:	2b05      	cmp	r3, #5
 801343e:	d10c      	bne.n	801345a <HAL_RCC_OscConfig+0x4ce>
 8013440:	4b83      	ldr	r3, [pc, #524]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013444:	4a82      	ldr	r2, [pc, #520]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013446:	f043 0304 	orr.w	r3, r3, #4
 801344a:	6713      	str	r3, [r2, #112]	@ 0x70
 801344c:	4b80      	ldr	r3, [pc, #512]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 801344e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013450:	4a7f      	ldr	r2, [pc, #508]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013452:	f043 0301 	orr.w	r3, r3, #1
 8013456:	6713      	str	r3, [r2, #112]	@ 0x70
 8013458:	e00b      	b.n	8013472 <HAL_RCC_OscConfig+0x4e6>
 801345a:	4b7d      	ldr	r3, [pc, #500]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 801345c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801345e:	4a7c      	ldr	r2, [pc, #496]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013460:	f023 0301 	bic.w	r3, r3, #1
 8013464:	6713      	str	r3, [r2, #112]	@ 0x70
 8013466:	4b7a      	ldr	r3, [pc, #488]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801346a:	4a79      	ldr	r2, [pc, #484]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 801346c:	f023 0304 	bic.w	r3, r3, #4
 8013470:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	689b      	ldr	r3, [r3, #8]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d015      	beq.n	80134a6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801347a:	f7f8 f88f 	bl	800b59c <HAL_GetTick>
 801347e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013480:	e00a      	b.n	8013498 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013482:	f7f8 f88b 	bl	800b59c <HAL_GetTick>
 8013486:	4602      	mov	r2, r0
 8013488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801348a:	1ad3      	subs	r3, r2, r3
 801348c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013490:	4293      	cmp	r3, r2
 8013492:	d901      	bls.n	8013498 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8013494:	2303      	movs	r3, #3
 8013496:	e14b      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013498:	4b6d      	ldr	r3, [pc, #436]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 801349a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801349c:	f003 0302 	and.w	r3, r3, #2
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d0ee      	beq.n	8013482 <HAL_RCC_OscConfig+0x4f6>
 80134a4:	e014      	b.n	80134d0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80134a6:	f7f8 f879 	bl	800b59c <HAL_GetTick>
 80134aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80134ac:	e00a      	b.n	80134c4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80134ae:	f7f8 f875 	bl	800b59c <HAL_GetTick>
 80134b2:	4602      	mov	r2, r0
 80134b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b6:	1ad3      	subs	r3, r2, r3
 80134b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80134bc:	4293      	cmp	r3, r2
 80134be:	d901      	bls.n	80134c4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80134c0:	2303      	movs	r3, #3
 80134c2:	e135      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80134c4:	4b62      	ldr	r3, [pc, #392]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80134c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80134c8:	f003 0302 	and.w	r3, r3, #2
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d1ee      	bne.n	80134ae <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f000 812a 	beq.w	801372e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80134da:	4b5d      	ldr	r3, [pc, #372]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80134dc:	691b      	ldr	r3, [r3, #16]
 80134de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80134e2:	2b18      	cmp	r3, #24
 80134e4:	f000 80ba 	beq.w	801365c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134ec:	2b02      	cmp	r3, #2
 80134ee:	f040 8095 	bne.w	801361c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80134f2:	4b57      	ldr	r3, [pc, #348]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	4a56      	ldr	r2, [pc, #344]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80134f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80134fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80134fe:	f7f8 f84d 	bl	800b59c <HAL_GetTick>
 8013502:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013504:	e008      	b.n	8013518 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013506:	f7f8 f849 	bl	800b59c <HAL_GetTick>
 801350a:	4602      	mov	r2, r0
 801350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801350e:	1ad3      	subs	r3, r2, r3
 8013510:	2b02      	cmp	r3, #2
 8013512:	d901      	bls.n	8013518 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8013514:	2303      	movs	r3, #3
 8013516:	e10b      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013518:	4b4d      	ldr	r3, [pc, #308]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013520:	2b00      	cmp	r3, #0
 8013522:	d1f0      	bne.n	8013506 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013524:	4b4a      	ldr	r3, [pc, #296]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013526:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013528:	4b4a      	ldr	r3, [pc, #296]	@ (8013654 <HAL_RCC_OscConfig+0x6c8>)
 801352a:	4013      	ands	r3, r2
 801352c:	687a      	ldr	r2, [r7, #4]
 801352e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8013530:	687a      	ldr	r2, [r7, #4]
 8013532:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013534:	0112      	lsls	r2, r2, #4
 8013536:	430a      	orrs	r2, r1
 8013538:	4945      	ldr	r1, [pc, #276]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 801353a:	4313      	orrs	r3, r2
 801353c:	628b      	str	r3, [r1, #40]	@ 0x28
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013542:	3b01      	subs	r3, #1
 8013544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801354c:	3b01      	subs	r3, #1
 801354e:	025b      	lsls	r3, r3, #9
 8013550:	b29b      	uxth	r3, r3
 8013552:	431a      	orrs	r2, r3
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013558:	3b01      	subs	r3, #1
 801355a:	041b      	lsls	r3, r3, #16
 801355c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013560:	431a      	orrs	r2, r3
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013566:	3b01      	subs	r3, #1
 8013568:	061b      	lsls	r3, r3, #24
 801356a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801356e:	4938      	ldr	r1, [pc, #224]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013570:	4313      	orrs	r3, r2
 8013572:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8013574:	4b36      	ldr	r3, [pc, #216]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013578:	4a35      	ldr	r2, [pc, #212]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 801357a:	f023 0301 	bic.w	r3, r3, #1
 801357e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8013580:	4b33      	ldr	r3, [pc, #204]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013584:	4b34      	ldr	r3, [pc, #208]	@ (8013658 <HAL_RCC_OscConfig+0x6cc>)
 8013586:	4013      	ands	r3, r2
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801358c:	00d2      	lsls	r2, r2, #3
 801358e:	4930      	ldr	r1, [pc, #192]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013590:	4313      	orrs	r3, r2
 8013592:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8013594:	4b2e      	ldr	r3, [pc, #184]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013598:	f023 020c 	bic.w	r2, r3, #12
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135a0:	492b      	ldr	r1, [pc, #172]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135a2:	4313      	orrs	r3, r2
 80135a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80135a6:	4b2a      	ldr	r3, [pc, #168]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135aa:	f023 0202 	bic.w	r2, r3, #2
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135b2:	4927      	ldr	r1, [pc, #156]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135b4:	4313      	orrs	r3, r2
 80135b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80135b8:	4b25      	ldr	r3, [pc, #148]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135bc:	4a24      	ldr	r2, [pc, #144]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80135c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80135c4:	4b22      	ldr	r3, [pc, #136]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135c8:	4a21      	ldr	r2, [pc, #132]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80135ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80135d0:	4b1f      	ldr	r3, [pc, #124]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135d4:	4a1e      	ldr	r2, [pc, #120]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80135da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80135dc:	4b1c      	ldr	r3, [pc, #112]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135e0:	4a1b      	ldr	r2, [pc, #108]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135e2:	f043 0301 	orr.w	r3, r3, #1
 80135e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80135e8:	4b19      	ldr	r3, [pc, #100]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	4a18      	ldr	r2, [pc, #96]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 80135ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80135f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80135f4:	f7f7 ffd2 	bl	800b59c <HAL_GetTick>
 80135f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80135fa:	e008      	b.n	801360e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80135fc:	f7f7 ffce 	bl	800b59c <HAL_GetTick>
 8013600:	4602      	mov	r2, r0
 8013602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013604:	1ad3      	subs	r3, r2, r3
 8013606:	2b02      	cmp	r3, #2
 8013608:	d901      	bls.n	801360e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801360a:	2303      	movs	r3, #3
 801360c:	e090      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801360e:	4b10      	ldr	r3, [pc, #64]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013616:	2b00      	cmp	r3, #0
 8013618:	d0f0      	beq.n	80135fc <HAL_RCC_OscConfig+0x670>
 801361a:	e088      	b.n	801372e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801361c:	4b0c      	ldr	r3, [pc, #48]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	4a0b      	ldr	r2, [pc, #44]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013628:	f7f7 ffb8 	bl	800b59c <HAL_GetTick>
 801362c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801362e:	e008      	b.n	8013642 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013630:	f7f7 ffb4 	bl	800b59c <HAL_GetTick>
 8013634:	4602      	mov	r2, r0
 8013636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	2b02      	cmp	r3, #2
 801363c:	d901      	bls.n	8013642 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801363e:	2303      	movs	r3, #3
 8013640:	e076      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013642:	4b03      	ldr	r3, [pc, #12]	@ (8013650 <HAL_RCC_OscConfig+0x6c4>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801364a:	2b00      	cmp	r3, #0
 801364c:	d1f0      	bne.n	8013630 <HAL_RCC_OscConfig+0x6a4>
 801364e:	e06e      	b.n	801372e <HAL_RCC_OscConfig+0x7a2>
 8013650:	58024400 	.word	0x58024400
 8013654:	fffffc0c 	.word	0xfffffc0c
 8013658:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801365c:	4b36      	ldr	r3, [pc, #216]	@ (8013738 <HAL_RCC_OscConfig+0x7ac>)
 801365e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013660:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8013662:	4b35      	ldr	r3, [pc, #212]	@ (8013738 <HAL_RCC_OscConfig+0x7ac>)
 8013664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013666:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801366c:	2b01      	cmp	r3, #1
 801366e:	d031      	beq.n	80136d4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	f003 0203 	and.w	r2, r3, #3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801367a:	429a      	cmp	r2, r3
 801367c:	d12a      	bne.n	80136d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801367e:	693b      	ldr	r3, [r7, #16]
 8013680:	091b      	lsrs	r3, r3, #4
 8013682:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801368a:	429a      	cmp	r2, r3
 801368c:	d122      	bne.n	80136d4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013698:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801369a:	429a      	cmp	r2, r3
 801369c:	d11a      	bne.n	80136d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	0a5b      	lsrs	r3, r3, #9
 80136a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80136aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80136ac:	429a      	cmp	r2, r3
 80136ae:	d111      	bne.n	80136d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	0c1b      	lsrs	r3, r3, #16
 80136b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80136be:	429a      	cmp	r2, r3
 80136c0:	d108      	bne.n	80136d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	0e1b      	lsrs	r3, r3, #24
 80136c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80136ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d001      	beq.n	80136d8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80136d4:	2301      	movs	r3, #1
 80136d6:	e02b      	b.n	8013730 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80136d8:	4b17      	ldr	r3, [pc, #92]	@ (8013738 <HAL_RCC_OscConfig+0x7ac>)
 80136da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80136dc:	08db      	lsrs	r3, r3, #3
 80136de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80136e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80136e8:	693a      	ldr	r2, [r7, #16]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d01f      	beq.n	801372e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80136ee:	4b12      	ldr	r3, [pc, #72]	@ (8013738 <HAL_RCC_OscConfig+0x7ac>)
 80136f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136f2:	4a11      	ldr	r2, [pc, #68]	@ (8013738 <HAL_RCC_OscConfig+0x7ac>)
 80136f4:	f023 0301 	bic.w	r3, r3, #1
 80136f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80136fa:	f7f7 ff4f 	bl	800b59c <HAL_GetTick>
 80136fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8013700:	bf00      	nop
 8013702:	f7f7 ff4b 	bl	800b59c <HAL_GetTick>
 8013706:	4602      	mov	r2, r0
 8013708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801370a:	4293      	cmp	r3, r2
 801370c:	d0f9      	beq.n	8013702 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801370e:	4b0a      	ldr	r3, [pc, #40]	@ (8013738 <HAL_RCC_OscConfig+0x7ac>)
 8013710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013712:	4b0a      	ldr	r3, [pc, #40]	@ (801373c <HAL_RCC_OscConfig+0x7b0>)
 8013714:	4013      	ands	r3, r2
 8013716:	687a      	ldr	r2, [r7, #4]
 8013718:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801371a:	00d2      	lsls	r2, r2, #3
 801371c:	4906      	ldr	r1, [pc, #24]	@ (8013738 <HAL_RCC_OscConfig+0x7ac>)
 801371e:	4313      	orrs	r3, r2
 8013720:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8013722:	4b05      	ldr	r3, [pc, #20]	@ (8013738 <HAL_RCC_OscConfig+0x7ac>)
 8013724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013726:	4a04      	ldr	r2, [pc, #16]	@ (8013738 <HAL_RCC_OscConfig+0x7ac>)
 8013728:	f043 0301 	orr.w	r3, r3, #1
 801372c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801372e:	2300      	movs	r3, #0
}
 8013730:	4618      	mov	r0, r3
 8013732:	3730      	adds	r7, #48	@ 0x30
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}
 8013738:	58024400 	.word	0x58024400
 801373c:	ffff0007 	.word	0xffff0007

08013740 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b086      	sub	sp, #24
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
 8013748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d101      	bne.n	8013754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013750:	2301      	movs	r3, #1
 8013752:	e19c      	b.n	8013a8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8013754:	4b8a      	ldr	r3, [pc, #552]	@ (8013980 <HAL_RCC_ClockConfig+0x240>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	f003 030f 	and.w	r3, r3, #15
 801375c:	683a      	ldr	r2, [r7, #0]
 801375e:	429a      	cmp	r2, r3
 8013760:	d910      	bls.n	8013784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013762:	4b87      	ldr	r3, [pc, #540]	@ (8013980 <HAL_RCC_ClockConfig+0x240>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	f023 020f 	bic.w	r2, r3, #15
 801376a:	4985      	ldr	r1, [pc, #532]	@ (8013980 <HAL_RCC_ClockConfig+0x240>)
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	4313      	orrs	r3, r2
 8013770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013772:	4b83      	ldr	r3, [pc, #524]	@ (8013980 <HAL_RCC_ClockConfig+0x240>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	f003 030f 	and.w	r3, r3, #15
 801377a:	683a      	ldr	r2, [r7, #0]
 801377c:	429a      	cmp	r2, r3
 801377e:	d001      	beq.n	8013784 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8013780:	2301      	movs	r3, #1
 8013782:	e184      	b.n	8013a8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	f003 0304 	and.w	r3, r3, #4
 801378c:	2b00      	cmp	r3, #0
 801378e:	d010      	beq.n	80137b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	691a      	ldr	r2, [r3, #16]
 8013794:	4b7b      	ldr	r3, [pc, #492]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 8013796:	699b      	ldr	r3, [r3, #24]
 8013798:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801379c:	429a      	cmp	r2, r3
 801379e:	d908      	bls.n	80137b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80137a0:	4b78      	ldr	r3, [pc, #480]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80137a2:	699b      	ldr	r3, [r3, #24]
 80137a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	691b      	ldr	r3, [r3, #16]
 80137ac:	4975      	ldr	r1, [pc, #468]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80137ae:	4313      	orrs	r3, r2
 80137b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	f003 0308 	and.w	r3, r3, #8
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d010      	beq.n	80137e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	695a      	ldr	r2, [r3, #20]
 80137c2:	4b70      	ldr	r3, [pc, #448]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80137c4:	69db      	ldr	r3, [r3, #28]
 80137c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d908      	bls.n	80137e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80137ce:	4b6d      	ldr	r3, [pc, #436]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80137d0:	69db      	ldr	r3, [r3, #28]
 80137d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	695b      	ldr	r3, [r3, #20]
 80137da:	496a      	ldr	r1, [pc, #424]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80137dc:	4313      	orrs	r3, r2
 80137de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	f003 0310 	and.w	r3, r3, #16
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d010      	beq.n	801380e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	699a      	ldr	r2, [r3, #24]
 80137f0:	4b64      	ldr	r3, [pc, #400]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80137f2:	69db      	ldr	r3, [r3, #28]
 80137f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d908      	bls.n	801380e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80137fc:	4b61      	ldr	r3, [pc, #388]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80137fe:	69db      	ldr	r3, [r3, #28]
 8013800:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	699b      	ldr	r3, [r3, #24]
 8013808:	495e      	ldr	r1, [pc, #376]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 801380a:	4313      	orrs	r3, r2
 801380c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f003 0320 	and.w	r3, r3, #32
 8013816:	2b00      	cmp	r3, #0
 8013818:	d010      	beq.n	801383c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	69da      	ldr	r2, [r3, #28]
 801381e:	4b59      	ldr	r3, [pc, #356]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 8013820:	6a1b      	ldr	r3, [r3, #32]
 8013822:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013826:	429a      	cmp	r2, r3
 8013828:	d908      	bls.n	801383c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801382a:	4b56      	ldr	r3, [pc, #344]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 801382c:	6a1b      	ldr	r3, [r3, #32]
 801382e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	69db      	ldr	r3, [r3, #28]
 8013836:	4953      	ldr	r1, [pc, #332]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 8013838:	4313      	orrs	r3, r2
 801383a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	f003 0302 	and.w	r3, r3, #2
 8013844:	2b00      	cmp	r3, #0
 8013846:	d010      	beq.n	801386a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	68da      	ldr	r2, [r3, #12]
 801384c:	4b4d      	ldr	r3, [pc, #308]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 801384e:	699b      	ldr	r3, [r3, #24]
 8013850:	f003 030f 	and.w	r3, r3, #15
 8013854:	429a      	cmp	r2, r3
 8013856:	d908      	bls.n	801386a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013858:	4b4a      	ldr	r3, [pc, #296]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 801385a:	699b      	ldr	r3, [r3, #24]
 801385c:	f023 020f 	bic.w	r2, r3, #15
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	68db      	ldr	r3, [r3, #12]
 8013864:	4947      	ldr	r1, [pc, #284]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 8013866:	4313      	orrs	r3, r2
 8013868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	f003 0301 	and.w	r3, r3, #1
 8013872:	2b00      	cmp	r3, #0
 8013874:	d055      	beq.n	8013922 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8013876:	4b43      	ldr	r3, [pc, #268]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 8013878:	699b      	ldr	r3, [r3, #24]
 801387a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	689b      	ldr	r3, [r3, #8]
 8013882:	4940      	ldr	r1, [pc, #256]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 8013884:	4313      	orrs	r3, r2
 8013886:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	2b02      	cmp	r3, #2
 801388e:	d107      	bne.n	80138a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013890:	4b3c      	ldr	r3, [pc, #240]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013898:	2b00      	cmp	r3, #0
 801389a:	d121      	bne.n	80138e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801389c:	2301      	movs	r3, #1
 801389e:	e0f6      	b.n	8013a8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	2b03      	cmp	r3, #3
 80138a6:	d107      	bne.n	80138b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80138a8:	4b36      	ldr	r3, [pc, #216]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d115      	bne.n	80138e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80138b4:	2301      	movs	r3, #1
 80138b6:	e0ea      	b.n	8013a8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	2b01      	cmp	r3, #1
 80138be:	d107      	bne.n	80138d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80138c0:	4b30      	ldr	r3, [pc, #192]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d109      	bne.n	80138e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80138cc:	2301      	movs	r3, #1
 80138ce:	e0de      	b.n	8013a8e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80138d0:	4b2c      	ldr	r3, [pc, #176]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	f003 0304 	and.w	r3, r3, #4
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d101      	bne.n	80138e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80138dc:	2301      	movs	r3, #1
 80138de:	e0d6      	b.n	8013a8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80138e0:	4b28      	ldr	r3, [pc, #160]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80138e2:	691b      	ldr	r3, [r3, #16]
 80138e4:	f023 0207 	bic.w	r2, r3, #7
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	685b      	ldr	r3, [r3, #4]
 80138ec:	4925      	ldr	r1, [pc, #148]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 80138ee:	4313      	orrs	r3, r2
 80138f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80138f2:	f7f7 fe53 	bl	800b59c <HAL_GetTick>
 80138f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80138f8:	e00a      	b.n	8013910 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80138fa:	f7f7 fe4f 	bl	800b59c <HAL_GetTick>
 80138fe:	4602      	mov	r2, r0
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	1ad3      	subs	r3, r2, r3
 8013904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013908:	4293      	cmp	r3, r2
 801390a:	d901      	bls.n	8013910 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801390c:	2303      	movs	r3, #3
 801390e:	e0be      	b.n	8013a8e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013910:	4b1c      	ldr	r3, [pc, #112]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 8013912:	691b      	ldr	r3, [r3, #16]
 8013914:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	00db      	lsls	r3, r3, #3
 801391e:	429a      	cmp	r2, r3
 8013920:	d1eb      	bne.n	80138fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	f003 0302 	and.w	r3, r3, #2
 801392a:	2b00      	cmp	r3, #0
 801392c:	d010      	beq.n	8013950 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	68da      	ldr	r2, [r3, #12]
 8013932:	4b14      	ldr	r3, [pc, #80]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 8013934:	699b      	ldr	r3, [r3, #24]
 8013936:	f003 030f 	and.w	r3, r3, #15
 801393a:	429a      	cmp	r2, r3
 801393c:	d208      	bcs.n	8013950 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801393e:	4b11      	ldr	r3, [pc, #68]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 8013940:	699b      	ldr	r3, [r3, #24]
 8013942:	f023 020f 	bic.w	r2, r3, #15
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	68db      	ldr	r3, [r3, #12]
 801394a:	490e      	ldr	r1, [pc, #56]	@ (8013984 <HAL_RCC_ClockConfig+0x244>)
 801394c:	4313      	orrs	r3, r2
 801394e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8013950:	4b0b      	ldr	r3, [pc, #44]	@ (8013980 <HAL_RCC_ClockConfig+0x240>)
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	f003 030f 	and.w	r3, r3, #15
 8013958:	683a      	ldr	r2, [r7, #0]
 801395a:	429a      	cmp	r2, r3
 801395c:	d214      	bcs.n	8013988 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801395e:	4b08      	ldr	r3, [pc, #32]	@ (8013980 <HAL_RCC_ClockConfig+0x240>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	f023 020f 	bic.w	r2, r3, #15
 8013966:	4906      	ldr	r1, [pc, #24]	@ (8013980 <HAL_RCC_ClockConfig+0x240>)
 8013968:	683b      	ldr	r3, [r7, #0]
 801396a:	4313      	orrs	r3, r2
 801396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801396e:	4b04      	ldr	r3, [pc, #16]	@ (8013980 <HAL_RCC_ClockConfig+0x240>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	f003 030f 	and.w	r3, r3, #15
 8013976:	683a      	ldr	r2, [r7, #0]
 8013978:	429a      	cmp	r2, r3
 801397a:	d005      	beq.n	8013988 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801397c:	2301      	movs	r3, #1
 801397e:	e086      	b.n	8013a8e <HAL_RCC_ClockConfig+0x34e>
 8013980:	52002000 	.word	0x52002000
 8013984:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f003 0304 	and.w	r3, r3, #4
 8013990:	2b00      	cmp	r3, #0
 8013992:	d010      	beq.n	80139b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	691a      	ldr	r2, [r3, #16]
 8013998:	4b3f      	ldr	r3, [pc, #252]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 801399a:	699b      	ldr	r3, [r3, #24]
 801399c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d208      	bcs.n	80139b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80139a4:	4b3c      	ldr	r3, [pc, #240]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 80139a6:	699b      	ldr	r3, [r3, #24]
 80139a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	691b      	ldr	r3, [r3, #16]
 80139b0:	4939      	ldr	r1, [pc, #228]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 80139b2:	4313      	orrs	r3, r2
 80139b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f003 0308 	and.w	r3, r3, #8
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d010      	beq.n	80139e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	695a      	ldr	r2, [r3, #20]
 80139c6:	4b34      	ldr	r3, [pc, #208]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 80139c8:	69db      	ldr	r3, [r3, #28]
 80139ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d208      	bcs.n	80139e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80139d2:	4b31      	ldr	r3, [pc, #196]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 80139d4:	69db      	ldr	r3, [r3, #28]
 80139d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	695b      	ldr	r3, [r3, #20]
 80139de:	492e      	ldr	r1, [pc, #184]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 80139e0:	4313      	orrs	r3, r2
 80139e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f003 0310 	and.w	r3, r3, #16
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d010      	beq.n	8013a12 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	699a      	ldr	r2, [r3, #24]
 80139f4:	4b28      	ldr	r3, [pc, #160]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 80139f6:	69db      	ldr	r3, [r3, #28]
 80139f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d208      	bcs.n	8013a12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8013a00:	4b25      	ldr	r3, [pc, #148]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 8013a02:	69db      	ldr	r3, [r3, #28]
 8013a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	699b      	ldr	r3, [r3, #24]
 8013a0c:	4922      	ldr	r1, [pc, #136]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 8013a0e:	4313      	orrs	r3, r2
 8013a10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f003 0320 	and.w	r3, r3, #32
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d010      	beq.n	8013a40 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	69da      	ldr	r2, [r3, #28]
 8013a22:	4b1d      	ldr	r3, [pc, #116]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 8013a24:	6a1b      	ldr	r3, [r3, #32]
 8013a26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	d208      	bcs.n	8013a40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8013a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 8013a30:	6a1b      	ldr	r3, [r3, #32]
 8013a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	69db      	ldr	r3, [r3, #28]
 8013a3a:	4917      	ldr	r1, [pc, #92]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 8013a3c:	4313      	orrs	r3, r2
 8013a3e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8013a40:	f000 f834 	bl	8013aac <HAL_RCC_GetSysClockFreq>
 8013a44:	4602      	mov	r2, r0
 8013a46:	4b14      	ldr	r3, [pc, #80]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 8013a48:	699b      	ldr	r3, [r3, #24]
 8013a4a:	0a1b      	lsrs	r3, r3, #8
 8013a4c:	f003 030f 	and.w	r3, r3, #15
 8013a50:	4912      	ldr	r1, [pc, #72]	@ (8013a9c <HAL_RCC_ClockConfig+0x35c>)
 8013a52:	5ccb      	ldrb	r3, [r1, r3]
 8013a54:	f003 031f 	and.w	r3, r3, #31
 8013a58:	fa22 f303 	lsr.w	r3, r2, r3
 8013a5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8013a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8013a98 <HAL_RCC_ClockConfig+0x358>)
 8013a60:	699b      	ldr	r3, [r3, #24]
 8013a62:	f003 030f 	and.w	r3, r3, #15
 8013a66:	4a0d      	ldr	r2, [pc, #52]	@ (8013a9c <HAL_RCC_ClockConfig+0x35c>)
 8013a68:	5cd3      	ldrb	r3, [r2, r3]
 8013a6a:	f003 031f 	and.w	r3, r3, #31
 8013a6e:	693a      	ldr	r2, [r7, #16]
 8013a70:	fa22 f303 	lsr.w	r3, r2, r3
 8013a74:	4a0a      	ldr	r2, [pc, #40]	@ (8013aa0 <HAL_RCC_ClockConfig+0x360>)
 8013a76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8013a78:	4a0a      	ldr	r2, [pc, #40]	@ (8013aa4 <HAL_RCC_ClockConfig+0x364>)
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8013a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8013aa8 <HAL_RCC_ClockConfig+0x368>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7f7 fa5a 	bl	800af3c <HAL_InitTick>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8013a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3718      	adds	r7, #24
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	58024400 	.word	0x58024400
 8013a9c:	0802be58 	.word	0x0802be58
 8013aa0:	24000294 	.word	0x24000294
 8013aa4:	24000290 	.word	0x24000290
 8013aa8:	24000298 	.word	0x24000298

08013aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013aac:	b480      	push	{r7}
 8013aae:	b089      	sub	sp, #36	@ 0x24
 8013ab0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013ab2:	4bb3      	ldr	r3, [pc, #716]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013ab4:	691b      	ldr	r3, [r3, #16]
 8013ab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013aba:	2b18      	cmp	r3, #24
 8013abc:	f200 8155 	bhi.w	8013d6a <HAL_RCC_GetSysClockFreq+0x2be>
 8013ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8013ac8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8013ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ac6:	bf00      	nop
 8013ac8:	08013b2d 	.word	0x08013b2d
 8013acc:	08013d6b 	.word	0x08013d6b
 8013ad0:	08013d6b 	.word	0x08013d6b
 8013ad4:	08013d6b 	.word	0x08013d6b
 8013ad8:	08013d6b 	.word	0x08013d6b
 8013adc:	08013d6b 	.word	0x08013d6b
 8013ae0:	08013d6b 	.word	0x08013d6b
 8013ae4:	08013d6b 	.word	0x08013d6b
 8013ae8:	08013b53 	.word	0x08013b53
 8013aec:	08013d6b 	.word	0x08013d6b
 8013af0:	08013d6b 	.word	0x08013d6b
 8013af4:	08013d6b 	.word	0x08013d6b
 8013af8:	08013d6b 	.word	0x08013d6b
 8013afc:	08013d6b 	.word	0x08013d6b
 8013b00:	08013d6b 	.word	0x08013d6b
 8013b04:	08013d6b 	.word	0x08013d6b
 8013b08:	08013b59 	.word	0x08013b59
 8013b0c:	08013d6b 	.word	0x08013d6b
 8013b10:	08013d6b 	.word	0x08013d6b
 8013b14:	08013d6b 	.word	0x08013d6b
 8013b18:	08013d6b 	.word	0x08013d6b
 8013b1c:	08013d6b 	.word	0x08013d6b
 8013b20:	08013d6b 	.word	0x08013d6b
 8013b24:	08013d6b 	.word	0x08013d6b
 8013b28:	08013b5f 	.word	0x08013b5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013b2c:	4b94      	ldr	r3, [pc, #592]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	f003 0320 	and.w	r3, r3, #32
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d009      	beq.n	8013b4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013b38:	4b91      	ldr	r3, [pc, #580]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	08db      	lsrs	r3, r3, #3
 8013b3e:	f003 0303 	and.w	r3, r3, #3
 8013b42:	4a90      	ldr	r2, [pc, #576]	@ (8013d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013b44:	fa22 f303 	lsr.w	r3, r2, r3
 8013b48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8013b4a:	e111      	b.n	8013d70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8013b4c:	4b8d      	ldr	r3, [pc, #564]	@ (8013d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013b4e:	61bb      	str	r3, [r7, #24]
      break;
 8013b50:	e10e      	b.n	8013d70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8013b52:	4b8d      	ldr	r3, [pc, #564]	@ (8013d88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8013b54:	61bb      	str	r3, [r7, #24]
      break;
 8013b56:	e10b      	b.n	8013d70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8013b58:	4b8c      	ldr	r3, [pc, #560]	@ (8013d8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8013b5a:	61bb      	str	r3, [r7, #24]
      break;
 8013b5c:	e108      	b.n	8013d70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013b5e:	4b88      	ldr	r3, [pc, #544]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b62:	f003 0303 	and.w	r3, r3, #3
 8013b66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8013b68:	4b85      	ldr	r3, [pc, #532]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b6c:	091b      	lsrs	r3, r3, #4
 8013b6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013b72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8013b74:	4b82      	ldr	r3, [pc, #520]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b78:	f003 0301 	and.w	r3, r3, #1
 8013b7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8013b7e:	4b80      	ldr	r3, [pc, #512]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b82:	08db      	lsrs	r3, r3, #3
 8013b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b88:	68fa      	ldr	r2, [r7, #12]
 8013b8a:	fb02 f303 	mul.w	r3, r2, r3
 8013b8e:	ee07 3a90 	vmov	s15, r3
 8013b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8013b9a:	693b      	ldr	r3, [r7, #16]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f000 80e1 	beq.w	8013d64 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	2b02      	cmp	r3, #2
 8013ba6:	f000 8083 	beq.w	8013cb0 <HAL_RCC_GetSysClockFreq+0x204>
 8013baa:	697b      	ldr	r3, [r7, #20]
 8013bac:	2b02      	cmp	r3, #2
 8013bae:	f200 80a1 	bhi.w	8013cf4 <HAL_RCC_GetSysClockFreq+0x248>
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d003      	beq.n	8013bc0 <HAL_RCC_GetSysClockFreq+0x114>
 8013bb8:	697b      	ldr	r3, [r7, #20]
 8013bba:	2b01      	cmp	r3, #1
 8013bbc:	d056      	beq.n	8013c6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8013bbe:	e099      	b.n	8013cf4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	f003 0320 	and.w	r3, r3, #32
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d02d      	beq.n	8013c28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	08db      	lsrs	r3, r3, #3
 8013bd2:	f003 0303 	and.w	r3, r3, #3
 8013bd6:	4a6b      	ldr	r2, [pc, #428]	@ (8013d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8013bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8013bdc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	ee07 3a90 	vmov	s15, r3
 8013be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	ee07 3a90 	vmov	s15, r3
 8013bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013bf6:	4b62      	ldr	r3, [pc, #392]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bfe:	ee07 3a90 	vmov	s15, r3
 8013c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8013c0a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8013d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8013c26:	e087      	b.n	8013d38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	ee07 3a90 	vmov	s15, r3
 8013c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c32:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8013d94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8013c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c3a:	4b51      	ldr	r3, [pc, #324]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c42:	ee07 3a90 	vmov	s15, r3
 8013c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8013c4e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8013d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013c6a:	e065      	b.n	8013d38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	ee07 3a90 	vmov	s15, r3
 8013c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c76:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8013d98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8013c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c7e:	4b40      	ldr	r3, [pc, #256]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c86:	ee07 3a90 	vmov	s15, r3
 8013c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8013c92:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013caa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013cae:	e043      	b.n	8013d38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013cb0:	693b      	ldr	r3, [r7, #16]
 8013cb2:	ee07 3a90 	vmov	s15, r3
 8013cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8013d9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8013cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cca:	ee07 3a90 	vmov	s15, r3
 8013cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8013cd6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8013d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013cee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013cf2:	e021      	b.n	8013d38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	ee07 3a90 	vmov	s15, r3
 8013cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cfe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8013d98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8013d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d06:	4b1e      	ldr	r3, [pc, #120]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d0e:	ee07 3a90 	vmov	s15, r3
 8013d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8013d1a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8013d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8013d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8013d36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8013d38:	4b11      	ldr	r3, [pc, #68]	@ (8013d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8013d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d3c:	0a5b      	lsrs	r3, r3, #9
 8013d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d42:	3301      	adds	r3, #1
 8013d44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	ee07 3a90 	vmov	s15, r3
 8013d4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8013d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d5c:	ee17 3a90 	vmov	r3, s15
 8013d60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8013d62:	e005      	b.n	8013d70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8013d64:	2300      	movs	r3, #0
 8013d66:	61bb      	str	r3, [r7, #24]
      break;
 8013d68:	e002      	b.n	8013d70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8013d6a:	4b07      	ldr	r3, [pc, #28]	@ (8013d88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8013d6c:	61bb      	str	r3, [r7, #24]
      break;
 8013d6e:	bf00      	nop
  }

  return sysclockfreq;
 8013d70:	69bb      	ldr	r3, [r7, #24]
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3724      	adds	r7, #36	@ 0x24
 8013d76:	46bd      	mov	sp, r7
 8013d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7c:	4770      	bx	lr
 8013d7e:	bf00      	nop
 8013d80:	58024400 	.word	0x58024400
 8013d84:	03d09000 	.word	0x03d09000
 8013d88:	003d0900 	.word	0x003d0900
 8013d8c:	007a1200 	.word	0x007a1200
 8013d90:	46000000 	.word	0x46000000
 8013d94:	4c742400 	.word	0x4c742400
 8013d98:	4a742400 	.word	0x4a742400
 8013d9c:	4af42400 	.word	0x4af42400

08013da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8013da6:	f7ff fe81 	bl	8013aac <HAL_RCC_GetSysClockFreq>
 8013daa:	4602      	mov	r2, r0
 8013dac:	4b10      	ldr	r3, [pc, #64]	@ (8013df0 <HAL_RCC_GetHCLKFreq+0x50>)
 8013dae:	699b      	ldr	r3, [r3, #24]
 8013db0:	0a1b      	lsrs	r3, r3, #8
 8013db2:	f003 030f 	and.w	r3, r3, #15
 8013db6:	490f      	ldr	r1, [pc, #60]	@ (8013df4 <HAL_RCC_GetHCLKFreq+0x54>)
 8013db8:	5ccb      	ldrb	r3, [r1, r3]
 8013dba:	f003 031f 	and.w	r3, r3, #31
 8013dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8013dc2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8013dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8013df0 <HAL_RCC_GetHCLKFreq+0x50>)
 8013dc6:	699b      	ldr	r3, [r3, #24]
 8013dc8:	f003 030f 	and.w	r3, r3, #15
 8013dcc:	4a09      	ldr	r2, [pc, #36]	@ (8013df4 <HAL_RCC_GetHCLKFreq+0x54>)
 8013dce:	5cd3      	ldrb	r3, [r2, r3]
 8013dd0:	f003 031f 	and.w	r3, r3, #31
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8013dda:	4a07      	ldr	r2, [pc, #28]	@ (8013df8 <HAL_RCC_GetHCLKFreq+0x58>)
 8013ddc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8013dde:	4a07      	ldr	r2, [pc, #28]	@ (8013dfc <HAL_RCC_GetHCLKFreq+0x5c>)
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8013de4:	4b04      	ldr	r3, [pc, #16]	@ (8013df8 <HAL_RCC_GetHCLKFreq+0x58>)
 8013de6:	681b      	ldr	r3, [r3, #0]
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3708      	adds	r7, #8
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}
 8013df0:	58024400 	.word	0x58024400
 8013df4:	0802be58 	.word	0x0802be58
 8013df8:	24000294 	.word	0x24000294
 8013dfc:	24000290 	.word	0x24000290

08013e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8013e04:	f7ff ffcc 	bl	8013da0 <HAL_RCC_GetHCLKFreq>
 8013e08:	4602      	mov	r2, r0
 8013e0a:	4b06      	ldr	r3, [pc, #24]	@ (8013e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013e0c:	69db      	ldr	r3, [r3, #28]
 8013e0e:	091b      	lsrs	r3, r3, #4
 8013e10:	f003 0307 	and.w	r3, r3, #7
 8013e14:	4904      	ldr	r1, [pc, #16]	@ (8013e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8013e16:	5ccb      	ldrb	r3, [r1, r3]
 8013e18:	f003 031f 	and.w	r3, r3, #31
 8013e1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8013e20:	4618      	mov	r0, r3
 8013e22:	bd80      	pop	{r7, pc}
 8013e24:	58024400 	.word	0x58024400
 8013e28:	0802be58 	.word	0x0802be58

08013e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8013e30:	f7ff ffb6 	bl	8013da0 <HAL_RCC_GetHCLKFreq>
 8013e34:	4602      	mov	r2, r0
 8013e36:	4b06      	ldr	r3, [pc, #24]	@ (8013e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013e38:	69db      	ldr	r3, [r3, #28]
 8013e3a:	0a1b      	lsrs	r3, r3, #8
 8013e3c:	f003 0307 	and.w	r3, r3, #7
 8013e40:	4904      	ldr	r1, [pc, #16]	@ (8013e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8013e42:	5ccb      	ldrb	r3, [r1, r3]
 8013e44:	f003 031f 	and.w	r3, r3, #31
 8013e48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	bd80      	pop	{r7, pc}
 8013e50:	58024400 	.word	0x58024400
 8013e54:	0802be58 	.word	0x0802be58

08013e58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013e58:	b480      	push	{r7}
 8013e5a:	b083      	sub	sp, #12
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
 8013e60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	223f      	movs	r2, #63	@ 0x3f
 8013e66:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013e68:	4b1a      	ldr	r3, [pc, #104]	@ (8013ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8013e6a:	691b      	ldr	r3, [r3, #16]
 8013e6c:	f003 0207 	and.w	r2, r3, #7
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8013e74:	4b17      	ldr	r3, [pc, #92]	@ (8013ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8013e76:	699b      	ldr	r3, [r3, #24]
 8013e78:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8013e80:	4b14      	ldr	r3, [pc, #80]	@ (8013ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8013e82:	699b      	ldr	r3, [r3, #24]
 8013e84:	f003 020f 	and.w	r2, r3, #15
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8013e8c:	4b11      	ldr	r3, [pc, #68]	@ (8013ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8013e8e:	699b      	ldr	r3, [r3, #24]
 8013e90:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8013e98:	4b0e      	ldr	r3, [pc, #56]	@ (8013ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8013e9a:	69db      	ldr	r3, [r3, #28]
 8013e9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8013ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8013ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8013ea6:	69db      	ldr	r3, [r3, #28]
 8013ea8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8013eb0:	4b08      	ldr	r3, [pc, #32]	@ (8013ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8013eb2:	6a1b      	ldr	r3, [r3, #32]
 8013eb4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013ebc:	4b06      	ldr	r3, [pc, #24]	@ (8013ed8 <HAL_RCC_GetClockConfig+0x80>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f003 020f 	and.w	r2, r3, #15
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	601a      	str	r2, [r3, #0]
}
 8013ec8:	bf00      	nop
 8013eca:	370c      	adds	r7, #12
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed2:	4770      	bx	lr
 8013ed4:	58024400 	.word	0x58024400
 8013ed8:	52002000 	.word	0x52002000

08013edc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013ee0:	b0c6      	sub	sp, #280	@ 0x118
 8013ee2:	af00      	add	r7, sp, #0
 8013ee4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8013ee8:	2300      	movs	r3, #0
 8013eea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8013eee:	2300      	movs	r3, #0
 8013ef0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8013ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013efc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8013f00:	2500      	movs	r5, #0
 8013f02:	ea54 0305 	orrs.w	r3, r4, r5
 8013f06:	d049      	beq.n	8013f9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8013f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013f0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8013f12:	d02f      	beq.n	8013f74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8013f14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8013f18:	d828      	bhi.n	8013f6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8013f1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013f1e:	d01a      	beq.n	8013f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8013f20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013f24:	d822      	bhi.n	8013f6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d003      	beq.n	8013f32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8013f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013f2e:	d007      	beq.n	8013f40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8013f30:	e01c      	b.n	8013f6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013f32:	4bab      	ldr	r3, [pc, #684]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8013f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f36:	4aaa      	ldr	r2, [pc, #680]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8013f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013f3e:	e01a      	b.n	8013f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013f44:	3308      	adds	r3, #8
 8013f46:	2102      	movs	r1, #2
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f002 fa49 	bl	80163e0 <RCCEx_PLL2_Config>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013f54:	e00f      	b.n	8013f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013f5a:	3328      	adds	r3, #40	@ 0x28
 8013f5c:	2102      	movs	r1, #2
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f002 faf0 	bl	8016544 <RCCEx_PLL3_Config>
 8013f64:	4603      	mov	r3, r0
 8013f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8013f6a:	e004      	b.n	8013f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013f72:	e000      	b.n	8013f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8013f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013f76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d10a      	bne.n	8013f94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8013f7e:	4b98      	ldr	r3, [pc, #608]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8013f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013f82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8013f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013f8c:	4a94      	ldr	r2, [pc, #592]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8013f8e:	430b      	orrs	r3, r1
 8013f90:	6513      	str	r3, [r2, #80]	@ 0x50
 8013f92:	e003      	b.n	8013f9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013f98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8013f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8013fa8:	f04f 0900 	mov.w	r9, #0
 8013fac:	ea58 0309 	orrs.w	r3, r8, r9
 8013fb0:	d047      	beq.n	8014042 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8013fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013fb8:	2b04      	cmp	r3, #4
 8013fba:	d82a      	bhi.n	8014012 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8013fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8013fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8013fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fc2:	bf00      	nop
 8013fc4:	08013fd9 	.word	0x08013fd9
 8013fc8:	08013fe7 	.word	0x08013fe7
 8013fcc:	08013ffd 	.word	0x08013ffd
 8013fd0:	0801401b 	.word	0x0801401b
 8013fd4:	0801401b 	.word	0x0801401b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013fd8:	4b81      	ldr	r3, [pc, #516]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8013fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fdc:	4a80      	ldr	r2, [pc, #512]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8013fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013fe4:	e01a      	b.n	801401c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013fea:	3308      	adds	r3, #8
 8013fec:	2100      	movs	r1, #0
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f002 f9f6 	bl	80163e0 <RCCEx_PLL2_Config>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8013ffa:	e00f      	b.n	801401c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014000:	3328      	adds	r3, #40	@ 0x28
 8014002:	2100      	movs	r1, #0
 8014004:	4618      	mov	r0, r3
 8014006:	f002 fa9d 	bl	8016544 <RCCEx_PLL3_Config>
 801400a:	4603      	mov	r3, r0
 801400c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014010:	e004      	b.n	801401c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014012:	2301      	movs	r3, #1
 8014014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014018:	e000      	b.n	801401c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801401a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801401c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014020:	2b00      	cmp	r3, #0
 8014022:	d10a      	bne.n	801403a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8014024:	4b6e      	ldr	r3, [pc, #440]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014028:	f023 0107 	bic.w	r1, r3, #7
 801402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014032:	4a6b      	ldr	r2, [pc, #428]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014034:	430b      	orrs	r3, r1
 8014036:	6513      	str	r3, [r2, #80]	@ 0x50
 8014038:	e003      	b.n	8014042 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801403a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801403e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8014042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801404a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 801404e:	f04f 0b00 	mov.w	fp, #0
 8014052:	ea5a 030b 	orrs.w	r3, sl, fp
 8014056:	d05b      	beq.n	8014110 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8014058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801405c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014060:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8014064:	d03b      	beq.n	80140de <HAL_RCCEx_PeriphCLKConfig+0x202>
 8014066:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 801406a:	d834      	bhi.n	80140d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801406c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014070:	d037      	beq.n	80140e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8014072:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014076:	d82e      	bhi.n	80140d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8014078:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801407c:	d033      	beq.n	80140e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801407e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8014082:	d828      	bhi.n	80140d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8014084:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014088:	d01a      	beq.n	80140c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801408a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801408e:	d822      	bhi.n	80140d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8014090:	2b00      	cmp	r3, #0
 8014092:	d003      	beq.n	801409c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8014094:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014098:	d007      	beq.n	80140aa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801409a:	e01c      	b.n	80140d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801409c:	4b50      	ldr	r3, [pc, #320]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140a0:	4a4f      	ldr	r2, [pc, #316]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80140a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80140a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80140a8:	e01e      	b.n	80140e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80140aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80140ae:	3308      	adds	r3, #8
 80140b0:	2100      	movs	r1, #0
 80140b2:	4618      	mov	r0, r3
 80140b4:	f002 f994 	bl	80163e0 <RCCEx_PLL2_Config>
 80140b8:	4603      	mov	r3, r0
 80140ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80140be:	e013      	b.n	80140e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80140c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80140c4:	3328      	adds	r3, #40	@ 0x28
 80140c6:	2100      	movs	r1, #0
 80140c8:	4618      	mov	r0, r3
 80140ca:	f002 fa3b 	bl	8016544 <RCCEx_PLL3_Config>
 80140ce:	4603      	mov	r3, r0
 80140d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80140d4:	e008      	b.n	80140e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80140d6:	2301      	movs	r3, #1
 80140d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80140dc:	e004      	b.n	80140e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80140de:	bf00      	nop
 80140e0:	e002      	b.n	80140e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80140e2:	bf00      	nop
 80140e4:	e000      	b.n	80140e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80140e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80140e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d10b      	bne.n	8014108 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80140f0:	4b3b      	ldr	r3, [pc, #236]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80140f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80140f4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80140f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80140fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014100:	4a37      	ldr	r2, [pc, #220]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014102:	430b      	orrs	r3, r1
 8014104:	6593      	str	r3, [r2, #88]	@ 0x58
 8014106:	e003      	b.n	8014110 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014108:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801410c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8014110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014118:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801411c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8014120:	2300      	movs	r3, #0
 8014122:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8014126:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801412a:	460b      	mov	r3, r1
 801412c:	4313      	orrs	r3, r2
 801412e:	d05d      	beq.n	80141ec <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8014130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014134:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014138:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801413c:	d03b      	beq.n	80141b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801413e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8014142:	d834      	bhi.n	80141ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8014144:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014148:	d037      	beq.n	80141ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801414a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801414e:	d82e      	bhi.n	80141ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8014150:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8014154:	d033      	beq.n	80141be <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8014156:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801415a:	d828      	bhi.n	80141ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801415c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014160:	d01a      	beq.n	8014198 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8014162:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014166:	d822      	bhi.n	80141ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8014168:	2b00      	cmp	r3, #0
 801416a:	d003      	beq.n	8014174 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801416c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014170:	d007      	beq.n	8014182 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8014172:	e01c      	b.n	80141ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014174:	4b1a      	ldr	r3, [pc, #104]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8014176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014178:	4a19      	ldr	r2, [pc, #100]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801417a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801417e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8014180:	e01e      	b.n	80141c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014186:	3308      	adds	r3, #8
 8014188:	2100      	movs	r1, #0
 801418a:	4618      	mov	r0, r3
 801418c:	f002 f928 	bl	80163e0 <RCCEx_PLL2_Config>
 8014190:	4603      	mov	r3, r0
 8014192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8014196:	e013      	b.n	80141c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801419c:	3328      	adds	r3, #40	@ 0x28
 801419e:	2100      	movs	r1, #0
 80141a0:	4618      	mov	r0, r3
 80141a2:	f002 f9cf 	bl	8016544 <RCCEx_PLL3_Config>
 80141a6:	4603      	mov	r3, r0
 80141a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80141ac:	e008      	b.n	80141c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80141ae:	2301      	movs	r3, #1
 80141b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80141b4:	e004      	b.n	80141c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80141b6:	bf00      	nop
 80141b8:	e002      	b.n	80141c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80141ba:	bf00      	nop
 80141bc:	e000      	b.n	80141c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80141be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80141c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d10d      	bne.n	80141e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80141c8:	4b05      	ldr	r3, [pc, #20]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80141ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80141cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80141d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80141d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80141d8:	4a01      	ldr	r2, [pc, #4]	@ (80141e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80141da:	430b      	orrs	r3, r1
 80141dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80141de:	e005      	b.n	80141ec <HAL_RCCEx_PeriphCLKConfig+0x310>
 80141e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80141e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80141e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80141ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80141f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80141f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80141fc:	2300      	movs	r3, #0
 80141fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8014202:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8014206:	460b      	mov	r3, r1
 8014208:	4313      	orrs	r3, r2
 801420a:	d03a      	beq.n	8014282 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 801420c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014212:	2b30      	cmp	r3, #48	@ 0x30
 8014214:	d01f      	beq.n	8014256 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8014216:	2b30      	cmp	r3, #48	@ 0x30
 8014218:	d819      	bhi.n	801424e <HAL_RCCEx_PeriphCLKConfig+0x372>
 801421a:	2b20      	cmp	r3, #32
 801421c:	d00c      	beq.n	8014238 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801421e:	2b20      	cmp	r3, #32
 8014220:	d815      	bhi.n	801424e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8014222:	2b00      	cmp	r3, #0
 8014224:	d019      	beq.n	801425a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8014226:	2b10      	cmp	r3, #16
 8014228:	d111      	bne.n	801424e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801422a:	4baa      	ldr	r3, [pc, #680]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801422e:	4aa9      	ldr	r2, [pc, #676]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014234:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8014236:	e011      	b.n	801425c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801423c:	3308      	adds	r3, #8
 801423e:	2102      	movs	r1, #2
 8014240:	4618      	mov	r0, r3
 8014242:	f002 f8cd 	bl	80163e0 <RCCEx_PLL2_Config>
 8014246:	4603      	mov	r3, r0
 8014248:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801424c:	e006      	b.n	801425c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801424e:	2301      	movs	r3, #1
 8014250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014254:	e002      	b.n	801425c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8014256:	bf00      	nop
 8014258:	e000      	b.n	801425c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801425a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801425c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014260:	2b00      	cmp	r3, #0
 8014262:	d10a      	bne.n	801427a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8014264:	4b9b      	ldr	r3, [pc, #620]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014268:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801426c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014272:	4a98      	ldr	r2, [pc, #608]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014274:	430b      	orrs	r3, r1
 8014276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8014278:	e003      	b.n	8014282 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801427a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801427e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8014282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801428a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801428e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8014292:	2300      	movs	r3, #0
 8014294:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8014298:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801429c:	460b      	mov	r3, r1
 801429e:	4313      	orrs	r3, r2
 80142a0:	d051      	beq.n	8014346 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80142a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80142a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80142a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80142ac:	d035      	beq.n	801431a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80142ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80142b2:	d82e      	bhi.n	8014312 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80142b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80142b8:	d031      	beq.n	801431e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80142ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80142be:	d828      	bhi.n	8014312 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80142c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80142c4:	d01a      	beq.n	80142fc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80142c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80142ca:	d822      	bhi.n	8014312 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d003      	beq.n	80142d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80142d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80142d4:	d007      	beq.n	80142e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80142d6:	e01c      	b.n	8014312 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80142d8:	4b7e      	ldr	r3, [pc, #504]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80142da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142dc:	4a7d      	ldr	r2, [pc, #500]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80142de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80142e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80142e4:	e01c      	b.n	8014320 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80142e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80142ea:	3308      	adds	r3, #8
 80142ec:	2100      	movs	r1, #0
 80142ee:	4618      	mov	r0, r3
 80142f0:	f002 f876 	bl	80163e0 <RCCEx_PLL2_Config>
 80142f4:	4603      	mov	r3, r0
 80142f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80142fa:	e011      	b.n	8014320 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80142fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014300:	3328      	adds	r3, #40	@ 0x28
 8014302:	2100      	movs	r1, #0
 8014304:	4618      	mov	r0, r3
 8014306:	f002 f91d 	bl	8016544 <RCCEx_PLL3_Config>
 801430a:	4603      	mov	r3, r0
 801430c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8014310:	e006      	b.n	8014320 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014312:	2301      	movs	r3, #1
 8014314:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014318:	e002      	b.n	8014320 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801431a:	bf00      	nop
 801431c:	e000      	b.n	8014320 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801431e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014324:	2b00      	cmp	r3, #0
 8014326:	d10a      	bne.n	801433e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8014328:	4b6a      	ldr	r3, [pc, #424]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801432c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8014330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014336:	4a67      	ldr	r2, [pc, #412]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014338:	430b      	orrs	r3, r1
 801433a:	6513      	str	r3, [r2, #80]	@ 0x50
 801433c:	e003      	b.n	8014346 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801433e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014342:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8014346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8014352:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8014356:	2300      	movs	r3, #0
 8014358:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801435c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8014360:	460b      	mov	r3, r1
 8014362:	4313      	orrs	r3, r2
 8014364:	d053      	beq.n	801440e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8014366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801436a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801436c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014370:	d033      	beq.n	80143da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8014372:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014376:	d82c      	bhi.n	80143d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8014378:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801437c:	d02f      	beq.n	80143de <HAL_RCCEx_PeriphCLKConfig+0x502>
 801437e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8014382:	d826      	bhi.n	80143d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8014384:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8014388:	d02b      	beq.n	80143e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801438a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801438e:	d820      	bhi.n	80143d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8014390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014394:	d012      	beq.n	80143bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8014396:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801439a:	d81a      	bhi.n	80143d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801439c:	2b00      	cmp	r3, #0
 801439e:	d022      	beq.n	80143e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80143a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80143a4:	d115      	bne.n	80143d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80143a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80143aa:	3308      	adds	r3, #8
 80143ac:	2101      	movs	r1, #1
 80143ae:	4618      	mov	r0, r3
 80143b0:	f002 f816 	bl	80163e0 <RCCEx_PLL2_Config>
 80143b4:	4603      	mov	r3, r0
 80143b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80143ba:	e015      	b.n	80143e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80143bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80143c0:	3328      	adds	r3, #40	@ 0x28
 80143c2:	2101      	movs	r1, #1
 80143c4:	4618      	mov	r0, r3
 80143c6:	f002 f8bd 	bl	8016544 <RCCEx_PLL3_Config>
 80143ca:	4603      	mov	r3, r0
 80143cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80143d0:	e00a      	b.n	80143e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80143d2:	2301      	movs	r3, #1
 80143d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80143d8:	e006      	b.n	80143e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80143da:	bf00      	nop
 80143dc:	e004      	b.n	80143e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80143de:	bf00      	nop
 80143e0:	e002      	b.n	80143e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80143e2:	bf00      	nop
 80143e4:	e000      	b.n	80143e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80143e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80143e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d10a      	bne.n	8014406 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80143f0:	4b38      	ldr	r3, [pc, #224]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80143f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80143f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80143f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80143fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80143fe:	4a35      	ldr	r2, [pc, #212]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8014400:	430b      	orrs	r3, r1
 8014402:	6513      	str	r3, [r2, #80]	@ 0x50
 8014404:	e003      	b.n	801440e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014406:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801440a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801440e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014416:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801441a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801441e:	2300      	movs	r3, #0
 8014420:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8014424:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8014428:	460b      	mov	r3, r1
 801442a:	4313      	orrs	r3, r2
 801442c:	d058      	beq.n	80144e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801442e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014432:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014436:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801443a:	d033      	beq.n	80144a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 801443c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014440:	d82c      	bhi.n	801449c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8014442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014446:	d02f      	beq.n	80144a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8014448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801444c:	d826      	bhi.n	801449c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801444e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014452:	d02b      	beq.n	80144ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8014454:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014458:	d820      	bhi.n	801449c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801445a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801445e:	d012      	beq.n	8014486 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8014460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014464:	d81a      	bhi.n	801449c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8014466:	2b00      	cmp	r3, #0
 8014468:	d022      	beq.n	80144b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801446a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801446e:	d115      	bne.n	801449c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014474:	3308      	adds	r3, #8
 8014476:	2101      	movs	r1, #1
 8014478:	4618      	mov	r0, r3
 801447a:	f001 ffb1 	bl	80163e0 <RCCEx_PLL2_Config>
 801447e:	4603      	mov	r3, r0
 8014480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8014484:	e015      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801448a:	3328      	adds	r3, #40	@ 0x28
 801448c:	2101      	movs	r1, #1
 801448e:	4618      	mov	r0, r3
 8014490:	f002 f858 	bl	8016544 <RCCEx_PLL3_Config>
 8014494:	4603      	mov	r3, r0
 8014496:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801449a:	e00a      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801449c:	2301      	movs	r3, #1
 801449e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80144a2:	e006      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80144a4:	bf00      	nop
 80144a6:	e004      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80144a8:	bf00      	nop
 80144aa:	e002      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80144ac:	bf00      	nop
 80144ae:	e000      	b.n	80144b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80144b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80144b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d10e      	bne.n	80144d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80144ba:	4b06      	ldr	r3, [pc, #24]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80144bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80144be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80144c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80144c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80144ca:	4a02      	ldr	r2, [pc, #8]	@ (80144d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80144cc:	430b      	orrs	r3, r1
 80144ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80144d0:	e006      	b.n	80144e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80144d2:	bf00      	nop
 80144d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80144d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80144dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80144e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80144e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80144ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80144f0:	2300      	movs	r3, #0
 80144f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80144f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80144fa:	460b      	mov	r3, r1
 80144fc:	4313      	orrs	r3, r2
 80144fe:	d037      	beq.n	8014570 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8014500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801450a:	d00e      	beq.n	801452a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 801450c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014510:	d816      	bhi.n	8014540 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8014512:	2b00      	cmp	r3, #0
 8014514:	d018      	beq.n	8014548 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8014516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801451a:	d111      	bne.n	8014540 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801451c:	4bc4      	ldr	r3, [pc, #784]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014520:	4ac3      	ldr	r2, [pc, #780]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8014528:	e00f      	b.n	801454a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801452a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801452e:	3308      	adds	r3, #8
 8014530:	2101      	movs	r1, #1
 8014532:	4618      	mov	r0, r3
 8014534:	f001 ff54 	bl	80163e0 <RCCEx_PLL2_Config>
 8014538:	4603      	mov	r3, r0
 801453a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801453e:	e004      	b.n	801454a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014540:	2301      	movs	r3, #1
 8014542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014546:	e000      	b.n	801454a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8014548:	bf00      	nop
    }

    if (ret == HAL_OK)
 801454a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801454e:	2b00      	cmp	r3, #0
 8014550:	d10a      	bne.n	8014568 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8014552:	4bb7      	ldr	r3, [pc, #732]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014556:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801455a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801455e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014560:	4ab3      	ldr	r2, [pc, #716]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014562:	430b      	orrs	r3, r1
 8014564:	6513      	str	r3, [r2, #80]	@ 0x50
 8014566:	e003      	b.n	8014570 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014568:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801456c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8014570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014578:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801457c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014580:	2300      	movs	r3, #0
 8014582:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8014586:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801458a:	460b      	mov	r3, r1
 801458c:	4313      	orrs	r3, r2
 801458e:	d039      	beq.n	8014604 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8014590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014596:	2b03      	cmp	r3, #3
 8014598:	d81c      	bhi.n	80145d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801459a:	a201      	add	r2, pc, #4	@ (adr r2, 80145a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 801459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145a0:	080145dd 	.word	0x080145dd
 80145a4:	080145b1 	.word	0x080145b1
 80145a8:	080145bf 	.word	0x080145bf
 80145ac:	080145dd 	.word	0x080145dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80145b0:	4b9f      	ldr	r3, [pc, #636]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80145b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145b4:	4a9e      	ldr	r2, [pc, #632]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80145b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80145ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80145bc:	e00f      	b.n	80145de <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80145be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80145c2:	3308      	adds	r3, #8
 80145c4:	2102      	movs	r1, #2
 80145c6:	4618      	mov	r0, r3
 80145c8:	f001 ff0a 	bl	80163e0 <RCCEx_PLL2_Config>
 80145cc:	4603      	mov	r3, r0
 80145ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80145d2:	e004      	b.n	80145de <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80145d4:	2301      	movs	r3, #1
 80145d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80145da:	e000      	b.n	80145de <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80145dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80145de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d10a      	bne.n	80145fc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80145e6:	4b92      	ldr	r3, [pc, #584]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80145e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80145ea:	f023 0103 	bic.w	r1, r3, #3
 80145ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80145f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80145f4:	4a8e      	ldr	r2, [pc, #568]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80145f6:	430b      	orrs	r3, r1
 80145f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80145fa:	e003      	b.n	8014604 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80145fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014600:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8014610:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014614:	2300      	movs	r3, #0
 8014616:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801461a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801461e:	460b      	mov	r3, r1
 8014620:	4313      	orrs	r3, r2
 8014622:	f000 8099 	beq.w	8014758 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014626:	4b83      	ldr	r3, [pc, #524]	@ (8014834 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	4a82      	ldr	r2, [pc, #520]	@ (8014834 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801462c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014630:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014632:	f7f6 ffb3 	bl	800b59c <HAL_GetTick>
 8014636:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801463a:	e00b      	b.n	8014654 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801463c:	f7f6 ffae 	bl	800b59c <HAL_GetTick>
 8014640:	4602      	mov	r2, r0
 8014642:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8014646:	1ad3      	subs	r3, r2, r3
 8014648:	2b64      	cmp	r3, #100	@ 0x64
 801464a:	d903      	bls.n	8014654 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 801464c:	2303      	movs	r3, #3
 801464e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014652:	e005      	b.n	8014660 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014654:	4b77      	ldr	r3, [pc, #476]	@ (8014834 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801465c:	2b00      	cmp	r3, #0
 801465e:	d0ed      	beq.n	801463c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8014660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014664:	2b00      	cmp	r3, #0
 8014666:	d173      	bne.n	8014750 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8014668:	4b71      	ldr	r3, [pc, #452]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801466a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801466c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014674:	4053      	eors	r3, r2
 8014676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801467a:	2b00      	cmp	r3, #0
 801467c:	d015      	beq.n	80146aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801467e:	4b6c      	ldr	r3, [pc, #432]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014686:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801468a:	4b69      	ldr	r3, [pc, #420]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801468c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801468e:	4a68      	ldr	r2, [pc, #416]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014694:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8014696:	4b66      	ldr	r3, [pc, #408]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801469a:	4a65      	ldr	r2, [pc, #404]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801469c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80146a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80146a2:	4a63      	ldr	r2, [pc, #396]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80146a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80146a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80146aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80146ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80146b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80146b6:	d118      	bne.n	80146ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80146b8:	f7f6 ff70 	bl	800b59c <HAL_GetTick>
 80146bc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80146c0:	e00d      	b.n	80146de <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80146c2:	f7f6 ff6b 	bl	800b59c <HAL_GetTick>
 80146c6:	4602      	mov	r2, r0
 80146c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80146cc:	1ad2      	subs	r2, r2, r3
 80146ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80146d2:	429a      	cmp	r2, r3
 80146d4:	d903      	bls.n	80146de <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80146d6:	2303      	movs	r3, #3
 80146d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80146dc:	e005      	b.n	80146ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80146de:	4b54      	ldr	r3, [pc, #336]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80146e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80146e2:	f003 0302 	and.w	r3, r3, #2
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d0eb      	beq.n	80146c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80146ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d129      	bne.n	8014746 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80146f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80146f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80146fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80146fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014702:	d10e      	bne.n	8014722 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8014704:	4b4a      	ldr	r3, [pc, #296]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014706:	691b      	ldr	r3, [r3, #16]
 8014708:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801470c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014710:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014714:	091a      	lsrs	r2, r3, #4
 8014716:	4b48      	ldr	r3, [pc, #288]	@ (8014838 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8014718:	4013      	ands	r3, r2
 801471a:	4a45      	ldr	r2, [pc, #276]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801471c:	430b      	orrs	r3, r1
 801471e:	6113      	str	r3, [r2, #16]
 8014720:	e005      	b.n	801472e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8014722:	4b43      	ldr	r3, [pc, #268]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014724:	691b      	ldr	r3, [r3, #16]
 8014726:	4a42      	ldr	r2, [pc, #264]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014728:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801472c:	6113      	str	r3, [r2, #16]
 801472e:	4b40      	ldr	r3, [pc, #256]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014730:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8014732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014736:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801473a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801473e:	4a3c      	ldr	r2, [pc, #240]	@ (8014830 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8014740:	430b      	orrs	r3, r1
 8014742:	6713      	str	r3, [r2, #112]	@ 0x70
 8014744:	e008      	b.n	8014758 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8014746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801474a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801474e:	e003      	b.n	8014758 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014754:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8014758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014760:	f002 0301 	and.w	r3, r2, #1
 8014764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014768:	2300      	movs	r3, #0
 801476a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801476e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8014772:	460b      	mov	r3, r1
 8014774:	4313      	orrs	r3, r2
 8014776:	f000 808f 	beq.w	8014898 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801477a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801477e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014780:	2b28      	cmp	r3, #40	@ 0x28
 8014782:	d871      	bhi.n	8014868 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8014784:	a201      	add	r2, pc, #4	@ (adr r2, 801478c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8014786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801478a:	bf00      	nop
 801478c:	08014871 	.word	0x08014871
 8014790:	08014869 	.word	0x08014869
 8014794:	08014869 	.word	0x08014869
 8014798:	08014869 	.word	0x08014869
 801479c:	08014869 	.word	0x08014869
 80147a0:	08014869 	.word	0x08014869
 80147a4:	08014869 	.word	0x08014869
 80147a8:	08014869 	.word	0x08014869
 80147ac:	0801483d 	.word	0x0801483d
 80147b0:	08014869 	.word	0x08014869
 80147b4:	08014869 	.word	0x08014869
 80147b8:	08014869 	.word	0x08014869
 80147bc:	08014869 	.word	0x08014869
 80147c0:	08014869 	.word	0x08014869
 80147c4:	08014869 	.word	0x08014869
 80147c8:	08014869 	.word	0x08014869
 80147cc:	08014853 	.word	0x08014853
 80147d0:	08014869 	.word	0x08014869
 80147d4:	08014869 	.word	0x08014869
 80147d8:	08014869 	.word	0x08014869
 80147dc:	08014869 	.word	0x08014869
 80147e0:	08014869 	.word	0x08014869
 80147e4:	08014869 	.word	0x08014869
 80147e8:	08014869 	.word	0x08014869
 80147ec:	08014871 	.word	0x08014871
 80147f0:	08014869 	.word	0x08014869
 80147f4:	08014869 	.word	0x08014869
 80147f8:	08014869 	.word	0x08014869
 80147fc:	08014869 	.word	0x08014869
 8014800:	08014869 	.word	0x08014869
 8014804:	08014869 	.word	0x08014869
 8014808:	08014869 	.word	0x08014869
 801480c:	08014871 	.word	0x08014871
 8014810:	08014869 	.word	0x08014869
 8014814:	08014869 	.word	0x08014869
 8014818:	08014869 	.word	0x08014869
 801481c:	08014869 	.word	0x08014869
 8014820:	08014869 	.word	0x08014869
 8014824:	08014869 	.word	0x08014869
 8014828:	08014869 	.word	0x08014869
 801482c:	08014871 	.word	0x08014871
 8014830:	58024400 	.word	0x58024400
 8014834:	58024800 	.word	0x58024800
 8014838:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801483c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014840:	3308      	adds	r3, #8
 8014842:	2101      	movs	r1, #1
 8014844:	4618      	mov	r0, r3
 8014846:	f001 fdcb 	bl	80163e0 <RCCEx_PLL2_Config>
 801484a:	4603      	mov	r3, r0
 801484c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8014850:	e00f      	b.n	8014872 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014856:	3328      	adds	r3, #40	@ 0x28
 8014858:	2101      	movs	r1, #1
 801485a:	4618      	mov	r0, r3
 801485c:	f001 fe72 	bl	8016544 <RCCEx_PLL3_Config>
 8014860:	4603      	mov	r3, r0
 8014862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8014866:	e004      	b.n	8014872 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014868:	2301      	movs	r3, #1
 801486a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801486e:	e000      	b.n	8014872 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8014870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014872:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014876:	2b00      	cmp	r3, #0
 8014878:	d10a      	bne.n	8014890 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801487a:	4bbf      	ldr	r3, [pc, #764]	@ (8014b78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801487c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801487e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8014882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014886:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014888:	4abb      	ldr	r2, [pc, #748]	@ (8014b78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801488a:	430b      	orrs	r3, r1
 801488c:	6553      	str	r3, [r2, #84]	@ 0x54
 801488e:	e003      	b.n	8014898 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014894:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8014898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148a0:	f002 0302 	and.w	r3, r2, #2
 80148a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80148a8:	2300      	movs	r3, #0
 80148aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80148ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80148b2:	460b      	mov	r3, r1
 80148b4:	4313      	orrs	r3, r2
 80148b6:	d041      	beq.n	801493c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80148b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80148bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80148be:	2b05      	cmp	r3, #5
 80148c0:	d824      	bhi.n	801490c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80148c2:	a201      	add	r2, pc, #4	@ (adr r2, 80148c8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80148c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148c8:	08014915 	.word	0x08014915
 80148cc:	080148e1 	.word	0x080148e1
 80148d0:	080148f7 	.word	0x080148f7
 80148d4:	08014915 	.word	0x08014915
 80148d8:	08014915 	.word	0x08014915
 80148dc:	08014915 	.word	0x08014915
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80148e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80148e4:	3308      	adds	r3, #8
 80148e6:	2101      	movs	r1, #1
 80148e8:	4618      	mov	r0, r3
 80148ea:	f001 fd79 	bl	80163e0 <RCCEx_PLL2_Config>
 80148ee:	4603      	mov	r3, r0
 80148f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80148f4:	e00f      	b.n	8014916 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80148f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80148fa:	3328      	adds	r3, #40	@ 0x28
 80148fc:	2101      	movs	r1, #1
 80148fe:	4618      	mov	r0, r3
 8014900:	f001 fe20 	bl	8016544 <RCCEx_PLL3_Config>
 8014904:	4603      	mov	r3, r0
 8014906:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801490a:	e004      	b.n	8014916 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801490c:	2301      	movs	r3, #1
 801490e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014912:	e000      	b.n	8014916 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8014914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801491a:	2b00      	cmp	r3, #0
 801491c:	d10a      	bne.n	8014934 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801491e:	4b96      	ldr	r3, [pc, #600]	@ (8014b78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8014920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014922:	f023 0107 	bic.w	r1, r3, #7
 8014926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801492a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801492c:	4a92      	ldr	r2, [pc, #584]	@ (8014b78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801492e:	430b      	orrs	r3, r1
 8014930:	6553      	str	r3, [r2, #84]	@ 0x54
 8014932:	e003      	b.n	801493c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014938:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801493c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014944:	f002 0304 	and.w	r3, r2, #4
 8014948:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801494c:	2300      	movs	r3, #0
 801494e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014952:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8014956:	460b      	mov	r3, r1
 8014958:	4313      	orrs	r3, r2
 801495a:	d044      	beq.n	80149e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801495c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014964:	2b05      	cmp	r3, #5
 8014966:	d825      	bhi.n	80149b4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8014968:	a201      	add	r2, pc, #4	@ (adr r2, 8014970 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 801496a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801496e:	bf00      	nop
 8014970:	080149bd 	.word	0x080149bd
 8014974:	08014989 	.word	0x08014989
 8014978:	0801499f 	.word	0x0801499f
 801497c:	080149bd 	.word	0x080149bd
 8014980:	080149bd 	.word	0x080149bd
 8014984:	080149bd 	.word	0x080149bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8014988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801498c:	3308      	adds	r3, #8
 801498e:	2101      	movs	r1, #1
 8014990:	4618      	mov	r0, r3
 8014992:	f001 fd25 	bl	80163e0 <RCCEx_PLL2_Config>
 8014996:	4603      	mov	r3, r0
 8014998:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801499c:	e00f      	b.n	80149be <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801499e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80149a2:	3328      	adds	r3, #40	@ 0x28
 80149a4:	2101      	movs	r1, #1
 80149a6:	4618      	mov	r0, r3
 80149a8:	f001 fdcc 	bl	8016544 <RCCEx_PLL3_Config>
 80149ac:	4603      	mov	r3, r0
 80149ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80149b2:	e004      	b.n	80149be <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80149b4:	2301      	movs	r3, #1
 80149b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80149ba:	e000      	b.n	80149be <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80149bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80149be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d10b      	bne.n	80149de <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80149c6:	4b6c      	ldr	r3, [pc, #432]	@ (8014b78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80149c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80149ca:	f023 0107 	bic.w	r1, r3, #7
 80149ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80149d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80149d6:	4a68      	ldr	r2, [pc, #416]	@ (8014b78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80149d8:	430b      	orrs	r3, r1
 80149da:	6593      	str	r3, [r2, #88]	@ 0x58
 80149dc:	e003      	b.n	80149e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80149de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80149e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80149e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80149ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ee:	f002 0320 	and.w	r3, r2, #32
 80149f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80149f6:	2300      	movs	r3, #0
 80149f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80149fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8014a00:	460b      	mov	r3, r1
 8014a02:	4313      	orrs	r3, r2
 8014a04:	d055      	beq.n	8014ab2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8014a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014a12:	d033      	beq.n	8014a7c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8014a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014a18:	d82c      	bhi.n	8014a74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8014a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a1e:	d02f      	beq.n	8014a80 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8014a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a24:	d826      	bhi.n	8014a74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8014a26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014a2a:	d02b      	beq.n	8014a84 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8014a2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014a30:	d820      	bhi.n	8014a74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8014a32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014a36:	d012      	beq.n	8014a5e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8014a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014a3c:	d81a      	bhi.n	8014a74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d022      	beq.n	8014a88 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8014a42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014a46:	d115      	bne.n	8014a74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014a4c:	3308      	adds	r3, #8
 8014a4e:	2100      	movs	r1, #0
 8014a50:	4618      	mov	r0, r3
 8014a52:	f001 fcc5 	bl	80163e0 <RCCEx_PLL2_Config>
 8014a56:	4603      	mov	r3, r0
 8014a58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8014a5c:	e015      	b.n	8014a8a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014a62:	3328      	adds	r3, #40	@ 0x28
 8014a64:	2102      	movs	r1, #2
 8014a66:	4618      	mov	r0, r3
 8014a68:	f001 fd6c 	bl	8016544 <RCCEx_PLL3_Config>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8014a72:	e00a      	b.n	8014a8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014a74:	2301      	movs	r3, #1
 8014a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014a7a:	e006      	b.n	8014a8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8014a7c:	bf00      	nop
 8014a7e:	e004      	b.n	8014a8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8014a80:	bf00      	nop
 8014a82:	e002      	b.n	8014a8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8014a84:	bf00      	nop
 8014a86:	e000      	b.n	8014a8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8014a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d10b      	bne.n	8014aaa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8014a92:	4b39      	ldr	r3, [pc, #228]	@ (8014b78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8014a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8014a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014aa2:	4a35      	ldr	r2, [pc, #212]	@ (8014b78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8014aa4:	430b      	orrs	r3, r1
 8014aa6:	6553      	str	r3, [r2, #84]	@ 0x54
 8014aa8:	e003      	b.n	8014ab2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014aaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014aae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8014ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8014abe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014ac8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8014acc:	460b      	mov	r3, r1
 8014ace:	4313      	orrs	r3, r2
 8014ad0:	d058      	beq.n	8014b84 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8014ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014ada:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8014ade:	d033      	beq.n	8014b48 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8014ae0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8014ae4:	d82c      	bhi.n	8014b40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8014ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014aea:	d02f      	beq.n	8014b4c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8014aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014af0:	d826      	bhi.n	8014b40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8014af2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014af6:	d02b      	beq.n	8014b50 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8014af8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014afc:	d820      	bhi.n	8014b40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8014afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014b02:	d012      	beq.n	8014b2a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8014b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014b08:	d81a      	bhi.n	8014b40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d022      	beq.n	8014b54 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8014b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014b12:	d115      	bne.n	8014b40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014b18:	3308      	adds	r3, #8
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f001 fc5f 	bl	80163e0 <RCCEx_PLL2_Config>
 8014b22:	4603      	mov	r3, r0
 8014b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8014b28:	e015      	b.n	8014b56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014b2e:	3328      	adds	r3, #40	@ 0x28
 8014b30:	2102      	movs	r1, #2
 8014b32:	4618      	mov	r0, r3
 8014b34:	f001 fd06 	bl	8016544 <RCCEx_PLL3_Config>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8014b3e:	e00a      	b.n	8014b56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014b40:	2301      	movs	r3, #1
 8014b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014b46:	e006      	b.n	8014b56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8014b48:	bf00      	nop
 8014b4a:	e004      	b.n	8014b56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8014b4c:	bf00      	nop
 8014b4e:	e002      	b.n	8014b56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8014b50:	bf00      	nop
 8014b52:	e000      	b.n	8014b56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8014b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014b56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d10e      	bne.n	8014b7c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8014b5e:	4b06      	ldr	r3, [pc, #24]	@ (8014b78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8014b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014b62:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8014b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014b6e:	4a02      	ldr	r2, [pc, #8]	@ (8014b78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8014b70:	430b      	orrs	r3, r1
 8014b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8014b74:	e006      	b.n	8014b84 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8014b76:	bf00      	nop
 8014b78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014b80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8014b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8014b90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014b94:	2300      	movs	r3, #0
 8014b96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014b9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8014b9e:	460b      	mov	r3, r1
 8014ba0:	4313      	orrs	r3, r2
 8014ba2:	d055      	beq.n	8014c50 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8014ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014bac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8014bb0:	d033      	beq.n	8014c1a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8014bb2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8014bb6:	d82c      	bhi.n	8014c12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8014bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014bbc:	d02f      	beq.n	8014c1e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8014bbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014bc2:	d826      	bhi.n	8014c12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8014bc4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8014bc8:	d02b      	beq.n	8014c22 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8014bca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8014bce:	d820      	bhi.n	8014c12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8014bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014bd4:	d012      	beq.n	8014bfc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8014bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014bda:	d81a      	bhi.n	8014c12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d022      	beq.n	8014c26 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8014be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014be4:	d115      	bne.n	8014c12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014bea:	3308      	adds	r3, #8
 8014bec:	2100      	movs	r1, #0
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f001 fbf6 	bl	80163e0 <RCCEx_PLL2_Config>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8014bfa:	e015      	b.n	8014c28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014c00:	3328      	adds	r3, #40	@ 0x28
 8014c02:	2102      	movs	r1, #2
 8014c04:	4618      	mov	r0, r3
 8014c06:	f001 fc9d 	bl	8016544 <RCCEx_PLL3_Config>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8014c10:	e00a      	b.n	8014c28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014c12:	2301      	movs	r3, #1
 8014c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014c18:	e006      	b.n	8014c28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8014c1a:	bf00      	nop
 8014c1c:	e004      	b.n	8014c28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8014c1e:	bf00      	nop
 8014c20:	e002      	b.n	8014c28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8014c22:	bf00      	nop
 8014c24:	e000      	b.n	8014c28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8014c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014c28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d10b      	bne.n	8014c48 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8014c30:	4ba0      	ldr	r3, [pc, #640]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c34:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8014c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014c40:	4a9c      	ldr	r2, [pc, #624]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014c42:	430b      	orrs	r3, r1
 8014c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8014c46:	e003      	b.n	8014c50 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014c48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014c4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8014c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c58:	f002 0308 	and.w	r3, r2, #8
 8014c5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014c60:	2300      	movs	r3, #0
 8014c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014c66:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8014c6a:	460b      	mov	r3, r1
 8014c6c:	4313      	orrs	r3, r2
 8014c6e:	d01e      	beq.n	8014cae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8014c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014c7c:	d10c      	bne.n	8014c98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014c82:	3328      	adds	r3, #40	@ 0x28
 8014c84:	2102      	movs	r1, #2
 8014c86:	4618      	mov	r0, r3
 8014c88:	f001 fc5c 	bl	8016544 <RCCEx_PLL3_Config>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d002      	beq.n	8014c98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8014c92:	2301      	movs	r3, #1
 8014c94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8014c98:	4b86      	ldr	r3, [pc, #536]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c9c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014ca8:	4a82      	ldr	r2, [pc, #520]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014caa:	430b      	orrs	r3, r1
 8014cac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8014cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb6:	f002 0310 	and.w	r3, r2, #16
 8014cba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014cc4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8014cc8:	460b      	mov	r3, r1
 8014cca:	4313      	orrs	r3, r2
 8014ccc:	d01e      	beq.n	8014d0c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8014cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014cda:	d10c      	bne.n	8014cf6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014ce0:	3328      	adds	r3, #40	@ 0x28
 8014ce2:	2102      	movs	r1, #2
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f001 fc2d 	bl	8016544 <RCCEx_PLL3_Config>
 8014cea:	4603      	mov	r3, r0
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d002      	beq.n	8014cf6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8014cf6:	4b6f      	ldr	r3, [pc, #444]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014cfa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8014cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014d06:	4a6b      	ldr	r2, [pc, #428]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014d08:	430b      	orrs	r3, r1
 8014d0a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8014d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d14:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8014d18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014d1e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8014d22:	460b      	mov	r3, r1
 8014d24:	4313      	orrs	r3, r2
 8014d26:	d03e      	beq.n	8014da6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8014d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014d2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014d34:	d022      	beq.n	8014d7c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8014d36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014d3a:	d81b      	bhi.n	8014d74 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d003      	beq.n	8014d48 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8014d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d44:	d00b      	beq.n	8014d5e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8014d46:	e015      	b.n	8014d74 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8014d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014d4c:	3308      	adds	r3, #8
 8014d4e:	2100      	movs	r1, #0
 8014d50:	4618      	mov	r0, r3
 8014d52:	f001 fb45 	bl	80163e0 <RCCEx_PLL2_Config>
 8014d56:	4603      	mov	r3, r0
 8014d58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8014d5c:	e00f      	b.n	8014d7e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8014d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014d62:	3328      	adds	r3, #40	@ 0x28
 8014d64:	2102      	movs	r1, #2
 8014d66:	4618      	mov	r0, r3
 8014d68:	f001 fbec 	bl	8016544 <RCCEx_PLL3_Config>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8014d72:	e004      	b.n	8014d7e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014d74:	2301      	movs	r3, #1
 8014d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014d7a:	e000      	b.n	8014d7e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8014d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d10b      	bne.n	8014d9e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8014d86:	4b4b      	ldr	r3, [pc, #300]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014d8a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8014d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014d92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014d96:	4a47      	ldr	r2, [pc, #284]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014d98:	430b      	orrs	r3, r1
 8014d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8014d9c:	e003      	b.n	8014da6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014d9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014da2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8014da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8014db2:	673b      	str	r3, [r7, #112]	@ 0x70
 8014db4:	2300      	movs	r3, #0
 8014db6:	677b      	str	r3, [r7, #116]	@ 0x74
 8014db8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8014dbc:	460b      	mov	r3, r1
 8014dbe:	4313      	orrs	r3, r2
 8014dc0:	d03b      	beq.n	8014e3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8014dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014dca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014dce:	d01f      	beq.n	8014e10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8014dd0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8014dd4:	d818      	bhi.n	8014e08 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8014dd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014dda:	d003      	beq.n	8014de4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8014ddc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014de0:	d007      	beq.n	8014df2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8014de2:	e011      	b.n	8014e08 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014de4:	4b33      	ldr	r3, [pc, #204]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014de8:	4a32      	ldr	r2, [pc, #200]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8014df0:	e00f      	b.n	8014e12 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8014df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014df6:	3328      	adds	r3, #40	@ 0x28
 8014df8:	2101      	movs	r1, #1
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f001 fba2 	bl	8016544 <RCCEx_PLL3_Config>
 8014e00:	4603      	mov	r3, r0
 8014e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8014e06:	e004      	b.n	8014e12 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014e08:	2301      	movs	r3, #1
 8014e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014e0e:	e000      	b.n	8014e12 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8014e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014e12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d10b      	bne.n	8014e32 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014e1a:	4b26      	ldr	r3, [pc, #152]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8014e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e2a:	4a22      	ldr	r2, [pc, #136]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014e2c:	430b      	orrs	r3, r1
 8014e2e:	6553      	str	r3, [r2, #84]	@ 0x54
 8014e30:	e003      	b.n	8014e3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014e32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014e36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8014e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e42:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8014e46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014e48:	2300      	movs	r3, #0
 8014e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014e4c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8014e50:	460b      	mov	r3, r1
 8014e52:	4313      	orrs	r3, r2
 8014e54:	d034      	beq.n	8014ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8014e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d003      	beq.n	8014e68 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8014e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014e64:	d007      	beq.n	8014e76 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8014e66:	e011      	b.n	8014e8c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014e68:	4b12      	ldr	r3, [pc, #72]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e6c:	4a11      	ldr	r2, [pc, #68]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8014e74:	e00e      	b.n	8014e94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8014e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014e7a:	3308      	adds	r3, #8
 8014e7c:	2102      	movs	r1, #2
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f001 faae 	bl	80163e0 <RCCEx_PLL2_Config>
 8014e84:	4603      	mov	r3, r0
 8014e86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8014e8a:	e003      	b.n	8014e94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d10d      	bne.n	8014eb8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8014e9c:	4b05      	ldr	r3, [pc, #20]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ea0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014eaa:	4a02      	ldr	r2, [pc, #8]	@ (8014eb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8014eac:	430b      	orrs	r3, r1
 8014eae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8014eb0:	e006      	b.n	8014ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8014eb2:	bf00      	nop
 8014eb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014ebc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8014ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8014ecc:	663b      	str	r3, [r7, #96]	@ 0x60
 8014ece:	2300      	movs	r3, #0
 8014ed0:	667b      	str	r3, [r7, #100]	@ 0x64
 8014ed2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8014ed6:	460b      	mov	r3, r1
 8014ed8:	4313      	orrs	r3, r2
 8014eda:	d00c      	beq.n	8014ef6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8014edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014ee0:	3328      	adds	r3, #40	@ 0x28
 8014ee2:	2102      	movs	r1, #2
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f001 fb2d 	bl	8016544 <RCCEx_PLL3_Config>
 8014eea:	4603      	mov	r3, r0
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d002      	beq.n	8014ef6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8014ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014efe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8014f02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014f04:	2300      	movs	r3, #0
 8014f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014f08:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8014f0c:	460b      	mov	r3, r1
 8014f0e:	4313      	orrs	r3, r2
 8014f10:	d036      	beq.n	8014f80 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8014f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014f16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014f18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014f1c:	d018      	beq.n	8014f50 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8014f1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014f22:	d811      	bhi.n	8014f48 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8014f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f28:	d014      	beq.n	8014f54 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8014f2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014f2e:	d80b      	bhi.n	8014f48 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d011      	beq.n	8014f58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8014f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014f38:	d106      	bne.n	8014f48 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014f3a:	4bb7      	ldr	r3, [pc, #732]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f3e:	4ab6      	ldr	r2, [pc, #728]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8014f46:	e008      	b.n	8014f5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8014f48:	2301      	movs	r3, #1
 8014f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8014f4e:	e004      	b.n	8014f5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8014f50:	bf00      	nop
 8014f52:	e002      	b.n	8014f5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8014f54:	bf00      	nop
 8014f56:	e000      	b.n	8014f5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8014f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8014f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d10a      	bne.n	8014f78 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8014f62:	4bad      	ldr	r3, [pc, #692]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8014f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014f6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014f70:	4aa9      	ldr	r2, [pc, #676]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014f72:	430b      	orrs	r3, r1
 8014f74:	6553      	str	r3, [r2, #84]	@ 0x54
 8014f76:	e003      	b.n	8014f80 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8014f7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8014f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f88:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8014f8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8014f8e:	2300      	movs	r3, #0
 8014f90:	657b      	str	r3, [r7, #84]	@ 0x54
 8014f92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8014f96:	460b      	mov	r3, r1
 8014f98:	4313      	orrs	r3, r2
 8014f9a:	d009      	beq.n	8014fb0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8014f9c:	4b9e      	ldr	r3, [pc, #632]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014fa0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014faa:	4a9b      	ldr	r2, [pc, #620]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014fac:	430b      	orrs	r3, r1
 8014fae:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8014fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8014fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014fc2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8014fc6:	460b      	mov	r3, r1
 8014fc8:	4313      	orrs	r3, r2
 8014fca:	d009      	beq.n	8014fe0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8014fcc:	4b92      	ldr	r3, [pc, #584]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014fd0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8014fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014fd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014fda:	4a8f      	ldr	r2, [pc, #572]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014fdc:	430b      	orrs	r3, r1
 8014fde:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8014fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8014fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8014fee:	2300      	movs	r3, #0
 8014ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8014ff2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	4313      	orrs	r3, r2
 8014ffa:	d00e      	beq.n	801501a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8014ffc:	4b86      	ldr	r3, [pc, #536]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8014ffe:	691b      	ldr	r3, [r3, #16]
 8015000:	4a85      	ldr	r2, [pc, #532]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015002:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8015006:	6113      	str	r3, [r2, #16]
 8015008:	4b83      	ldr	r3, [pc, #524]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801500a:	6919      	ldr	r1, [r3, #16]
 801500c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8015010:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015014:	4a80      	ldr	r2, [pc, #512]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015016:	430b      	orrs	r3, r1
 8015018:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801501a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015022:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8015026:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015028:	2300      	movs	r3, #0
 801502a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801502c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8015030:	460b      	mov	r3, r1
 8015032:	4313      	orrs	r3, r2
 8015034:	d009      	beq.n	801504a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8015036:	4b78      	ldr	r3, [pc, #480]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801503a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801503e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8015042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015044:	4a74      	ldr	r2, [pc, #464]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015046:	430b      	orrs	r3, r1
 8015048:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801504a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015052:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8015056:	633b      	str	r3, [r7, #48]	@ 0x30
 8015058:	2300      	movs	r3, #0
 801505a:	637b      	str	r3, [r7, #52]	@ 0x34
 801505c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8015060:	460b      	mov	r3, r1
 8015062:	4313      	orrs	r3, r2
 8015064:	d00a      	beq.n	801507c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8015066:	4b6c      	ldr	r3, [pc, #432]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801506a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801506e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8015072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015076:	4a68      	ldr	r2, [pc, #416]	@ (8015218 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8015078:	430b      	orrs	r3, r1
 801507a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801507c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8015080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015084:	2100      	movs	r1, #0
 8015086:	62b9      	str	r1, [r7, #40]	@ 0x28
 8015088:	f003 0301 	and.w	r3, r3, #1
 801508c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801508e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8015092:	460b      	mov	r3, r1
 8015094:	4313      	orrs	r3, r2
 8015096:	d011      	beq.n	80150bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801509c:	3308      	adds	r3, #8
 801509e:	2100      	movs	r1, #0
 80150a0:	4618      	mov	r0, r3
 80150a2:	f001 f99d 	bl	80163e0 <RCCEx_PLL2_Config>
 80150a6:	4603      	mov	r3, r0
 80150a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80150ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d003      	beq.n	80150bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80150b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80150b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80150bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80150c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c4:	2100      	movs	r1, #0
 80150c6:	6239      	str	r1, [r7, #32]
 80150c8:	f003 0302 	and.w	r3, r3, #2
 80150cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80150ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80150d2:	460b      	mov	r3, r1
 80150d4:	4313      	orrs	r3, r2
 80150d6:	d011      	beq.n	80150fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80150d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80150dc:	3308      	adds	r3, #8
 80150de:	2101      	movs	r1, #1
 80150e0:	4618      	mov	r0, r3
 80150e2:	f001 f97d 	bl	80163e0 <RCCEx_PLL2_Config>
 80150e6:	4603      	mov	r3, r0
 80150e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80150ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d003      	beq.n	80150fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80150f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80150f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80150fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8015100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015104:	2100      	movs	r1, #0
 8015106:	61b9      	str	r1, [r7, #24]
 8015108:	f003 0304 	and.w	r3, r3, #4
 801510c:	61fb      	str	r3, [r7, #28]
 801510e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8015112:	460b      	mov	r3, r1
 8015114:	4313      	orrs	r3, r2
 8015116:	d011      	beq.n	801513c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801511c:	3308      	adds	r3, #8
 801511e:	2102      	movs	r1, #2
 8015120:	4618      	mov	r0, r3
 8015122:	f001 f95d 	bl	80163e0 <RCCEx_PLL2_Config>
 8015126:	4603      	mov	r3, r0
 8015128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 801512c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8015130:	2b00      	cmp	r3, #0
 8015132:	d003      	beq.n	801513c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8015138:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801513c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8015140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015144:	2100      	movs	r1, #0
 8015146:	6139      	str	r1, [r7, #16]
 8015148:	f003 0308 	and.w	r3, r3, #8
 801514c:	617b      	str	r3, [r7, #20]
 801514e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8015152:	460b      	mov	r3, r1
 8015154:	4313      	orrs	r3, r2
 8015156:	d011      	beq.n	801517c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801515c:	3328      	adds	r3, #40	@ 0x28
 801515e:	2100      	movs	r1, #0
 8015160:	4618      	mov	r0, r3
 8015162:	f001 f9ef 	bl	8016544 <RCCEx_PLL3_Config>
 8015166:	4603      	mov	r3, r0
 8015168:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 801516c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8015170:	2b00      	cmp	r3, #0
 8015172:	d003      	beq.n	801517c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8015178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8015180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015184:	2100      	movs	r1, #0
 8015186:	60b9      	str	r1, [r7, #8]
 8015188:	f003 0310 	and.w	r3, r3, #16
 801518c:	60fb      	str	r3, [r7, #12]
 801518e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8015192:	460b      	mov	r3, r1
 8015194:	4313      	orrs	r3, r2
 8015196:	d011      	beq.n	80151bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801519c:	3328      	adds	r3, #40	@ 0x28
 801519e:	2101      	movs	r1, #1
 80151a0:	4618      	mov	r0, r3
 80151a2:	f001 f9cf 	bl	8016544 <RCCEx_PLL3_Config>
 80151a6:	4603      	mov	r3, r0
 80151a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80151ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d003      	beq.n	80151bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80151b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80151b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80151bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80151c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151c4:	2100      	movs	r1, #0
 80151c6:	6039      	str	r1, [r7, #0]
 80151c8:	f003 0320 	and.w	r3, r3, #32
 80151cc:	607b      	str	r3, [r7, #4]
 80151ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80151d2:	460b      	mov	r3, r1
 80151d4:	4313      	orrs	r3, r2
 80151d6:	d011      	beq.n	80151fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80151d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80151dc:	3328      	adds	r3, #40	@ 0x28
 80151de:	2102      	movs	r1, #2
 80151e0:	4618      	mov	r0, r3
 80151e2:	f001 f9af 	bl	8016544 <RCCEx_PLL3_Config>
 80151e6:	4603      	mov	r3, r0
 80151e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80151ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d003      	beq.n	80151fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80151f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80151f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80151fc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8015200:	2b00      	cmp	r3, #0
 8015202:	d101      	bne.n	8015208 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8015204:	2300      	movs	r3, #0
 8015206:	e000      	b.n	801520a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8015208:	2301      	movs	r3, #1
}
 801520a:	4618      	mov	r0, r3
 801520c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8015210:	46bd      	mov	sp, r7
 8015212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015216:	bf00      	nop
 8015218:	58024400 	.word	0x58024400

0801521c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801521c:	b580      	push	{r7, lr}
 801521e:	b090      	sub	sp, #64	@ 0x40
 8015220:	af00      	add	r7, sp, #0
 8015222:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8015226:	e9d7 2300 	ldrd	r2, r3, [r7]
 801522a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801522e:	430b      	orrs	r3, r1
 8015230:	f040 8094 	bne.w	801535c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8015234:	4b9b      	ldr	r3, [pc, #620]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015238:	f003 0307 	and.w	r3, r3, #7
 801523c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015240:	2b04      	cmp	r3, #4
 8015242:	f200 8087 	bhi.w	8015354 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8015246:	a201      	add	r2, pc, #4	@ (adr r2, 801524c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8015248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801524c:	08015261 	.word	0x08015261
 8015250:	08015289 	.word	0x08015289
 8015254:	080152b1 	.word	0x080152b1
 8015258:	0801534d 	.word	0x0801534d
 801525c:	080152d9 	.word	0x080152d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015260:	4b90      	ldr	r3, [pc, #576]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801526c:	d108      	bne.n	8015280 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801526e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015272:	4618      	mov	r0, r3
 8015274:	f000 ff62 	bl	801613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801527a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801527c:	f000 bc93 	b.w	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015280:	2300      	movs	r3, #0
 8015282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015284:	f000 bc8f 	b.w	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015288:	4b86      	ldr	r3, [pc, #536]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015290:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015294:	d108      	bne.n	80152a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015296:	f107 0318 	add.w	r3, r7, #24
 801529a:	4618      	mov	r0, r3
 801529c:	f000 fca6 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80152a0:	69bb      	ldr	r3, [r7, #24]
 80152a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80152a4:	f000 bc7f 	b.w	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80152a8:	2300      	movs	r3, #0
 80152aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80152ac:	f000 bc7b 	b.w	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80152b0:	4b7c      	ldr	r3, [pc, #496]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80152b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80152bc:	d108      	bne.n	80152d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80152be:	f107 030c 	add.w	r3, r7, #12
 80152c2:	4618      	mov	r0, r3
 80152c4:	f000 fde6 	bl	8015e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80152cc:	f000 bc6b 	b.w	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80152d0:	2300      	movs	r3, #0
 80152d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80152d4:	f000 bc67 	b.w	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80152d8:	4b72      	ldr	r3, [pc, #456]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80152da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80152dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80152e0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80152e2:	4b70      	ldr	r3, [pc, #448]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	f003 0304 	and.w	r3, r3, #4
 80152ea:	2b04      	cmp	r3, #4
 80152ec:	d10c      	bne.n	8015308 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80152ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d109      	bne.n	8015308 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80152f4:	4b6b      	ldr	r3, [pc, #428]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	08db      	lsrs	r3, r3, #3
 80152fa:	f003 0303 	and.w	r3, r3, #3
 80152fe:	4a6a      	ldr	r2, [pc, #424]	@ (80154a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8015300:	fa22 f303 	lsr.w	r3, r2, r3
 8015304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015306:	e01f      	b.n	8015348 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015308:	4b66      	ldr	r3, [pc, #408]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015314:	d106      	bne.n	8015324 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8015316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801531c:	d102      	bne.n	8015324 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801531e:	4b63      	ldr	r3, [pc, #396]	@ (80154ac <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8015320:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015322:	e011      	b.n	8015348 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8015324:	4b5f      	ldr	r3, [pc, #380]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801532c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015330:	d106      	bne.n	8015340 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8015332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015338:	d102      	bne.n	8015340 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801533a:	4b5d      	ldr	r3, [pc, #372]	@ (80154b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801533e:	e003      	b.n	8015348 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8015340:	2300      	movs	r3, #0
 8015342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8015344:	f000 bc2f 	b.w	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8015348:	f000 bc2d 	b.w	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801534c:	4b59      	ldr	r3, [pc, #356]	@ (80154b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015350:	f000 bc29 	b.w	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8015354:	2300      	movs	r3, #0
 8015356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015358:	f000 bc25 	b.w	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801535c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015360:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8015364:	430b      	orrs	r3, r1
 8015366:	f040 80a7 	bne.w	80154b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801536a:	4b4e      	ldr	r3, [pc, #312]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801536c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801536e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8015372:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8015374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015376:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801537a:	d054      	beq.n	8015426 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 801537c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801537e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015382:	f200 808b 	bhi.w	801549c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8015386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015388:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801538c:	f000 8083 	beq.w	8015496 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8015390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015392:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8015396:	f200 8081 	bhi.w	801549c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801539a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801539c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80153a0:	d02f      	beq.n	8015402 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80153a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80153a8:	d878      	bhi.n	801549c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80153aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d004      	beq.n	80153ba <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80153b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80153b6:	d012      	beq.n	80153de <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80153b8:	e070      	b.n	801549c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80153ba:	4b3a      	ldr	r3, [pc, #232]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80153c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80153c6:	d107      	bne.n	80153d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80153c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80153cc:	4618      	mov	r0, r3
 80153ce:	f000 feb5 	bl	801613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80153d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80153d6:	e3e6      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80153d8:	2300      	movs	r3, #0
 80153da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80153dc:	e3e3      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80153de:	4b31      	ldr	r3, [pc, #196]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80153e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80153ea:	d107      	bne.n	80153fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80153ec:	f107 0318 	add.w	r3, r7, #24
 80153f0:	4618      	mov	r0, r3
 80153f2:	f000 fbfb 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80153f6:	69bb      	ldr	r3, [r7, #24]
 80153f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80153fa:	e3d4      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80153fc:	2300      	movs	r3, #0
 80153fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015400:	e3d1      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015402:	4b28      	ldr	r3, [pc, #160]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801540a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801540e:	d107      	bne.n	8015420 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015410:	f107 030c 	add.w	r3, r7, #12
 8015414:	4618      	mov	r0, r3
 8015416:	f000 fd3d 	bl	8015e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801541e:	e3c2      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015420:	2300      	movs	r3, #0
 8015422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015424:	e3bf      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015426:	4b1f      	ldr	r3, [pc, #124]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801542a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801542e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8015430:	4b1c      	ldr	r3, [pc, #112]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	f003 0304 	and.w	r3, r3, #4
 8015438:	2b04      	cmp	r3, #4
 801543a:	d10c      	bne.n	8015456 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 801543c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801543e:	2b00      	cmp	r3, #0
 8015440:	d109      	bne.n	8015456 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015442:	4b18      	ldr	r3, [pc, #96]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	08db      	lsrs	r3, r3, #3
 8015448:	f003 0303 	and.w	r3, r3, #3
 801544c:	4a16      	ldr	r2, [pc, #88]	@ (80154a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801544e:	fa22 f303 	lsr.w	r3, r2, r3
 8015452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015454:	e01e      	b.n	8015494 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015456:	4b13      	ldr	r3, [pc, #76]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801545e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015462:	d106      	bne.n	8015472 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8015464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015466:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801546a:	d102      	bne.n	8015472 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801546c:	4b0f      	ldr	r3, [pc, #60]	@ (80154ac <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015470:	e010      	b.n	8015494 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8015472:	4b0c      	ldr	r3, [pc, #48]	@ (80154a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801547a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801547e:	d106      	bne.n	801548e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8015480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015486:	d102      	bne.n	801548e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8015488:	4b09      	ldr	r3, [pc, #36]	@ (80154b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801548a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801548c:	e002      	b.n	8015494 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801548e:	2300      	movs	r3, #0
 8015490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8015492:	e388      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8015494:	e387      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8015496:	4b07      	ldr	r3, [pc, #28]	@ (80154b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8015498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801549a:	e384      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801549c:	2300      	movs	r3, #0
 801549e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80154a0:	e381      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80154a2:	bf00      	nop
 80154a4:	58024400 	.word	0x58024400
 80154a8:	03d09000 	.word	0x03d09000
 80154ac:	003d0900 	.word	0x003d0900
 80154b0:	007a1200 	.word	0x007a1200
 80154b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80154b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80154bc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80154c0:	430b      	orrs	r3, r1
 80154c2:	f040 809c 	bne.w	80155fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80154c6:	4b9e      	ldr	r3, [pc, #632]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80154c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80154ca:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80154ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80154d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80154d6:	d054      	beq.n	8015582 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80154d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80154de:	f200 808b 	bhi.w	80155f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80154e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80154e8:	f000 8083 	beq.w	80155f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80154ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80154f2:	f200 8081 	bhi.w	80155f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80154f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80154fc:	d02f      	beq.n	801555e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80154fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015500:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015504:	d878      	bhi.n	80155f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8015506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015508:	2b00      	cmp	r3, #0
 801550a:	d004      	beq.n	8015516 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801550e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015512:	d012      	beq.n	801553a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8015514:	e070      	b.n	80155f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015516:	4b8a      	ldr	r3, [pc, #552]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801551e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015522:	d107      	bne.n	8015534 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015528:	4618      	mov	r0, r3
 801552a:	f000 fe07 	bl	801613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801552e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015532:	e338      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015534:	2300      	movs	r3, #0
 8015536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015538:	e335      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801553a:	4b81      	ldr	r3, [pc, #516]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015546:	d107      	bne.n	8015558 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015548:	f107 0318 	add.w	r3, r7, #24
 801554c:	4618      	mov	r0, r3
 801554e:	f000 fb4d 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8015552:	69bb      	ldr	r3, [r7, #24]
 8015554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015556:	e326      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015558:	2300      	movs	r3, #0
 801555a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801555c:	e323      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801555e:	4b78      	ldr	r3, [pc, #480]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801556a:	d107      	bne.n	801557c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801556c:	f107 030c 	add.w	r3, r7, #12
 8015570:	4618      	mov	r0, r3
 8015572:	f000 fc8f 	bl	8015e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801557a:	e314      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801557c:	2300      	movs	r3, #0
 801557e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015580:	e311      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8015582:	4b6f      	ldr	r3, [pc, #444]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8015584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015586:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801558a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801558c:	4b6c      	ldr	r3, [pc, #432]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	f003 0304 	and.w	r3, r3, #4
 8015594:	2b04      	cmp	r3, #4
 8015596:	d10c      	bne.n	80155b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8015598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801559a:	2b00      	cmp	r3, #0
 801559c:	d109      	bne.n	80155b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801559e:	4b68      	ldr	r3, [pc, #416]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	08db      	lsrs	r3, r3, #3
 80155a4:	f003 0303 	and.w	r3, r3, #3
 80155a8:	4a66      	ldr	r2, [pc, #408]	@ (8015744 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80155aa:	fa22 f303 	lsr.w	r3, r2, r3
 80155ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80155b0:	e01e      	b.n	80155f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80155b2:	4b63      	ldr	r3, [pc, #396]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80155ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80155be:	d106      	bne.n	80155ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80155c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80155c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80155c6:	d102      	bne.n	80155ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80155c8:	4b5f      	ldr	r3, [pc, #380]	@ (8015748 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80155ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80155cc:	e010      	b.n	80155f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80155ce:	4b5c      	ldr	r3, [pc, #368]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80155d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80155da:	d106      	bne.n	80155ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80155dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80155de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80155e2:	d102      	bne.n	80155ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80155e4:	4b59      	ldr	r3, [pc, #356]	@ (801574c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80155e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80155e8:	e002      	b.n	80155f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80155ea:	2300      	movs	r3, #0
 80155ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80155ee:	e2da      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80155f0:	e2d9      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80155f2:	4b57      	ldr	r3, [pc, #348]	@ (8015750 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80155f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80155f6:	e2d6      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80155f8:	2300      	movs	r3, #0
 80155fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80155fc:	e2d3      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80155fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015602:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8015606:	430b      	orrs	r3, r1
 8015608:	f040 80a7 	bne.w	801575a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801560c:	4b4c      	ldr	r3, [pc, #304]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801560e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015610:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8015614:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8015616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801561c:	d055      	beq.n	80156ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015624:	f200 8096 	bhi.w	8015754 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8015628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801562a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801562e:	f000 8084 	beq.w	801573a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8015632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015634:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015638:	f200 808c 	bhi.w	8015754 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801563c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801563e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015642:	d030      	beq.n	80156a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8015644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801564a:	f200 8083 	bhi.w	8015754 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015650:	2b00      	cmp	r3, #0
 8015652:	d004      	beq.n	801565e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8015654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801565a:	d012      	beq.n	8015682 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 801565c:	e07a      	b.n	8015754 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801565e:	4b38      	ldr	r3, [pc, #224]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801566a:	d107      	bne.n	801567c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801566c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015670:	4618      	mov	r0, r3
 8015672:	f000 fd63 	bl	801613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801567a:	e294      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801567c:	2300      	movs	r3, #0
 801567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015680:	e291      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015682:	4b2f      	ldr	r3, [pc, #188]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801568a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801568e:	d107      	bne.n	80156a0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015690:	f107 0318 	add.w	r3, r7, #24
 8015694:	4618      	mov	r0, r3
 8015696:	f000 faa9 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801569a:	69bb      	ldr	r3, [r7, #24]
 801569c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801569e:	e282      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80156a0:	2300      	movs	r3, #0
 80156a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80156a4:	e27f      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80156a6:	4b26      	ldr	r3, [pc, #152]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80156ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80156b2:	d107      	bne.n	80156c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80156b4:	f107 030c 	add.w	r3, r7, #12
 80156b8:	4618      	mov	r0, r3
 80156ba:	f000 fbeb 	bl	8015e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80156c2:	e270      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80156c4:	2300      	movs	r3, #0
 80156c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80156c8:	e26d      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80156ca:	4b1d      	ldr	r3, [pc, #116]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80156cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80156ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80156d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80156d4:	4b1a      	ldr	r3, [pc, #104]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	f003 0304 	and.w	r3, r3, #4
 80156dc:	2b04      	cmp	r3, #4
 80156de:	d10c      	bne.n	80156fa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80156e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d109      	bne.n	80156fa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80156e6:	4b16      	ldr	r3, [pc, #88]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	08db      	lsrs	r3, r3, #3
 80156ec:	f003 0303 	and.w	r3, r3, #3
 80156f0:	4a14      	ldr	r2, [pc, #80]	@ (8015744 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80156f2:	fa22 f303 	lsr.w	r3, r2, r3
 80156f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80156f8:	e01e      	b.n	8015738 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80156fa:	4b11      	ldr	r3, [pc, #68]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015706:	d106      	bne.n	8015716 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8015708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801570a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801570e:	d102      	bne.n	8015716 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015710:	4b0d      	ldr	r3, [pc, #52]	@ (8015748 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8015712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015714:	e010      	b.n	8015738 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8015716:	4b0a      	ldr	r3, [pc, #40]	@ (8015740 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801571e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015722:	d106      	bne.n	8015732 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8015724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801572a:	d102      	bne.n	8015732 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801572c:	4b07      	ldr	r3, [pc, #28]	@ (801574c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801572e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015730:	e002      	b.n	8015738 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8015732:	2300      	movs	r3, #0
 8015734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8015736:	e236      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8015738:	e235      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801573a:	4b05      	ldr	r3, [pc, #20]	@ (8015750 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801573c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801573e:	e232      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8015740:	58024400 	.word	0x58024400
 8015744:	03d09000 	.word	0x03d09000
 8015748:	003d0900 	.word	0x003d0900
 801574c:	007a1200 	.word	0x007a1200
 8015750:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8015754:	2300      	movs	r3, #0
 8015756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015758:	e225      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801575a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801575e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8015762:	430b      	orrs	r3, r1
 8015764:	f040 8085 	bne.w	8015872 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8015768:	4b9c      	ldr	r3, [pc, #624]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801576a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801576c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8015770:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8015772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8015778:	d06b      	beq.n	8015852 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801577c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8015780:	d874      	bhi.n	801586c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8015782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015784:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015788:	d056      	beq.n	8015838 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801578a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801578c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015790:	d86c      	bhi.n	801586c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8015792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015794:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8015798:	d03b      	beq.n	8015812 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801579a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801579c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80157a0:	d864      	bhi.n	801586c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80157a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80157a8:	d021      	beq.n	80157ee <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80157aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80157b0:	d85c      	bhi.n	801586c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80157b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d004      	beq.n	80157c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80157b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80157be:	d004      	beq.n	80157ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80157c0:	e054      	b.n	801586c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80157c2:	f7fe fb1d 	bl	8013e00 <HAL_RCC_GetPCLK1Freq>
 80157c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80157c8:	e1ed      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80157ca:	4b84      	ldr	r3, [pc, #528]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80157d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80157d6:	d107      	bne.n	80157e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80157d8:	f107 0318 	add.w	r3, r7, #24
 80157dc:	4618      	mov	r0, r3
 80157de:	f000 fa05 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80157e2:	69fb      	ldr	r3, [r7, #28]
 80157e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80157e6:	e1de      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80157e8:	2300      	movs	r3, #0
 80157ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80157ec:	e1db      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80157ee:	4b7b      	ldr	r3, [pc, #492]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80157f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80157fa:	d107      	bne.n	801580c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80157fc:	f107 030c 	add.w	r3, r7, #12
 8015800:	4618      	mov	r0, r3
 8015802:	f000 fb47 	bl	8015e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8015806:	693b      	ldr	r3, [r7, #16]
 8015808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801580a:	e1cc      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801580c:	2300      	movs	r3, #0
 801580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015810:	e1c9      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8015812:	4b72      	ldr	r3, [pc, #456]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	f003 0304 	and.w	r3, r3, #4
 801581a:	2b04      	cmp	r3, #4
 801581c:	d109      	bne.n	8015832 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801581e:	4b6f      	ldr	r3, [pc, #444]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	08db      	lsrs	r3, r3, #3
 8015824:	f003 0303 	and.w	r3, r3, #3
 8015828:	4a6d      	ldr	r2, [pc, #436]	@ (80159e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801582a:	fa22 f303 	lsr.w	r3, r2, r3
 801582e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015830:	e1b9      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015832:	2300      	movs	r3, #0
 8015834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015836:	e1b6      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8015838:	4b68      	ldr	r3, [pc, #416]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015844:	d102      	bne.n	801584c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8015846:	4b67      	ldr	r3, [pc, #412]	@ (80159e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8015848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801584a:	e1ac      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801584c:	2300      	movs	r3, #0
 801584e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015850:	e1a9      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015852:	4b62      	ldr	r3, [pc, #392]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801585a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801585e:	d102      	bne.n	8015866 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8015860:	4b61      	ldr	r3, [pc, #388]	@ (80159e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8015862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015864:	e19f      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015866:	2300      	movs	r3, #0
 8015868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801586a:	e19c      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801586c:	2300      	movs	r3, #0
 801586e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015870:	e199      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8015872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015876:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801587a:	430b      	orrs	r3, r1
 801587c:	d173      	bne.n	8015966 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801587e:	4b57      	ldr	r3, [pc, #348]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8015880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015882:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8015886:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8015888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801588a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801588e:	d02f      	beq.n	80158f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8015890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015896:	d863      	bhi.n	8015960 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8015898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801589a:	2b00      	cmp	r3, #0
 801589c:	d004      	beq.n	80158a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801589e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80158a4:	d012      	beq.n	80158cc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80158a6:	e05b      	b.n	8015960 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80158a8:	4b4c      	ldr	r3, [pc, #304]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80158b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80158b4:	d107      	bne.n	80158c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80158b6:	f107 0318 	add.w	r3, r7, #24
 80158ba:	4618      	mov	r0, r3
 80158bc:	f000 f996 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80158c0:	69bb      	ldr	r3, [r7, #24]
 80158c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80158c4:	e16f      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80158c6:	2300      	movs	r3, #0
 80158c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158ca:	e16c      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80158cc:	4b43      	ldr	r3, [pc, #268]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80158d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80158d8:	d107      	bne.n	80158ea <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80158da:	f107 030c 	add.w	r3, r7, #12
 80158de:	4618      	mov	r0, r3
 80158e0:	f000 fad8 	bl	8015e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80158e4:	697b      	ldr	r3, [r7, #20]
 80158e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80158e8:	e15d      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80158ea:	2300      	movs	r3, #0
 80158ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158ee:	e15a      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80158f0:	4b3a      	ldr	r3, [pc, #232]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80158f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80158f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80158f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80158fa:	4b38      	ldr	r3, [pc, #224]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	f003 0304 	and.w	r3, r3, #4
 8015902:	2b04      	cmp	r3, #4
 8015904:	d10c      	bne.n	8015920 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8015906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015908:	2b00      	cmp	r3, #0
 801590a:	d109      	bne.n	8015920 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801590c:	4b33      	ldr	r3, [pc, #204]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	08db      	lsrs	r3, r3, #3
 8015912:	f003 0303 	and.w	r3, r3, #3
 8015916:	4a32      	ldr	r2, [pc, #200]	@ (80159e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8015918:	fa22 f303 	lsr.w	r3, r2, r3
 801591c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801591e:	e01e      	b.n	801595e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8015920:	4b2e      	ldr	r3, [pc, #184]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801592c:	d106      	bne.n	801593c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801592e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015930:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015934:	d102      	bne.n	801593c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8015936:	4b2b      	ldr	r3, [pc, #172]	@ (80159e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8015938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801593a:	e010      	b.n	801595e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801593c:	4b27      	ldr	r3, [pc, #156]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015944:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015948:	d106      	bne.n	8015958 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 801594a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801594c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015950:	d102      	bne.n	8015958 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8015952:	4b25      	ldr	r3, [pc, #148]	@ (80159e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8015954:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015956:	e002      	b.n	801595e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8015958:	2300      	movs	r3, #0
 801595a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801595c:	e123      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801595e:	e122      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8015960:	2300      	movs	r3, #0
 8015962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015964:	e11f      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8015966:	e9d7 2300 	ldrd	r2, r3, [r7]
 801596a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801596e:	430b      	orrs	r3, r1
 8015970:	d13c      	bne.n	80159ec <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8015972:	4b1a      	ldr	r3, [pc, #104]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8015974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801597a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801597c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801597e:	2b00      	cmp	r3, #0
 8015980:	d004      	beq.n	801598c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8015982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015988:	d012      	beq.n	80159b0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801598a:	e023      	b.n	80159d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801598c:	4b13      	ldr	r3, [pc, #76]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015994:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015998:	d107      	bne.n	80159aa <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801599a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801599e:	4618      	mov	r0, r3
 80159a0:	f000 fbcc 	bl	801613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80159a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80159a8:	e0fd      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80159aa:	2300      	movs	r3, #0
 80159ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80159ae:	e0fa      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80159b0:	4b0a      	ldr	r3, [pc, #40]	@ (80159dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80159b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80159bc:	d107      	bne.n	80159ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80159be:	f107 0318 	add.w	r3, r7, #24
 80159c2:	4618      	mov	r0, r3
 80159c4:	f000 f912 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80159c8:	6a3b      	ldr	r3, [r7, #32]
 80159ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80159cc:	e0eb      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80159ce:	2300      	movs	r3, #0
 80159d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80159d2:	e0e8      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80159d4:	2300      	movs	r3, #0
 80159d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80159d8:	e0e5      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80159da:	bf00      	nop
 80159dc:	58024400 	.word	0x58024400
 80159e0:	03d09000 	.word	0x03d09000
 80159e4:	003d0900 	.word	0x003d0900
 80159e8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80159ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80159f0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80159f4:	430b      	orrs	r3, r1
 80159f6:	f040 8085 	bne.w	8015b04 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80159fa:	4b6d      	ldr	r3, [pc, #436]	@ (8015bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80159fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80159fe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8015a02:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8015a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015a0a:	d06b      	beq.n	8015ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8015a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015a12:	d874      	bhi.n	8015afe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8015a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015a1a:	d056      	beq.n	8015aca <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8015a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015a22:	d86c      	bhi.n	8015afe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8015a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015a2a:	d03b      	beq.n	8015aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8015a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015a32:	d864      	bhi.n	8015afe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8015a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015a3a:	d021      	beq.n	8015a80 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8015a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015a42:	d85c      	bhi.n	8015afe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8015a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d004      	beq.n	8015a54 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8015a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015a50:	d004      	beq.n	8015a5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8015a52:	e054      	b.n	8015afe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8015a54:	f000 f8b4 	bl	8015bc0 <HAL_RCCEx_GetD3PCLK1Freq>
 8015a58:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015a5a:	e0a4      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015a5c:	4b54      	ldr	r3, [pc, #336]	@ (8015bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015a68:	d107      	bne.n	8015a7a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015a6a:	f107 0318 	add.w	r3, r7, #24
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f000 f8bc 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8015a74:	69fb      	ldr	r3, [r7, #28]
 8015a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015a78:	e095      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015a7e:	e092      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8015a80:	4b4b      	ldr	r3, [pc, #300]	@ (8015bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8015a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015a8c:	d107      	bne.n	8015a9e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015a8e:	f107 030c 	add.w	r3, r7, #12
 8015a92:	4618      	mov	r0, r3
 8015a94:	f000 f9fe 	bl	8015e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8015a98:	693b      	ldr	r3, [r7, #16]
 8015a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015a9c:	e083      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015aa2:	e080      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8015aa4:	4b42      	ldr	r3, [pc, #264]	@ (8015bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	f003 0304 	and.w	r3, r3, #4
 8015aac:	2b04      	cmp	r3, #4
 8015aae:	d109      	bne.n	8015ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8015bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	08db      	lsrs	r3, r3, #3
 8015ab6:	f003 0303 	and.w	r3, r3, #3
 8015aba:	4a3e      	ldr	r2, [pc, #248]	@ (8015bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8015abc:	fa22 f303 	lsr.w	r3, r2, r3
 8015ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015ac2:	e070      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015ac8:	e06d      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8015aca:	4b39      	ldr	r3, [pc, #228]	@ (8015bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015ad6:	d102      	bne.n	8015ade <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8015ad8:	4b37      	ldr	r3, [pc, #220]	@ (8015bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8015ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015adc:	e063      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015ae2:	e060      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015ae4:	4b32      	ldr	r3, [pc, #200]	@ (8015bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015af0:	d102      	bne.n	8015af8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8015af2:	4b32      	ldr	r3, [pc, #200]	@ (8015bbc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8015af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015af6:	e056      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015af8:	2300      	movs	r3, #0
 8015afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015afc:	e053      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8015afe:	2300      	movs	r3, #0
 8015b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b02:	e050      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8015b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b08:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8015b0c:	430b      	orrs	r3, r1
 8015b0e:	d148      	bne.n	8015ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8015b10:	4b27      	ldr	r3, [pc, #156]	@ (8015bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015b14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8015b18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8015b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015b20:	d02a      	beq.n	8015b78 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8015b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015b28:	d838      	bhi.n	8015b9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8015b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d004      	beq.n	8015b3a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8015b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015b36:	d00d      	beq.n	8015b54 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8015b38:	e030      	b.n	8015b9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8015bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015b42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015b46:	d102      	bne.n	8015b4e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8015b48:	4b1c      	ldr	r3, [pc, #112]	@ (8015bbc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8015b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015b4c:	e02b      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b52:	e028      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8015b54:	4b16      	ldr	r3, [pc, #88]	@ (8015bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015b5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8015b60:	d107      	bne.n	8015b72 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8015b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015b66:	4618      	mov	r0, r3
 8015b68:	f000 fae8 	bl	801613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8015b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015b70:	e019      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015b72:	2300      	movs	r3, #0
 8015b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b76:	e016      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8015b78:	4b0d      	ldr	r3, [pc, #52]	@ (8015bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015b80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015b84:	d107      	bne.n	8015b96 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015b86:	f107 0318 	add.w	r3, r7, #24
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	f000 f82e 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8015b90:	69fb      	ldr	r3, [r7, #28]
 8015b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8015b94:	e007      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8015b96:	2300      	movs	r3, #0
 8015b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015b9a:	e004      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015ba0:	e001      	b.n	8015ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8015ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8015ba8:	4618      	mov	r0, r3
 8015baa:	3740      	adds	r7, #64	@ 0x40
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}
 8015bb0:	58024400 	.word	0x58024400
 8015bb4:	03d09000 	.word	0x03d09000
 8015bb8:	003d0900 	.word	0x003d0900
 8015bbc:	007a1200 	.word	0x007a1200

08015bc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8015bc4:	f7fe f8ec 	bl	8013da0 <HAL_RCC_GetHCLKFreq>
 8015bc8:	4602      	mov	r2, r0
 8015bca:	4b06      	ldr	r3, [pc, #24]	@ (8015be4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8015bcc:	6a1b      	ldr	r3, [r3, #32]
 8015bce:	091b      	lsrs	r3, r3, #4
 8015bd0:	f003 0307 	and.w	r3, r3, #7
 8015bd4:	4904      	ldr	r1, [pc, #16]	@ (8015be8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8015bd6:	5ccb      	ldrb	r3, [r1, r3]
 8015bd8:	f003 031f 	and.w	r3, r3, #31
 8015bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8015be0:	4618      	mov	r0, r3
 8015be2:	bd80      	pop	{r7, pc}
 8015be4:	58024400 	.word	0x58024400
 8015be8:	0802be58 	.word	0x0802be58

08015bec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8015bec:	b480      	push	{r7}
 8015bee:	b089      	sub	sp, #36	@ 0x24
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8015bf4:	4ba1      	ldr	r3, [pc, #644]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bf8:	f003 0303 	and.w	r3, r3, #3
 8015bfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8015bfe:	4b9f      	ldr	r3, [pc, #636]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c02:	0b1b      	lsrs	r3, r3, #12
 8015c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015c08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8015c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c0e:	091b      	lsrs	r3, r3, #4
 8015c10:	f003 0301 	and.w	r3, r3, #1
 8015c14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8015c16:	4b99      	ldr	r3, [pc, #612]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015c1a:	08db      	lsrs	r3, r3, #3
 8015c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c20:	693a      	ldr	r2, [r7, #16]
 8015c22:	fb02 f303 	mul.w	r3, r2, r3
 8015c26:	ee07 3a90 	vmov	s15, r3
 8015c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	f000 8111 	beq.w	8015e5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8015c3a:	69bb      	ldr	r3, [r7, #24]
 8015c3c:	2b02      	cmp	r3, #2
 8015c3e:	f000 8083 	beq.w	8015d48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8015c42:	69bb      	ldr	r3, [r7, #24]
 8015c44:	2b02      	cmp	r3, #2
 8015c46:	f200 80a1 	bhi.w	8015d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8015c4a:	69bb      	ldr	r3, [r7, #24]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d003      	beq.n	8015c58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8015c50:	69bb      	ldr	r3, [r7, #24]
 8015c52:	2b01      	cmp	r3, #1
 8015c54:	d056      	beq.n	8015d04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8015c56:	e099      	b.n	8015d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015c58:	4b88      	ldr	r3, [pc, #544]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	f003 0320 	and.w	r3, r3, #32
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d02d      	beq.n	8015cc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015c64:	4b85      	ldr	r3, [pc, #532]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	08db      	lsrs	r3, r3, #3
 8015c6a:	f003 0303 	and.w	r3, r3, #3
 8015c6e:	4a84      	ldr	r2, [pc, #528]	@ (8015e80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8015c70:	fa22 f303 	lsr.w	r3, r2, r3
 8015c74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	ee07 3a90 	vmov	s15, r3
 8015c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015c80:	697b      	ldr	r3, [r7, #20]
 8015c82:	ee07 3a90 	vmov	s15, r3
 8015c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c96:	ee07 3a90 	vmov	s15, r3
 8015c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8015ca2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8015e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8015cbe:	e087      	b.n	8015dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015cc0:	697b      	ldr	r3, [r7, #20]
 8015cc2:	ee07 3a90 	vmov	s15, r3
 8015cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015cca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8015e88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8015cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015cda:	ee07 3a90 	vmov	s15, r3
 8015cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8015ce6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8015e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015d02:	e065      	b.n	8015dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015d04:	697b      	ldr	r3, [r7, #20]
 8015d06:	ee07 3a90 	vmov	s15, r3
 8015d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8015e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8015d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d16:	4b59      	ldr	r3, [pc, #356]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d1e:	ee07 3a90 	vmov	s15, r3
 8015d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8015d2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8015e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015d46:	e043      	b.n	8015dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015d48:	697b      	ldr	r3, [r7, #20]
 8015d4a:	ee07 3a90 	vmov	s15, r3
 8015d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8015e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8015d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d5a:	4b48      	ldr	r3, [pc, #288]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d62:	ee07 3a90 	vmov	s15, r3
 8015d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8015d6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8015e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015d8a:	e021      	b.n	8015dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8015d8c:	697b      	ldr	r3, [r7, #20]
 8015d8e:	ee07 3a90 	vmov	s15, r3
 8015d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8015e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8015d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d9e:	4b37      	ldr	r3, [pc, #220]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015da6:	ee07 3a90 	vmov	s15, r3
 8015daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8015db2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8015e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8015db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015dce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8015dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015dd4:	0a5b      	lsrs	r3, r3, #9
 8015dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015dda:	ee07 3a90 	vmov	s15, r3
 8015dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8015dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015df6:	ee17 2a90 	vmov	r2, s15
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8015dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e02:	0c1b      	lsrs	r3, r3, #16
 8015e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015e08:	ee07 3a90 	vmov	s15, r3
 8015e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8015e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015e24:	ee17 2a90 	vmov	r2, s15
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8015e2c:	4b13      	ldr	r3, [pc, #76]	@ (8015e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8015e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e30:	0e1b      	lsrs	r3, r3, #24
 8015e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015e36:	ee07 3a90 	vmov	s15, r3
 8015e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8015e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015e52:	ee17 2a90 	vmov	r2, s15
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8015e5a:	e008      	b.n	8015e6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2200      	movs	r2, #0
 8015e60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2200      	movs	r2, #0
 8015e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	609a      	str	r2, [r3, #8]
}
 8015e6e:	bf00      	nop
 8015e70:	3724      	adds	r7, #36	@ 0x24
 8015e72:	46bd      	mov	sp, r7
 8015e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e78:	4770      	bx	lr
 8015e7a:	bf00      	nop
 8015e7c:	58024400 	.word	0x58024400
 8015e80:	03d09000 	.word	0x03d09000
 8015e84:	46000000 	.word	0x46000000
 8015e88:	4c742400 	.word	0x4c742400
 8015e8c:	4a742400 	.word	0x4a742400
 8015e90:	4af42400 	.word	0x4af42400

08015e94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8015e94:	b480      	push	{r7}
 8015e96:	b089      	sub	sp, #36	@ 0x24
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8015e9c:	4ba1      	ldr	r3, [pc, #644]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ea0:	f003 0303 	and.w	r3, r3, #3
 8015ea4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8015ea6:	4b9f      	ldr	r3, [pc, #636]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015eaa:	0d1b      	lsrs	r3, r3, #20
 8015eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015eb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8015eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015eb6:	0a1b      	lsrs	r3, r3, #8
 8015eb8:	f003 0301 	and.w	r3, r3, #1
 8015ebc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8015ebe:	4b99      	ldr	r3, [pc, #612]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ec2:	08db      	lsrs	r3, r3, #3
 8015ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ec8:	693a      	ldr	r2, [r7, #16]
 8015eca:	fb02 f303 	mul.w	r3, r2, r3
 8015ece:	ee07 3a90 	vmov	s15, r3
 8015ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ed6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8015eda:	697b      	ldr	r3, [r7, #20]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	f000 8111 	beq.w	8016104 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8015ee2:	69bb      	ldr	r3, [r7, #24]
 8015ee4:	2b02      	cmp	r3, #2
 8015ee6:	f000 8083 	beq.w	8015ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8015eea:	69bb      	ldr	r3, [r7, #24]
 8015eec:	2b02      	cmp	r3, #2
 8015eee:	f200 80a1 	bhi.w	8016034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8015ef2:	69bb      	ldr	r3, [r7, #24]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d003      	beq.n	8015f00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8015ef8:	69bb      	ldr	r3, [r7, #24]
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d056      	beq.n	8015fac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8015efe:	e099      	b.n	8016034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015f00:	4b88      	ldr	r3, [pc, #544]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	f003 0320 	and.w	r3, r3, #32
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d02d      	beq.n	8015f68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015f0c:	4b85      	ldr	r3, [pc, #532]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	08db      	lsrs	r3, r3, #3
 8015f12:	f003 0303 	and.w	r3, r3, #3
 8015f16:	4a84      	ldr	r2, [pc, #528]	@ (8016128 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8015f18:	fa22 f303 	lsr.w	r3, r2, r3
 8015f1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	ee07 3a90 	vmov	s15, r3
 8015f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015f28:	697b      	ldr	r3, [r7, #20]
 8015f2a:	ee07 3a90 	vmov	s15, r3
 8015f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015f36:	4b7b      	ldr	r3, [pc, #492]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f3e:	ee07 3a90 	vmov	s15, r3
 8015f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8015f4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8015f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8015f66:	e087      	b.n	8016078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015f68:	697b      	ldr	r3, [r7, #20]
 8015f6a:	ee07 3a90 	vmov	s15, r3
 8015f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015f72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8016130 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8015f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f82:	ee07 3a90 	vmov	s15, r3
 8015f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8015f8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8015f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015faa:	e065      	b.n	8016078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015fac:	697b      	ldr	r3, [r7, #20]
 8015fae:	ee07 3a90 	vmov	s15, r3
 8015fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015fb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8016134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8015fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015fbe:	4b59      	ldr	r3, [pc, #356]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8015fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015fc6:	ee07 3a90 	vmov	s15, r3
 8015fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8015fd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8015fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015fee:	e043      	b.n	8016078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8015ff0:	697b      	ldr	r3, [r7, #20]
 8015ff2:	ee07 3a90 	vmov	s15, r3
 8015ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ffa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8016138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8015ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016002:	4b48      	ldr	r3, [pc, #288]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801600a:	ee07 3a90 	vmov	s15, r3
 801600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016012:	ed97 6a03 	vldr	s12, [r7, #12]
 8016016:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801602e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016032:	e021      	b.n	8016078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8016034:	697b      	ldr	r3, [r7, #20]
 8016036:	ee07 3a90 	vmov	s15, r3
 801603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801603e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8016134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8016042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016046:	4b37      	ldr	r3, [pc, #220]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8016048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801604a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801604e:	ee07 3a90 	vmov	s15, r3
 8016052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016056:	ed97 6a03 	vldr	s12, [r7, #12]
 801605a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801605e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016076:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8016078:	4b2a      	ldr	r3, [pc, #168]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801607c:	0a5b      	lsrs	r3, r3, #9
 801607e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016082:	ee07 3a90 	vmov	s15, r3
 8016086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801608a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801608e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016092:	edd7 6a07 	vldr	s13, [r7, #28]
 8016096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801609a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801609e:	ee17 2a90 	vmov	r2, s15
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80160a6:	4b1f      	ldr	r3, [pc, #124]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80160a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160aa:	0c1b      	lsrs	r3, r3, #16
 80160ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80160b0:	ee07 3a90 	vmov	s15, r3
 80160b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80160b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80160bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80160c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80160c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80160c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80160cc:	ee17 2a90 	vmov	r2, s15
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80160d4:	4b13      	ldr	r3, [pc, #76]	@ (8016124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80160d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80160d8:	0e1b      	lsrs	r3, r3, #24
 80160da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80160de:	ee07 3a90 	vmov	s15, r3
 80160e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80160e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80160ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80160ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80160f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80160f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80160fa:	ee17 2a90 	vmov	r2, s15
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8016102:	e008      	b.n	8016116 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2200      	movs	r2, #0
 8016108:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2200      	movs	r2, #0
 801610e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	2200      	movs	r2, #0
 8016114:	609a      	str	r2, [r3, #8]
}
 8016116:	bf00      	nop
 8016118:	3724      	adds	r7, #36	@ 0x24
 801611a:	46bd      	mov	sp, r7
 801611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016120:	4770      	bx	lr
 8016122:	bf00      	nop
 8016124:	58024400 	.word	0x58024400
 8016128:	03d09000 	.word	0x03d09000
 801612c:	46000000 	.word	0x46000000
 8016130:	4c742400 	.word	0x4c742400
 8016134:	4a742400 	.word	0x4a742400
 8016138:	4af42400 	.word	0x4af42400

0801613c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801613c:	b480      	push	{r7}
 801613e:	b089      	sub	sp, #36	@ 0x24
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016144:	4ba0      	ldr	r3, [pc, #640]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016148:	f003 0303 	and.w	r3, r3, #3
 801614c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801614e:	4b9e      	ldr	r3, [pc, #632]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016152:	091b      	lsrs	r3, r3, #4
 8016154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016158:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801615a:	4b9b      	ldr	r3, [pc, #620]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801615c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801615e:	f003 0301 	and.w	r3, r3, #1
 8016162:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8016164:	4b98      	ldr	r3, [pc, #608]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016168:	08db      	lsrs	r3, r3, #3
 801616a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801616e:	693a      	ldr	r2, [r7, #16]
 8016170:	fb02 f303 	mul.w	r3, r2, r3
 8016174:	ee07 3a90 	vmov	s15, r3
 8016178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801617c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	2b00      	cmp	r3, #0
 8016184:	f000 8111 	beq.w	80163aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8016188:	69bb      	ldr	r3, [r7, #24]
 801618a:	2b02      	cmp	r3, #2
 801618c:	f000 8083 	beq.w	8016296 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8016190:	69bb      	ldr	r3, [r7, #24]
 8016192:	2b02      	cmp	r3, #2
 8016194:	f200 80a1 	bhi.w	80162da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8016198:	69bb      	ldr	r3, [r7, #24]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d003      	beq.n	80161a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801619e:	69bb      	ldr	r3, [r7, #24]
 80161a0:	2b01      	cmp	r3, #1
 80161a2:	d056      	beq.n	8016252 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80161a4:	e099      	b.n	80162da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80161a6:	4b88      	ldr	r3, [pc, #544]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	f003 0320 	and.w	r3, r3, #32
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d02d      	beq.n	801620e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80161b2:	4b85      	ldr	r3, [pc, #532]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	08db      	lsrs	r3, r3, #3
 80161b8:	f003 0303 	and.w	r3, r3, #3
 80161bc:	4a83      	ldr	r2, [pc, #524]	@ (80163cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80161be:	fa22 f303 	lsr.w	r3, r2, r3
 80161c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	ee07 3a90 	vmov	s15, r3
 80161ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80161ce:	697b      	ldr	r3, [r7, #20]
 80161d0:	ee07 3a90 	vmov	s15, r3
 80161d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80161d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80161dc:	4b7a      	ldr	r3, [pc, #488]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80161de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80161e4:	ee07 3a90 	vmov	s15, r3
 80161e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80161ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80161f0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80163d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80161f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80161f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80161fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016208:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801620c:	e087      	b.n	801631e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	ee07 3a90 	vmov	s15, r3
 8016214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016218:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80163d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801621c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016220:	4b69      	ldr	r3, [pc, #420]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016228:	ee07 3a90 	vmov	s15, r3
 801622c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016230:	ed97 6a03 	vldr	s12, [r7, #12]
 8016234:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80163d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801623c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016240:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016248:	ee67 7a27 	vmul.f32	s15, s14, s15
 801624c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016250:	e065      	b.n	801631e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	ee07 3a90 	vmov	s15, r3
 8016258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801625c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80163d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8016260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016264:	4b58      	ldr	r3, [pc, #352]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801626c:	ee07 3a90 	vmov	s15, r3
 8016270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016274:	ed97 6a03 	vldr	s12, [r7, #12]
 8016278:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80163d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801627c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016284:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801628c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8016294:	e043      	b.n	801631e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8016296:	697b      	ldr	r3, [r7, #20]
 8016298:	ee07 3a90 	vmov	s15, r3
 801629c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80162a0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80163dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80162a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80162a8:	4b47      	ldr	r3, [pc, #284]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80162aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80162ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162b0:	ee07 3a90 	vmov	s15, r3
 80162b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80162b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80162bc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80163d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80162c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80162c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80162c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80162cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80162d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80162d8:	e021      	b.n	801631e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	ee07 3a90 	vmov	s15, r3
 80162e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80162e4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80163d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80162e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80162ec:	4b36      	ldr	r3, [pc, #216]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80162ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80162f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162f4:	ee07 3a90 	vmov	s15, r3
 80162f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80162fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8016300:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80163d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8016304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801630c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016318:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801631c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801631e:	4b2a      	ldr	r3, [pc, #168]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8016320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016322:	0a5b      	lsrs	r3, r3, #9
 8016324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016328:	ee07 3a90 	vmov	s15, r3
 801632c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016330:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016334:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016338:	edd7 6a07 	vldr	s13, [r7, #28]
 801633c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016344:	ee17 2a90 	vmov	r2, s15
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801634c:	4b1e      	ldr	r3, [pc, #120]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801634e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016350:	0c1b      	lsrs	r3, r3, #16
 8016352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016356:	ee07 3a90 	vmov	s15, r3
 801635a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801635e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016362:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016366:	edd7 6a07 	vldr	s13, [r7, #28]
 801636a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801636e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016372:	ee17 2a90 	vmov	r2, s15
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801637a:	4b13      	ldr	r3, [pc, #76]	@ (80163c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801637c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801637e:	0e1b      	lsrs	r3, r3, #24
 8016380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016384:	ee07 3a90 	vmov	s15, r3
 8016388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801638c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016390:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016394:	edd7 6a07 	vldr	s13, [r7, #28]
 8016398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801639c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80163a0:	ee17 2a90 	vmov	r2, s15
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80163a8:	e008      	b.n	80163bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2200      	movs	r2, #0
 80163ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2200      	movs	r2, #0
 80163b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	2200      	movs	r2, #0
 80163ba:	609a      	str	r2, [r3, #8]
}
 80163bc:	bf00      	nop
 80163be:	3724      	adds	r7, #36	@ 0x24
 80163c0:	46bd      	mov	sp, r7
 80163c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c6:	4770      	bx	lr
 80163c8:	58024400 	.word	0x58024400
 80163cc:	03d09000 	.word	0x03d09000
 80163d0:	46000000 	.word	0x46000000
 80163d4:	4c742400 	.word	0x4c742400
 80163d8:	4a742400 	.word	0x4a742400
 80163dc:	4af42400 	.word	0x4af42400

080163e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b084      	sub	sp, #16
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80163ea:	2300      	movs	r3, #0
 80163ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80163ee:	4b53      	ldr	r3, [pc, #332]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80163f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163f2:	f003 0303 	and.w	r3, r3, #3
 80163f6:	2b03      	cmp	r3, #3
 80163f8:	d101      	bne.n	80163fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80163fa:	2301      	movs	r3, #1
 80163fc:	e099      	b.n	8016532 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80163fe:	4b4f      	ldr	r3, [pc, #316]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	4a4e      	ldr	r2, [pc, #312]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 8016404:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8016408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801640a:	f7f5 f8c7 	bl	800b59c <HAL_GetTick>
 801640e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016410:	e008      	b.n	8016424 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8016412:	f7f5 f8c3 	bl	800b59c <HAL_GetTick>
 8016416:	4602      	mov	r2, r0
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	1ad3      	subs	r3, r2, r3
 801641c:	2b02      	cmp	r3, #2
 801641e:	d901      	bls.n	8016424 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016420:	2303      	movs	r3, #3
 8016422:	e086      	b.n	8016532 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016424:	4b45      	ldr	r3, [pc, #276]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801642c:	2b00      	cmp	r3, #0
 801642e:	d1f0      	bne.n	8016412 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8016430:	4b42      	ldr	r3, [pc, #264]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 8016432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016434:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	031b      	lsls	r3, r3, #12
 801643e:	493f      	ldr	r1, [pc, #252]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 8016440:	4313      	orrs	r3, r2
 8016442:	628b      	str	r3, [r1, #40]	@ 0x28
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	685b      	ldr	r3, [r3, #4]
 8016448:	3b01      	subs	r3, #1
 801644a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	689b      	ldr	r3, [r3, #8]
 8016452:	3b01      	subs	r3, #1
 8016454:	025b      	lsls	r3, r3, #9
 8016456:	b29b      	uxth	r3, r3
 8016458:	431a      	orrs	r2, r3
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	68db      	ldr	r3, [r3, #12]
 801645e:	3b01      	subs	r3, #1
 8016460:	041b      	lsls	r3, r3, #16
 8016462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8016466:	431a      	orrs	r2, r3
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	691b      	ldr	r3, [r3, #16]
 801646c:	3b01      	subs	r3, #1
 801646e:	061b      	lsls	r3, r3, #24
 8016470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8016474:	4931      	ldr	r1, [pc, #196]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 8016476:	4313      	orrs	r3, r2
 8016478:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801647a:	4b30      	ldr	r3, [pc, #192]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 801647c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801647e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	695b      	ldr	r3, [r3, #20]
 8016486:	492d      	ldr	r1, [pc, #180]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 8016488:	4313      	orrs	r3, r2
 801648a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801648c:	4b2b      	ldr	r3, [pc, #172]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 801648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016490:	f023 0220 	bic.w	r2, r3, #32
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	699b      	ldr	r3, [r3, #24]
 8016498:	4928      	ldr	r1, [pc, #160]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 801649a:	4313      	orrs	r3, r2
 801649c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801649e:	4b27      	ldr	r3, [pc, #156]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164a2:	4a26      	ldr	r2, [pc, #152]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164a4:	f023 0310 	bic.w	r3, r3, #16
 80164a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80164aa:	4b24      	ldr	r3, [pc, #144]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80164ae:	4b24      	ldr	r3, [pc, #144]	@ (8016540 <RCCEx_PLL2_Config+0x160>)
 80164b0:	4013      	ands	r3, r2
 80164b2:	687a      	ldr	r2, [r7, #4]
 80164b4:	69d2      	ldr	r2, [r2, #28]
 80164b6:	00d2      	lsls	r2, r2, #3
 80164b8:	4920      	ldr	r1, [pc, #128]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164ba:	4313      	orrs	r3, r2
 80164bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80164be:	4b1f      	ldr	r3, [pc, #124]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164c2:	4a1e      	ldr	r2, [pc, #120]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164c4:	f043 0310 	orr.w	r3, r3, #16
 80164c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80164ca:	683b      	ldr	r3, [r7, #0]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d106      	bne.n	80164de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80164d0:	4b1a      	ldr	r3, [pc, #104]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164d4:	4a19      	ldr	r2, [pc, #100]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80164da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80164dc:	e00f      	b.n	80164fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80164de:	683b      	ldr	r3, [r7, #0]
 80164e0:	2b01      	cmp	r3, #1
 80164e2:	d106      	bne.n	80164f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80164e4:	4b15      	ldr	r3, [pc, #84]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164e8:	4a14      	ldr	r2, [pc, #80]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80164ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80164f0:	e005      	b.n	80164fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80164f2:	4b12      	ldr	r3, [pc, #72]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164f6:	4a11      	ldr	r2, [pc, #68]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 80164f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80164fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80164fe:	4b0f      	ldr	r3, [pc, #60]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	4a0e      	ldr	r2, [pc, #56]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 8016504:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8016508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801650a:	f7f5 f847 	bl	800b59c <HAL_GetTick>
 801650e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016510:	e008      	b.n	8016524 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8016512:	f7f5 f843 	bl	800b59c <HAL_GetTick>
 8016516:	4602      	mov	r2, r0
 8016518:	68bb      	ldr	r3, [r7, #8]
 801651a:	1ad3      	subs	r3, r2, r3
 801651c:	2b02      	cmp	r3, #2
 801651e:	d901      	bls.n	8016524 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016520:	2303      	movs	r3, #3
 8016522:	e006      	b.n	8016532 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016524:	4b05      	ldr	r3, [pc, #20]	@ (801653c <RCCEx_PLL2_Config+0x15c>)
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801652c:	2b00      	cmp	r3, #0
 801652e:	d0f0      	beq.n	8016512 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8016530:	7bfb      	ldrb	r3, [r7, #15]
}
 8016532:	4618      	mov	r0, r3
 8016534:	3710      	adds	r7, #16
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}
 801653a:	bf00      	nop
 801653c:	58024400 	.word	0x58024400
 8016540:	ffff0007 	.word	0xffff0007

08016544 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b084      	sub	sp, #16
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801654e:	2300      	movs	r3, #0
 8016550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016552:	4b53      	ldr	r3, [pc, #332]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016556:	f003 0303 	and.w	r3, r3, #3
 801655a:	2b03      	cmp	r3, #3
 801655c:	d101      	bne.n	8016562 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801655e:	2301      	movs	r3, #1
 8016560:	e099      	b.n	8016696 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8016562:	4b4f      	ldr	r3, [pc, #316]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	4a4e      	ldr	r2, [pc, #312]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801656c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801656e:	f7f5 f815 	bl	800b59c <HAL_GetTick>
 8016572:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016574:	e008      	b.n	8016588 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8016576:	f7f5 f811 	bl	800b59c <HAL_GetTick>
 801657a:	4602      	mov	r2, r0
 801657c:	68bb      	ldr	r3, [r7, #8]
 801657e:	1ad3      	subs	r3, r2, r3
 8016580:	2b02      	cmp	r3, #2
 8016582:	d901      	bls.n	8016588 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016584:	2303      	movs	r3, #3
 8016586:	e086      	b.n	8016696 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016588:	4b45      	ldr	r3, [pc, #276]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016590:	2b00      	cmp	r3, #0
 8016592:	d1f0      	bne.n	8016576 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8016594:	4b42      	ldr	r3, [pc, #264]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016598:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	051b      	lsls	r3, r3, #20
 80165a2:	493f      	ldr	r1, [pc, #252]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 80165a4:	4313      	orrs	r3, r2
 80165a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	685b      	ldr	r3, [r3, #4]
 80165ac:	3b01      	subs	r3, #1
 80165ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	689b      	ldr	r3, [r3, #8]
 80165b6:	3b01      	subs	r3, #1
 80165b8:	025b      	lsls	r3, r3, #9
 80165ba:	b29b      	uxth	r3, r3
 80165bc:	431a      	orrs	r2, r3
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	68db      	ldr	r3, [r3, #12]
 80165c2:	3b01      	subs	r3, #1
 80165c4:	041b      	lsls	r3, r3, #16
 80165c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80165ca:	431a      	orrs	r2, r3
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	691b      	ldr	r3, [r3, #16]
 80165d0:	3b01      	subs	r3, #1
 80165d2:	061b      	lsls	r3, r3, #24
 80165d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80165d8:	4931      	ldr	r1, [pc, #196]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 80165da:	4313      	orrs	r3, r2
 80165dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80165de:	4b30      	ldr	r3, [pc, #192]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 80165e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	695b      	ldr	r3, [r3, #20]
 80165ea:	492d      	ldr	r1, [pc, #180]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 80165ec:	4313      	orrs	r3, r2
 80165ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80165f0:	4b2b      	ldr	r3, [pc, #172]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 80165f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	699b      	ldr	r3, [r3, #24]
 80165fc:	4928      	ldr	r1, [pc, #160]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 80165fe:	4313      	orrs	r3, r2
 8016600:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8016602:	4b27      	ldr	r3, [pc, #156]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016606:	4a26      	ldr	r2, [pc, #152]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801660c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801660e:	4b24      	ldr	r3, [pc, #144]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016612:	4b24      	ldr	r3, [pc, #144]	@ (80166a4 <RCCEx_PLL3_Config+0x160>)
 8016614:	4013      	ands	r3, r2
 8016616:	687a      	ldr	r2, [r7, #4]
 8016618:	69d2      	ldr	r2, [r2, #28]
 801661a:	00d2      	lsls	r2, r2, #3
 801661c:	4920      	ldr	r1, [pc, #128]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 801661e:	4313      	orrs	r3, r2
 8016620:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8016622:	4b1f      	ldr	r3, [pc, #124]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016626:	4a1e      	ldr	r2, [pc, #120]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801662c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d106      	bne.n	8016642 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8016634:	4b1a      	ldr	r3, [pc, #104]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016638:	4a19      	ldr	r2, [pc, #100]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 801663a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801663e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8016640:	e00f      	b.n	8016662 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8016642:	683b      	ldr	r3, [r7, #0]
 8016644:	2b01      	cmp	r3, #1
 8016646:	d106      	bne.n	8016656 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8016648:	4b15      	ldr	r3, [pc, #84]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 801664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801664c:	4a14      	ldr	r2, [pc, #80]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 801664e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8016652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8016654:	e005      	b.n	8016662 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8016656:	4b12      	ldr	r3, [pc, #72]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801665a:	4a11      	ldr	r2, [pc, #68]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 801665c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8016660:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8016662:	4b0f      	ldr	r3, [pc, #60]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	4a0e      	ldr	r2, [pc, #56]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 8016668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801666c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801666e:	f7f4 ff95 	bl	800b59c <HAL_GetTick>
 8016672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016674:	e008      	b.n	8016688 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8016676:	f7f4 ff91 	bl	800b59c <HAL_GetTick>
 801667a:	4602      	mov	r2, r0
 801667c:	68bb      	ldr	r3, [r7, #8]
 801667e:	1ad3      	subs	r3, r2, r3
 8016680:	2b02      	cmp	r3, #2
 8016682:	d901      	bls.n	8016688 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016684:	2303      	movs	r3, #3
 8016686:	e006      	b.n	8016696 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016688:	4b05      	ldr	r3, [pc, #20]	@ (80166a0 <RCCEx_PLL3_Config+0x15c>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016690:	2b00      	cmp	r3, #0
 8016692:	d0f0      	beq.n	8016676 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8016694:	7bfb      	ldrb	r3, [r7, #15]
}
 8016696:	4618      	mov	r0, r3
 8016698:	3710      	adds	r7, #16
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}
 801669e:	bf00      	nop
 80166a0:	58024400 	.word	0x58024400
 80166a4:	ffff0007 	.word	0xffff0007

080166a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b084      	sub	sp, #16
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d101      	bne.n	80166ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80166b6:	2301      	movs	r3, #1
 80166b8:	e10f      	b.n	80168da <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2200      	movs	r2, #0
 80166be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	4a87      	ldr	r2, [pc, #540]	@ (80168e4 <HAL_SPI_Init+0x23c>)
 80166c6:	4293      	cmp	r3, r2
 80166c8:	d00f      	beq.n	80166ea <HAL_SPI_Init+0x42>
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	4a86      	ldr	r2, [pc, #536]	@ (80168e8 <HAL_SPI_Init+0x240>)
 80166d0:	4293      	cmp	r3, r2
 80166d2:	d00a      	beq.n	80166ea <HAL_SPI_Init+0x42>
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	4a84      	ldr	r2, [pc, #528]	@ (80168ec <HAL_SPI_Init+0x244>)
 80166da:	4293      	cmp	r3, r2
 80166dc:	d005      	beq.n	80166ea <HAL_SPI_Init+0x42>
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	68db      	ldr	r3, [r3, #12]
 80166e2:	2b0f      	cmp	r3, #15
 80166e4:	d901      	bls.n	80166ea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80166e6:	2301      	movs	r3, #1
 80166e8:	e0f7      	b.n	80168da <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80166ea:	6878      	ldr	r0, [r7, #4]
 80166ec:	f000 fd68 	bl	80171c0 <SPI_GetPacketSize>
 80166f0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	4a7b      	ldr	r2, [pc, #492]	@ (80168e4 <HAL_SPI_Init+0x23c>)
 80166f8:	4293      	cmp	r3, r2
 80166fa:	d00c      	beq.n	8016716 <HAL_SPI_Init+0x6e>
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	4a79      	ldr	r2, [pc, #484]	@ (80168e8 <HAL_SPI_Init+0x240>)
 8016702:	4293      	cmp	r3, r2
 8016704:	d007      	beq.n	8016716 <HAL_SPI_Init+0x6e>
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	4a78      	ldr	r2, [pc, #480]	@ (80168ec <HAL_SPI_Init+0x244>)
 801670c:	4293      	cmp	r3, r2
 801670e:	d002      	beq.n	8016716 <HAL_SPI_Init+0x6e>
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	2b08      	cmp	r3, #8
 8016714:	d811      	bhi.n	801673a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801671a:	4a72      	ldr	r2, [pc, #456]	@ (80168e4 <HAL_SPI_Init+0x23c>)
 801671c:	4293      	cmp	r3, r2
 801671e:	d009      	beq.n	8016734 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	4a70      	ldr	r2, [pc, #448]	@ (80168e8 <HAL_SPI_Init+0x240>)
 8016726:	4293      	cmp	r3, r2
 8016728:	d004      	beq.n	8016734 <HAL_SPI_Init+0x8c>
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	4a6f      	ldr	r2, [pc, #444]	@ (80168ec <HAL_SPI_Init+0x244>)
 8016730:	4293      	cmp	r3, r2
 8016732:	d104      	bne.n	801673e <HAL_SPI_Init+0x96>
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	2b10      	cmp	r3, #16
 8016738:	d901      	bls.n	801673e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801673a:	2301      	movs	r3, #1
 801673c:	e0cd      	b.n	80168da <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016744:	b2db      	uxtb	r3, r3
 8016746:	2b00      	cmp	r3, #0
 8016748:	d106      	bne.n	8016758 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	2200      	movs	r2, #0
 801674e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f7f4 f974 	bl	800aa40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2202      	movs	r2, #2
 801675c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	681a      	ldr	r2, [r3, #0]
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	f022 0201 	bic.w	r2, r2, #1
 801676e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	689b      	ldr	r3, [r3, #8]
 8016776:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801677a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	699b      	ldr	r3, [r3, #24]
 8016780:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8016784:	d119      	bne.n	80167ba <HAL_SPI_Init+0x112>
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	685b      	ldr	r3, [r3, #4]
 801678a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801678e:	d103      	bne.n	8016798 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8016794:	2b00      	cmp	r3, #0
 8016796:	d008      	beq.n	80167aa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801679c:	2b00      	cmp	r3, #0
 801679e:	d10c      	bne.n	80167ba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80167a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80167a8:	d107      	bne.n	80167ba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	681a      	ldr	r2, [r3, #0]
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80167b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	685b      	ldr	r3, [r3, #4]
 80167be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d00f      	beq.n	80167e6 <HAL_SPI_Init+0x13e>
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	68db      	ldr	r3, [r3, #12]
 80167ca:	2b06      	cmp	r3, #6
 80167cc:	d90b      	bls.n	80167e6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	430a      	orrs	r2, r1
 80167e2:	601a      	str	r2, [r3, #0]
 80167e4:	e007      	b.n	80167f6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	681a      	ldr	r2, [r3, #0]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80167f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	69da      	ldr	r2, [r3, #28]
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80167fe:	431a      	orrs	r2, r3
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	431a      	orrs	r2, r3
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016808:	ea42 0103 	orr.w	r1, r2, r3
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	68da      	ldr	r2, [r3, #12]
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	430a      	orrs	r2, r1
 8016816:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016820:	431a      	orrs	r2, r3
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016826:	431a      	orrs	r2, r3
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	699b      	ldr	r3, [r3, #24]
 801682c:	431a      	orrs	r2, r3
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	691b      	ldr	r3, [r3, #16]
 8016832:	431a      	orrs	r2, r3
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	695b      	ldr	r3, [r3, #20]
 8016838:	431a      	orrs	r2, r3
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	6a1b      	ldr	r3, [r3, #32]
 801683e:	431a      	orrs	r2, r3
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	431a      	orrs	r2, r3
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801684a:	431a      	orrs	r2, r3
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	689b      	ldr	r3, [r3, #8]
 8016850:	431a      	orrs	r2, r3
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016856:	ea42 0103 	orr.w	r1, r2, r3
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	430a      	orrs	r2, r1
 8016864:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	685b      	ldr	r3, [r3, #4]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d113      	bne.n	8016896 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	689b      	ldr	r3, [r3, #8]
 8016874:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016880:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	689b      	ldr	r3, [r3, #8]
 8016888:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8016894:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	f022 0201 	bic.w	r2, r2, #1
 80168a4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	685b      	ldr	r3, [r3, #4]
 80168aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d00a      	beq.n	80168c8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	68db      	ldr	r3, [r3, #12]
 80168b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	430a      	orrs	r2, r1
 80168c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2200      	movs	r2, #0
 80168cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	2201      	movs	r2, #1
 80168d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80168d8:	2300      	movs	r3, #0
}
 80168da:	4618      	mov	r0, r3
 80168dc:	3710      	adds	r7, #16
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}
 80168e2:	bf00      	nop
 80168e4:	40013000 	.word	0x40013000
 80168e8:	40003800 	.word	0x40003800
 80168ec:	40003c00 	.word	0x40003c00

080168f0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b084      	sub	sp, #16
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	60f8      	str	r0, [r7, #12]
 80168f8:	60b9      	str	r1, [r7, #8]
 80168fa:	4613      	mov	r3, r2
 80168fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016904:	b2db      	uxtb	r3, r3
 8016906:	2b01      	cmp	r3, #1
 8016908:	d001      	beq.n	801690e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 801690a:	2302      	movs	r3, #2
 801690c:	e126      	b.n	8016b5c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 801690e:	68bb      	ldr	r3, [r7, #8]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d002      	beq.n	801691a <HAL_SPI_Transmit_DMA+0x2a>
 8016914:	88fb      	ldrh	r3, [r7, #6]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d101      	bne.n	801691e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 801691a:	2301      	movs	r3, #1
 801691c:	e11e      	b.n	8016b5c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8016924:	2b01      	cmp	r3, #1
 8016926:	d101      	bne.n	801692c <HAL_SPI_Transmit_DMA+0x3c>
 8016928:	2302      	movs	r3, #2
 801692a:	e117      	b.n	8016b5c <HAL_SPI_Transmit_DMA+0x26c>
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	2201      	movs	r2, #1
 8016930:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	2203      	movs	r2, #3
 8016938:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	2200      	movs	r2, #0
 8016940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	68ba      	ldr	r2, [r7, #8]
 8016948:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	88fa      	ldrh	r2, [r7, #6]
 801694e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	88fa      	ldrh	r2, [r7, #6]
 8016956:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	2200      	movs	r2, #0
 801695e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	2200      	movs	r2, #0
 8016964:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	2200      	movs	r2, #0
 801696a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	2200      	movs	r2, #0
 8016970:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	2200      	movs	r2, #0
 8016978:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	689b      	ldr	r3, [r3, #8]
 8016980:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8016984:	d108      	bne.n	8016998 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	681a      	ldr	r2, [r3, #0]
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016994:	601a      	str	r2, [r3, #0]
 8016996:	e009      	b.n	80169ac <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	68db      	ldr	r3, [r3, #12]
 801699e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80169aa:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	68db      	ldr	r3, [r3, #12]
 80169b0:	2b0f      	cmp	r3, #15
 80169b2:	d905      	bls.n	80169c0 <HAL_SPI_Transmit_DMA+0xd0>
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80169b8:	699b      	ldr	r3, [r3, #24]
 80169ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80169be:	d10f      	bne.n	80169e0 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80169c4:	2b07      	cmp	r3, #7
 80169c6:	d911      	bls.n	80169ec <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80169cc:	699b      	ldr	r3, [r3, #24]
 80169ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80169d2:	d00b      	beq.n	80169ec <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80169d8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80169da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80169de:	d005      	beq.n	80169ec <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	2200      	movs	r2, #0
 80169e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 80169e8:	2301      	movs	r3, #1
 80169ea:	e0b7      	b.n	8016b5c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	68db      	ldr	r3, [r3, #12]
 80169f0:	2b07      	cmp	r3, #7
 80169f2:	d820      	bhi.n	8016a36 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80169f8:	699b      	ldr	r3, [r3, #24]
 80169fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80169fe:	d109      	bne.n	8016a14 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016a06:	b29b      	uxth	r3, r3
 8016a08:	3301      	adds	r3, #1
 8016a0a:	105b      	asrs	r3, r3, #1
 8016a0c:	b29a      	uxth	r2, r3
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a18:	699b      	ldr	r3, [r3, #24]
 8016a1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016a1e:	d11e      	bne.n	8016a5e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	3303      	adds	r3, #3
 8016a2a:	109b      	asrs	r3, r3, #2
 8016a2c:	b29a      	uxth	r2, r3
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8016a34:	e013      	b.n	8016a5e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	68db      	ldr	r3, [r3, #12]
 8016a3a:	2b0f      	cmp	r3, #15
 8016a3c:	d80f      	bhi.n	8016a5e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a42:	699b      	ldr	r3, [r3, #24]
 8016a44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016a48:	d109      	bne.n	8016a5e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016a50:	b29b      	uxth	r3, r3
 8016a52:	3301      	adds	r3, #1
 8016a54:	105b      	asrs	r3, r3, #1
 8016a56:	b29a      	uxth	r2, r3
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a62:	4a40      	ldr	r2, [pc, #256]	@ (8016b64 <HAL_SPI_Transmit_DMA+0x274>)
 8016a64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8016b68 <HAL_SPI_Transmit_DMA+0x278>)
 8016a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a72:	4a3e      	ldr	r2, [pc, #248]	@ (8016b6c <HAL_SPI_Transmit_DMA+0x27c>)
 8016a74:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	689a      	ldr	r2, [r3, #8]
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8016a8c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016a96:	4619      	mov	r1, r3
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	3320      	adds	r3, #32
 8016a9e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016aa6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8016aa8:	f7f8 f8cc 	bl	800ec44 <HAL_DMA_Start_IT>
 8016aac:	4603      	mov	r3, r0
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d011      	beq.n	8016ad6 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016ab8:	f043 0210 	orr.w	r2, r3, #16
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	2201      	movs	r2, #1
 8016ac6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	2200      	movs	r2, #0
 8016ace:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8016ad2:	2301      	movs	r3, #1
 8016ad4:	e042      	b.n	8016b5c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016ada:	69db      	ldr	r3, [r3, #28]
 8016adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016ae0:	d108      	bne.n	8016af4 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	6859      	ldr	r1, [r3, #4]
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	681a      	ldr	r2, [r3, #0]
 8016aec:	4b20      	ldr	r3, [pc, #128]	@ (8016b70 <HAL_SPI_Transmit_DMA+0x280>)
 8016aee:	400b      	ands	r3, r1
 8016af0:	6053      	str	r3, [r2, #4]
 8016af2:	e009      	b.n	8016b08 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	685a      	ldr	r2, [r3, #4]
 8016afa:	4b1d      	ldr	r3, [pc, #116]	@ (8016b70 <HAL_SPI_Transmit_DMA+0x280>)
 8016afc:	4013      	ands	r3, r2
 8016afe:	88f9      	ldrh	r1, [r7, #6]
 8016b00:	68fa      	ldr	r2, [r7, #12]
 8016b02:	6812      	ldr	r2, [r2, #0]
 8016b04:	430b      	orrs	r3, r1
 8016b06:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	689a      	ldr	r2, [r3, #8]
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016b16:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	691a      	ldr	r2, [r3, #16]
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8016b26:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	681a      	ldr	r2, [r3, #0]
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	f042 0201 	orr.w	r2, r2, #1
 8016b36:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	685b      	ldr	r3, [r3, #4]
 8016b3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8016b40:	d107      	bne.n	8016b52 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	681a      	ldr	r2, [r3, #0]
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016b50:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	2200      	movs	r2, #0
 8016b56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8016b5a:	2300      	movs	r3, #0
}
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	3710      	adds	r7, #16
 8016b60:	46bd      	mov	sp, r7
 8016b62:	bd80      	pop	{r7, pc}
 8016b64:	08016feb 	.word	0x08016feb
 8016b68:	08016fa5 	.word	0x08016fa5
 8016b6c:	08017007 	.word	0x08017007
 8016b70:	ffff0000 	.word	0xffff0000

08016b74 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b08a      	sub	sp, #40	@ 0x28
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	691b      	ldr	r3, [r3, #16]
 8016b82:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	695b      	ldr	r3, [r3, #20]
 8016b8a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8016b8c:	6a3a      	ldr	r2, [r7, #32]
 8016b8e:	69fb      	ldr	r3, [r7, #28]
 8016b90:	4013      	ands	r3, r2
 8016b92:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	689b      	ldr	r3, [r3, #8]
 8016b9a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016ba6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	3330      	adds	r3, #48	@ 0x30
 8016bae:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d010      	beq.n	8016bdc <HAL_SPI_IRQHandler+0x68>
 8016bba:	6a3b      	ldr	r3, [r7, #32]
 8016bbc:	f003 0308 	and.w	r3, r3, #8
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d00b      	beq.n	8016bdc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	699a      	ldr	r2, [r3, #24]
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016bd2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f000 f9cd 	bl	8016f74 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8016bda:	e192      	b.n	8016f02 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8016bdc:	69bb      	ldr	r3, [r7, #24]
 8016bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d113      	bne.n	8016c0e <HAL_SPI_IRQHandler+0x9a>
 8016be6:	69bb      	ldr	r3, [r7, #24]
 8016be8:	f003 0320 	and.w	r3, r3, #32
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d10e      	bne.n	8016c0e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8016bf0:	69bb      	ldr	r3, [r7, #24]
 8016bf2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d009      	beq.n	8016c0e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bfe:	6878      	ldr	r0, [r7, #4]
 8016c00:	4798      	blx	r3
    hspi->RxISR(hspi);
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c06:	6878      	ldr	r0, [r7, #4]
 8016c08:	4798      	blx	r3
    handled = 1UL;
 8016c0a:	2301      	movs	r3, #1
 8016c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8016c0e:	69bb      	ldr	r3, [r7, #24]
 8016c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d10f      	bne.n	8016c38 <HAL_SPI_IRQHandler+0xc4>
 8016c18:	69bb      	ldr	r3, [r7, #24]
 8016c1a:	f003 0301 	and.w	r3, r3, #1
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d00a      	beq.n	8016c38 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8016c22:	69bb      	ldr	r3, [r7, #24]
 8016c24:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d105      	bne.n	8016c38 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c30:	6878      	ldr	r0, [r7, #4]
 8016c32:	4798      	blx	r3
    handled = 1UL;
 8016c34:	2301      	movs	r3, #1
 8016c36:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8016c38:	69bb      	ldr	r3, [r7, #24]
 8016c3a:	f003 0320 	and.w	r3, r3, #32
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d10f      	bne.n	8016c62 <HAL_SPI_IRQHandler+0xee>
 8016c42:	69bb      	ldr	r3, [r7, #24]
 8016c44:	f003 0302 	and.w	r3, r3, #2
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d00a      	beq.n	8016c62 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8016c4c:	69bb      	ldr	r3, [r7, #24]
 8016c4e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d105      	bne.n	8016c62 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c5a:	6878      	ldr	r0, [r7, #4]
 8016c5c:	4798      	blx	r3
    handled = 1UL;
 8016c5e:	2301      	movs	r3, #1
 8016c60:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8016c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	f040 8147 	bne.w	8016ef8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8016c6a:	69bb      	ldr	r3, [r7, #24]
 8016c6c:	f003 0308 	and.w	r3, r3, #8
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	f000 808b 	beq.w	8016d8c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	699a      	ldr	r2, [r3, #24]
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	f042 0208 	orr.w	r2, r2, #8
 8016c84:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	699a      	ldr	r2, [r3, #24]
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	f042 0210 	orr.w	r2, r2, #16
 8016c94:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	699a      	ldr	r2, [r3, #24]
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016ca4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	691a      	ldr	r2, [r3, #16]
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	f022 0208 	bic.w	r2, r2, #8
 8016cb4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	689b      	ldr	r3, [r3, #8]
 8016cbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d13d      	bne.n	8016d40 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8016cc4:	e036      	b.n	8016d34 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	68db      	ldr	r3, [r3, #12]
 8016cca:	2b0f      	cmp	r3, #15
 8016ccc:	d90b      	bls.n	8016ce6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	681a      	ldr	r2, [r3, #0]
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016cd6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8016cd8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016cde:	1d1a      	adds	r2, r3, #4
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	665a      	str	r2, [r3, #100]	@ 0x64
 8016ce4:	e01d      	b.n	8016d22 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	68db      	ldr	r3, [r3, #12]
 8016cea:	2b07      	cmp	r3, #7
 8016cec:	d90b      	bls.n	8016d06 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016cf2:	68fa      	ldr	r2, [r7, #12]
 8016cf4:	8812      	ldrh	r2, [r2, #0]
 8016cf6:	b292      	uxth	r2, r2
 8016cf8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016cfe:	1c9a      	adds	r2, r3, #2
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	665a      	str	r2, [r3, #100]	@ 0x64
 8016d04:	e00d      	b.n	8016d22 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016d12:	7812      	ldrb	r2, [r2, #0]
 8016d14:	b2d2      	uxtb	r2, r2
 8016d16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016d1c:	1c5a      	adds	r2, r3, #1
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8016d28:	b29b      	uxth	r3, r3
 8016d2a:	3b01      	subs	r3, #1
 8016d2c:	b29a      	uxth	r2, r3
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8016d3a:	b29b      	uxth	r3, r3
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d1c2      	bne.n	8016cc6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8016d40:	6878      	ldr	r0, [r7, #4]
 8016d42:	f000 f99d 	bl	8017080 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	2201      	movs	r2, #1
 8016d4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d003      	beq.n	8016d60 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8016d58:	6878      	ldr	r0, [r7, #4]
 8016d5a:	f000 f901 	bl	8016f60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8016d5e:	e0d0      	b.n	8016f02 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8016d60:	7cfb      	ldrb	r3, [r7, #19]
 8016d62:	2b05      	cmp	r3, #5
 8016d64:	d103      	bne.n	8016d6e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f000 f8e6 	bl	8016f38 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8016d6c:	e0c6      	b.n	8016efc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8016d6e:	7cfb      	ldrb	r3, [r7, #19]
 8016d70:	2b04      	cmp	r3, #4
 8016d72:	d103      	bne.n	8016d7c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f000 f8d5 	bl	8016f24 <HAL_SPI_RxCpltCallback>
    return;
 8016d7a:	e0bf      	b.n	8016efc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8016d7c:	7cfb      	ldrb	r3, [r7, #19]
 8016d7e:	2b03      	cmp	r3, #3
 8016d80:	f040 80bc 	bne.w	8016efc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8016d84:	6878      	ldr	r0, [r7, #4]
 8016d86:	f000 f8c3 	bl	8016f10 <HAL_SPI_TxCpltCallback>
    return;
 8016d8a:	e0b7      	b.n	8016efc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8016d8c:	69bb      	ldr	r3, [r7, #24]
 8016d8e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	f000 80b5 	beq.w	8016f02 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8016d98:	69bb      	ldr	r3, [r7, #24]
 8016d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d00f      	beq.n	8016dc2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016da8:	f043 0204 	orr.w	r2, r3, #4
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	699a      	ldr	r2, [r3, #24]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016dc0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8016dc2:	69bb      	ldr	r3, [r7, #24]
 8016dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d00f      	beq.n	8016dec <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016dd2:	f043 0201 	orr.w	r2, r3, #1
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	699a      	ldr	r2, [r3, #24]
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016dea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8016dec:	69bb      	ldr	r3, [r7, #24]
 8016dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d00f      	beq.n	8016e16 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016dfc:	f043 0208 	orr.w	r2, r3, #8
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	699a      	ldr	r2, [r3, #24]
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016e14:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8016e16:	69bb      	ldr	r3, [r7, #24]
 8016e18:	f003 0320 	and.w	r3, r3, #32
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d00f      	beq.n	8016e40 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016e26:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	699a      	ldr	r2, [r3, #24]
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	f042 0220 	orr.w	r2, r2, #32
 8016e3e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d05a      	beq.n	8016f00 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	681a      	ldr	r2, [r3, #0]
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	f022 0201 	bic.w	r2, r2, #1
 8016e58:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	6919      	ldr	r1, [r3, #16]
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681a      	ldr	r2, [r3, #0]
 8016e64:	4b28      	ldr	r3, [pc, #160]	@ (8016f08 <HAL_SPI_IRQHandler+0x394>)
 8016e66:	400b      	ands	r3, r1
 8016e68:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8016e6a:	697b      	ldr	r3, [r7, #20]
 8016e6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8016e70:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8016e74:	d138      	bne.n	8016ee8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	689a      	ldr	r2, [r3, #8]
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8016e84:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d013      	beq.n	8016eb6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016e92:	4a1e      	ldr	r2, [pc, #120]	@ (8016f0c <HAL_SPI_IRQHandler+0x398>)
 8016e94:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f7f8 fc5a 	bl	800f754 <HAL_DMA_Abort_IT>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d007      	beq.n	8016eb6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016eac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d020      	beq.n	8016f00 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016ec2:	4a12      	ldr	r2, [pc, #72]	@ (8016f0c <HAL_SPI_IRQHandler+0x398>)
 8016ec4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f7f8 fc42 	bl	800f754 <HAL_DMA_Abort_IT>
 8016ed0:	4603      	mov	r3, r0
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d014      	beq.n	8016f00 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016edc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8016ee6:	e00b      	b.n	8016f00 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2201      	movs	r2, #1
 8016eec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8016ef0:	6878      	ldr	r0, [r7, #4]
 8016ef2:	f000 f835 	bl	8016f60 <HAL_SPI_ErrorCallback>
    return;
 8016ef6:	e003      	b.n	8016f00 <HAL_SPI_IRQHandler+0x38c>
    return;
 8016ef8:	bf00      	nop
 8016efa:	e002      	b.n	8016f02 <HAL_SPI_IRQHandler+0x38e>
    return;
 8016efc:	bf00      	nop
 8016efe:	e000      	b.n	8016f02 <HAL_SPI_IRQHandler+0x38e>
    return;
 8016f00:	bf00      	nop
  }
}
 8016f02:	3728      	adds	r7, #40	@ 0x28
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}
 8016f08:	fffffc94 	.word	0xfffffc94
 8016f0c:	0801704d 	.word	0x0801704d

08016f10 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016f10:	b480      	push	{r7}
 8016f12:	b083      	sub	sp, #12
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8016f18:	bf00      	nop
 8016f1a:	370c      	adds	r7, #12
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f22:	4770      	bx	lr

08016f24 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016f24:	b480      	push	{r7}
 8016f26:	b083      	sub	sp, #12
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8016f2c:	bf00      	nop
 8016f2e:	370c      	adds	r7, #12
 8016f30:	46bd      	mov	sp, r7
 8016f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f36:	4770      	bx	lr

08016f38 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016f38:	b480      	push	{r7}
 8016f3a:	b083      	sub	sp, #12
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8016f40:	bf00      	nop
 8016f42:	370c      	adds	r7, #12
 8016f44:	46bd      	mov	sp, r7
 8016f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4a:	4770      	bx	lr

08016f4c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016f4c:	b480      	push	{r7}
 8016f4e:	b083      	sub	sp, #12
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8016f54:	bf00      	nop
 8016f56:	370c      	adds	r7, #12
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5e:	4770      	bx	lr

08016f60 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016f60:	b480      	push	{r7}
 8016f62:	b083      	sub	sp, #12
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8016f68:	bf00      	nop
 8016f6a:	370c      	adds	r7, #12
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f72:	4770      	bx	lr

08016f74 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016f74:	b480      	push	{r7}
 8016f76:	b083      	sub	sp, #12
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8016f7c:	bf00      	nop
 8016f7e:	370c      	adds	r7, #12
 8016f80:	46bd      	mov	sp, r7
 8016f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f86:	4770      	bx	lr

08016f88 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8016f88:	b480      	push	{r7}
 8016f8a:	b083      	sub	sp, #12
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016f96:	b2db      	uxtb	r3, r3
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	370c      	adds	r7, #12
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa2:	4770      	bx	lr

08016fa4 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b084      	sub	sp, #16
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016fb0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016fb8:	b2db      	uxtb	r3, r3
 8016fba:	2b07      	cmp	r3, #7
 8016fbc:	d011      	beq.n	8016fe2 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016fc2:	69db      	ldr	r3, [r3, #28]
 8016fc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016fc8:	d103      	bne.n	8016fd2 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8016fca:	68f8      	ldr	r0, [r7, #12]
 8016fcc:	f7ff ffa0 	bl	8016f10 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8016fd0:	e007      	b.n	8016fe2 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	691a      	ldr	r2, [r3, #16]
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	f042 0208 	orr.w	r2, r2, #8
 8016fe0:	611a      	str	r2, [r3, #16]
}
 8016fe2:	bf00      	nop
 8016fe4:	3710      	adds	r7, #16
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}

08016fea <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016fea:	b580      	push	{r7, lr}
 8016fec:	b084      	sub	sp, #16
 8016fee:	af00      	add	r7, sp, #0
 8016ff0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016ff6:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8016ff8:	68f8      	ldr	r0, [r7, #12]
 8016ffa:	f7ff ffa7 	bl	8016f4c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8016ffe:	bf00      	nop
 8017000:	3710      	adds	r7, #16
 8017002:	46bd      	mov	sp, r7
 8017004:	bd80      	pop	{r7, pc}

08017006 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8017006:	b580      	push	{r7, lr}
 8017008:	b084      	sub	sp, #16
 801700a:	af00      	add	r7, sp, #0
 801700c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017012:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8017014:	6878      	ldr	r0, [r7, #4]
 8017016:	f7f9 fd0d 	bl	8010a34 <HAL_DMA_GetError>
 801701a:	4603      	mov	r3, r0
 801701c:	2b02      	cmp	r3, #2
 801701e:	d011      	beq.n	8017044 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8017020:	68f8      	ldr	r0, [r7, #12]
 8017022:	f000 f82d 	bl	8017080 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801702c:	f043 0210 	orr.w	r2, r3, #16
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	2201      	movs	r2, #1
 801703a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801703e:	68f8      	ldr	r0, [r7, #12]
 8017040:	f7ff ff8e 	bl	8016f60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8017044:	bf00      	nop
 8017046:	3710      	adds	r7, #16
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}

0801704c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801704c:	b580      	push	{r7, lr}
 801704e:	b084      	sub	sp, #16
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017058:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	2200      	movs	r2, #0
 801705e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	2200      	movs	r2, #0
 8017066:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	2201      	movs	r2, #1
 801706e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8017072:	68f8      	ldr	r0, [r7, #12]
 8017074:	f7ff ff74 	bl	8016f60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8017078:	bf00      	nop
 801707a:	3710      	adds	r7, #16
 801707c:	46bd      	mov	sp, r7
 801707e:	bd80      	pop	{r7, pc}

08017080 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8017080:	b480      	push	{r7}
 8017082:	b085      	sub	sp, #20
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	695b      	ldr	r3, [r3, #20]
 801708e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	699a      	ldr	r2, [r3, #24]
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	f042 0208 	orr.w	r2, r2, #8
 801709e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	699a      	ldr	r2, [r3, #24]
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	f042 0210 	orr.w	r2, r2, #16
 80170ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	681a      	ldr	r2, [r3, #0]
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	f022 0201 	bic.w	r2, r2, #1
 80170be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	6919      	ldr	r1, [r3, #16]
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	681a      	ldr	r2, [r3, #0]
 80170ca:	4b3c      	ldr	r3, [pc, #240]	@ (80171bc <SPI_CloseTransfer+0x13c>)
 80170cc:	400b      	ands	r3, r1
 80170ce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	689a      	ldr	r2, [r3, #8]
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80170de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80170e6:	b2db      	uxtb	r3, r3
 80170e8:	2b04      	cmp	r3, #4
 80170ea:	d014      	beq.n	8017116 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	f003 0320 	and.w	r3, r3, #32
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d00f      	beq.n	8017116 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80170fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	699a      	ldr	r2, [r3, #24]
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	f042 0220 	orr.w	r2, r2, #32
 8017114:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801711c:	b2db      	uxtb	r3, r3
 801711e:	2b03      	cmp	r3, #3
 8017120:	d014      	beq.n	801714c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017128:	2b00      	cmp	r3, #0
 801712a:	d00f      	beq.n	801714c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017132:	f043 0204 	orr.w	r2, r3, #4
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	699a      	ldr	r2, [r3, #24]
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801714a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017152:	2b00      	cmp	r3, #0
 8017154:	d00f      	beq.n	8017176 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801715c:	f043 0201 	orr.w	r2, r3, #1
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	699a      	ldr	r2, [r3, #24]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017174:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801717c:	2b00      	cmp	r3, #0
 801717e:	d00f      	beq.n	80171a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017186:	f043 0208 	orr.w	r2, r3, #8
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	699a      	ldr	r2, [r3, #24]
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801719e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	2200      	movs	r2, #0
 80171a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	2200      	movs	r2, #0
 80171ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80171b0:	bf00      	nop
 80171b2:	3714      	adds	r7, #20
 80171b4:	46bd      	mov	sp, r7
 80171b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ba:	4770      	bx	lr
 80171bc:	fffffc90 	.word	0xfffffc90

080171c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80171c0:	b480      	push	{r7}
 80171c2:	b085      	sub	sp, #20
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80171cc:	095b      	lsrs	r3, r3, #5
 80171ce:	3301      	adds	r3, #1
 80171d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	68db      	ldr	r3, [r3, #12]
 80171d6:	3301      	adds	r3, #1
 80171d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80171da:	68bb      	ldr	r3, [r7, #8]
 80171dc:	3307      	adds	r3, #7
 80171de:	08db      	lsrs	r3, r3, #3
 80171e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80171e2:	68bb      	ldr	r3, [r7, #8]
 80171e4:	68fa      	ldr	r2, [r7, #12]
 80171e6:	fb02 f303 	mul.w	r3, r2, r3
}
 80171ea:	4618      	mov	r0, r3
 80171ec:	3714      	adds	r7, #20
 80171ee:	46bd      	mov	sp, r7
 80171f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f4:	4770      	bx	lr

080171f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80171f6:	b580      	push	{r7, lr}
 80171f8:	b082      	sub	sp, #8
 80171fa:	af00      	add	r7, sp, #0
 80171fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d101      	bne.n	8017208 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8017204:	2301      	movs	r3, #1
 8017206:	e049      	b.n	801729c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801720e:	b2db      	uxtb	r3, r3
 8017210:	2b00      	cmp	r3, #0
 8017212:	d106      	bne.n	8017222 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2200      	movs	r2, #0
 8017218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801721c:	6878      	ldr	r0, [r7, #4]
 801721e:	f7f3 fce9 	bl	800abf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	2202      	movs	r2, #2
 8017226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	681a      	ldr	r2, [r3, #0]
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	3304      	adds	r3, #4
 8017232:	4619      	mov	r1, r3
 8017234:	4610      	mov	r0, r2
 8017236:	f001 f907 	bl	8018448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2201      	movs	r2, #1
 801723e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	2201      	movs	r2, #1
 8017246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	2201      	movs	r2, #1
 801724e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	2201      	movs	r2, #1
 8017256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	2201      	movs	r2, #1
 801725e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	2201      	movs	r2, #1
 8017266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2201      	movs	r2, #1
 801726e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	2201      	movs	r2, #1
 8017276:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	2201      	movs	r2, #1
 801727e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	2201      	movs	r2, #1
 8017286:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2201      	movs	r2, #1
 801728e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	2201      	movs	r2, #1
 8017296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801729a:	2300      	movs	r3, #0
}
 801729c:	4618      	mov	r0, r3
 801729e:	3708      	adds	r7, #8
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80172a4:	b480      	push	{r7}
 80172a6:	b085      	sub	sp, #20
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80172b2:	b2db      	uxtb	r3, r3
 80172b4:	2b01      	cmp	r3, #1
 80172b6:	d001      	beq.n	80172bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80172b8:	2301      	movs	r3, #1
 80172ba:	e056      	b.n	801736a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	2202      	movs	r2, #2
 80172c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	4a2b      	ldr	r2, [pc, #172]	@ (8017378 <HAL_TIM_Base_Start+0xd4>)
 80172ca:	4293      	cmp	r3, r2
 80172cc:	d02c      	beq.n	8017328 <HAL_TIM_Base_Start+0x84>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80172d6:	d027      	beq.n	8017328 <HAL_TIM_Base_Start+0x84>
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	4a27      	ldr	r2, [pc, #156]	@ (801737c <HAL_TIM_Base_Start+0xd8>)
 80172de:	4293      	cmp	r3, r2
 80172e0:	d022      	beq.n	8017328 <HAL_TIM_Base_Start+0x84>
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	4a26      	ldr	r2, [pc, #152]	@ (8017380 <HAL_TIM_Base_Start+0xdc>)
 80172e8:	4293      	cmp	r3, r2
 80172ea:	d01d      	beq.n	8017328 <HAL_TIM_Base_Start+0x84>
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	4a24      	ldr	r2, [pc, #144]	@ (8017384 <HAL_TIM_Base_Start+0xe0>)
 80172f2:	4293      	cmp	r3, r2
 80172f4:	d018      	beq.n	8017328 <HAL_TIM_Base_Start+0x84>
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	4a23      	ldr	r2, [pc, #140]	@ (8017388 <HAL_TIM_Base_Start+0xe4>)
 80172fc:	4293      	cmp	r3, r2
 80172fe:	d013      	beq.n	8017328 <HAL_TIM_Base_Start+0x84>
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	4a21      	ldr	r2, [pc, #132]	@ (801738c <HAL_TIM_Base_Start+0xe8>)
 8017306:	4293      	cmp	r3, r2
 8017308:	d00e      	beq.n	8017328 <HAL_TIM_Base_Start+0x84>
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	4a20      	ldr	r2, [pc, #128]	@ (8017390 <HAL_TIM_Base_Start+0xec>)
 8017310:	4293      	cmp	r3, r2
 8017312:	d009      	beq.n	8017328 <HAL_TIM_Base_Start+0x84>
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	4a1e      	ldr	r2, [pc, #120]	@ (8017394 <HAL_TIM_Base_Start+0xf0>)
 801731a:	4293      	cmp	r3, r2
 801731c:	d004      	beq.n	8017328 <HAL_TIM_Base_Start+0x84>
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	4a1d      	ldr	r2, [pc, #116]	@ (8017398 <HAL_TIM_Base_Start+0xf4>)
 8017324:	4293      	cmp	r3, r2
 8017326:	d115      	bne.n	8017354 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	689a      	ldr	r2, [r3, #8]
 801732e:	4b1b      	ldr	r3, [pc, #108]	@ (801739c <HAL_TIM_Base_Start+0xf8>)
 8017330:	4013      	ands	r3, r2
 8017332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	2b06      	cmp	r3, #6
 8017338:	d015      	beq.n	8017366 <HAL_TIM_Base_Start+0xc2>
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017340:	d011      	beq.n	8017366 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	681a      	ldr	r2, [r3, #0]
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	f042 0201 	orr.w	r2, r2, #1
 8017350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017352:	e008      	b.n	8017366 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	681a      	ldr	r2, [r3, #0]
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	f042 0201 	orr.w	r2, r2, #1
 8017362:	601a      	str	r2, [r3, #0]
 8017364:	e000      	b.n	8017368 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017366:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8017368:	2300      	movs	r3, #0
}
 801736a:	4618      	mov	r0, r3
 801736c:	3714      	adds	r7, #20
 801736e:	46bd      	mov	sp, r7
 8017370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017374:	4770      	bx	lr
 8017376:	bf00      	nop
 8017378:	40010000 	.word	0x40010000
 801737c:	40000400 	.word	0x40000400
 8017380:	40000800 	.word	0x40000800
 8017384:	40000c00 	.word	0x40000c00
 8017388:	40010400 	.word	0x40010400
 801738c:	40001800 	.word	0x40001800
 8017390:	40014000 	.word	0x40014000
 8017394:	4000e000 	.word	0x4000e000
 8017398:	4000e400 	.word	0x4000e400
 801739c:	00010007 	.word	0x00010007

080173a0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80173a0:	b480      	push	{r7}
 80173a2:	b083      	sub	sp, #12
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	6a1a      	ldr	r2, [r3, #32]
 80173ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80173b2:	4013      	ands	r3, r2
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d10f      	bne.n	80173d8 <HAL_TIM_Base_Stop+0x38>
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	6a1a      	ldr	r2, [r3, #32]
 80173be:	f240 4344 	movw	r3, #1092	@ 0x444
 80173c2:	4013      	ands	r3, r2
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d107      	bne.n	80173d8 <HAL_TIM_Base_Stop+0x38>
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	681a      	ldr	r2, [r3, #0]
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	f022 0201 	bic.w	r2, r2, #1
 80173d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	2201      	movs	r2, #1
 80173dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80173e0:	2300      	movs	r3, #0
}
 80173e2:	4618      	mov	r0, r3
 80173e4:	370c      	adds	r7, #12
 80173e6:	46bd      	mov	sp, r7
 80173e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ec:	4770      	bx	lr
	...

080173f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80173f0:	b480      	push	{r7}
 80173f2:	b085      	sub	sp, #20
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80173fe:	b2db      	uxtb	r3, r3
 8017400:	2b01      	cmp	r3, #1
 8017402:	d001      	beq.n	8017408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8017404:	2301      	movs	r3, #1
 8017406:	e05e      	b.n	80174c6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2202      	movs	r2, #2
 801740c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	68da      	ldr	r2, [r3, #12]
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	f042 0201 	orr.w	r2, r2, #1
 801741e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	4a2b      	ldr	r2, [pc, #172]	@ (80174d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8017426:	4293      	cmp	r3, r2
 8017428:	d02c      	beq.n	8017484 <HAL_TIM_Base_Start_IT+0x94>
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017432:	d027      	beq.n	8017484 <HAL_TIM_Base_Start_IT+0x94>
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	4a27      	ldr	r2, [pc, #156]	@ (80174d8 <HAL_TIM_Base_Start_IT+0xe8>)
 801743a:	4293      	cmp	r3, r2
 801743c:	d022      	beq.n	8017484 <HAL_TIM_Base_Start_IT+0x94>
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	4a26      	ldr	r2, [pc, #152]	@ (80174dc <HAL_TIM_Base_Start_IT+0xec>)
 8017444:	4293      	cmp	r3, r2
 8017446:	d01d      	beq.n	8017484 <HAL_TIM_Base_Start_IT+0x94>
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	4a24      	ldr	r2, [pc, #144]	@ (80174e0 <HAL_TIM_Base_Start_IT+0xf0>)
 801744e:	4293      	cmp	r3, r2
 8017450:	d018      	beq.n	8017484 <HAL_TIM_Base_Start_IT+0x94>
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	4a23      	ldr	r2, [pc, #140]	@ (80174e4 <HAL_TIM_Base_Start_IT+0xf4>)
 8017458:	4293      	cmp	r3, r2
 801745a:	d013      	beq.n	8017484 <HAL_TIM_Base_Start_IT+0x94>
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	4a21      	ldr	r2, [pc, #132]	@ (80174e8 <HAL_TIM_Base_Start_IT+0xf8>)
 8017462:	4293      	cmp	r3, r2
 8017464:	d00e      	beq.n	8017484 <HAL_TIM_Base_Start_IT+0x94>
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	4a20      	ldr	r2, [pc, #128]	@ (80174ec <HAL_TIM_Base_Start_IT+0xfc>)
 801746c:	4293      	cmp	r3, r2
 801746e:	d009      	beq.n	8017484 <HAL_TIM_Base_Start_IT+0x94>
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	4a1e      	ldr	r2, [pc, #120]	@ (80174f0 <HAL_TIM_Base_Start_IT+0x100>)
 8017476:	4293      	cmp	r3, r2
 8017478:	d004      	beq.n	8017484 <HAL_TIM_Base_Start_IT+0x94>
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	4a1d      	ldr	r2, [pc, #116]	@ (80174f4 <HAL_TIM_Base_Start_IT+0x104>)
 8017480:	4293      	cmp	r3, r2
 8017482:	d115      	bne.n	80174b0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	689a      	ldr	r2, [r3, #8]
 801748a:	4b1b      	ldr	r3, [pc, #108]	@ (80174f8 <HAL_TIM_Base_Start_IT+0x108>)
 801748c:	4013      	ands	r3, r2
 801748e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	2b06      	cmp	r3, #6
 8017494:	d015      	beq.n	80174c2 <HAL_TIM_Base_Start_IT+0xd2>
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801749c:	d011      	beq.n	80174c2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	681a      	ldr	r2, [r3, #0]
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	f042 0201 	orr.w	r2, r2, #1
 80174ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80174ae:	e008      	b.n	80174c2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	681a      	ldr	r2, [r3, #0]
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	f042 0201 	orr.w	r2, r2, #1
 80174be:	601a      	str	r2, [r3, #0]
 80174c0:	e000      	b.n	80174c4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80174c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80174c4:	2300      	movs	r3, #0
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3714      	adds	r7, #20
 80174ca:	46bd      	mov	sp, r7
 80174cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d0:	4770      	bx	lr
 80174d2:	bf00      	nop
 80174d4:	40010000 	.word	0x40010000
 80174d8:	40000400 	.word	0x40000400
 80174dc:	40000800 	.word	0x40000800
 80174e0:	40000c00 	.word	0x40000c00
 80174e4:	40010400 	.word	0x40010400
 80174e8:	40001800 	.word	0x40001800
 80174ec:	40014000 	.word	0x40014000
 80174f0:	4000e000 	.word	0x4000e000
 80174f4:	4000e400 	.word	0x4000e400
 80174f8:	00010007 	.word	0x00010007

080174fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b082      	sub	sp, #8
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d101      	bne.n	801750e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801750a:	2301      	movs	r3, #1
 801750c:	e049      	b.n	80175a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8017514:	b2db      	uxtb	r3, r3
 8017516:	2b00      	cmp	r3, #0
 8017518:	d106      	bne.n	8017528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	2200      	movs	r2, #0
 801751e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8017522:	6878      	ldr	r0, [r7, #4]
 8017524:	f000 f841 	bl	80175aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	2202      	movs	r2, #2
 801752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	681a      	ldr	r2, [r3, #0]
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	3304      	adds	r3, #4
 8017538:	4619      	mov	r1, r3
 801753a:	4610      	mov	r0, r2
 801753c:	f000 ff84 	bl	8018448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	2201      	movs	r2, #1
 8017544:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	2201      	movs	r2, #1
 801754c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	2201      	movs	r2, #1
 8017554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	2201      	movs	r2, #1
 801755c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	2201      	movs	r2, #1
 8017564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	2201      	movs	r2, #1
 801756c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	2201      	movs	r2, #1
 8017574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	2201      	movs	r2, #1
 801757c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2201      	movs	r2, #1
 8017584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	2201      	movs	r2, #1
 801758c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	2201      	movs	r2, #1
 8017594:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	2201      	movs	r2, #1
 801759c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80175a0:	2300      	movs	r3, #0
}
 80175a2:	4618      	mov	r0, r3
 80175a4:	3708      	adds	r7, #8
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}

080175aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80175aa:	b480      	push	{r7}
 80175ac:	b083      	sub	sp, #12
 80175ae:	af00      	add	r7, sp, #0
 80175b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80175b2:	bf00      	nop
 80175b4:	370c      	adds	r7, #12
 80175b6:	46bd      	mov	sp, r7
 80175b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175bc:	4770      	bx	lr
	...

080175c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b086      	sub	sp, #24
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	60f8      	str	r0, [r7, #12]
 80175c8:	60b9      	str	r1, [r7, #8]
 80175ca:	607a      	str	r2, [r7, #4]
 80175cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80175ce:	2300      	movs	r3, #0
 80175d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80175d2:	68bb      	ldr	r3, [r7, #8]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d109      	bne.n	80175ec <HAL_TIM_PWM_Start_DMA+0x2c>
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80175de:	b2db      	uxtb	r3, r3
 80175e0:	2b02      	cmp	r3, #2
 80175e2:	bf0c      	ite	eq
 80175e4:	2301      	moveq	r3, #1
 80175e6:	2300      	movne	r3, #0
 80175e8:	b2db      	uxtb	r3, r3
 80175ea:	e03c      	b.n	8017666 <HAL_TIM_PWM_Start_DMA+0xa6>
 80175ec:	68bb      	ldr	r3, [r7, #8]
 80175ee:	2b04      	cmp	r3, #4
 80175f0:	d109      	bne.n	8017606 <HAL_TIM_PWM_Start_DMA+0x46>
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80175f8:	b2db      	uxtb	r3, r3
 80175fa:	2b02      	cmp	r3, #2
 80175fc:	bf0c      	ite	eq
 80175fe:	2301      	moveq	r3, #1
 8017600:	2300      	movne	r3, #0
 8017602:	b2db      	uxtb	r3, r3
 8017604:	e02f      	b.n	8017666 <HAL_TIM_PWM_Start_DMA+0xa6>
 8017606:	68bb      	ldr	r3, [r7, #8]
 8017608:	2b08      	cmp	r3, #8
 801760a:	d109      	bne.n	8017620 <HAL_TIM_PWM_Start_DMA+0x60>
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8017612:	b2db      	uxtb	r3, r3
 8017614:	2b02      	cmp	r3, #2
 8017616:	bf0c      	ite	eq
 8017618:	2301      	moveq	r3, #1
 801761a:	2300      	movne	r3, #0
 801761c:	b2db      	uxtb	r3, r3
 801761e:	e022      	b.n	8017666 <HAL_TIM_PWM_Start_DMA+0xa6>
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	2b0c      	cmp	r3, #12
 8017624:	d109      	bne.n	801763a <HAL_TIM_PWM_Start_DMA+0x7a>
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801762c:	b2db      	uxtb	r3, r3
 801762e:	2b02      	cmp	r3, #2
 8017630:	bf0c      	ite	eq
 8017632:	2301      	moveq	r3, #1
 8017634:	2300      	movne	r3, #0
 8017636:	b2db      	uxtb	r3, r3
 8017638:	e015      	b.n	8017666 <HAL_TIM_PWM_Start_DMA+0xa6>
 801763a:	68bb      	ldr	r3, [r7, #8]
 801763c:	2b10      	cmp	r3, #16
 801763e:	d109      	bne.n	8017654 <HAL_TIM_PWM_Start_DMA+0x94>
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017646:	b2db      	uxtb	r3, r3
 8017648:	2b02      	cmp	r3, #2
 801764a:	bf0c      	ite	eq
 801764c:	2301      	moveq	r3, #1
 801764e:	2300      	movne	r3, #0
 8017650:	b2db      	uxtb	r3, r3
 8017652:	e008      	b.n	8017666 <HAL_TIM_PWM_Start_DMA+0xa6>
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801765a:	b2db      	uxtb	r3, r3
 801765c:	2b02      	cmp	r3, #2
 801765e:	bf0c      	ite	eq
 8017660:	2301      	moveq	r3, #1
 8017662:	2300      	movne	r3, #0
 8017664:	b2db      	uxtb	r3, r3
 8017666:	2b00      	cmp	r3, #0
 8017668:	d001      	beq.n	801766e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 801766a:	2302      	movs	r3, #2
 801766c:	e1ba      	b.n	80179e4 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801766e:	68bb      	ldr	r3, [r7, #8]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d109      	bne.n	8017688 <HAL_TIM_PWM_Start_DMA+0xc8>
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801767a:	b2db      	uxtb	r3, r3
 801767c:	2b01      	cmp	r3, #1
 801767e:	bf0c      	ite	eq
 8017680:	2301      	moveq	r3, #1
 8017682:	2300      	movne	r3, #0
 8017684:	b2db      	uxtb	r3, r3
 8017686:	e03c      	b.n	8017702 <HAL_TIM_PWM_Start_DMA+0x142>
 8017688:	68bb      	ldr	r3, [r7, #8]
 801768a:	2b04      	cmp	r3, #4
 801768c:	d109      	bne.n	80176a2 <HAL_TIM_PWM_Start_DMA+0xe2>
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8017694:	b2db      	uxtb	r3, r3
 8017696:	2b01      	cmp	r3, #1
 8017698:	bf0c      	ite	eq
 801769a:	2301      	moveq	r3, #1
 801769c:	2300      	movne	r3, #0
 801769e:	b2db      	uxtb	r3, r3
 80176a0:	e02f      	b.n	8017702 <HAL_TIM_PWM_Start_DMA+0x142>
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	2b08      	cmp	r3, #8
 80176a6:	d109      	bne.n	80176bc <HAL_TIM_PWM_Start_DMA+0xfc>
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80176ae:	b2db      	uxtb	r3, r3
 80176b0:	2b01      	cmp	r3, #1
 80176b2:	bf0c      	ite	eq
 80176b4:	2301      	moveq	r3, #1
 80176b6:	2300      	movne	r3, #0
 80176b8:	b2db      	uxtb	r3, r3
 80176ba:	e022      	b.n	8017702 <HAL_TIM_PWM_Start_DMA+0x142>
 80176bc:	68bb      	ldr	r3, [r7, #8]
 80176be:	2b0c      	cmp	r3, #12
 80176c0:	d109      	bne.n	80176d6 <HAL_TIM_PWM_Start_DMA+0x116>
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80176c8:	b2db      	uxtb	r3, r3
 80176ca:	2b01      	cmp	r3, #1
 80176cc:	bf0c      	ite	eq
 80176ce:	2301      	moveq	r3, #1
 80176d0:	2300      	movne	r3, #0
 80176d2:	b2db      	uxtb	r3, r3
 80176d4:	e015      	b.n	8017702 <HAL_TIM_PWM_Start_DMA+0x142>
 80176d6:	68bb      	ldr	r3, [r7, #8]
 80176d8:	2b10      	cmp	r3, #16
 80176da:	d109      	bne.n	80176f0 <HAL_TIM_PWM_Start_DMA+0x130>
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80176e2:	b2db      	uxtb	r3, r3
 80176e4:	2b01      	cmp	r3, #1
 80176e6:	bf0c      	ite	eq
 80176e8:	2301      	moveq	r3, #1
 80176ea:	2300      	movne	r3, #0
 80176ec:	b2db      	uxtb	r3, r3
 80176ee:	e008      	b.n	8017702 <HAL_TIM_PWM_Start_DMA+0x142>
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80176f6:	b2db      	uxtb	r3, r3
 80176f8:	2b01      	cmp	r3, #1
 80176fa:	bf0c      	ite	eq
 80176fc:	2301      	moveq	r3, #1
 80176fe:	2300      	movne	r3, #0
 8017700:	b2db      	uxtb	r3, r3
 8017702:	2b00      	cmp	r3, #0
 8017704:	d034      	beq.n	8017770 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d002      	beq.n	8017712 <HAL_TIM_PWM_Start_DMA+0x152>
 801770c:	887b      	ldrh	r3, [r7, #2]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d101      	bne.n	8017716 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8017712:	2301      	movs	r3, #1
 8017714:	e166      	b.n	80179e4 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8017716:	68bb      	ldr	r3, [r7, #8]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d104      	bne.n	8017726 <HAL_TIM_PWM_Start_DMA+0x166>
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	2202      	movs	r2, #2
 8017720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8017724:	e026      	b.n	8017774 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8017726:	68bb      	ldr	r3, [r7, #8]
 8017728:	2b04      	cmp	r3, #4
 801772a:	d104      	bne.n	8017736 <HAL_TIM_PWM_Start_DMA+0x176>
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	2202      	movs	r2, #2
 8017730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8017734:	e01e      	b.n	8017774 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8017736:	68bb      	ldr	r3, [r7, #8]
 8017738:	2b08      	cmp	r3, #8
 801773a:	d104      	bne.n	8017746 <HAL_TIM_PWM_Start_DMA+0x186>
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	2202      	movs	r2, #2
 8017740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8017744:	e016      	b.n	8017774 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8017746:	68bb      	ldr	r3, [r7, #8]
 8017748:	2b0c      	cmp	r3, #12
 801774a:	d104      	bne.n	8017756 <HAL_TIM_PWM_Start_DMA+0x196>
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	2202      	movs	r2, #2
 8017750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8017754:	e00e      	b.n	8017774 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8017756:	68bb      	ldr	r3, [r7, #8]
 8017758:	2b10      	cmp	r3, #16
 801775a:	d104      	bne.n	8017766 <HAL_TIM_PWM_Start_DMA+0x1a6>
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	2202      	movs	r2, #2
 8017760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8017764:	e006      	b.n	8017774 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	2202      	movs	r2, #2
 801776a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801776e:	e001      	b.n	8017774 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8017770:	2301      	movs	r3, #1
 8017772:	e137      	b.n	80179e4 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8017774:	68bb      	ldr	r3, [r7, #8]
 8017776:	2b0c      	cmp	r3, #12
 8017778:	f200 80ae 	bhi.w	80178d8 <HAL_TIM_PWM_Start_DMA+0x318>
 801777c:	a201      	add	r2, pc, #4	@ (adr r2, 8017784 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 801777e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017782:	bf00      	nop
 8017784:	080177b9 	.word	0x080177b9
 8017788:	080178d9 	.word	0x080178d9
 801778c:	080178d9 	.word	0x080178d9
 8017790:	080178d9 	.word	0x080178d9
 8017794:	08017801 	.word	0x08017801
 8017798:	080178d9 	.word	0x080178d9
 801779c:	080178d9 	.word	0x080178d9
 80177a0:	080178d9 	.word	0x080178d9
 80177a4:	08017849 	.word	0x08017849
 80177a8:	080178d9 	.word	0x080178d9
 80177ac:	080178d9 	.word	0x080178d9
 80177b0:	080178d9 	.word	0x080178d9
 80177b4:	08017891 	.word	0x08017891
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177bc:	4a8b      	ldr	r2, [pc, #556]	@ (80179ec <HAL_TIM_PWM_Start_DMA+0x42c>)
 80177be:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177c4:	4a8a      	ldr	r2, [pc, #552]	@ (80179f0 <HAL_TIM_PWM_Start_DMA+0x430>)
 80177c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177cc:	4a89      	ldr	r2, [pc, #548]	@ (80179f4 <HAL_TIM_PWM_Start_DMA+0x434>)
 80177ce:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80177d4:	6879      	ldr	r1, [r7, #4]
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	3334      	adds	r3, #52	@ 0x34
 80177dc:	461a      	mov	r2, r3
 80177de:	887b      	ldrh	r3, [r7, #2]
 80177e0:	f7f7 fa30 	bl	800ec44 <HAL_DMA_Start_IT>
 80177e4:	4603      	mov	r3, r0
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d001      	beq.n	80177ee <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80177ea:	2301      	movs	r3, #1
 80177ec:	e0fa      	b.n	80179e4 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	68da      	ldr	r2, [r3, #12]
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80177fc:	60da      	str	r2, [r3, #12]
      break;
 80177fe:	e06e      	b.n	80178de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017804:	4a79      	ldr	r2, [pc, #484]	@ (80179ec <HAL_TIM_PWM_Start_DMA+0x42c>)
 8017806:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801780c:	4a78      	ldr	r2, [pc, #480]	@ (80179f0 <HAL_TIM_PWM_Start_DMA+0x430>)
 801780e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017814:	4a77      	ldr	r2, [pc, #476]	@ (80179f4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8017816:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801781c:	6879      	ldr	r1, [r7, #4]
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	3338      	adds	r3, #56	@ 0x38
 8017824:	461a      	mov	r2, r3
 8017826:	887b      	ldrh	r3, [r7, #2]
 8017828:	f7f7 fa0c 	bl	800ec44 <HAL_DMA_Start_IT>
 801782c:	4603      	mov	r3, r0
 801782e:	2b00      	cmp	r3, #0
 8017830:	d001      	beq.n	8017836 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8017832:	2301      	movs	r3, #1
 8017834:	e0d6      	b.n	80179e4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	68da      	ldr	r2, [r3, #12]
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8017844:	60da      	str	r2, [r3, #12]
      break;
 8017846:	e04a      	b.n	80178de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801784c:	4a67      	ldr	r2, [pc, #412]	@ (80179ec <HAL_TIM_PWM_Start_DMA+0x42c>)
 801784e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017854:	4a66      	ldr	r2, [pc, #408]	@ (80179f0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8017856:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801785c:	4a65      	ldr	r2, [pc, #404]	@ (80179f4 <HAL_TIM_PWM_Start_DMA+0x434>)
 801785e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8017864:	6879      	ldr	r1, [r7, #4]
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	333c      	adds	r3, #60	@ 0x3c
 801786c:	461a      	mov	r2, r3
 801786e:	887b      	ldrh	r3, [r7, #2]
 8017870:	f7f7 f9e8 	bl	800ec44 <HAL_DMA_Start_IT>
 8017874:	4603      	mov	r3, r0
 8017876:	2b00      	cmp	r3, #0
 8017878:	d001      	beq.n	801787e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801787a:	2301      	movs	r3, #1
 801787c:	e0b2      	b.n	80179e4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	68da      	ldr	r2, [r3, #12]
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801788c:	60da      	str	r2, [r3, #12]
      break;
 801788e:	e026      	b.n	80178de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017894:	4a55      	ldr	r2, [pc, #340]	@ (80179ec <HAL_TIM_PWM_Start_DMA+0x42c>)
 8017896:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801789c:	4a54      	ldr	r2, [pc, #336]	@ (80179f0 <HAL_TIM_PWM_Start_DMA+0x430>)
 801789e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80178a4:	4a53      	ldr	r2, [pc, #332]	@ (80179f4 <HAL_TIM_PWM_Start_DMA+0x434>)
 80178a6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80178ac:	6879      	ldr	r1, [r7, #4]
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	3340      	adds	r3, #64	@ 0x40
 80178b4:	461a      	mov	r2, r3
 80178b6:	887b      	ldrh	r3, [r7, #2]
 80178b8:	f7f7 f9c4 	bl	800ec44 <HAL_DMA_Start_IT>
 80178bc:	4603      	mov	r3, r0
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d001      	beq.n	80178c6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80178c2:	2301      	movs	r3, #1
 80178c4:	e08e      	b.n	80179e4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	68da      	ldr	r2, [r3, #12]
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80178d4:	60da      	str	r2, [r3, #12]
      break;
 80178d6:	e002      	b.n	80178de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80178d8:	2301      	movs	r3, #1
 80178da:	75fb      	strb	r3, [r7, #23]
      break;
 80178dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80178de:	7dfb      	ldrb	r3, [r7, #23]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d17e      	bne.n	80179e2 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	2201      	movs	r2, #1
 80178ea:	68b9      	ldr	r1, [r7, #8]
 80178ec:	4618      	mov	r0, r3
 80178ee:	f001 f9cb 	bl	8018c88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	4a40      	ldr	r2, [pc, #256]	@ (80179f8 <HAL_TIM_PWM_Start_DMA+0x438>)
 80178f8:	4293      	cmp	r3, r2
 80178fa:	d013      	beq.n	8017924 <HAL_TIM_PWM_Start_DMA+0x364>
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	4a3e      	ldr	r2, [pc, #248]	@ (80179fc <HAL_TIM_PWM_Start_DMA+0x43c>)
 8017902:	4293      	cmp	r3, r2
 8017904:	d00e      	beq.n	8017924 <HAL_TIM_PWM_Start_DMA+0x364>
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	4a3d      	ldr	r2, [pc, #244]	@ (8017a00 <HAL_TIM_PWM_Start_DMA+0x440>)
 801790c:	4293      	cmp	r3, r2
 801790e:	d009      	beq.n	8017924 <HAL_TIM_PWM_Start_DMA+0x364>
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	4a3b      	ldr	r2, [pc, #236]	@ (8017a04 <HAL_TIM_PWM_Start_DMA+0x444>)
 8017916:	4293      	cmp	r3, r2
 8017918:	d004      	beq.n	8017924 <HAL_TIM_PWM_Start_DMA+0x364>
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	4a3a      	ldr	r2, [pc, #232]	@ (8017a08 <HAL_TIM_PWM_Start_DMA+0x448>)
 8017920:	4293      	cmp	r3, r2
 8017922:	d101      	bne.n	8017928 <HAL_TIM_PWM_Start_DMA+0x368>
 8017924:	2301      	movs	r3, #1
 8017926:	e000      	b.n	801792a <HAL_TIM_PWM_Start_DMA+0x36a>
 8017928:	2300      	movs	r3, #0
 801792a:	2b00      	cmp	r3, #0
 801792c:	d007      	beq.n	801793e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801793c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	4a2d      	ldr	r2, [pc, #180]	@ (80179f8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8017944:	4293      	cmp	r3, r2
 8017946:	d02c      	beq.n	80179a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017950:	d027      	beq.n	80179a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	4a2d      	ldr	r2, [pc, #180]	@ (8017a0c <HAL_TIM_PWM_Start_DMA+0x44c>)
 8017958:	4293      	cmp	r3, r2
 801795a:	d022      	beq.n	80179a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	4a2b      	ldr	r2, [pc, #172]	@ (8017a10 <HAL_TIM_PWM_Start_DMA+0x450>)
 8017962:	4293      	cmp	r3, r2
 8017964:	d01d      	beq.n	80179a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	4a2a      	ldr	r2, [pc, #168]	@ (8017a14 <HAL_TIM_PWM_Start_DMA+0x454>)
 801796c:	4293      	cmp	r3, r2
 801796e:	d018      	beq.n	80179a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	4a21      	ldr	r2, [pc, #132]	@ (80179fc <HAL_TIM_PWM_Start_DMA+0x43c>)
 8017976:	4293      	cmp	r3, r2
 8017978:	d013      	beq.n	80179a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	4a26      	ldr	r2, [pc, #152]	@ (8017a18 <HAL_TIM_PWM_Start_DMA+0x458>)
 8017980:	4293      	cmp	r3, r2
 8017982:	d00e      	beq.n	80179a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	4a1d      	ldr	r2, [pc, #116]	@ (8017a00 <HAL_TIM_PWM_Start_DMA+0x440>)
 801798a:	4293      	cmp	r3, r2
 801798c:	d009      	beq.n	80179a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	4a22      	ldr	r2, [pc, #136]	@ (8017a1c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8017994:	4293      	cmp	r3, r2
 8017996:	d004      	beq.n	80179a2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	4a20      	ldr	r2, [pc, #128]	@ (8017a20 <HAL_TIM_PWM_Start_DMA+0x460>)
 801799e:	4293      	cmp	r3, r2
 80179a0:	d115      	bne.n	80179ce <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	689a      	ldr	r2, [r3, #8]
 80179a8:	4b1e      	ldr	r3, [pc, #120]	@ (8017a24 <HAL_TIM_PWM_Start_DMA+0x464>)
 80179aa:	4013      	ands	r3, r2
 80179ac:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	2b06      	cmp	r3, #6
 80179b2:	d015      	beq.n	80179e0 <HAL_TIM_PWM_Start_DMA+0x420>
 80179b4:	693b      	ldr	r3, [r7, #16]
 80179b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80179ba:	d011      	beq.n	80179e0 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	681a      	ldr	r2, [r3, #0]
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f042 0201 	orr.w	r2, r2, #1
 80179ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80179cc:	e008      	b.n	80179e0 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	681a      	ldr	r2, [r3, #0]
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	f042 0201 	orr.w	r2, r2, #1
 80179dc:	601a      	str	r2, [r3, #0]
 80179de:	e000      	b.n	80179e2 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80179e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80179e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80179e4:	4618      	mov	r0, r3
 80179e6:	3718      	adds	r7, #24
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}
 80179ec:	08018337 	.word	0x08018337
 80179f0:	080183df 	.word	0x080183df
 80179f4:	080182a5 	.word	0x080182a5
 80179f8:	40010000 	.word	0x40010000
 80179fc:	40010400 	.word	0x40010400
 8017a00:	40014000 	.word	0x40014000
 8017a04:	40014400 	.word	0x40014400
 8017a08:	40014800 	.word	0x40014800
 8017a0c:	40000400 	.word	0x40000400
 8017a10:	40000800 	.word	0x40000800
 8017a14:	40000c00 	.word	0x40000c00
 8017a18:	40001800 	.word	0x40001800
 8017a1c:	4000e000 	.word	0x4000e000
 8017a20:	4000e400 	.word	0x4000e400
 8017a24:	00010007 	.word	0x00010007

08017a28 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b084      	sub	sp, #16
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
 8017a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017a32:	2300      	movs	r3, #0
 8017a34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8017a36:	683b      	ldr	r3, [r7, #0]
 8017a38:	2b0c      	cmp	r3, #12
 8017a3a:	d855      	bhi.n	8017ae8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8017a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8017a44 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8017a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a42:	bf00      	nop
 8017a44:	08017a79 	.word	0x08017a79
 8017a48:	08017ae9 	.word	0x08017ae9
 8017a4c:	08017ae9 	.word	0x08017ae9
 8017a50:	08017ae9 	.word	0x08017ae9
 8017a54:	08017a95 	.word	0x08017a95
 8017a58:	08017ae9 	.word	0x08017ae9
 8017a5c:	08017ae9 	.word	0x08017ae9
 8017a60:	08017ae9 	.word	0x08017ae9
 8017a64:	08017ab1 	.word	0x08017ab1
 8017a68:	08017ae9 	.word	0x08017ae9
 8017a6c:	08017ae9 	.word	0x08017ae9
 8017a70:	08017ae9 	.word	0x08017ae9
 8017a74:	08017acd 	.word	0x08017acd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	68da      	ldr	r2, [r3, #12]
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8017a86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7f7 fe61 	bl	800f754 <HAL_DMA_Abort_IT>
      break;
 8017a92:	e02c      	b.n	8017aee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	68da      	ldr	r2, [r3, #12]
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8017aa2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f7f7 fe53 	bl	800f754 <HAL_DMA_Abort_IT>
      break;
 8017aae:	e01e      	b.n	8017aee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	68da      	ldr	r2, [r3, #12]
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8017abe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f7f7 fe45 	bl	800f754 <HAL_DMA_Abort_IT>
      break;
 8017aca:	e010      	b.n	8017aee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	68da      	ldr	r2, [r3, #12]
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8017ada:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f7f7 fe37 	bl	800f754 <HAL_DMA_Abort_IT>
      break;
 8017ae6:	e002      	b.n	8017aee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8017ae8:	2301      	movs	r3, #1
 8017aea:	73fb      	strb	r3, [r7, #15]
      break;
 8017aec:	bf00      	nop
  }

  if (status == HAL_OK)
 8017aee:	7bfb      	ldrb	r3, [r7, #15]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	f040 8081 	bne.w	8017bf8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	2200      	movs	r2, #0
 8017afc:	6839      	ldr	r1, [r7, #0]
 8017afe:	4618      	mov	r0, r3
 8017b00:	f001 f8c2 	bl	8018c88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	4a3e      	ldr	r2, [pc, #248]	@ (8017c04 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8017b0a:	4293      	cmp	r3, r2
 8017b0c:	d013      	beq.n	8017b36 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	4a3d      	ldr	r2, [pc, #244]	@ (8017c08 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8017b14:	4293      	cmp	r3, r2
 8017b16:	d00e      	beq.n	8017b36 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	4a3b      	ldr	r2, [pc, #236]	@ (8017c0c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8017b1e:	4293      	cmp	r3, r2
 8017b20:	d009      	beq.n	8017b36 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	4a3a      	ldr	r2, [pc, #232]	@ (8017c10 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8017b28:	4293      	cmp	r3, r2
 8017b2a:	d004      	beq.n	8017b36 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	4a38      	ldr	r2, [pc, #224]	@ (8017c14 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8017b32:	4293      	cmp	r3, r2
 8017b34:	d101      	bne.n	8017b3a <HAL_TIM_PWM_Stop_DMA+0x112>
 8017b36:	2301      	movs	r3, #1
 8017b38:	e000      	b.n	8017b3c <HAL_TIM_PWM_Stop_DMA+0x114>
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d017      	beq.n	8017b70 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	6a1a      	ldr	r2, [r3, #32]
 8017b46:	f241 1311 	movw	r3, #4369	@ 0x1111
 8017b4a:	4013      	ands	r3, r2
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d10f      	bne.n	8017b70 <HAL_TIM_PWM_Stop_DMA+0x148>
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	6a1a      	ldr	r2, [r3, #32]
 8017b56:	f240 4344 	movw	r3, #1092	@ 0x444
 8017b5a:	4013      	ands	r3, r2
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d107      	bne.n	8017b70 <HAL_TIM_PWM_Stop_DMA+0x148>
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017b6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	6a1a      	ldr	r2, [r3, #32]
 8017b76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8017b7a:	4013      	ands	r3, r2
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d10f      	bne.n	8017ba0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	6a1a      	ldr	r2, [r3, #32]
 8017b86:	f240 4344 	movw	r3, #1092	@ 0x444
 8017b8a:	4013      	ands	r3, r2
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d107      	bne.n	8017ba0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	681a      	ldr	r2, [r3, #0]
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	f022 0201 	bic.w	r2, r2, #1
 8017b9e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8017ba0:	683b      	ldr	r3, [r7, #0]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d104      	bne.n	8017bb0 <HAL_TIM_PWM_Stop_DMA+0x188>
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2201      	movs	r2, #1
 8017baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8017bae:	e023      	b.n	8017bf8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	2b04      	cmp	r3, #4
 8017bb4:	d104      	bne.n	8017bc0 <HAL_TIM_PWM_Stop_DMA+0x198>
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	2201      	movs	r2, #1
 8017bba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8017bbe:	e01b      	b.n	8017bf8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8017bc0:	683b      	ldr	r3, [r7, #0]
 8017bc2:	2b08      	cmp	r3, #8
 8017bc4:	d104      	bne.n	8017bd0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	2201      	movs	r2, #1
 8017bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8017bce:	e013      	b.n	8017bf8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8017bd0:	683b      	ldr	r3, [r7, #0]
 8017bd2:	2b0c      	cmp	r3, #12
 8017bd4:	d104      	bne.n	8017be0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	2201      	movs	r2, #1
 8017bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8017bde:	e00b      	b.n	8017bf8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8017be0:	683b      	ldr	r3, [r7, #0]
 8017be2:	2b10      	cmp	r3, #16
 8017be4:	d104      	bne.n	8017bf0 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	2201      	movs	r2, #1
 8017bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8017bee:	e003      	b.n	8017bf8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	2201      	movs	r2, #1
 8017bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8017bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	3710      	adds	r7, #16
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	bd80      	pop	{r7, pc}
 8017c02:	bf00      	nop
 8017c04:	40010000 	.word	0x40010000
 8017c08:	40010400 	.word	0x40010400
 8017c0c:	40014000 	.word	0x40014000
 8017c10:	40014400 	.word	0x40014400
 8017c14:	40014800 	.word	0x40014800

08017c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b084      	sub	sp, #16
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	68db      	ldr	r3, [r3, #12]
 8017c26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	691b      	ldr	r3, [r3, #16]
 8017c2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8017c30:	68bb      	ldr	r3, [r7, #8]
 8017c32:	f003 0302 	and.w	r3, r3, #2
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d020      	beq.n	8017c7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	f003 0302 	and.w	r3, r3, #2
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d01b      	beq.n	8017c7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	f06f 0202 	mvn.w	r2, #2
 8017c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	2201      	movs	r2, #1
 8017c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	699b      	ldr	r3, [r3, #24]
 8017c5a:	f003 0303 	and.w	r3, r3, #3
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d003      	beq.n	8017c6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f000 faf6 	bl	8018254 <HAL_TIM_IC_CaptureCallback>
 8017c68:	e005      	b.n	8017c76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017c6a:	6878      	ldr	r0, [r7, #4]
 8017c6c:	f000 fae8 	bl	8018240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017c70:	6878      	ldr	r0, [r7, #4]
 8017c72:	f7f1 fda1 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	2200      	movs	r2, #0
 8017c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8017c7c:	68bb      	ldr	r3, [r7, #8]
 8017c7e:	f003 0304 	and.w	r3, r3, #4
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d020      	beq.n	8017cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	f003 0304 	and.w	r3, r3, #4
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d01b      	beq.n	8017cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	f06f 0204 	mvn.w	r2, #4
 8017c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	2202      	movs	r2, #2
 8017c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	699b      	ldr	r3, [r3, #24]
 8017ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d003      	beq.n	8017cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017cae:	6878      	ldr	r0, [r7, #4]
 8017cb0:	f000 fad0 	bl	8018254 <HAL_TIM_IC_CaptureCallback>
 8017cb4:	e005      	b.n	8017cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	f000 fac2 	bl	8018240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017cbc:	6878      	ldr	r0, [r7, #4]
 8017cbe:	f7f1 fd7b 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8017cc8:	68bb      	ldr	r3, [r7, #8]
 8017cca:	f003 0308 	and.w	r3, r3, #8
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d020      	beq.n	8017d14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	f003 0308 	and.w	r3, r3, #8
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d01b      	beq.n	8017d14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	f06f 0208 	mvn.w	r2, #8
 8017ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	2204      	movs	r2, #4
 8017cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	69db      	ldr	r3, [r3, #28]
 8017cf2:	f003 0303 	and.w	r3, r3, #3
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d003      	beq.n	8017d02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017cfa:	6878      	ldr	r0, [r7, #4]
 8017cfc:	f000 faaa 	bl	8018254 <HAL_TIM_IC_CaptureCallback>
 8017d00:	e005      	b.n	8017d0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017d02:	6878      	ldr	r0, [r7, #4]
 8017d04:	f000 fa9c 	bl	8018240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017d08:	6878      	ldr	r0, [r7, #4]
 8017d0a:	f7f1 fd55 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	2200      	movs	r2, #0
 8017d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8017d14:	68bb      	ldr	r3, [r7, #8]
 8017d16:	f003 0310 	and.w	r3, r3, #16
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d020      	beq.n	8017d60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	f003 0310 	and.w	r3, r3, #16
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d01b      	beq.n	8017d60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	f06f 0210 	mvn.w	r2, #16
 8017d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	2208      	movs	r2, #8
 8017d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	69db      	ldr	r3, [r3, #28]
 8017d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d003      	beq.n	8017d4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017d46:	6878      	ldr	r0, [r7, #4]
 8017d48:	f000 fa84 	bl	8018254 <HAL_TIM_IC_CaptureCallback>
 8017d4c:	e005      	b.n	8017d5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017d4e:	6878      	ldr	r0, [r7, #4]
 8017d50:	f000 fa76 	bl	8018240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f7f1 fd2f 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8017d60:	68bb      	ldr	r3, [r7, #8]
 8017d62:	f003 0301 	and.w	r3, r3, #1
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d00c      	beq.n	8017d84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	f003 0301 	and.w	r3, r3, #1
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d007      	beq.n	8017d84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	f06f 0201 	mvn.w	r2, #1
 8017d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8017d7e:	6878      	ldr	r0, [r7, #4]
 8017d80:	f7f2 fbc2 	bl	800a508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8017d84:	68bb      	ldr	r3, [r7, #8]
 8017d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d104      	bne.n	8017d98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8017d8e:	68bb      	ldr	r3, [r7, #8]
 8017d90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d00c      	beq.n	8017db2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d007      	beq.n	8017db2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8017daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8017dac:	6878      	ldr	r0, [r7, #4]
 8017dae:	f001 f837 	bl	8018e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8017db2:	68bb      	ldr	r3, [r7, #8]
 8017db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d00c      	beq.n	8017dd6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d007      	beq.n	8017dd6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8017dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8017dd0:	6878      	ldr	r0, [r7, #4]
 8017dd2:	f001 f82f 	bl	8018e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8017dd6:	68bb      	ldr	r3, [r7, #8]
 8017dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d00c      	beq.n	8017dfa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d007      	beq.n	8017dfa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8017df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8017df4:	6878      	ldr	r0, [r7, #4]
 8017df6:	f000 fa41 	bl	801827c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8017dfa:	68bb      	ldr	r3, [r7, #8]
 8017dfc:	f003 0320 	and.w	r3, r3, #32
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d00c      	beq.n	8017e1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	f003 0320 	and.w	r3, r3, #32
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d007      	beq.n	8017e1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	f06f 0220 	mvn.w	r2, #32
 8017e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8017e18:	6878      	ldr	r0, [r7, #4]
 8017e1a:	f000 fff7 	bl	8018e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8017e1e:	bf00      	nop
 8017e20:	3710      	adds	r7, #16
 8017e22:	46bd      	mov	sp, r7
 8017e24:	bd80      	pop	{r7, pc}
	...

08017e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b086      	sub	sp, #24
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	60f8      	str	r0, [r7, #12]
 8017e30:	60b9      	str	r1, [r7, #8]
 8017e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017e34:	2300      	movs	r3, #0
 8017e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017e3e:	2b01      	cmp	r3, #1
 8017e40:	d101      	bne.n	8017e46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8017e42:	2302      	movs	r3, #2
 8017e44:	e0ff      	b.n	8018046 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	2201      	movs	r2, #1
 8017e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	2b14      	cmp	r3, #20
 8017e52:	f200 80f0 	bhi.w	8018036 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8017e56:	a201      	add	r2, pc, #4	@ (adr r2, 8017e5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8017e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e5c:	08017eb1 	.word	0x08017eb1
 8017e60:	08018037 	.word	0x08018037
 8017e64:	08018037 	.word	0x08018037
 8017e68:	08018037 	.word	0x08018037
 8017e6c:	08017ef1 	.word	0x08017ef1
 8017e70:	08018037 	.word	0x08018037
 8017e74:	08018037 	.word	0x08018037
 8017e78:	08018037 	.word	0x08018037
 8017e7c:	08017f33 	.word	0x08017f33
 8017e80:	08018037 	.word	0x08018037
 8017e84:	08018037 	.word	0x08018037
 8017e88:	08018037 	.word	0x08018037
 8017e8c:	08017f73 	.word	0x08017f73
 8017e90:	08018037 	.word	0x08018037
 8017e94:	08018037 	.word	0x08018037
 8017e98:	08018037 	.word	0x08018037
 8017e9c:	08017fb5 	.word	0x08017fb5
 8017ea0:	08018037 	.word	0x08018037
 8017ea4:	08018037 	.word	0x08018037
 8017ea8:	08018037 	.word	0x08018037
 8017eac:	08017ff5 	.word	0x08017ff5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	68b9      	ldr	r1, [r7, #8]
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f000 fb72 	bl	80185a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	699a      	ldr	r2, [r3, #24]
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	f042 0208 	orr.w	r2, r2, #8
 8017eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	699a      	ldr	r2, [r3, #24]
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	f022 0204 	bic.w	r2, r2, #4
 8017eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	6999      	ldr	r1, [r3, #24]
 8017ee2:	68bb      	ldr	r3, [r7, #8]
 8017ee4:	691a      	ldr	r2, [r3, #16]
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	430a      	orrs	r2, r1
 8017eec:	619a      	str	r2, [r3, #24]
      break;
 8017eee:	e0a5      	b.n	801803c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	68b9      	ldr	r1, [r7, #8]
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f000 fbe2 	bl	80186c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	699a      	ldr	r2, [r3, #24]
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8017f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	699a      	ldr	r2, [r3, #24]
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8017f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	6999      	ldr	r1, [r3, #24]
 8017f22:	68bb      	ldr	r3, [r7, #8]
 8017f24:	691b      	ldr	r3, [r3, #16]
 8017f26:	021a      	lsls	r2, r3, #8
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	430a      	orrs	r2, r1
 8017f2e:	619a      	str	r2, [r3, #24]
      break;
 8017f30:	e084      	b.n	801803c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	68b9      	ldr	r1, [r7, #8]
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f000 fc4b 	bl	80187d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	69da      	ldr	r2, [r3, #28]
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	f042 0208 	orr.w	r2, r2, #8
 8017f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	69da      	ldr	r2, [r3, #28]
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	f022 0204 	bic.w	r2, r2, #4
 8017f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	69d9      	ldr	r1, [r3, #28]
 8017f64:	68bb      	ldr	r3, [r7, #8]
 8017f66:	691a      	ldr	r2, [r3, #16]
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	430a      	orrs	r2, r1
 8017f6e:	61da      	str	r2, [r3, #28]
      break;
 8017f70:	e064      	b.n	801803c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	68b9      	ldr	r1, [r7, #8]
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f000 fcb3 	bl	80188e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	69da      	ldr	r2, [r3, #28]
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8017f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	69da      	ldr	r2, [r3, #28]
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8017f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	69d9      	ldr	r1, [r3, #28]
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	691b      	ldr	r3, [r3, #16]
 8017fa8:	021a      	lsls	r2, r3, #8
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	430a      	orrs	r2, r1
 8017fb0:	61da      	str	r2, [r3, #28]
      break;
 8017fb2:	e043      	b.n	801803c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	68b9      	ldr	r1, [r7, #8]
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f000 fcfc 	bl	80189b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	f042 0208 	orr.w	r2, r2, #8
 8017fce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	f022 0204 	bic.w	r2, r2, #4
 8017fde:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8017fe6:	68bb      	ldr	r3, [r7, #8]
 8017fe8:	691a      	ldr	r2, [r3, #16]
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	430a      	orrs	r2, r1
 8017ff0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8017ff2:	e023      	b.n	801803c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	68b9      	ldr	r1, [r7, #8]
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f000 fd40 	bl	8018a80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801800e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801801e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8018026:	68bb      	ldr	r3, [r7, #8]
 8018028:	691b      	ldr	r3, [r3, #16]
 801802a:	021a      	lsls	r2, r3, #8
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	430a      	orrs	r2, r1
 8018032:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8018034:	e002      	b.n	801803c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8018036:	2301      	movs	r3, #1
 8018038:	75fb      	strb	r3, [r7, #23]
      break;
 801803a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	2200      	movs	r2, #0
 8018040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8018044:	7dfb      	ldrb	r3, [r7, #23]
}
 8018046:	4618      	mov	r0, r3
 8018048:	3718      	adds	r7, #24
 801804a:	46bd      	mov	sp, r7
 801804c:	bd80      	pop	{r7, pc}
 801804e:	bf00      	nop

08018050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b084      	sub	sp, #16
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801805a:	2300      	movs	r3, #0
 801805c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8018064:	2b01      	cmp	r3, #1
 8018066:	d101      	bne.n	801806c <HAL_TIM_ConfigClockSource+0x1c>
 8018068:	2302      	movs	r3, #2
 801806a:	e0dc      	b.n	8018226 <HAL_TIM_ConfigClockSource+0x1d6>
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	2201      	movs	r2, #1
 8018070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	2202      	movs	r2, #2
 8018078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	689b      	ldr	r3, [r3, #8]
 8018082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8018084:	68ba      	ldr	r2, [r7, #8]
 8018086:	4b6a      	ldr	r3, [pc, #424]	@ (8018230 <HAL_TIM_ConfigClockSource+0x1e0>)
 8018088:	4013      	ands	r3, r2
 801808a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801808c:	68bb      	ldr	r3, [r7, #8]
 801808e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8018092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	68ba      	ldr	r2, [r7, #8]
 801809a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801809c:	683b      	ldr	r3, [r7, #0]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	4a64      	ldr	r2, [pc, #400]	@ (8018234 <HAL_TIM_ConfigClockSource+0x1e4>)
 80180a2:	4293      	cmp	r3, r2
 80180a4:	f000 80a9 	beq.w	80181fa <HAL_TIM_ConfigClockSource+0x1aa>
 80180a8:	4a62      	ldr	r2, [pc, #392]	@ (8018234 <HAL_TIM_ConfigClockSource+0x1e4>)
 80180aa:	4293      	cmp	r3, r2
 80180ac:	f200 80ae 	bhi.w	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 80180b0:	4a61      	ldr	r2, [pc, #388]	@ (8018238 <HAL_TIM_ConfigClockSource+0x1e8>)
 80180b2:	4293      	cmp	r3, r2
 80180b4:	f000 80a1 	beq.w	80181fa <HAL_TIM_ConfigClockSource+0x1aa>
 80180b8:	4a5f      	ldr	r2, [pc, #380]	@ (8018238 <HAL_TIM_ConfigClockSource+0x1e8>)
 80180ba:	4293      	cmp	r3, r2
 80180bc:	f200 80a6 	bhi.w	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 80180c0:	4a5e      	ldr	r2, [pc, #376]	@ (801823c <HAL_TIM_ConfigClockSource+0x1ec>)
 80180c2:	4293      	cmp	r3, r2
 80180c4:	f000 8099 	beq.w	80181fa <HAL_TIM_ConfigClockSource+0x1aa>
 80180c8:	4a5c      	ldr	r2, [pc, #368]	@ (801823c <HAL_TIM_ConfigClockSource+0x1ec>)
 80180ca:	4293      	cmp	r3, r2
 80180cc:	f200 809e 	bhi.w	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 80180d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80180d4:	f000 8091 	beq.w	80181fa <HAL_TIM_ConfigClockSource+0x1aa>
 80180d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80180dc:	f200 8096 	bhi.w	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 80180e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80180e4:	f000 8089 	beq.w	80181fa <HAL_TIM_ConfigClockSource+0x1aa>
 80180e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80180ec:	f200 808e 	bhi.w	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 80180f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80180f4:	d03e      	beq.n	8018174 <HAL_TIM_ConfigClockSource+0x124>
 80180f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80180fa:	f200 8087 	bhi.w	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 80180fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018102:	f000 8086 	beq.w	8018212 <HAL_TIM_ConfigClockSource+0x1c2>
 8018106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801810a:	d87f      	bhi.n	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 801810c:	2b70      	cmp	r3, #112	@ 0x70
 801810e:	d01a      	beq.n	8018146 <HAL_TIM_ConfigClockSource+0xf6>
 8018110:	2b70      	cmp	r3, #112	@ 0x70
 8018112:	d87b      	bhi.n	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 8018114:	2b60      	cmp	r3, #96	@ 0x60
 8018116:	d050      	beq.n	80181ba <HAL_TIM_ConfigClockSource+0x16a>
 8018118:	2b60      	cmp	r3, #96	@ 0x60
 801811a:	d877      	bhi.n	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 801811c:	2b50      	cmp	r3, #80	@ 0x50
 801811e:	d03c      	beq.n	801819a <HAL_TIM_ConfigClockSource+0x14a>
 8018120:	2b50      	cmp	r3, #80	@ 0x50
 8018122:	d873      	bhi.n	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 8018124:	2b40      	cmp	r3, #64	@ 0x40
 8018126:	d058      	beq.n	80181da <HAL_TIM_ConfigClockSource+0x18a>
 8018128:	2b40      	cmp	r3, #64	@ 0x40
 801812a:	d86f      	bhi.n	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 801812c:	2b30      	cmp	r3, #48	@ 0x30
 801812e:	d064      	beq.n	80181fa <HAL_TIM_ConfigClockSource+0x1aa>
 8018130:	2b30      	cmp	r3, #48	@ 0x30
 8018132:	d86b      	bhi.n	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 8018134:	2b20      	cmp	r3, #32
 8018136:	d060      	beq.n	80181fa <HAL_TIM_ConfigClockSource+0x1aa>
 8018138:	2b20      	cmp	r3, #32
 801813a:	d867      	bhi.n	801820c <HAL_TIM_ConfigClockSource+0x1bc>
 801813c:	2b00      	cmp	r3, #0
 801813e:	d05c      	beq.n	80181fa <HAL_TIM_ConfigClockSource+0x1aa>
 8018140:	2b10      	cmp	r3, #16
 8018142:	d05a      	beq.n	80181fa <HAL_TIM_ConfigClockSource+0x1aa>
 8018144:	e062      	b.n	801820c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801814a:	683b      	ldr	r3, [r7, #0]
 801814c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801814e:	683b      	ldr	r3, [r7, #0]
 8018150:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8018152:	683b      	ldr	r3, [r7, #0]
 8018154:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8018156:	f000 fd77 	bl	8018c48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	689b      	ldr	r3, [r3, #8]
 8018160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8018162:	68bb      	ldr	r3, [r7, #8]
 8018164:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8018168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	68ba      	ldr	r2, [r7, #8]
 8018170:	609a      	str	r2, [r3, #8]
      break;
 8018172:	e04f      	b.n	8018214 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8018178:	683b      	ldr	r3, [r7, #0]
 801817a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801817c:	683b      	ldr	r3, [r7, #0]
 801817e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8018180:	683b      	ldr	r3, [r7, #0]
 8018182:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8018184:	f000 fd60 	bl	8018c48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	689a      	ldr	r2, [r3, #8]
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8018196:	609a      	str	r2, [r3, #8]
      break;
 8018198:	e03c      	b.n	8018214 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801819e:	683b      	ldr	r3, [r7, #0]
 80181a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80181a2:	683b      	ldr	r3, [r7, #0]
 80181a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80181a6:	461a      	mov	r2, r3
 80181a8:	f000 fcd0 	bl	8018b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	2150      	movs	r1, #80	@ 0x50
 80181b2:	4618      	mov	r0, r3
 80181b4:	f000 fd2a 	bl	8018c0c <TIM_ITRx_SetConfig>
      break;
 80181b8:	e02c      	b.n	8018214 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80181be:	683b      	ldr	r3, [r7, #0]
 80181c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80181c2:	683b      	ldr	r3, [r7, #0]
 80181c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80181c6:	461a      	mov	r2, r3
 80181c8:	f000 fcef 	bl	8018baa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	2160      	movs	r1, #96	@ 0x60
 80181d2:	4618      	mov	r0, r3
 80181d4:	f000 fd1a 	bl	8018c0c <TIM_ITRx_SetConfig>
      break;
 80181d8:	e01c      	b.n	8018214 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80181de:	683b      	ldr	r3, [r7, #0]
 80181e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80181e2:	683b      	ldr	r3, [r7, #0]
 80181e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80181e6:	461a      	mov	r2, r3
 80181e8:	f000 fcb0 	bl	8018b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	2140      	movs	r1, #64	@ 0x40
 80181f2:	4618      	mov	r0, r3
 80181f4:	f000 fd0a 	bl	8018c0c <TIM_ITRx_SetConfig>
      break;
 80181f8:	e00c      	b.n	8018214 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	681a      	ldr	r2, [r3, #0]
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	4619      	mov	r1, r3
 8018204:	4610      	mov	r0, r2
 8018206:	f000 fd01 	bl	8018c0c <TIM_ITRx_SetConfig>
      break;
 801820a:	e003      	b.n	8018214 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801820c:	2301      	movs	r3, #1
 801820e:	73fb      	strb	r3, [r7, #15]
      break;
 8018210:	e000      	b.n	8018214 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8018212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	2201      	movs	r2, #1
 8018218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	2200      	movs	r2, #0
 8018220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8018224:	7bfb      	ldrb	r3, [r7, #15]
}
 8018226:	4618      	mov	r0, r3
 8018228:	3710      	adds	r7, #16
 801822a:	46bd      	mov	sp, r7
 801822c:	bd80      	pop	{r7, pc}
 801822e:	bf00      	nop
 8018230:	ffceff88 	.word	0xffceff88
 8018234:	00100040 	.word	0x00100040
 8018238:	00100030 	.word	0x00100030
 801823c:	00100020 	.word	0x00100020

08018240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018240:	b480      	push	{r7}
 8018242:	b083      	sub	sp, #12
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8018248:	bf00      	nop
 801824a:	370c      	adds	r7, #12
 801824c:	46bd      	mov	sp, r7
 801824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018252:	4770      	bx	lr

08018254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8018254:	b480      	push	{r7}
 8018256:	b083      	sub	sp, #12
 8018258:	af00      	add	r7, sp, #0
 801825a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801825c:	bf00      	nop
 801825e:	370c      	adds	r7, #12
 8018260:	46bd      	mov	sp, r7
 8018262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018266:	4770      	bx	lr

08018268 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8018268:	b480      	push	{r7}
 801826a:	b083      	sub	sp, #12
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8018270:	bf00      	nop
 8018272:	370c      	adds	r7, #12
 8018274:	46bd      	mov	sp, r7
 8018276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827a:	4770      	bx	lr

0801827c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801827c:	b480      	push	{r7}
 801827e:	b083      	sub	sp, #12
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018284:	bf00      	nop
 8018286:	370c      	adds	r7, #12
 8018288:	46bd      	mov	sp, r7
 801828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828e:	4770      	bx	lr

08018290 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8018290:	b480      	push	{r7}
 8018292:	b083      	sub	sp, #12
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8018298:	bf00      	nop
 801829a:	370c      	adds	r7, #12
 801829c:	46bd      	mov	sp, r7
 801829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a2:	4770      	bx	lr

080182a4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b084      	sub	sp, #16
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182b6:	687a      	ldr	r2, [r7, #4]
 80182b8:	429a      	cmp	r2, r3
 80182ba:	d107      	bne.n	80182cc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	2201      	movs	r2, #1
 80182c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	2201      	movs	r2, #1
 80182c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80182ca:	e02a      	b.n	8018322 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80182d0:	687a      	ldr	r2, [r7, #4]
 80182d2:	429a      	cmp	r2, r3
 80182d4:	d107      	bne.n	80182e6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	2202      	movs	r2, #2
 80182da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	2201      	movs	r2, #1
 80182e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80182e4:	e01d      	b.n	8018322 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182ea:	687a      	ldr	r2, [r7, #4]
 80182ec:	429a      	cmp	r2, r3
 80182ee:	d107      	bne.n	8018300 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	2204      	movs	r2, #4
 80182f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	2201      	movs	r2, #1
 80182fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80182fe:	e010      	b.n	8018322 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018304:	687a      	ldr	r2, [r7, #4]
 8018306:	429a      	cmp	r2, r3
 8018308:	d107      	bne.n	801831a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	2208      	movs	r2, #8
 801830e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	2201      	movs	r2, #1
 8018314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8018318:	e003      	b.n	8018322 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	2201      	movs	r2, #1
 801831e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8018322:	68f8      	ldr	r0, [r7, #12]
 8018324:	f7ff ffb4 	bl	8018290 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	2200      	movs	r2, #0
 801832c:	771a      	strb	r2, [r3, #28]
}
 801832e:	bf00      	nop
 8018330:	3710      	adds	r7, #16
 8018332:	46bd      	mov	sp, r7
 8018334:	bd80      	pop	{r7, pc}

08018336 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8018336:	b580      	push	{r7, lr}
 8018338:	b084      	sub	sp, #16
 801833a:	af00      	add	r7, sp, #0
 801833c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018342:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018348:	687a      	ldr	r2, [r7, #4]
 801834a:	429a      	cmp	r2, r3
 801834c:	d10b      	bne.n	8018366 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	2201      	movs	r2, #1
 8018352:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	69db      	ldr	r3, [r3, #28]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d136      	bne.n	80183ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	2201      	movs	r2, #1
 8018360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8018364:	e031      	b.n	80183ca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801836a:	687a      	ldr	r2, [r7, #4]
 801836c:	429a      	cmp	r2, r3
 801836e:	d10b      	bne.n	8018388 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	2202      	movs	r2, #2
 8018374:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	69db      	ldr	r3, [r3, #28]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d125      	bne.n	80183ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	2201      	movs	r2, #1
 8018382:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8018386:	e020      	b.n	80183ca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801838c:	687a      	ldr	r2, [r7, #4]
 801838e:	429a      	cmp	r2, r3
 8018390:	d10b      	bne.n	80183aa <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	2204      	movs	r2, #4
 8018396:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	69db      	ldr	r3, [r3, #28]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d114      	bne.n	80183ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	2201      	movs	r2, #1
 80183a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80183a8:	e00f      	b.n	80183ca <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80183ae:	687a      	ldr	r2, [r7, #4]
 80183b0:	429a      	cmp	r2, r3
 80183b2:	d10a      	bne.n	80183ca <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	2208      	movs	r2, #8
 80183b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	69db      	ldr	r3, [r3, #28]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d103      	bne.n	80183ca <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	2201      	movs	r2, #1
 80183c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80183ca:	68f8      	ldr	r0, [r7, #12]
 80183cc:	f7f1 f9f4 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	2200      	movs	r2, #0
 80183d4:	771a      	strb	r2, [r3, #28]
}
 80183d6:	bf00      	nop
 80183d8:	3710      	adds	r7, #16
 80183da:	46bd      	mov	sp, r7
 80183dc:	bd80      	pop	{r7, pc}

080183de <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80183de:	b580      	push	{r7, lr}
 80183e0:	b084      	sub	sp, #16
 80183e2:	af00      	add	r7, sp, #0
 80183e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183f0:	687a      	ldr	r2, [r7, #4]
 80183f2:	429a      	cmp	r2, r3
 80183f4:	d103      	bne.n	80183fe <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	2201      	movs	r2, #1
 80183fa:	771a      	strb	r2, [r3, #28]
 80183fc:	e019      	b.n	8018432 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018402:	687a      	ldr	r2, [r7, #4]
 8018404:	429a      	cmp	r2, r3
 8018406:	d103      	bne.n	8018410 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	2202      	movs	r2, #2
 801840c:	771a      	strb	r2, [r3, #28]
 801840e:	e010      	b.n	8018432 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018414:	687a      	ldr	r2, [r7, #4]
 8018416:	429a      	cmp	r2, r3
 8018418:	d103      	bne.n	8018422 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	2204      	movs	r2, #4
 801841e:	771a      	strb	r2, [r3, #28]
 8018420:	e007      	b.n	8018432 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018426:	687a      	ldr	r2, [r7, #4]
 8018428:	429a      	cmp	r2, r3
 801842a:	d102      	bne.n	8018432 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	2208      	movs	r2, #8
 8018430:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8018432:	68f8      	ldr	r0, [r7, #12]
 8018434:	f7ff ff18 	bl	8018268 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	2200      	movs	r2, #0
 801843c:	771a      	strb	r2, [r3, #28]
}
 801843e:	bf00      	nop
 8018440:	3710      	adds	r7, #16
 8018442:	46bd      	mov	sp, r7
 8018444:	bd80      	pop	{r7, pc}
	...

08018448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8018448:	b480      	push	{r7}
 801844a:	b085      	sub	sp, #20
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	4a47      	ldr	r2, [pc, #284]	@ (8018578 <TIM_Base_SetConfig+0x130>)
 801845c:	4293      	cmp	r3, r2
 801845e:	d013      	beq.n	8018488 <TIM_Base_SetConfig+0x40>
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018466:	d00f      	beq.n	8018488 <TIM_Base_SetConfig+0x40>
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	4a44      	ldr	r2, [pc, #272]	@ (801857c <TIM_Base_SetConfig+0x134>)
 801846c:	4293      	cmp	r3, r2
 801846e:	d00b      	beq.n	8018488 <TIM_Base_SetConfig+0x40>
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	4a43      	ldr	r2, [pc, #268]	@ (8018580 <TIM_Base_SetConfig+0x138>)
 8018474:	4293      	cmp	r3, r2
 8018476:	d007      	beq.n	8018488 <TIM_Base_SetConfig+0x40>
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	4a42      	ldr	r2, [pc, #264]	@ (8018584 <TIM_Base_SetConfig+0x13c>)
 801847c:	4293      	cmp	r3, r2
 801847e:	d003      	beq.n	8018488 <TIM_Base_SetConfig+0x40>
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	4a41      	ldr	r2, [pc, #260]	@ (8018588 <TIM_Base_SetConfig+0x140>)
 8018484:	4293      	cmp	r3, r2
 8018486:	d108      	bne.n	801849a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801848e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	685b      	ldr	r3, [r3, #4]
 8018494:	68fa      	ldr	r2, [r7, #12]
 8018496:	4313      	orrs	r3, r2
 8018498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	4a36      	ldr	r2, [pc, #216]	@ (8018578 <TIM_Base_SetConfig+0x130>)
 801849e:	4293      	cmp	r3, r2
 80184a0:	d027      	beq.n	80184f2 <TIM_Base_SetConfig+0xaa>
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80184a8:	d023      	beq.n	80184f2 <TIM_Base_SetConfig+0xaa>
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	4a33      	ldr	r2, [pc, #204]	@ (801857c <TIM_Base_SetConfig+0x134>)
 80184ae:	4293      	cmp	r3, r2
 80184b0:	d01f      	beq.n	80184f2 <TIM_Base_SetConfig+0xaa>
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	4a32      	ldr	r2, [pc, #200]	@ (8018580 <TIM_Base_SetConfig+0x138>)
 80184b6:	4293      	cmp	r3, r2
 80184b8:	d01b      	beq.n	80184f2 <TIM_Base_SetConfig+0xaa>
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	4a31      	ldr	r2, [pc, #196]	@ (8018584 <TIM_Base_SetConfig+0x13c>)
 80184be:	4293      	cmp	r3, r2
 80184c0:	d017      	beq.n	80184f2 <TIM_Base_SetConfig+0xaa>
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	4a30      	ldr	r2, [pc, #192]	@ (8018588 <TIM_Base_SetConfig+0x140>)
 80184c6:	4293      	cmp	r3, r2
 80184c8:	d013      	beq.n	80184f2 <TIM_Base_SetConfig+0xaa>
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	4a2f      	ldr	r2, [pc, #188]	@ (801858c <TIM_Base_SetConfig+0x144>)
 80184ce:	4293      	cmp	r3, r2
 80184d0:	d00f      	beq.n	80184f2 <TIM_Base_SetConfig+0xaa>
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	4a2e      	ldr	r2, [pc, #184]	@ (8018590 <TIM_Base_SetConfig+0x148>)
 80184d6:	4293      	cmp	r3, r2
 80184d8:	d00b      	beq.n	80184f2 <TIM_Base_SetConfig+0xaa>
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	4a2d      	ldr	r2, [pc, #180]	@ (8018594 <TIM_Base_SetConfig+0x14c>)
 80184de:	4293      	cmp	r3, r2
 80184e0:	d007      	beq.n	80184f2 <TIM_Base_SetConfig+0xaa>
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	4a2c      	ldr	r2, [pc, #176]	@ (8018598 <TIM_Base_SetConfig+0x150>)
 80184e6:	4293      	cmp	r3, r2
 80184e8:	d003      	beq.n	80184f2 <TIM_Base_SetConfig+0xaa>
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	4a2b      	ldr	r2, [pc, #172]	@ (801859c <TIM_Base_SetConfig+0x154>)
 80184ee:	4293      	cmp	r3, r2
 80184f0:	d108      	bne.n	8018504 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80184f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80184fa:	683b      	ldr	r3, [r7, #0]
 80184fc:	68db      	ldr	r3, [r3, #12]
 80184fe:	68fa      	ldr	r2, [r7, #12]
 8018500:	4313      	orrs	r3, r2
 8018502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801850a:	683b      	ldr	r3, [r7, #0]
 801850c:	695b      	ldr	r3, [r3, #20]
 801850e:	4313      	orrs	r3, r2
 8018510:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018512:	683b      	ldr	r3, [r7, #0]
 8018514:	689a      	ldr	r2, [r3, #8]
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	681a      	ldr	r2, [r3, #0]
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	4a14      	ldr	r2, [pc, #80]	@ (8018578 <TIM_Base_SetConfig+0x130>)
 8018526:	4293      	cmp	r3, r2
 8018528:	d00f      	beq.n	801854a <TIM_Base_SetConfig+0x102>
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	4a16      	ldr	r2, [pc, #88]	@ (8018588 <TIM_Base_SetConfig+0x140>)
 801852e:	4293      	cmp	r3, r2
 8018530:	d00b      	beq.n	801854a <TIM_Base_SetConfig+0x102>
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	4a15      	ldr	r2, [pc, #84]	@ (801858c <TIM_Base_SetConfig+0x144>)
 8018536:	4293      	cmp	r3, r2
 8018538:	d007      	beq.n	801854a <TIM_Base_SetConfig+0x102>
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	4a14      	ldr	r2, [pc, #80]	@ (8018590 <TIM_Base_SetConfig+0x148>)
 801853e:	4293      	cmp	r3, r2
 8018540:	d003      	beq.n	801854a <TIM_Base_SetConfig+0x102>
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	4a13      	ldr	r2, [pc, #76]	@ (8018594 <TIM_Base_SetConfig+0x14c>)
 8018546:	4293      	cmp	r3, r2
 8018548:	d103      	bne.n	8018552 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801854a:	683b      	ldr	r3, [r7, #0]
 801854c:	691a      	ldr	r2, [r3, #16]
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	f043 0204 	orr.w	r2, r3, #4
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	2201      	movs	r2, #1
 8018562:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	68fa      	ldr	r2, [r7, #12]
 8018568:	601a      	str	r2, [r3, #0]
}
 801856a:	bf00      	nop
 801856c:	3714      	adds	r7, #20
 801856e:	46bd      	mov	sp, r7
 8018570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018574:	4770      	bx	lr
 8018576:	bf00      	nop
 8018578:	40010000 	.word	0x40010000
 801857c:	40000400 	.word	0x40000400
 8018580:	40000800 	.word	0x40000800
 8018584:	40000c00 	.word	0x40000c00
 8018588:	40010400 	.word	0x40010400
 801858c:	40014000 	.word	0x40014000
 8018590:	40014400 	.word	0x40014400
 8018594:	40014800 	.word	0x40014800
 8018598:	4000e000 	.word	0x4000e000
 801859c:	4000e400 	.word	0x4000e400

080185a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80185a0:	b480      	push	{r7}
 80185a2:	b087      	sub	sp, #28
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
 80185a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	6a1b      	ldr	r3, [r3, #32]
 80185ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	6a1b      	ldr	r3, [r3, #32]
 80185b4:	f023 0201 	bic.w	r2, r3, #1
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	685b      	ldr	r3, [r3, #4]
 80185c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	699b      	ldr	r3, [r3, #24]
 80185c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80185c8:	68fa      	ldr	r2, [r7, #12]
 80185ca:	4b37      	ldr	r3, [pc, #220]	@ (80186a8 <TIM_OC1_SetConfig+0x108>)
 80185cc:	4013      	ands	r3, r2
 80185ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	f023 0303 	bic.w	r3, r3, #3
 80185d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80185d8:	683b      	ldr	r3, [r7, #0]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	68fa      	ldr	r2, [r7, #12]
 80185de:	4313      	orrs	r3, r2
 80185e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80185e2:	697b      	ldr	r3, [r7, #20]
 80185e4:	f023 0302 	bic.w	r3, r3, #2
 80185e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80185ea:	683b      	ldr	r3, [r7, #0]
 80185ec:	689b      	ldr	r3, [r3, #8]
 80185ee:	697a      	ldr	r2, [r7, #20]
 80185f0:	4313      	orrs	r3, r2
 80185f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	4a2d      	ldr	r2, [pc, #180]	@ (80186ac <TIM_OC1_SetConfig+0x10c>)
 80185f8:	4293      	cmp	r3, r2
 80185fa:	d00f      	beq.n	801861c <TIM_OC1_SetConfig+0x7c>
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	4a2c      	ldr	r2, [pc, #176]	@ (80186b0 <TIM_OC1_SetConfig+0x110>)
 8018600:	4293      	cmp	r3, r2
 8018602:	d00b      	beq.n	801861c <TIM_OC1_SetConfig+0x7c>
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	4a2b      	ldr	r2, [pc, #172]	@ (80186b4 <TIM_OC1_SetConfig+0x114>)
 8018608:	4293      	cmp	r3, r2
 801860a:	d007      	beq.n	801861c <TIM_OC1_SetConfig+0x7c>
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	4a2a      	ldr	r2, [pc, #168]	@ (80186b8 <TIM_OC1_SetConfig+0x118>)
 8018610:	4293      	cmp	r3, r2
 8018612:	d003      	beq.n	801861c <TIM_OC1_SetConfig+0x7c>
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	4a29      	ldr	r2, [pc, #164]	@ (80186bc <TIM_OC1_SetConfig+0x11c>)
 8018618:	4293      	cmp	r3, r2
 801861a:	d10c      	bne.n	8018636 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	f023 0308 	bic.w	r3, r3, #8
 8018622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8018624:	683b      	ldr	r3, [r7, #0]
 8018626:	68db      	ldr	r3, [r3, #12]
 8018628:	697a      	ldr	r2, [r7, #20]
 801862a:	4313      	orrs	r3, r2
 801862c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801862e:	697b      	ldr	r3, [r7, #20]
 8018630:	f023 0304 	bic.w	r3, r3, #4
 8018634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	4a1c      	ldr	r2, [pc, #112]	@ (80186ac <TIM_OC1_SetConfig+0x10c>)
 801863a:	4293      	cmp	r3, r2
 801863c:	d00f      	beq.n	801865e <TIM_OC1_SetConfig+0xbe>
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	4a1b      	ldr	r2, [pc, #108]	@ (80186b0 <TIM_OC1_SetConfig+0x110>)
 8018642:	4293      	cmp	r3, r2
 8018644:	d00b      	beq.n	801865e <TIM_OC1_SetConfig+0xbe>
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	4a1a      	ldr	r2, [pc, #104]	@ (80186b4 <TIM_OC1_SetConfig+0x114>)
 801864a:	4293      	cmp	r3, r2
 801864c:	d007      	beq.n	801865e <TIM_OC1_SetConfig+0xbe>
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	4a19      	ldr	r2, [pc, #100]	@ (80186b8 <TIM_OC1_SetConfig+0x118>)
 8018652:	4293      	cmp	r3, r2
 8018654:	d003      	beq.n	801865e <TIM_OC1_SetConfig+0xbe>
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	4a18      	ldr	r2, [pc, #96]	@ (80186bc <TIM_OC1_SetConfig+0x11c>)
 801865a:	4293      	cmp	r3, r2
 801865c:	d111      	bne.n	8018682 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801865e:	693b      	ldr	r3, [r7, #16]
 8018660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8018666:	693b      	ldr	r3, [r7, #16]
 8018668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801866c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	695b      	ldr	r3, [r3, #20]
 8018672:	693a      	ldr	r2, [r7, #16]
 8018674:	4313      	orrs	r3, r2
 8018676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	699b      	ldr	r3, [r3, #24]
 801867c:	693a      	ldr	r2, [r7, #16]
 801867e:	4313      	orrs	r3, r2
 8018680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	693a      	ldr	r2, [r7, #16]
 8018686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	68fa      	ldr	r2, [r7, #12]
 801868c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801868e:	683b      	ldr	r3, [r7, #0]
 8018690:	685a      	ldr	r2, [r3, #4]
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	697a      	ldr	r2, [r7, #20]
 801869a:	621a      	str	r2, [r3, #32]
}
 801869c:	bf00      	nop
 801869e:	371c      	adds	r7, #28
 80186a0:	46bd      	mov	sp, r7
 80186a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a6:	4770      	bx	lr
 80186a8:	fffeff8f 	.word	0xfffeff8f
 80186ac:	40010000 	.word	0x40010000
 80186b0:	40010400 	.word	0x40010400
 80186b4:	40014000 	.word	0x40014000
 80186b8:	40014400 	.word	0x40014400
 80186bc:	40014800 	.word	0x40014800

080186c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80186c0:	b480      	push	{r7}
 80186c2:	b087      	sub	sp, #28
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
 80186c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	6a1b      	ldr	r3, [r3, #32]
 80186ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	6a1b      	ldr	r3, [r3, #32]
 80186d4:	f023 0210 	bic.w	r2, r3, #16
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	685b      	ldr	r3, [r3, #4]
 80186e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	699b      	ldr	r3, [r3, #24]
 80186e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80186e8:	68fa      	ldr	r2, [r7, #12]
 80186ea:	4b34      	ldr	r3, [pc, #208]	@ (80187bc <TIM_OC2_SetConfig+0xfc>)
 80186ec:	4013      	ands	r3, r2
 80186ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80186f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80186f8:	683b      	ldr	r3, [r7, #0]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	021b      	lsls	r3, r3, #8
 80186fe:	68fa      	ldr	r2, [r7, #12]
 8018700:	4313      	orrs	r3, r2
 8018702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	f023 0320 	bic.w	r3, r3, #32
 801870a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801870c:	683b      	ldr	r3, [r7, #0]
 801870e:	689b      	ldr	r3, [r3, #8]
 8018710:	011b      	lsls	r3, r3, #4
 8018712:	697a      	ldr	r2, [r7, #20]
 8018714:	4313      	orrs	r3, r2
 8018716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	4a29      	ldr	r2, [pc, #164]	@ (80187c0 <TIM_OC2_SetConfig+0x100>)
 801871c:	4293      	cmp	r3, r2
 801871e:	d003      	beq.n	8018728 <TIM_OC2_SetConfig+0x68>
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	4a28      	ldr	r2, [pc, #160]	@ (80187c4 <TIM_OC2_SetConfig+0x104>)
 8018724:	4293      	cmp	r3, r2
 8018726:	d10d      	bne.n	8018744 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8018728:	697b      	ldr	r3, [r7, #20]
 801872a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801872e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8018730:	683b      	ldr	r3, [r7, #0]
 8018732:	68db      	ldr	r3, [r3, #12]
 8018734:	011b      	lsls	r3, r3, #4
 8018736:	697a      	ldr	r2, [r7, #20]
 8018738:	4313      	orrs	r3, r2
 801873a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801873c:	697b      	ldr	r3, [r7, #20]
 801873e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018742:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	4a1e      	ldr	r2, [pc, #120]	@ (80187c0 <TIM_OC2_SetConfig+0x100>)
 8018748:	4293      	cmp	r3, r2
 801874a:	d00f      	beq.n	801876c <TIM_OC2_SetConfig+0xac>
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	4a1d      	ldr	r2, [pc, #116]	@ (80187c4 <TIM_OC2_SetConfig+0x104>)
 8018750:	4293      	cmp	r3, r2
 8018752:	d00b      	beq.n	801876c <TIM_OC2_SetConfig+0xac>
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	4a1c      	ldr	r2, [pc, #112]	@ (80187c8 <TIM_OC2_SetConfig+0x108>)
 8018758:	4293      	cmp	r3, r2
 801875a:	d007      	beq.n	801876c <TIM_OC2_SetConfig+0xac>
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	4a1b      	ldr	r2, [pc, #108]	@ (80187cc <TIM_OC2_SetConfig+0x10c>)
 8018760:	4293      	cmp	r3, r2
 8018762:	d003      	beq.n	801876c <TIM_OC2_SetConfig+0xac>
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	4a1a      	ldr	r2, [pc, #104]	@ (80187d0 <TIM_OC2_SetConfig+0x110>)
 8018768:	4293      	cmp	r3, r2
 801876a:	d113      	bne.n	8018794 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801876c:	693b      	ldr	r3, [r7, #16]
 801876e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8018772:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8018774:	693b      	ldr	r3, [r7, #16]
 8018776:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801877a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801877c:	683b      	ldr	r3, [r7, #0]
 801877e:	695b      	ldr	r3, [r3, #20]
 8018780:	009b      	lsls	r3, r3, #2
 8018782:	693a      	ldr	r2, [r7, #16]
 8018784:	4313      	orrs	r3, r2
 8018786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8018788:	683b      	ldr	r3, [r7, #0]
 801878a:	699b      	ldr	r3, [r3, #24]
 801878c:	009b      	lsls	r3, r3, #2
 801878e:	693a      	ldr	r2, [r7, #16]
 8018790:	4313      	orrs	r3, r2
 8018792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	693a      	ldr	r2, [r7, #16]
 8018798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	68fa      	ldr	r2, [r7, #12]
 801879e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80187a0:	683b      	ldr	r3, [r7, #0]
 80187a2:	685a      	ldr	r2, [r3, #4]
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	697a      	ldr	r2, [r7, #20]
 80187ac:	621a      	str	r2, [r3, #32]
}
 80187ae:	bf00      	nop
 80187b0:	371c      	adds	r7, #28
 80187b2:	46bd      	mov	sp, r7
 80187b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b8:	4770      	bx	lr
 80187ba:	bf00      	nop
 80187bc:	feff8fff 	.word	0xfeff8fff
 80187c0:	40010000 	.word	0x40010000
 80187c4:	40010400 	.word	0x40010400
 80187c8:	40014000 	.word	0x40014000
 80187cc:	40014400 	.word	0x40014400
 80187d0:	40014800 	.word	0x40014800

080187d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80187d4:	b480      	push	{r7}
 80187d6:	b087      	sub	sp, #28
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
 80187dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	6a1b      	ldr	r3, [r3, #32]
 80187e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	6a1b      	ldr	r3, [r3, #32]
 80187e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	685b      	ldr	r3, [r3, #4]
 80187f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	69db      	ldr	r3, [r3, #28]
 80187fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80187fc:	68fa      	ldr	r2, [r7, #12]
 80187fe:	4b33      	ldr	r3, [pc, #204]	@ (80188cc <TIM_OC3_SetConfig+0xf8>)
 8018800:	4013      	ands	r3, r2
 8018802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	f023 0303 	bic.w	r3, r3, #3
 801880a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801880c:	683b      	ldr	r3, [r7, #0]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	68fa      	ldr	r2, [r7, #12]
 8018812:	4313      	orrs	r3, r2
 8018814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8018816:	697b      	ldr	r3, [r7, #20]
 8018818:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801881c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801881e:	683b      	ldr	r3, [r7, #0]
 8018820:	689b      	ldr	r3, [r3, #8]
 8018822:	021b      	lsls	r3, r3, #8
 8018824:	697a      	ldr	r2, [r7, #20]
 8018826:	4313      	orrs	r3, r2
 8018828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	4a28      	ldr	r2, [pc, #160]	@ (80188d0 <TIM_OC3_SetConfig+0xfc>)
 801882e:	4293      	cmp	r3, r2
 8018830:	d003      	beq.n	801883a <TIM_OC3_SetConfig+0x66>
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	4a27      	ldr	r2, [pc, #156]	@ (80188d4 <TIM_OC3_SetConfig+0x100>)
 8018836:	4293      	cmp	r3, r2
 8018838:	d10d      	bne.n	8018856 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801883a:	697b      	ldr	r3, [r7, #20]
 801883c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	68db      	ldr	r3, [r3, #12]
 8018846:	021b      	lsls	r3, r3, #8
 8018848:	697a      	ldr	r2, [r7, #20]
 801884a:	4313      	orrs	r3, r2
 801884c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801884e:	697b      	ldr	r3, [r7, #20]
 8018850:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8018854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	4a1d      	ldr	r2, [pc, #116]	@ (80188d0 <TIM_OC3_SetConfig+0xfc>)
 801885a:	4293      	cmp	r3, r2
 801885c:	d00f      	beq.n	801887e <TIM_OC3_SetConfig+0xaa>
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	4a1c      	ldr	r2, [pc, #112]	@ (80188d4 <TIM_OC3_SetConfig+0x100>)
 8018862:	4293      	cmp	r3, r2
 8018864:	d00b      	beq.n	801887e <TIM_OC3_SetConfig+0xaa>
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	4a1b      	ldr	r2, [pc, #108]	@ (80188d8 <TIM_OC3_SetConfig+0x104>)
 801886a:	4293      	cmp	r3, r2
 801886c:	d007      	beq.n	801887e <TIM_OC3_SetConfig+0xaa>
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	4a1a      	ldr	r2, [pc, #104]	@ (80188dc <TIM_OC3_SetConfig+0x108>)
 8018872:	4293      	cmp	r3, r2
 8018874:	d003      	beq.n	801887e <TIM_OC3_SetConfig+0xaa>
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	4a19      	ldr	r2, [pc, #100]	@ (80188e0 <TIM_OC3_SetConfig+0x10c>)
 801887a:	4293      	cmp	r3, r2
 801887c:	d113      	bne.n	80188a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801887e:	693b      	ldr	r3, [r7, #16]
 8018880:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8018886:	693b      	ldr	r3, [r7, #16]
 8018888:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801888c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801888e:	683b      	ldr	r3, [r7, #0]
 8018890:	695b      	ldr	r3, [r3, #20]
 8018892:	011b      	lsls	r3, r3, #4
 8018894:	693a      	ldr	r2, [r7, #16]
 8018896:	4313      	orrs	r3, r2
 8018898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801889a:	683b      	ldr	r3, [r7, #0]
 801889c:	699b      	ldr	r3, [r3, #24]
 801889e:	011b      	lsls	r3, r3, #4
 80188a0:	693a      	ldr	r2, [r7, #16]
 80188a2:	4313      	orrs	r3, r2
 80188a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	693a      	ldr	r2, [r7, #16]
 80188aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	68fa      	ldr	r2, [r7, #12]
 80188b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	685a      	ldr	r2, [r3, #4]
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	697a      	ldr	r2, [r7, #20]
 80188be:	621a      	str	r2, [r3, #32]
}
 80188c0:	bf00      	nop
 80188c2:	371c      	adds	r7, #28
 80188c4:	46bd      	mov	sp, r7
 80188c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ca:	4770      	bx	lr
 80188cc:	fffeff8f 	.word	0xfffeff8f
 80188d0:	40010000 	.word	0x40010000
 80188d4:	40010400 	.word	0x40010400
 80188d8:	40014000 	.word	0x40014000
 80188dc:	40014400 	.word	0x40014400
 80188e0:	40014800 	.word	0x40014800

080188e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80188e4:	b480      	push	{r7}
 80188e6:	b087      	sub	sp, #28
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
 80188ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	6a1b      	ldr	r3, [r3, #32]
 80188f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	6a1b      	ldr	r3, [r3, #32]
 80188f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	685b      	ldr	r3, [r3, #4]
 8018904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	69db      	ldr	r3, [r3, #28]
 801890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801890c:	68fa      	ldr	r2, [r7, #12]
 801890e:	4b24      	ldr	r3, [pc, #144]	@ (80189a0 <TIM_OC4_SetConfig+0xbc>)
 8018910:	4013      	ands	r3, r2
 8018912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801891a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801891c:	683b      	ldr	r3, [r7, #0]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	021b      	lsls	r3, r3, #8
 8018922:	68fa      	ldr	r2, [r7, #12]
 8018924:	4313      	orrs	r3, r2
 8018926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8018928:	693b      	ldr	r3, [r7, #16]
 801892a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801892e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8018930:	683b      	ldr	r3, [r7, #0]
 8018932:	689b      	ldr	r3, [r3, #8]
 8018934:	031b      	lsls	r3, r3, #12
 8018936:	693a      	ldr	r2, [r7, #16]
 8018938:	4313      	orrs	r3, r2
 801893a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	4a19      	ldr	r2, [pc, #100]	@ (80189a4 <TIM_OC4_SetConfig+0xc0>)
 8018940:	4293      	cmp	r3, r2
 8018942:	d00f      	beq.n	8018964 <TIM_OC4_SetConfig+0x80>
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	4a18      	ldr	r2, [pc, #96]	@ (80189a8 <TIM_OC4_SetConfig+0xc4>)
 8018948:	4293      	cmp	r3, r2
 801894a:	d00b      	beq.n	8018964 <TIM_OC4_SetConfig+0x80>
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	4a17      	ldr	r2, [pc, #92]	@ (80189ac <TIM_OC4_SetConfig+0xc8>)
 8018950:	4293      	cmp	r3, r2
 8018952:	d007      	beq.n	8018964 <TIM_OC4_SetConfig+0x80>
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	4a16      	ldr	r2, [pc, #88]	@ (80189b0 <TIM_OC4_SetConfig+0xcc>)
 8018958:	4293      	cmp	r3, r2
 801895a:	d003      	beq.n	8018964 <TIM_OC4_SetConfig+0x80>
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	4a15      	ldr	r2, [pc, #84]	@ (80189b4 <TIM_OC4_SetConfig+0xd0>)
 8018960:	4293      	cmp	r3, r2
 8018962:	d109      	bne.n	8018978 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8018964:	697b      	ldr	r3, [r7, #20]
 8018966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801896a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801896c:	683b      	ldr	r3, [r7, #0]
 801896e:	695b      	ldr	r3, [r3, #20]
 8018970:	019b      	lsls	r3, r3, #6
 8018972:	697a      	ldr	r2, [r7, #20]
 8018974:	4313      	orrs	r3, r2
 8018976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	697a      	ldr	r2, [r7, #20]
 801897c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	68fa      	ldr	r2, [r7, #12]
 8018982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8018984:	683b      	ldr	r3, [r7, #0]
 8018986:	685a      	ldr	r2, [r3, #4]
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	693a      	ldr	r2, [r7, #16]
 8018990:	621a      	str	r2, [r3, #32]
}
 8018992:	bf00      	nop
 8018994:	371c      	adds	r7, #28
 8018996:	46bd      	mov	sp, r7
 8018998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801899c:	4770      	bx	lr
 801899e:	bf00      	nop
 80189a0:	feff8fff 	.word	0xfeff8fff
 80189a4:	40010000 	.word	0x40010000
 80189a8:	40010400 	.word	0x40010400
 80189ac:	40014000 	.word	0x40014000
 80189b0:	40014400 	.word	0x40014400
 80189b4:	40014800 	.word	0x40014800

080189b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80189b8:	b480      	push	{r7}
 80189ba:	b087      	sub	sp, #28
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
 80189c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	6a1b      	ldr	r3, [r3, #32]
 80189c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	6a1b      	ldr	r3, [r3, #32]
 80189cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	685b      	ldr	r3, [r3, #4]
 80189d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80189de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80189e0:	68fa      	ldr	r2, [r7, #12]
 80189e2:	4b21      	ldr	r3, [pc, #132]	@ (8018a68 <TIM_OC5_SetConfig+0xb0>)
 80189e4:	4013      	ands	r3, r2
 80189e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80189e8:	683b      	ldr	r3, [r7, #0]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	68fa      	ldr	r2, [r7, #12]
 80189ee:	4313      	orrs	r3, r2
 80189f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80189f2:	693b      	ldr	r3, [r7, #16]
 80189f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80189f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80189fa:	683b      	ldr	r3, [r7, #0]
 80189fc:	689b      	ldr	r3, [r3, #8]
 80189fe:	041b      	lsls	r3, r3, #16
 8018a00:	693a      	ldr	r2, [r7, #16]
 8018a02:	4313      	orrs	r3, r2
 8018a04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	4a18      	ldr	r2, [pc, #96]	@ (8018a6c <TIM_OC5_SetConfig+0xb4>)
 8018a0a:	4293      	cmp	r3, r2
 8018a0c:	d00f      	beq.n	8018a2e <TIM_OC5_SetConfig+0x76>
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	4a17      	ldr	r2, [pc, #92]	@ (8018a70 <TIM_OC5_SetConfig+0xb8>)
 8018a12:	4293      	cmp	r3, r2
 8018a14:	d00b      	beq.n	8018a2e <TIM_OC5_SetConfig+0x76>
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	4a16      	ldr	r2, [pc, #88]	@ (8018a74 <TIM_OC5_SetConfig+0xbc>)
 8018a1a:	4293      	cmp	r3, r2
 8018a1c:	d007      	beq.n	8018a2e <TIM_OC5_SetConfig+0x76>
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	4a15      	ldr	r2, [pc, #84]	@ (8018a78 <TIM_OC5_SetConfig+0xc0>)
 8018a22:	4293      	cmp	r3, r2
 8018a24:	d003      	beq.n	8018a2e <TIM_OC5_SetConfig+0x76>
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	4a14      	ldr	r2, [pc, #80]	@ (8018a7c <TIM_OC5_SetConfig+0xc4>)
 8018a2a:	4293      	cmp	r3, r2
 8018a2c:	d109      	bne.n	8018a42 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8018a2e:	697b      	ldr	r3, [r7, #20]
 8018a30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8018a34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8018a36:	683b      	ldr	r3, [r7, #0]
 8018a38:	695b      	ldr	r3, [r3, #20]
 8018a3a:	021b      	lsls	r3, r3, #8
 8018a3c:	697a      	ldr	r2, [r7, #20]
 8018a3e:	4313      	orrs	r3, r2
 8018a40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	697a      	ldr	r2, [r7, #20]
 8018a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	68fa      	ldr	r2, [r7, #12]
 8018a4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8018a4e:	683b      	ldr	r3, [r7, #0]
 8018a50:	685a      	ldr	r2, [r3, #4]
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	693a      	ldr	r2, [r7, #16]
 8018a5a:	621a      	str	r2, [r3, #32]
}
 8018a5c:	bf00      	nop
 8018a5e:	371c      	adds	r7, #28
 8018a60:	46bd      	mov	sp, r7
 8018a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a66:	4770      	bx	lr
 8018a68:	fffeff8f 	.word	0xfffeff8f
 8018a6c:	40010000 	.word	0x40010000
 8018a70:	40010400 	.word	0x40010400
 8018a74:	40014000 	.word	0x40014000
 8018a78:	40014400 	.word	0x40014400
 8018a7c:	40014800 	.word	0x40014800

08018a80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8018a80:	b480      	push	{r7}
 8018a82:	b087      	sub	sp, #28
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
 8018a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	6a1b      	ldr	r3, [r3, #32]
 8018a8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6a1b      	ldr	r3, [r3, #32]
 8018a94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	685b      	ldr	r3, [r3, #4]
 8018aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8018aa8:	68fa      	ldr	r2, [r7, #12]
 8018aaa:	4b22      	ldr	r3, [pc, #136]	@ (8018b34 <TIM_OC6_SetConfig+0xb4>)
 8018aac:	4013      	ands	r3, r2
 8018aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8018ab0:	683b      	ldr	r3, [r7, #0]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	021b      	lsls	r3, r3, #8
 8018ab6:	68fa      	ldr	r2, [r7, #12]
 8018ab8:	4313      	orrs	r3, r2
 8018aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8018abc:	693b      	ldr	r3, [r7, #16]
 8018abe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8018ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8018ac4:	683b      	ldr	r3, [r7, #0]
 8018ac6:	689b      	ldr	r3, [r3, #8]
 8018ac8:	051b      	lsls	r3, r3, #20
 8018aca:	693a      	ldr	r2, [r7, #16]
 8018acc:	4313      	orrs	r3, r2
 8018ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	4a19      	ldr	r2, [pc, #100]	@ (8018b38 <TIM_OC6_SetConfig+0xb8>)
 8018ad4:	4293      	cmp	r3, r2
 8018ad6:	d00f      	beq.n	8018af8 <TIM_OC6_SetConfig+0x78>
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	4a18      	ldr	r2, [pc, #96]	@ (8018b3c <TIM_OC6_SetConfig+0xbc>)
 8018adc:	4293      	cmp	r3, r2
 8018ade:	d00b      	beq.n	8018af8 <TIM_OC6_SetConfig+0x78>
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	4a17      	ldr	r2, [pc, #92]	@ (8018b40 <TIM_OC6_SetConfig+0xc0>)
 8018ae4:	4293      	cmp	r3, r2
 8018ae6:	d007      	beq.n	8018af8 <TIM_OC6_SetConfig+0x78>
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	4a16      	ldr	r2, [pc, #88]	@ (8018b44 <TIM_OC6_SetConfig+0xc4>)
 8018aec:	4293      	cmp	r3, r2
 8018aee:	d003      	beq.n	8018af8 <TIM_OC6_SetConfig+0x78>
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	4a15      	ldr	r2, [pc, #84]	@ (8018b48 <TIM_OC6_SetConfig+0xc8>)
 8018af4:	4293      	cmp	r3, r2
 8018af6:	d109      	bne.n	8018b0c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8018af8:	697b      	ldr	r3, [r7, #20]
 8018afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8018afe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8018b00:	683b      	ldr	r3, [r7, #0]
 8018b02:	695b      	ldr	r3, [r3, #20]
 8018b04:	029b      	lsls	r3, r3, #10
 8018b06:	697a      	ldr	r2, [r7, #20]
 8018b08:	4313      	orrs	r3, r2
 8018b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	697a      	ldr	r2, [r7, #20]
 8018b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	68fa      	ldr	r2, [r7, #12]
 8018b16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8018b18:	683b      	ldr	r3, [r7, #0]
 8018b1a:	685a      	ldr	r2, [r3, #4]
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	693a      	ldr	r2, [r7, #16]
 8018b24:	621a      	str	r2, [r3, #32]
}
 8018b26:	bf00      	nop
 8018b28:	371c      	adds	r7, #28
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b30:	4770      	bx	lr
 8018b32:	bf00      	nop
 8018b34:	feff8fff 	.word	0xfeff8fff
 8018b38:	40010000 	.word	0x40010000
 8018b3c:	40010400 	.word	0x40010400
 8018b40:	40014000 	.word	0x40014000
 8018b44:	40014400 	.word	0x40014400
 8018b48:	40014800 	.word	0x40014800

08018b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8018b4c:	b480      	push	{r7}
 8018b4e:	b087      	sub	sp, #28
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	60f8      	str	r0, [r7, #12]
 8018b54:	60b9      	str	r1, [r7, #8]
 8018b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	6a1b      	ldr	r3, [r3, #32]
 8018b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	6a1b      	ldr	r3, [r3, #32]
 8018b62:	f023 0201 	bic.w	r2, r3, #1
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	699b      	ldr	r3, [r3, #24]
 8018b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8018b70:	693b      	ldr	r3, [r7, #16]
 8018b72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8018b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	011b      	lsls	r3, r3, #4
 8018b7c:	693a      	ldr	r2, [r7, #16]
 8018b7e:	4313      	orrs	r3, r2
 8018b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8018b82:	697b      	ldr	r3, [r7, #20]
 8018b84:	f023 030a 	bic.w	r3, r3, #10
 8018b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8018b8a:	697a      	ldr	r2, [r7, #20]
 8018b8c:	68bb      	ldr	r3, [r7, #8]
 8018b8e:	4313      	orrs	r3, r2
 8018b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	693a      	ldr	r2, [r7, #16]
 8018b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	697a      	ldr	r2, [r7, #20]
 8018b9c:	621a      	str	r2, [r3, #32]
}
 8018b9e:	bf00      	nop
 8018ba0:	371c      	adds	r7, #28
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba8:	4770      	bx	lr

08018baa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8018baa:	b480      	push	{r7}
 8018bac:	b087      	sub	sp, #28
 8018bae:	af00      	add	r7, sp, #0
 8018bb0:	60f8      	str	r0, [r7, #12]
 8018bb2:	60b9      	str	r1, [r7, #8]
 8018bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	6a1b      	ldr	r3, [r3, #32]
 8018bba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	6a1b      	ldr	r3, [r3, #32]
 8018bc0:	f023 0210 	bic.w	r2, r3, #16
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	699b      	ldr	r3, [r3, #24]
 8018bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8018bce:	693b      	ldr	r3, [r7, #16]
 8018bd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8018bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	031b      	lsls	r3, r3, #12
 8018bda:	693a      	ldr	r2, [r7, #16]
 8018bdc:	4313      	orrs	r3, r2
 8018bde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8018be0:	697b      	ldr	r3, [r7, #20]
 8018be2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8018be6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8018be8:	68bb      	ldr	r3, [r7, #8]
 8018bea:	011b      	lsls	r3, r3, #4
 8018bec:	697a      	ldr	r2, [r7, #20]
 8018bee:	4313      	orrs	r3, r2
 8018bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	693a      	ldr	r2, [r7, #16]
 8018bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	697a      	ldr	r2, [r7, #20]
 8018bfc:	621a      	str	r2, [r3, #32]
}
 8018bfe:	bf00      	nop
 8018c00:	371c      	adds	r7, #28
 8018c02:	46bd      	mov	sp, r7
 8018c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c08:	4770      	bx	lr
	...

08018c0c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8018c0c:	b480      	push	{r7}
 8018c0e:	b085      	sub	sp, #20
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
 8018c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	689b      	ldr	r3, [r3, #8]
 8018c1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8018c1c:	68fa      	ldr	r2, [r7, #12]
 8018c1e:	4b09      	ldr	r3, [pc, #36]	@ (8018c44 <TIM_ITRx_SetConfig+0x38>)
 8018c20:	4013      	ands	r3, r2
 8018c22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8018c24:	683a      	ldr	r2, [r7, #0]
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	4313      	orrs	r3, r2
 8018c2a:	f043 0307 	orr.w	r3, r3, #7
 8018c2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	68fa      	ldr	r2, [r7, #12]
 8018c34:	609a      	str	r2, [r3, #8]
}
 8018c36:	bf00      	nop
 8018c38:	3714      	adds	r7, #20
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c40:	4770      	bx	lr
 8018c42:	bf00      	nop
 8018c44:	ffcfff8f 	.word	0xffcfff8f

08018c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8018c48:	b480      	push	{r7}
 8018c4a:	b087      	sub	sp, #28
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	60f8      	str	r0, [r7, #12]
 8018c50:	60b9      	str	r1, [r7, #8]
 8018c52:	607a      	str	r2, [r7, #4]
 8018c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	689b      	ldr	r3, [r3, #8]
 8018c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8018c5c:	697b      	ldr	r3, [r7, #20]
 8018c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8018c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	021a      	lsls	r2, r3, #8
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	431a      	orrs	r2, r3
 8018c6c:	68bb      	ldr	r3, [r7, #8]
 8018c6e:	4313      	orrs	r3, r2
 8018c70:	697a      	ldr	r2, [r7, #20]
 8018c72:	4313      	orrs	r3, r2
 8018c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	697a      	ldr	r2, [r7, #20]
 8018c7a:	609a      	str	r2, [r3, #8]
}
 8018c7c:	bf00      	nop
 8018c7e:	371c      	adds	r7, #28
 8018c80:	46bd      	mov	sp, r7
 8018c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c86:	4770      	bx	lr

08018c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8018c88:	b480      	push	{r7}
 8018c8a:	b087      	sub	sp, #28
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	60f8      	str	r0, [r7, #12]
 8018c90:	60b9      	str	r1, [r7, #8]
 8018c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8018c94:	68bb      	ldr	r3, [r7, #8]
 8018c96:	f003 031f 	and.w	r3, r3, #31
 8018c9a:	2201      	movs	r2, #1
 8018c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8018ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	6a1a      	ldr	r2, [r3, #32]
 8018ca6:	697b      	ldr	r3, [r7, #20]
 8018ca8:	43db      	mvns	r3, r3
 8018caa:	401a      	ands	r2, r3
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	6a1a      	ldr	r2, [r3, #32]
 8018cb4:	68bb      	ldr	r3, [r7, #8]
 8018cb6:	f003 031f 	and.w	r3, r3, #31
 8018cba:	6879      	ldr	r1, [r7, #4]
 8018cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8018cc0:	431a      	orrs	r2, r3
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	621a      	str	r2, [r3, #32]
}
 8018cc6:	bf00      	nop
 8018cc8:	371c      	adds	r7, #28
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd0:	4770      	bx	lr
	...

08018cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8018cd4:	b480      	push	{r7}
 8018cd6:	b085      	sub	sp, #20
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
 8018cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8018ce4:	2b01      	cmp	r3, #1
 8018ce6:	d101      	bne.n	8018cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8018ce8:	2302      	movs	r3, #2
 8018cea:	e077      	b.n	8018ddc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	2201      	movs	r2, #1
 8018cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	2202      	movs	r2, #2
 8018cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	685b      	ldr	r3, [r3, #4]
 8018d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	689b      	ldr	r3, [r3, #8]
 8018d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	4a35      	ldr	r2, [pc, #212]	@ (8018de8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8018d12:	4293      	cmp	r3, r2
 8018d14:	d004      	beq.n	8018d20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	4a34      	ldr	r2, [pc, #208]	@ (8018dec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8018d1c:	4293      	cmp	r3, r2
 8018d1e:	d108      	bne.n	8018d32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8018d26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8018d28:	683b      	ldr	r3, [r7, #0]
 8018d2a:	685b      	ldr	r3, [r3, #4]
 8018d2c:	68fa      	ldr	r2, [r7, #12]
 8018d2e:	4313      	orrs	r3, r2
 8018d30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018d38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	68fa      	ldr	r2, [r7, #12]
 8018d40:	4313      	orrs	r3, r2
 8018d42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	68fa      	ldr	r2, [r7, #12]
 8018d4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	4a25      	ldr	r2, [pc, #148]	@ (8018de8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8018d52:	4293      	cmp	r3, r2
 8018d54:	d02c      	beq.n	8018db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018d5e:	d027      	beq.n	8018db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	4a22      	ldr	r2, [pc, #136]	@ (8018df0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8018d66:	4293      	cmp	r3, r2
 8018d68:	d022      	beq.n	8018db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	4a21      	ldr	r2, [pc, #132]	@ (8018df4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8018d70:	4293      	cmp	r3, r2
 8018d72:	d01d      	beq.n	8018db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	4a1f      	ldr	r2, [pc, #124]	@ (8018df8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8018d7a:	4293      	cmp	r3, r2
 8018d7c:	d018      	beq.n	8018db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	4a1a      	ldr	r2, [pc, #104]	@ (8018dec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8018d84:	4293      	cmp	r3, r2
 8018d86:	d013      	beq.n	8018db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8018dfc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8018d8e:	4293      	cmp	r3, r2
 8018d90:	d00e      	beq.n	8018db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	4a1a      	ldr	r2, [pc, #104]	@ (8018e00 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8018d98:	4293      	cmp	r3, r2
 8018d9a:	d009      	beq.n	8018db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	4a18      	ldr	r2, [pc, #96]	@ (8018e04 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8018da2:	4293      	cmp	r3, r2
 8018da4:	d004      	beq.n	8018db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	4a17      	ldr	r2, [pc, #92]	@ (8018e08 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8018dac:	4293      	cmp	r3, r2
 8018dae:	d10c      	bne.n	8018dca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8018db0:	68bb      	ldr	r3, [r7, #8]
 8018db2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018db6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8018db8:	683b      	ldr	r3, [r7, #0]
 8018dba:	689b      	ldr	r3, [r3, #8]
 8018dbc:	68ba      	ldr	r2, [r7, #8]
 8018dbe:	4313      	orrs	r3, r2
 8018dc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	68ba      	ldr	r2, [r7, #8]
 8018dc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	2201      	movs	r2, #1
 8018dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8018dda:	2300      	movs	r3, #0
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	3714      	adds	r7, #20
 8018de0:	46bd      	mov	sp, r7
 8018de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de6:	4770      	bx	lr
 8018de8:	40010000 	.word	0x40010000
 8018dec:	40010400 	.word	0x40010400
 8018df0:	40000400 	.word	0x40000400
 8018df4:	40000800 	.word	0x40000800
 8018df8:	40000c00 	.word	0x40000c00
 8018dfc:	40001800 	.word	0x40001800
 8018e00:	40014000 	.word	0x40014000
 8018e04:	4000e000 	.word	0x4000e000
 8018e08:	4000e400 	.word	0x4000e400

08018e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018e0c:	b480      	push	{r7}
 8018e0e:	b083      	sub	sp, #12
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018e14:	bf00      	nop
 8018e16:	370c      	adds	r7, #12
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1e:	4770      	bx	lr

08018e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018e20:	b480      	push	{r7}
 8018e22:	b083      	sub	sp, #12
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018e28:	bf00      	nop
 8018e2a:	370c      	adds	r7, #12
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e32:	4770      	bx	lr

08018e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018e34:	b480      	push	{r7}
 8018e36:	b083      	sub	sp, #12
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8018e3c:	bf00      	nop
 8018e3e:	370c      	adds	r7, #12
 8018e40:	46bd      	mov	sp, r7
 8018e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e46:	4770      	bx	lr

08018e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	b082      	sub	sp, #8
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d101      	bne.n	8018e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018e56:	2301      	movs	r3, #1
 8018e58:	e042      	b.n	8018ee0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d106      	bne.n	8018e72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	2200      	movs	r2, #0
 8018e68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018e6c:	6878      	ldr	r0, [r7, #4]
 8018e6e:	f7f1 ff8d 	bl	800ad8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	2224      	movs	r2, #36	@ 0x24
 8018e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	681a      	ldr	r2, [r3, #0]
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	f022 0201 	bic.w	r2, r2, #1
 8018e88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d002      	beq.n	8018e98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8018e92:	6878      	ldr	r0, [r7, #4]
 8018e94:	f001 fb6a 	bl	801a56c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018e98:	6878      	ldr	r0, [r7, #4]
 8018e9a:	f000 fcfb 	bl	8019894 <UART_SetConfig>
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	2b01      	cmp	r3, #1
 8018ea2:	d101      	bne.n	8018ea8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8018ea4:	2301      	movs	r3, #1
 8018ea6:	e01b      	b.n	8018ee0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	685a      	ldr	r2, [r3, #4]
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8018eb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	689a      	ldr	r2, [r3, #8]
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8018ec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	681a      	ldr	r2, [r3, #0]
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	f042 0201 	orr.w	r2, r2, #1
 8018ed6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018ed8:	6878      	ldr	r0, [r7, #4]
 8018eda:	f001 fbe9 	bl	801a6b0 <UART_CheckIdleState>
 8018ede:	4603      	mov	r3, r0
}
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	3708      	adds	r7, #8
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	bd80      	pop	{r7, pc}

08018ee8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b08a      	sub	sp, #40	@ 0x28
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	60f8      	str	r0, [r7, #12]
 8018ef0:	60b9      	str	r1, [r7, #8]
 8018ef2:	4613      	mov	r3, r2
 8018ef4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018efc:	2b20      	cmp	r3, #32
 8018efe:	d167      	bne.n	8018fd0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8018f00:	68bb      	ldr	r3, [r7, #8]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d002      	beq.n	8018f0c <HAL_UART_Transmit_DMA+0x24>
 8018f06:	88fb      	ldrh	r3, [r7, #6]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d101      	bne.n	8018f10 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8018f0c:	2301      	movs	r3, #1
 8018f0e:	e060      	b.n	8018fd2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	68ba      	ldr	r2, [r7, #8]
 8018f14:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	88fa      	ldrh	r2, [r7, #6]
 8018f1a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	88fa      	ldrh	r2, [r7, #6]
 8018f22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	2200      	movs	r2, #0
 8018f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	2221      	movs	r2, #33	@ 0x21
 8018f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d028      	beq.n	8018f90 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018f42:	4a26      	ldr	r2, [pc, #152]	@ (8018fdc <HAL_UART_Transmit_DMA+0xf4>)
 8018f44:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018f4a:	4a25      	ldr	r2, [pc, #148]	@ (8018fe0 <HAL_UART_Transmit_DMA+0xf8>)
 8018f4c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018f52:	4a24      	ldr	r2, [pc, #144]	@ (8018fe4 <HAL_UART_Transmit_DMA+0xfc>)
 8018f54:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8018f62:	68fb      	ldr	r3, [r7, #12]
 8018f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018f66:	4619      	mov	r1, r3
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	3328      	adds	r3, #40	@ 0x28
 8018f6e:	461a      	mov	r2, r3
 8018f70:	88fb      	ldrh	r3, [r7, #6]
 8018f72:	f7f5 fe67 	bl	800ec44 <HAL_DMA_Start_IT>
 8018f76:	4603      	mov	r3, r0
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d009      	beq.n	8018f90 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	2210      	movs	r2, #16
 8018f80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	2220      	movs	r2, #32
 8018f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8018f8c:	2301      	movs	r3, #1
 8018f8e:	e020      	b.n	8018fd2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	2240      	movs	r2, #64	@ 0x40
 8018f96:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	3308      	adds	r3, #8
 8018f9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018fa0:	697b      	ldr	r3, [r7, #20]
 8018fa2:	e853 3f00 	ldrex	r3, [r3]
 8018fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8018fa8:	693b      	ldr	r3, [r7, #16]
 8018faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	3308      	adds	r3, #8
 8018fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018fb8:	623a      	str	r2, [r7, #32]
 8018fba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018fbc:	69f9      	ldr	r1, [r7, #28]
 8018fbe:	6a3a      	ldr	r2, [r7, #32]
 8018fc0:	e841 2300 	strex	r3, r2, [r1]
 8018fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8018fc6:	69bb      	ldr	r3, [r7, #24]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d1e5      	bne.n	8018f98 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8018fcc:	2300      	movs	r3, #0
 8018fce:	e000      	b.n	8018fd2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8018fd0:	2302      	movs	r3, #2
  }
}
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	3728      	adds	r7, #40	@ 0x28
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	bd80      	pop	{r7, pc}
 8018fda:	bf00      	nop
 8018fdc:	0801ab7d 	.word	0x0801ab7d
 8018fe0:	0801ac13 	.word	0x0801ac13
 8018fe4:	0801ad95 	.word	0x0801ad95

08018fe8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b08a      	sub	sp, #40	@ 0x28
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	60f8      	str	r0, [r7, #12]
 8018ff0:	60b9      	str	r1, [r7, #8]
 8018ff2:	4613      	mov	r3, r2
 8018ff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018ffc:	2b20      	cmp	r3, #32
 8018ffe:	d137      	bne.n	8019070 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8019000:	68bb      	ldr	r3, [r7, #8]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d002      	beq.n	801900c <HAL_UART_Receive_DMA+0x24>
 8019006:	88fb      	ldrh	r3, [r7, #6]
 8019008:	2b00      	cmp	r3, #0
 801900a:	d101      	bne.n	8019010 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801900c:	2301      	movs	r3, #1
 801900e:	e030      	b.n	8019072 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	2200      	movs	r2, #0
 8019014:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	4a18      	ldr	r2, [pc, #96]	@ (801907c <HAL_UART_Receive_DMA+0x94>)
 801901c:	4293      	cmp	r3, r2
 801901e:	d01f      	beq.n	8019060 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	685b      	ldr	r3, [r3, #4]
 8019026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801902a:	2b00      	cmp	r3, #0
 801902c:	d018      	beq.n	8019060 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019034:	697b      	ldr	r3, [r7, #20]
 8019036:	e853 3f00 	ldrex	r3, [r3]
 801903a:	613b      	str	r3, [r7, #16]
   return(result);
 801903c:	693b      	ldr	r3, [r7, #16]
 801903e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8019042:	627b      	str	r3, [r7, #36]	@ 0x24
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	461a      	mov	r2, r3
 801904a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801904c:	623b      	str	r3, [r7, #32]
 801904e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019050:	69f9      	ldr	r1, [r7, #28]
 8019052:	6a3a      	ldr	r2, [r7, #32]
 8019054:	e841 2300 	strex	r3, r2, [r1]
 8019058:	61bb      	str	r3, [r7, #24]
   return(result);
 801905a:	69bb      	ldr	r3, [r7, #24]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d1e6      	bne.n	801902e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8019060:	88fb      	ldrh	r3, [r7, #6]
 8019062:	461a      	mov	r2, r3
 8019064:	68b9      	ldr	r1, [r7, #8]
 8019066:	68f8      	ldr	r0, [r7, #12]
 8019068:	f001 fc3a 	bl	801a8e0 <UART_Start_Receive_DMA>
 801906c:	4603      	mov	r3, r0
 801906e:	e000      	b.n	8019072 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8019070:	2302      	movs	r3, #2
  }
}
 8019072:	4618      	mov	r0, r3
 8019074:	3728      	adds	r7, #40	@ 0x28
 8019076:	46bd      	mov	sp, r7
 8019078:	bd80      	pop	{r7, pc}
 801907a:	bf00      	nop
 801907c:	58000c00 	.word	0x58000c00

08019080 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8019080:	b580      	push	{r7, lr}
 8019082:	b0ba      	sub	sp, #232	@ 0xe8
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	69db      	ldr	r3, [r3, #28]
 801908e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	689b      	ldr	r3, [r3, #8]
 80190a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80190a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80190aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80190ae:	4013      	ands	r3, r2
 80190b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80190b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d11b      	bne.n	80190f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80190bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80190c0:	f003 0320 	and.w	r3, r3, #32
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d015      	beq.n	80190f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80190c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80190cc:	f003 0320 	and.w	r3, r3, #32
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d105      	bne.n	80190e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80190d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80190d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d009      	beq.n	80190f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	f000 8393 	beq.w	8019810 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80190ee:	6878      	ldr	r0, [r7, #4]
 80190f0:	4798      	blx	r3
      }
      return;
 80190f2:	e38d      	b.n	8019810 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80190f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	f000 8123 	beq.w	8019344 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80190fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8019102:	4b8d      	ldr	r3, [pc, #564]	@ (8019338 <HAL_UART_IRQHandler+0x2b8>)
 8019104:	4013      	ands	r3, r2
 8019106:	2b00      	cmp	r3, #0
 8019108:	d106      	bne.n	8019118 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801910a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801910e:	4b8b      	ldr	r3, [pc, #556]	@ (801933c <HAL_UART_IRQHandler+0x2bc>)
 8019110:	4013      	ands	r3, r2
 8019112:	2b00      	cmp	r3, #0
 8019114:	f000 8116 	beq.w	8019344 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801911c:	f003 0301 	and.w	r3, r3, #1
 8019120:	2b00      	cmp	r3, #0
 8019122:	d011      	beq.n	8019148 <HAL_UART_IRQHandler+0xc8>
 8019124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801912c:	2b00      	cmp	r3, #0
 801912e:	d00b      	beq.n	8019148 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	2201      	movs	r2, #1
 8019136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801913e:	f043 0201 	orr.w	r2, r3, #1
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801914c:	f003 0302 	and.w	r3, r3, #2
 8019150:	2b00      	cmp	r3, #0
 8019152:	d011      	beq.n	8019178 <HAL_UART_IRQHandler+0xf8>
 8019154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019158:	f003 0301 	and.w	r3, r3, #1
 801915c:	2b00      	cmp	r3, #0
 801915e:	d00b      	beq.n	8019178 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	2202      	movs	r2, #2
 8019166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801916e:	f043 0204 	orr.w	r2, r3, #4
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801917c:	f003 0304 	and.w	r3, r3, #4
 8019180:	2b00      	cmp	r3, #0
 8019182:	d011      	beq.n	80191a8 <HAL_UART_IRQHandler+0x128>
 8019184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019188:	f003 0301 	and.w	r3, r3, #1
 801918c:	2b00      	cmp	r3, #0
 801918e:	d00b      	beq.n	80191a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	2204      	movs	r2, #4
 8019196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801919e:	f043 0202 	orr.w	r2, r3, #2
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80191a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80191ac:	f003 0308 	and.w	r3, r3, #8
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d017      	beq.n	80191e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80191b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80191b8:	f003 0320 	and.w	r3, r3, #32
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d105      	bne.n	80191cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80191c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80191c4:	4b5c      	ldr	r3, [pc, #368]	@ (8019338 <HAL_UART_IRQHandler+0x2b8>)
 80191c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d00b      	beq.n	80191e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	2208      	movs	r2, #8
 80191d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80191da:	f043 0208 	orr.w	r2, r3, #8
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80191e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80191e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d012      	beq.n	8019216 <HAL_UART_IRQHandler+0x196>
 80191f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80191f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d00c      	beq.n	8019216 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019204:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801920c:	f043 0220 	orr.w	r2, r3, #32
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801921c:	2b00      	cmp	r3, #0
 801921e:	f000 82f9 	beq.w	8019814 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8019222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019226:	f003 0320 	and.w	r3, r3, #32
 801922a:	2b00      	cmp	r3, #0
 801922c:	d013      	beq.n	8019256 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801922e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019232:	f003 0320 	and.w	r3, r3, #32
 8019236:	2b00      	cmp	r3, #0
 8019238:	d105      	bne.n	8019246 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801923a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801923e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019242:	2b00      	cmp	r3, #0
 8019244:	d007      	beq.n	8019256 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801924a:	2b00      	cmp	r3, #0
 801924c:	d003      	beq.n	8019256 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019252:	6878      	ldr	r0, [r7, #4]
 8019254:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801925c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	689b      	ldr	r3, [r3, #8]
 8019266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801926a:	2b40      	cmp	r3, #64	@ 0x40
 801926c:	d005      	beq.n	801927a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801926e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8019272:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019276:	2b00      	cmp	r3, #0
 8019278:	d054      	beq.n	8019324 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801927a:	6878      	ldr	r0, [r7, #4]
 801927c:	f001 fc18 	bl	801aab0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	689b      	ldr	r3, [r3, #8]
 8019286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801928a:	2b40      	cmp	r3, #64	@ 0x40
 801928c:	d146      	bne.n	801931c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	3308      	adds	r3, #8
 8019294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019298:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801929c:	e853 3f00 	ldrex	r3, [r3]
 80192a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80192a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80192a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80192ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	3308      	adds	r3, #8
 80192b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80192ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80192be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80192c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80192ca:	e841 2300 	strex	r3, r2, [r1]
 80192ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80192d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d1d9      	bne.n	801928e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d017      	beq.n	8019314 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80192ea:	4a15      	ldr	r2, [pc, #84]	@ (8019340 <HAL_UART_IRQHandler+0x2c0>)
 80192ec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80192f4:	4618      	mov	r0, r3
 80192f6:	f7f6 fa2d 	bl	800f754 <HAL_DMA_Abort_IT>
 80192fa:	4603      	mov	r3, r0
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d019      	beq.n	8019334 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019308:	687a      	ldr	r2, [r7, #4]
 801930a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801930e:	4610      	mov	r0, r2
 8019310:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019312:	e00f      	b.n	8019334 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8019314:	6878      	ldr	r0, [r7, #4]
 8019316:	f000 faa7 	bl	8019868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801931a:	e00b      	b.n	8019334 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801931c:	6878      	ldr	r0, [r7, #4]
 801931e:	f000 faa3 	bl	8019868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019322:	e007      	b.n	8019334 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8019324:	6878      	ldr	r0, [r7, #4]
 8019326:	f000 fa9f 	bl	8019868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	2200      	movs	r2, #0
 801932e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8019332:	e26f      	b.n	8019814 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019334:	bf00      	nop
    return;
 8019336:	e26d      	b.n	8019814 <HAL_UART_IRQHandler+0x794>
 8019338:	10000001 	.word	0x10000001
 801933c:	04000120 	.word	0x04000120
 8019340:	0801ae15 	.word	0x0801ae15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019348:	2b01      	cmp	r3, #1
 801934a:	f040 8203 	bne.w	8019754 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801934e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019352:	f003 0310 	and.w	r3, r3, #16
 8019356:	2b00      	cmp	r3, #0
 8019358:	f000 81fc 	beq.w	8019754 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801935c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019360:	f003 0310 	and.w	r3, r3, #16
 8019364:	2b00      	cmp	r3, #0
 8019366:	f000 81f5 	beq.w	8019754 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	2210      	movs	r2, #16
 8019370:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	689b      	ldr	r3, [r3, #8]
 8019378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801937c:	2b40      	cmp	r3, #64	@ 0x40
 801937e:	f040 816d 	bne.w	801965c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	4aa4      	ldr	r2, [pc, #656]	@ (801961c <HAL_UART_IRQHandler+0x59c>)
 801938c:	4293      	cmp	r3, r2
 801938e:	d068      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	4aa1      	ldr	r2, [pc, #644]	@ (8019620 <HAL_UART_IRQHandler+0x5a0>)
 801939a:	4293      	cmp	r3, r2
 801939c:	d061      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	4a9f      	ldr	r2, [pc, #636]	@ (8019624 <HAL_UART_IRQHandler+0x5a4>)
 80193a8:	4293      	cmp	r3, r2
 80193aa:	d05a      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	4a9c      	ldr	r2, [pc, #624]	@ (8019628 <HAL_UART_IRQHandler+0x5a8>)
 80193b6:	4293      	cmp	r3, r2
 80193b8:	d053      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	4a9a      	ldr	r2, [pc, #616]	@ (801962c <HAL_UART_IRQHandler+0x5ac>)
 80193c4:	4293      	cmp	r3, r2
 80193c6:	d04c      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	4a97      	ldr	r2, [pc, #604]	@ (8019630 <HAL_UART_IRQHandler+0x5b0>)
 80193d2:	4293      	cmp	r3, r2
 80193d4:	d045      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	4a95      	ldr	r2, [pc, #596]	@ (8019634 <HAL_UART_IRQHandler+0x5b4>)
 80193e0:	4293      	cmp	r3, r2
 80193e2:	d03e      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	4a92      	ldr	r2, [pc, #584]	@ (8019638 <HAL_UART_IRQHandler+0x5b8>)
 80193ee:	4293      	cmp	r3, r2
 80193f0:	d037      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	4a90      	ldr	r2, [pc, #576]	@ (801963c <HAL_UART_IRQHandler+0x5bc>)
 80193fc:	4293      	cmp	r3, r2
 80193fe:	d030      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	4a8d      	ldr	r2, [pc, #564]	@ (8019640 <HAL_UART_IRQHandler+0x5c0>)
 801940a:	4293      	cmp	r3, r2
 801940c:	d029      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	4a8b      	ldr	r2, [pc, #556]	@ (8019644 <HAL_UART_IRQHandler+0x5c4>)
 8019418:	4293      	cmp	r3, r2
 801941a:	d022      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	4a88      	ldr	r2, [pc, #544]	@ (8019648 <HAL_UART_IRQHandler+0x5c8>)
 8019426:	4293      	cmp	r3, r2
 8019428:	d01b      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	4a86      	ldr	r2, [pc, #536]	@ (801964c <HAL_UART_IRQHandler+0x5cc>)
 8019434:	4293      	cmp	r3, r2
 8019436:	d014      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	4a83      	ldr	r2, [pc, #524]	@ (8019650 <HAL_UART_IRQHandler+0x5d0>)
 8019442:	4293      	cmp	r3, r2
 8019444:	d00d      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	4a81      	ldr	r2, [pc, #516]	@ (8019654 <HAL_UART_IRQHandler+0x5d4>)
 8019450:	4293      	cmp	r3, r2
 8019452:	d006      	beq.n	8019462 <HAL_UART_IRQHandler+0x3e2>
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	4a7e      	ldr	r2, [pc, #504]	@ (8019658 <HAL_UART_IRQHandler+0x5d8>)
 801945e:	4293      	cmp	r3, r2
 8019460:	d106      	bne.n	8019470 <HAL_UART_IRQHandler+0x3f0>
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	685b      	ldr	r3, [r3, #4]
 801946c:	b29b      	uxth	r3, r3
 801946e:	e005      	b.n	801947c <HAL_UART_IRQHandler+0x3fc>
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	685b      	ldr	r3, [r3, #4]
 801947a:	b29b      	uxth	r3, r3
 801947c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8019480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8019484:	2b00      	cmp	r3, #0
 8019486:	f000 80ad 	beq.w	80195e4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019490:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8019494:	429a      	cmp	r2, r3
 8019496:	f080 80a5 	bcs.w	80195e4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80194a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80194aa:	69db      	ldr	r3, [r3, #28]
 80194ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80194b0:	f000 8087 	beq.w	80195c2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80194c0:	e853 3f00 	ldrex	r3, [r3]
 80194c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80194c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80194cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80194d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	461a      	mov	r2, r3
 80194da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80194de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80194e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80194ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80194ee:	e841 2300 	strex	r3, r2, [r1]
 80194f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80194f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d1da      	bne.n	80194b4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	3308      	adds	r3, #8
 8019504:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019508:	e853 3f00 	ldrex	r3, [r3]
 801950c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801950e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019510:	f023 0301 	bic.w	r3, r3, #1
 8019514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	3308      	adds	r3, #8
 801951e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8019522:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8019526:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019528:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801952a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801952e:	e841 2300 	strex	r3, r2, [r1]
 8019532:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8019534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019536:	2b00      	cmp	r3, #0
 8019538:	d1e1      	bne.n	80194fe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	3308      	adds	r3, #8
 8019540:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019544:	e853 3f00 	ldrex	r3, [r3]
 8019548:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801954a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801954c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	3308      	adds	r3, #8
 801955a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801955e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8019560:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019562:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8019564:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8019566:	e841 2300 	strex	r3, r2, [r1]
 801956a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801956c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801956e:	2b00      	cmp	r3, #0
 8019570:	d1e3      	bne.n	801953a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	2220      	movs	r2, #32
 8019576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	2200      	movs	r2, #0
 801957e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019588:	e853 3f00 	ldrex	r3, [r3]
 801958c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801958e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019590:	f023 0310 	bic.w	r3, r3, #16
 8019594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	461a      	mov	r2, r3
 801959e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80195a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80195a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80195a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80195aa:	e841 2300 	strex	r3, r2, [r1]
 80195ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80195b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d1e4      	bne.n	8019580 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80195bc:	4618      	mov	r0, r3
 80195be:	f7f5 fdab 	bl	800f118 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	2202      	movs	r2, #2
 80195c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80195d4:	b29b      	uxth	r3, r3
 80195d6:	1ad3      	subs	r3, r2, r3
 80195d8:	b29b      	uxth	r3, r3
 80195da:	4619      	mov	r1, r3
 80195dc:	6878      	ldr	r0, [r7, #4]
 80195de:	f000 f94d 	bl	801987c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80195e2:	e119      	b.n	8019818 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80195ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80195ee:	429a      	cmp	r2, r3
 80195f0:	f040 8112 	bne.w	8019818 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80195fa:	69db      	ldr	r3, [r3, #28]
 80195fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019600:	f040 810a 	bne.w	8019818 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	2202      	movs	r2, #2
 8019608:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019610:	4619      	mov	r1, r3
 8019612:	6878      	ldr	r0, [r7, #4]
 8019614:	f000 f932 	bl	801987c <HAL_UARTEx_RxEventCallback>
      return;
 8019618:	e0fe      	b.n	8019818 <HAL_UART_IRQHandler+0x798>
 801961a:	bf00      	nop
 801961c:	40020010 	.word	0x40020010
 8019620:	40020028 	.word	0x40020028
 8019624:	40020040 	.word	0x40020040
 8019628:	40020058 	.word	0x40020058
 801962c:	40020070 	.word	0x40020070
 8019630:	40020088 	.word	0x40020088
 8019634:	400200a0 	.word	0x400200a0
 8019638:	400200b8 	.word	0x400200b8
 801963c:	40020410 	.word	0x40020410
 8019640:	40020428 	.word	0x40020428
 8019644:	40020440 	.word	0x40020440
 8019648:	40020458 	.word	0x40020458
 801964c:	40020470 	.word	0x40020470
 8019650:	40020488 	.word	0x40020488
 8019654:	400204a0 	.word	0x400204a0
 8019658:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019668:	b29b      	uxth	r3, r3
 801966a:	1ad3      	subs	r3, r2, r3
 801966c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019676:	b29b      	uxth	r3, r3
 8019678:	2b00      	cmp	r3, #0
 801967a:	f000 80cf 	beq.w	801981c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801967e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8019682:	2b00      	cmp	r3, #0
 8019684:	f000 80ca 	beq.w	801981c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801968e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019690:	e853 3f00 	ldrex	r3, [r3]
 8019694:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801969c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	461a      	mov	r2, r3
 80196a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80196aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80196ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80196ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80196b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80196b2:	e841 2300 	strex	r3, r2, [r1]
 80196b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80196b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d1e4      	bne.n	8019688 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	3308      	adds	r3, #8
 80196c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196c8:	e853 3f00 	ldrex	r3, [r3]
 80196cc:	623b      	str	r3, [r7, #32]
   return(result);
 80196ce:	6a3a      	ldr	r2, [r7, #32]
 80196d0:	4b55      	ldr	r3, [pc, #340]	@ (8019828 <HAL_UART_IRQHandler+0x7a8>)
 80196d2:	4013      	ands	r3, r2
 80196d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	3308      	adds	r3, #8
 80196de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80196e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80196e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80196e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80196e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80196ea:	e841 2300 	strex	r3, r2, [r1]
 80196ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80196f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d1e3      	bne.n	80196be <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	2220      	movs	r2, #32
 80196fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	2200      	movs	r2, #0
 8019702:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	2200      	movs	r2, #0
 8019708:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019710:	693b      	ldr	r3, [r7, #16]
 8019712:	e853 3f00 	ldrex	r3, [r3]
 8019716:	60fb      	str	r3, [r7, #12]
   return(result);
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	f023 0310 	bic.w	r3, r3, #16
 801971e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	461a      	mov	r2, r3
 8019728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801972c:	61fb      	str	r3, [r7, #28]
 801972e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019730:	69b9      	ldr	r1, [r7, #24]
 8019732:	69fa      	ldr	r2, [r7, #28]
 8019734:	e841 2300 	strex	r3, r2, [r1]
 8019738:	617b      	str	r3, [r7, #20]
   return(result);
 801973a:	697b      	ldr	r3, [r7, #20]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d1e4      	bne.n	801970a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	2202      	movs	r2, #2
 8019744:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8019746:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801974a:	4619      	mov	r1, r3
 801974c:	6878      	ldr	r0, [r7, #4]
 801974e:	f000 f895 	bl	801987c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8019752:	e063      	b.n	801981c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8019754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019758:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801975c:	2b00      	cmp	r3, #0
 801975e:	d00e      	beq.n	801977e <HAL_UART_IRQHandler+0x6fe>
 8019760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019764:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019768:	2b00      	cmp	r3, #0
 801976a:	d008      	beq.n	801977e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8019774:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8019776:	6878      	ldr	r0, [r7, #4]
 8019778:	f001 fb89 	bl	801ae8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801977c:	e051      	b.n	8019822 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801977e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019786:	2b00      	cmp	r3, #0
 8019788:	d014      	beq.n	80197b4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801978a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801978e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019792:	2b00      	cmp	r3, #0
 8019794:	d105      	bne.n	80197a2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8019796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801979a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d008      	beq.n	80197b4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d03a      	beq.n	8019820 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80197ae:	6878      	ldr	r0, [r7, #4]
 80197b0:	4798      	blx	r3
    }
    return;
 80197b2:	e035      	b.n	8019820 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80197b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80197b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d009      	beq.n	80197d4 <HAL_UART_IRQHandler+0x754>
 80197c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80197c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d003      	beq.n	80197d4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80197cc:	6878      	ldr	r0, [r7, #4]
 80197ce:	f001 fb33 	bl	801ae38 <UART_EndTransmit_IT>
    return;
 80197d2:	e026      	b.n	8019822 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80197d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80197d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d009      	beq.n	80197f4 <HAL_UART_IRQHandler+0x774>
 80197e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80197e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d003      	beq.n	80197f4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80197ec:	6878      	ldr	r0, [r7, #4]
 80197ee:	f001 fb62 	bl	801aeb6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80197f2:	e016      	b.n	8019822 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80197f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80197f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d010      	beq.n	8019822 <HAL_UART_IRQHandler+0x7a2>
 8019800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019804:	2b00      	cmp	r3, #0
 8019806:	da0c      	bge.n	8019822 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8019808:	6878      	ldr	r0, [r7, #4]
 801980a:	f001 fb4a 	bl	801aea2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801980e:	e008      	b.n	8019822 <HAL_UART_IRQHandler+0x7a2>
      return;
 8019810:	bf00      	nop
 8019812:	e006      	b.n	8019822 <HAL_UART_IRQHandler+0x7a2>
    return;
 8019814:	bf00      	nop
 8019816:	e004      	b.n	8019822 <HAL_UART_IRQHandler+0x7a2>
      return;
 8019818:	bf00      	nop
 801981a:	e002      	b.n	8019822 <HAL_UART_IRQHandler+0x7a2>
      return;
 801981c:	bf00      	nop
 801981e:	e000      	b.n	8019822 <HAL_UART_IRQHandler+0x7a2>
    return;
 8019820:	bf00      	nop
  }
}
 8019822:	37e8      	adds	r7, #232	@ 0xe8
 8019824:	46bd      	mov	sp, r7
 8019826:	bd80      	pop	{r7, pc}
 8019828:	effffffe 	.word	0xeffffffe

0801982c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801982c:	b480      	push	{r7}
 801982e:	b083      	sub	sp, #12
 8019830:	af00      	add	r7, sp, #0
 8019832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8019834:	bf00      	nop
 8019836:	370c      	adds	r7, #12
 8019838:	46bd      	mov	sp, r7
 801983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801983e:	4770      	bx	lr

08019840 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8019840:	b480      	push	{r7}
 8019842:	b083      	sub	sp, #12
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8019848:	bf00      	nop
 801984a:	370c      	adds	r7, #12
 801984c:	46bd      	mov	sp, r7
 801984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019852:	4770      	bx	lr

08019854 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8019854:	b480      	push	{r7}
 8019856:	b083      	sub	sp, #12
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801985c:	bf00      	nop
 801985e:	370c      	adds	r7, #12
 8019860:	46bd      	mov	sp, r7
 8019862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019866:	4770      	bx	lr

08019868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8019868:	b480      	push	{r7}
 801986a:	b083      	sub	sp, #12
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8019870:	bf00      	nop
 8019872:	370c      	adds	r7, #12
 8019874:	46bd      	mov	sp, r7
 8019876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801987a:	4770      	bx	lr

0801987c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801987c:	b480      	push	{r7}
 801987e:	b083      	sub	sp, #12
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
 8019884:	460b      	mov	r3, r1
 8019886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8019888:	bf00      	nop
 801988a:	370c      	adds	r7, #12
 801988c:	46bd      	mov	sp, r7
 801988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019892:	4770      	bx	lr

08019894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8019894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019898:	b092      	sub	sp, #72	@ 0x48
 801989a:	af00      	add	r7, sp, #0
 801989c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801989e:	2300      	movs	r3, #0
 80198a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80198a4:	697b      	ldr	r3, [r7, #20]
 80198a6:	689a      	ldr	r2, [r3, #8]
 80198a8:	697b      	ldr	r3, [r7, #20]
 80198aa:	691b      	ldr	r3, [r3, #16]
 80198ac:	431a      	orrs	r2, r3
 80198ae:	697b      	ldr	r3, [r7, #20]
 80198b0:	695b      	ldr	r3, [r3, #20]
 80198b2:	431a      	orrs	r2, r3
 80198b4:	697b      	ldr	r3, [r7, #20]
 80198b6:	69db      	ldr	r3, [r3, #28]
 80198b8:	4313      	orrs	r3, r2
 80198ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	681a      	ldr	r2, [r3, #0]
 80198c2:	4bbe      	ldr	r3, [pc, #760]	@ (8019bbc <UART_SetConfig+0x328>)
 80198c4:	4013      	ands	r3, r2
 80198c6:	697a      	ldr	r2, [r7, #20]
 80198c8:	6812      	ldr	r2, [r2, #0]
 80198ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80198cc:	430b      	orrs	r3, r1
 80198ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80198d0:	697b      	ldr	r3, [r7, #20]
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	685b      	ldr	r3, [r3, #4]
 80198d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80198da:	697b      	ldr	r3, [r7, #20]
 80198dc:	68da      	ldr	r2, [r3, #12]
 80198de:	697b      	ldr	r3, [r7, #20]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	430a      	orrs	r2, r1
 80198e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80198e6:	697b      	ldr	r3, [r7, #20]
 80198e8:	699b      	ldr	r3, [r3, #24]
 80198ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80198ec:	697b      	ldr	r3, [r7, #20]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	4ab3      	ldr	r2, [pc, #716]	@ (8019bc0 <UART_SetConfig+0x32c>)
 80198f2:	4293      	cmp	r3, r2
 80198f4:	d004      	beq.n	8019900 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80198f6:	697b      	ldr	r3, [r7, #20]
 80198f8:	6a1b      	ldr	r3, [r3, #32]
 80198fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80198fc:	4313      	orrs	r3, r2
 80198fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8019900:	697b      	ldr	r3, [r7, #20]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	689a      	ldr	r2, [r3, #8]
 8019906:	4baf      	ldr	r3, [pc, #700]	@ (8019bc4 <UART_SetConfig+0x330>)
 8019908:	4013      	ands	r3, r2
 801990a:	697a      	ldr	r2, [r7, #20]
 801990c:	6812      	ldr	r2, [r2, #0]
 801990e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019910:	430b      	orrs	r3, r1
 8019912:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8019914:	697b      	ldr	r3, [r7, #20]
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801991a:	f023 010f 	bic.w	r1, r3, #15
 801991e:	697b      	ldr	r3, [r7, #20]
 8019920:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019922:	697b      	ldr	r3, [r7, #20]
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	430a      	orrs	r2, r1
 8019928:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801992a:	697b      	ldr	r3, [r7, #20]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	4aa6      	ldr	r2, [pc, #664]	@ (8019bc8 <UART_SetConfig+0x334>)
 8019930:	4293      	cmp	r3, r2
 8019932:	d177      	bne.n	8019a24 <UART_SetConfig+0x190>
 8019934:	4ba5      	ldr	r3, [pc, #660]	@ (8019bcc <UART_SetConfig+0x338>)
 8019936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019938:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801993c:	2b28      	cmp	r3, #40	@ 0x28
 801993e:	d86d      	bhi.n	8019a1c <UART_SetConfig+0x188>
 8019940:	a201      	add	r2, pc, #4	@ (adr r2, 8019948 <UART_SetConfig+0xb4>)
 8019942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019946:	bf00      	nop
 8019948:	080199ed 	.word	0x080199ed
 801994c:	08019a1d 	.word	0x08019a1d
 8019950:	08019a1d 	.word	0x08019a1d
 8019954:	08019a1d 	.word	0x08019a1d
 8019958:	08019a1d 	.word	0x08019a1d
 801995c:	08019a1d 	.word	0x08019a1d
 8019960:	08019a1d 	.word	0x08019a1d
 8019964:	08019a1d 	.word	0x08019a1d
 8019968:	080199f5 	.word	0x080199f5
 801996c:	08019a1d 	.word	0x08019a1d
 8019970:	08019a1d 	.word	0x08019a1d
 8019974:	08019a1d 	.word	0x08019a1d
 8019978:	08019a1d 	.word	0x08019a1d
 801997c:	08019a1d 	.word	0x08019a1d
 8019980:	08019a1d 	.word	0x08019a1d
 8019984:	08019a1d 	.word	0x08019a1d
 8019988:	080199fd 	.word	0x080199fd
 801998c:	08019a1d 	.word	0x08019a1d
 8019990:	08019a1d 	.word	0x08019a1d
 8019994:	08019a1d 	.word	0x08019a1d
 8019998:	08019a1d 	.word	0x08019a1d
 801999c:	08019a1d 	.word	0x08019a1d
 80199a0:	08019a1d 	.word	0x08019a1d
 80199a4:	08019a1d 	.word	0x08019a1d
 80199a8:	08019a05 	.word	0x08019a05
 80199ac:	08019a1d 	.word	0x08019a1d
 80199b0:	08019a1d 	.word	0x08019a1d
 80199b4:	08019a1d 	.word	0x08019a1d
 80199b8:	08019a1d 	.word	0x08019a1d
 80199bc:	08019a1d 	.word	0x08019a1d
 80199c0:	08019a1d 	.word	0x08019a1d
 80199c4:	08019a1d 	.word	0x08019a1d
 80199c8:	08019a0d 	.word	0x08019a0d
 80199cc:	08019a1d 	.word	0x08019a1d
 80199d0:	08019a1d 	.word	0x08019a1d
 80199d4:	08019a1d 	.word	0x08019a1d
 80199d8:	08019a1d 	.word	0x08019a1d
 80199dc:	08019a1d 	.word	0x08019a1d
 80199e0:	08019a1d 	.word	0x08019a1d
 80199e4:	08019a1d 	.word	0x08019a1d
 80199e8:	08019a15 	.word	0x08019a15
 80199ec:	2301      	movs	r3, #1
 80199ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80199f2:	e326      	b.n	801a042 <UART_SetConfig+0x7ae>
 80199f4:	2304      	movs	r3, #4
 80199f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80199fa:	e322      	b.n	801a042 <UART_SetConfig+0x7ae>
 80199fc:	2308      	movs	r3, #8
 80199fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a02:	e31e      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a04:	2310      	movs	r3, #16
 8019a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a0a:	e31a      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a0c:	2320      	movs	r3, #32
 8019a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a12:	e316      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a14:	2340      	movs	r3, #64	@ 0x40
 8019a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a1a:	e312      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a1c:	2380      	movs	r3, #128	@ 0x80
 8019a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a22:	e30e      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a24:	697b      	ldr	r3, [r7, #20]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	4a69      	ldr	r2, [pc, #420]	@ (8019bd0 <UART_SetConfig+0x33c>)
 8019a2a:	4293      	cmp	r3, r2
 8019a2c:	d130      	bne.n	8019a90 <UART_SetConfig+0x1fc>
 8019a2e:	4b67      	ldr	r3, [pc, #412]	@ (8019bcc <UART_SetConfig+0x338>)
 8019a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019a32:	f003 0307 	and.w	r3, r3, #7
 8019a36:	2b05      	cmp	r3, #5
 8019a38:	d826      	bhi.n	8019a88 <UART_SetConfig+0x1f4>
 8019a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8019a40 <UART_SetConfig+0x1ac>)
 8019a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a40:	08019a59 	.word	0x08019a59
 8019a44:	08019a61 	.word	0x08019a61
 8019a48:	08019a69 	.word	0x08019a69
 8019a4c:	08019a71 	.word	0x08019a71
 8019a50:	08019a79 	.word	0x08019a79
 8019a54:	08019a81 	.word	0x08019a81
 8019a58:	2300      	movs	r3, #0
 8019a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a5e:	e2f0      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a60:	2304      	movs	r3, #4
 8019a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a66:	e2ec      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a68:	2308      	movs	r3, #8
 8019a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a6e:	e2e8      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a70:	2310      	movs	r3, #16
 8019a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a76:	e2e4      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a78:	2320      	movs	r3, #32
 8019a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a7e:	e2e0      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a80:	2340      	movs	r3, #64	@ 0x40
 8019a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a86:	e2dc      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a88:	2380      	movs	r3, #128	@ 0x80
 8019a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019a8e:	e2d8      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019a90:	697b      	ldr	r3, [r7, #20]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	4a4f      	ldr	r2, [pc, #316]	@ (8019bd4 <UART_SetConfig+0x340>)
 8019a96:	4293      	cmp	r3, r2
 8019a98:	d130      	bne.n	8019afc <UART_SetConfig+0x268>
 8019a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8019bcc <UART_SetConfig+0x338>)
 8019a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019a9e:	f003 0307 	and.w	r3, r3, #7
 8019aa2:	2b05      	cmp	r3, #5
 8019aa4:	d826      	bhi.n	8019af4 <UART_SetConfig+0x260>
 8019aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8019aac <UART_SetConfig+0x218>)
 8019aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019aac:	08019ac5 	.word	0x08019ac5
 8019ab0:	08019acd 	.word	0x08019acd
 8019ab4:	08019ad5 	.word	0x08019ad5
 8019ab8:	08019add 	.word	0x08019add
 8019abc:	08019ae5 	.word	0x08019ae5
 8019ac0:	08019aed 	.word	0x08019aed
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019aca:	e2ba      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019acc:	2304      	movs	r3, #4
 8019ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ad2:	e2b6      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019ad4:	2308      	movs	r3, #8
 8019ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ada:	e2b2      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019adc:	2310      	movs	r3, #16
 8019ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ae2:	e2ae      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019ae4:	2320      	movs	r3, #32
 8019ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019aea:	e2aa      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019aec:	2340      	movs	r3, #64	@ 0x40
 8019aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019af2:	e2a6      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019af4:	2380      	movs	r3, #128	@ 0x80
 8019af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019afa:	e2a2      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019afc:	697b      	ldr	r3, [r7, #20]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	4a35      	ldr	r2, [pc, #212]	@ (8019bd8 <UART_SetConfig+0x344>)
 8019b02:	4293      	cmp	r3, r2
 8019b04:	d130      	bne.n	8019b68 <UART_SetConfig+0x2d4>
 8019b06:	4b31      	ldr	r3, [pc, #196]	@ (8019bcc <UART_SetConfig+0x338>)
 8019b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019b0a:	f003 0307 	and.w	r3, r3, #7
 8019b0e:	2b05      	cmp	r3, #5
 8019b10:	d826      	bhi.n	8019b60 <UART_SetConfig+0x2cc>
 8019b12:	a201      	add	r2, pc, #4	@ (adr r2, 8019b18 <UART_SetConfig+0x284>)
 8019b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b18:	08019b31 	.word	0x08019b31
 8019b1c:	08019b39 	.word	0x08019b39
 8019b20:	08019b41 	.word	0x08019b41
 8019b24:	08019b49 	.word	0x08019b49
 8019b28:	08019b51 	.word	0x08019b51
 8019b2c:	08019b59 	.word	0x08019b59
 8019b30:	2300      	movs	r3, #0
 8019b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019b36:	e284      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019b38:	2304      	movs	r3, #4
 8019b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019b3e:	e280      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019b40:	2308      	movs	r3, #8
 8019b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019b46:	e27c      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019b48:	2310      	movs	r3, #16
 8019b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019b4e:	e278      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019b50:	2320      	movs	r3, #32
 8019b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019b56:	e274      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019b58:	2340      	movs	r3, #64	@ 0x40
 8019b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019b5e:	e270      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019b60:	2380      	movs	r3, #128	@ 0x80
 8019b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019b66:	e26c      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019b68:	697b      	ldr	r3, [r7, #20]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8019bdc <UART_SetConfig+0x348>)
 8019b6e:	4293      	cmp	r3, r2
 8019b70:	d142      	bne.n	8019bf8 <UART_SetConfig+0x364>
 8019b72:	4b16      	ldr	r3, [pc, #88]	@ (8019bcc <UART_SetConfig+0x338>)
 8019b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019b76:	f003 0307 	and.w	r3, r3, #7
 8019b7a:	2b05      	cmp	r3, #5
 8019b7c:	d838      	bhi.n	8019bf0 <UART_SetConfig+0x35c>
 8019b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8019b84 <UART_SetConfig+0x2f0>)
 8019b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b84:	08019b9d 	.word	0x08019b9d
 8019b88:	08019ba5 	.word	0x08019ba5
 8019b8c:	08019bad 	.word	0x08019bad
 8019b90:	08019bb5 	.word	0x08019bb5
 8019b94:	08019be1 	.word	0x08019be1
 8019b98:	08019be9 	.word	0x08019be9
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ba2:	e24e      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019ba4:	2304      	movs	r3, #4
 8019ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019baa:	e24a      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019bac:	2308      	movs	r3, #8
 8019bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019bb2:	e246      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019bb4:	2310      	movs	r3, #16
 8019bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019bba:	e242      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019bbc:	cfff69f3 	.word	0xcfff69f3
 8019bc0:	58000c00 	.word	0x58000c00
 8019bc4:	11fff4ff 	.word	0x11fff4ff
 8019bc8:	40011000 	.word	0x40011000
 8019bcc:	58024400 	.word	0x58024400
 8019bd0:	40004400 	.word	0x40004400
 8019bd4:	40004800 	.word	0x40004800
 8019bd8:	40004c00 	.word	0x40004c00
 8019bdc:	40005000 	.word	0x40005000
 8019be0:	2320      	movs	r3, #32
 8019be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019be6:	e22c      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019be8:	2340      	movs	r3, #64	@ 0x40
 8019bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019bee:	e228      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019bf0:	2380      	movs	r3, #128	@ 0x80
 8019bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019bf6:	e224      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019bf8:	697b      	ldr	r3, [r7, #20]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	4ab1      	ldr	r2, [pc, #708]	@ (8019ec4 <UART_SetConfig+0x630>)
 8019bfe:	4293      	cmp	r3, r2
 8019c00:	d176      	bne.n	8019cf0 <UART_SetConfig+0x45c>
 8019c02:	4bb1      	ldr	r3, [pc, #708]	@ (8019ec8 <UART_SetConfig+0x634>)
 8019c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019c06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019c0a:	2b28      	cmp	r3, #40	@ 0x28
 8019c0c:	d86c      	bhi.n	8019ce8 <UART_SetConfig+0x454>
 8019c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8019c14 <UART_SetConfig+0x380>)
 8019c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c14:	08019cb9 	.word	0x08019cb9
 8019c18:	08019ce9 	.word	0x08019ce9
 8019c1c:	08019ce9 	.word	0x08019ce9
 8019c20:	08019ce9 	.word	0x08019ce9
 8019c24:	08019ce9 	.word	0x08019ce9
 8019c28:	08019ce9 	.word	0x08019ce9
 8019c2c:	08019ce9 	.word	0x08019ce9
 8019c30:	08019ce9 	.word	0x08019ce9
 8019c34:	08019cc1 	.word	0x08019cc1
 8019c38:	08019ce9 	.word	0x08019ce9
 8019c3c:	08019ce9 	.word	0x08019ce9
 8019c40:	08019ce9 	.word	0x08019ce9
 8019c44:	08019ce9 	.word	0x08019ce9
 8019c48:	08019ce9 	.word	0x08019ce9
 8019c4c:	08019ce9 	.word	0x08019ce9
 8019c50:	08019ce9 	.word	0x08019ce9
 8019c54:	08019cc9 	.word	0x08019cc9
 8019c58:	08019ce9 	.word	0x08019ce9
 8019c5c:	08019ce9 	.word	0x08019ce9
 8019c60:	08019ce9 	.word	0x08019ce9
 8019c64:	08019ce9 	.word	0x08019ce9
 8019c68:	08019ce9 	.word	0x08019ce9
 8019c6c:	08019ce9 	.word	0x08019ce9
 8019c70:	08019ce9 	.word	0x08019ce9
 8019c74:	08019cd1 	.word	0x08019cd1
 8019c78:	08019ce9 	.word	0x08019ce9
 8019c7c:	08019ce9 	.word	0x08019ce9
 8019c80:	08019ce9 	.word	0x08019ce9
 8019c84:	08019ce9 	.word	0x08019ce9
 8019c88:	08019ce9 	.word	0x08019ce9
 8019c8c:	08019ce9 	.word	0x08019ce9
 8019c90:	08019ce9 	.word	0x08019ce9
 8019c94:	08019cd9 	.word	0x08019cd9
 8019c98:	08019ce9 	.word	0x08019ce9
 8019c9c:	08019ce9 	.word	0x08019ce9
 8019ca0:	08019ce9 	.word	0x08019ce9
 8019ca4:	08019ce9 	.word	0x08019ce9
 8019ca8:	08019ce9 	.word	0x08019ce9
 8019cac:	08019ce9 	.word	0x08019ce9
 8019cb0:	08019ce9 	.word	0x08019ce9
 8019cb4:	08019ce1 	.word	0x08019ce1
 8019cb8:	2301      	movs	r3, #1
 8019cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019cbe:	e1c0      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019cc0:	2304      	movs	r3, #4
 8019cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019cc6:	e1bc      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019cc8:	2308      	movs	r3, #8
 8019cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019cce:	e1b8      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019cd0:	2310      	movs	r3, #16
 8019cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019cd6:	e1b4      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019cd8:	2320      	movs	r3, #32
 8019cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019cde:	e1b0      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019ce0:	2340      	movs	r3, #64	@ 0x40
 8019ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ce6:	e1ac      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019ce8:	2380      	movs	r3, #128	@ 0x80
 8019cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019cee:	e1a8      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019cf0:	697b      	ldr	r3, [r7, #20]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	4a75      	ldr	r2, [pc, #468]	@ (8019ecc <UART_SetConfig+0x638>)
 8019cf6:	4293      	cmp	r3, r2
 8019cf8:	d130      	bne.n	8019d5c <UART_SetConfig+0x4c8>
 8019cfa:	4b73      	ldr	r3, [pc, #460]	@ (8019ec8 <UART_SetConfig+0x634>)
 8019cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019cfe:	f003 0307 	and.w	r3, r3, #7
 8019d02:	2b05      	cmp	r3, #5
 8019d04:	d826      	bhi.n	8019d54 <UART_SetConfig+0x4c0>
 8019d06:	a201      	add	r2, pc, #4	@ (adr r2, 8019d0c <UART_SetConfig+0x478>)
 8019d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d0c:	08019d25 	.word	0x08019d25
 8019d10:	08019d2d 	.word	0x08019d2d
 8019d14:	08019d35 	.word	0x08019d35
 8019d18:	08019d3d 	.word	0x08019d3d
 8019d1c:	08019d45 	.word	0x08019d45
 8019d20:	08019d4d 	.word	0x08019d4d
 8019d24:	2300      	movs	r3, #0
 8019d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d2a:	e18a      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019d2c:	2304      	movs	r3, #4
 8019d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d32:	e186      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019d34:	2308      	movs	r3, #8
 8019d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d3a:	e182      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019d3c:	2310      	movs	r3, #16
 8019d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d42:	e17e      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019d44:	2320      	movs	r3, #32
 8019d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d4a:	e17a      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019d4c:	2340      	movs	r3, #64	@ 0x40
 8019d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d52:	e176      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019d54:	2380      	movs	r3, #128	@ 0x80
 8019d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d5a:	e172      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019d5c:	697b      	ldr	r3, [r7, #20]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	4a5b      	ldr	r2, [pc, #364]	@ (8019ed0 <UART_SetConfig+0x63c>)
 8019d62:	4293      	cmp	r3, r2
 8019d64:	d130      	bne.n	8019dc8 <UART_SetConfig+0x534>
 8019d66:	4b58      	ldr	r3, [pc, #352]	@ (8019ec8 <UART_SetConfig+0x634>)
 8019d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019d6a:	f003 0307 	and.w	r3, r3, #7
 8019d6e:	2b05      	cmp	r3, #5
 8019d70:	d826      	bhi.n	8019dc0 <UART_SetConfig+0x52c>
 8019d72:	a201      	add	r2, pc, #4	@ (adr r2, 8019d78 <UART_SetConfig+0x4e4>)
 8019d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d78:	08019d91 	.word	0x08019d91
 8019d7c:	08019d99 	.word	0x08019d99
 8019d80:	08019da1 	.word	0x08019da1
 8019d84:	08019da9 	.word	0x08019da9
 8019d88:	08019db1 	.word	0x08019db1
 8019d8c:	08019db9 	.word	0x08019db9
 8019d90:	2300      	movs	r3, #0
 8019d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d96:	e154      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019d98:	2304      	movs	r3, #4
 8019d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019d9e:	e150      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019da0:	2308      	movs	r3, #8
 8019da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019da6:	e14c      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019da8:	2310      	movs	r3, #16
 8019daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019dae:	e148      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019db0:	2320      	movs	r3, #32
 8019db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019db6:	e144      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019db8:	2340      	movs	r3, #64	@ 0x40
 8019dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019dbe:	e140      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019dc0:	2380      	movs	r3, #128	@ 0x80
 8019dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019dc6:	e13c      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019dc8:	697b      	ldr	r3, [r7, #20]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	4a41      	ldr	r2, [pc, #260]	@ (8019ed4 <UART_SetConfig+0x640>)
 8019dce:	4293      	cmp	r3, r2
 8019dd0:	f040 8082 	bne.w	8019ed8 <UART_SetConfig+0x644>
 8019dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8019ec8 <UART_SetConfig+0x634>)
 8019dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019dd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019ddc:	2b28      	cmp	r3, #40	@ 0x28
 8019dde:	d86d      	bhi.n	8019ebc <UART_SetConfig+0x628>
 8019de0:	a201      	add	r2, pc, #4	@ (adr r2, 8019de8 <UART_SetConfig+0x554>)
 8019de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019de6:	bf00      	nop
 8019de8:	08019e8d 	.word	0x08019e8d
 8019dec:	08019ebd 	.word	0x08019ebd
 8019df0:	08019ebd 	.word	0x08019ebd
 8019df4:	08019ebd 	.word	0x08019ebd
 8019df8:	08019ebd 	.word	0x08019ebd
 8019dfc:	08019ebd 	.word	0x08019ebd
 8019e00:	08019ebd 	.word	0x08019ebd
 8019e04:	08019ebd 	.word	0x08019ebd
 8019e08:	08019e95 	.word	0x08019e95
 8019e0c:	08019ebd 	.word	0x08019ebd
 8019e10:	08019ebd 	.word	0x08019ebd
 8019e14:	08019ebd 	.word	0x08019ebd
 8019e18:	08019ebd 	.word	0x08019ebd
 8019e1c:	08019ebd 	.word	0x08019ebd
 8019e20:	08019ebd 	.word	0x08019ebd
 8019e24:	08019ebd 	.word	0x08019ebd
 8019e28:	08019e9d 	.word	0x08019e9d
 8019e2c:	08019ebd 	.word	0x08019ebd
 8019e30:	08019ebd 	.word	0x08019ebd
 8019e34:	08019ebd 	.word	0x08019ebd
 8019e38:	08019ebd 	.word	0x08019ebd
 8019e3c:	08019ebd 	.word	0x08019ebd
 8019e40:	08019ebd 	.word	0x08019ebd
 8019e44:	08019ebd 	.word	0x08019ebd
 8019e48:	08019ea5 	.word	0x08019ea5
 8019e4c:	08019ebd 	.word	0x08019ebd
 8019e50:	08019ebd 	.word	0x08019ebd
 8019e54:	08019ebd 	.word	0x08019ebd
 8019e58:	08019ebd 	.word	0x08019ebd
 8019e5c:	08019ebd 	.word	0x08019ebd
 8019e60:	08019ebd 	.word	0x08019ebd
 8019e64:	08019ebd 	.word	0x08019ebd
 8019e68:	08019ead 	.word	0x08019ead
 8019e6c:	08019ebd 	.word	0x08019ebd
 8019e70:	08019ebd 	.word	0x08019ebd
 8019e74:	08019ebd 	.word	0x08019ebd
 8019e78:	08019ebd 	.word	0x08019ebd
 8019e7c:	08019ebd 	.word	0x08019ebd
 8019e80:	08019ebd 	.word	0x08019ebd
 8019e84:	08019ebd 	.word	0x08019ebd
 8019e88:	08019eb5 	.word	0x08019eb5
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e92:	e0d6      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019e94:	2304      	movs	r3, #4
 8019e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e9a:	e0d2      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019e9c:	2308      	movs	r3, #8
 8019e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ea2:	e0ce      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019ea4:	2310      	movs	r3, #16
 8019ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019eaa:	e0ca      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019eac:	2320      	movs	r3, #32
 8019eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019eb2:	e0c6      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019eb4:	2340      	movs	r3, #64	@ 0x40
 8019eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019eba:	e0c2      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019ebc:	2380      	movs	r3, #128	@ 0x80
 8019ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ec2:	e0be      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019ec4:	40011400 	.word	0x40011400
 8019ec8:	58024400 	.word	0x58024400
 8019ecc:	40007800 	.word	0x40007800
 8019ed0:	40007c00 	.word	0x40007c00
 8019ed4:	40011800 	.word	0x40011800
 8019ed8:	697b      	ldr	r3, [r7, #20]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	4aad      	ldr	r2, [pc, #692]	@ (801a194 <UART_SetConfig+0x900>)
 8019ede:	4293      	cmp	r3, r2
 8019ee0:	d176      	bne.n	8019fd0 <UART_SetConfig+0x73c>
 8019ee2:	4bad      	ldr	r3, [pc, #692]	@ (801a198 <UART_SetConfig+0x904>)
 8019ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019ee6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019eea:	2b28      	cmp	r3, #40	@ 0x28
 8019eec:	d86c      	bhi.n	8019fc8 <UART_SetConfig+0x734>
 8019eee:	a201      	add	r2, pc, #4	@ (adr r2, 8019ef4 <UART_SetConfig+0x660>)
 8019ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ef4:	08019f99 	.word	0x08019f99
 8019ef8:	08019fc9 	.word	0x08019fc9
 8019efc:	08019fc9 	.word	0x08019fc9
 8019f00:	08019fc9 	.word	0x08019fc9
 8019f04:	08019fc9 	.word	0x08019fc9
 8019f08:	08019fc9 	.word	0x08019fc9
 8019f0c:	08019fc9 	.word	0x08019fc9
 8019f10:	08019fc9 	.word	0x08019fc9
 8019f14:	08019fa1 	.word	0x08019fa1
 8019f18:	08019fc9 	.word	0x08019fc9
 8019f1c:	08019fc9 	.word	0x08019fc9
 8019f20:	08019fc9 	.word	0x08019fc9
 8019f24:	08019fc9 	.word	0x08019fc9
 8019f28:	08019fc9 	.word	0x08019fc9
 8019f2c:	08019fc9 	.word	0x08019fc9
 8019f30:	08019fc9 	.word	0x08019fc9
 8019f34:	08019fa9 	.word	0x08019fa9
 8019f38:	08019fc9 	.word	0x08019fc9
 8019f3c:	08019fc9 	.word	0x08019fc9
 8019f40:	08019fc9 	.word	0x08019fc9
 8019f44:	08019fc9 	.word	0x08019fc9
 8019f48:	08019fc9 	.word	0x08019fc9
 8019f4c:	08019fc9 	.word	0x08019fc9
 8019f50:	08019fc9 	.word	0x08019fc9
 8019f54:	08019fb1 	.word	0x08019fb1
 8019f58:	08019fc9 	.word	0x08019fc9
 8019f5c:	08019fc9 	.word	0x08019fc9
 8019f60:	08019fc9 	.word	0x08019fc9
 8019f64:	08019fc9 	.word	0x08019fc9
 8019f68:	08019fc9 	.word	0x08019fc9
 8019f6c:	08019fc9 	.word	0x08019fc9
 8019f70:	08019fc9 	.word	0x08019fc9
 8019f74:	08019fb9 	.word	0x08019fb9
 8019f78:	08019fc9 	.word	0x08019fc9
 8019f7c:	08019fc9 	.word	0x08019fc9
 8019f80:	08019fc9 	.word	0x08019fc9
 8019f84:	08019fc9 	.word	0x08019fc9
 8019f88:	08019fc9 	.word	0x08019fc9
 8019f8c:	08019fc9 	.word	0x08019fc9
 8019f90:	08019fc9 	.word	0x08019fc9
 8019f94:	08019fc1 	.word	0x08019fc1
 8019f98:	2301      	movs	r3, #1
 8019f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019f9e:	e050      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019fa0:	2304      	movs	r3, #4
 8019fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019fa6:	e04c      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019fa8:	2308      	movs	r3, #8
 8019faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019fae:	e048      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019fb0:	2310      	movs	r3, #16
 8019fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019fb6:	e044      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019fb8:	2320      	movs	r3, #32
 8019fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019fbe:	e040      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019fc0:	2340      	movs	r3, #64	@ 0x40
 8019fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019fc6:	e03c      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019fc8:	2380      	movs	r3, #128	@ 0x80
 8019fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019fce:	e038      	b.n	801a042 <UART_SetConfig+0x7ae>
 8019fd0:	697b      	ldr	r3, [r7, #20]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	4a71      	ldr	r2, [pc, #452]	@ (801a19c <UART_SetConfig+0x908>)
 8019fd6:	4293      	cmp	r3, r2
 8019fd8:	d130      	bne.n	801a03c <UART_SetConfig+0x7a8>
 8019fda:	4b6f      	ldr	r3, [pc, #444]	@ (801a198 <UART_SetConfig+0x904>)
 8019fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019fde:	f003 0307 	and.w	r3, r3, #7
 8019fe2:	2b05      	cmp	r3, #5
 8019fe4:	d826      	bhi.n	801a034 <UART_SetConfig+0x7a0>
 8019fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8019fec <UART_SetConfig+0x758>)
 8019fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019fec:	0801a005 	.word	0x0801a005
 8019ff0:	0801a00d 	.word	0x0801a00d
 8019ff4:	0801a015 	.word	0x0801a015
 8019ff8:	0801a01d 	.word	0x0801a01d
 8019ffc:	0801a025 	.word	0x0801a025
 801a000:	0801a02d 	.word	0x0801a02d
 801a004:	2302      	movs	r3, #2
 801a006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a00a:	e01a      	b.n	801a042 <UART_SetConfig+0x7ae>
 801a00c:	2304      	movs	r3, #4
 801a00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a012:	e016      	b.n	801a042 <UART_SetConfig+0x7ae>
 801a014:	2308      	movs	r3, #8
 801a016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a01a:	e012      	b.n	801a042 <UART_SetConfig+0x7ae>
 801a01c:	2310      	movs	r3, #16
 801a01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a022:	e00e      	b.n	801a042 <UART_SetConfig+0x7ae>
 801a024:	2320      	movs	r3, #32
 801a026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a02a:	e00a      	b.n	801a042 <UART_SetConfig+0x7ae>
 801a02c:	2340      	movs	r3, #64	@ 0x40
 801a02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a032:	e006      	b.n	801a042 <UART_SetConfig+0x7ae>
 801a034:	2380      	movs	r3, #128	@ 0x80
 801a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a03a:	e002      	b.n	801a042 <UART_SetConfig+0x7ae>
 801a03c:	2380      	movs	r3, #128	@ 0x80
 801a03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a042:	697b      	ldr	r3, [r7, #20]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	4a55      	ldr	r2, [pc, #340]	@ (801a19c <UART_SetConfig+0x908>)
 801a048:	4293      	cmp	r3, r2
 801a04a:	f040 80f8 	bne.w	801a23e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801a04e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801a052:	2b20      	cmp	r3, #32
 801a054:	dc46      	bgt.n	801a0e4 <UART_SetConfig+0x850>
 801a056:	2b02      	cmp	r3, #2
 801a058:	db75      	blt.n	801a146 <UART_SetConfig+0x8b2>
 801a05a:	3b02      	subs	r3, #2
 801a05c:	2b1e      	cmp	r3, #30
 801a05e:	d872      	bhi.n	801a146 <UART_SetConfig+0x8b2>
 801a060:	a201      	add	r2, pc, #4	@ (adr r2, 801a068 <UART_SetConfig+0x7d4>)
 801a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a066:	bf00      	nop
 801a068:	0801a0eb 	.word	0x0801a0eb
 801a06c:	0801a147 	.word	0x0801a147
 801a070:	0801a0f3 	.word	0x0801a0f3
 801a074:	0801a147 	.word	0x0801a147
 801a078:	0801a147 	.word	0x0801a147
 801a07c:	0801a147 	.word	0x0801a147
 801a080:	0801a103 	.word	0x0801a103
 801a084:	0801a147 	.word	0x0801a147
 801a088:	0801a147 	.word	0x0801a147
 801a08c:	0801a147 	.word	0x0801a147
 801a090:	0801a147 	.word	0x0801a147
 801a094:	0801a147 	.word	0x0801a147
 801a098:	0801a147 	.word	0x0801a147
 801a09c:	0801a147 	.word	0x0801a147
 801a0a0:	0801a113 	.word	0x0801a113
 801a0a4:	0801a147 	.word	0x0801a147
 801a0a8:	0801a147 	.word	0x0801a147
 801a0ac:	0801a147 	.word	0x0801a147
 801a0b0:	0801a147 	.word	0x0801a147
 801a0b4:	0801a147 	.word	0x0801a147
 801a0b8:	0801a147 	.word	0x0801a147
 801a0bc:	0801a147 	.word	0x0801a147
 801a0c0:	0801a147 	.word	0x0801a147
 801a0c4:	0801a147 	.word	0x0801a147
 801a0c8:	0801a147 	.word	0x0801a147
 801a0cc:	0801a147 	.word	0x0801a147
 801a0d0:	0801a147 	.word	0x0801a147
 801a0d4:	0801a147 	.word	0x0801a147
 801a0d8:	0801a147 	.word	0x0801a147
 801a0dc:	0801a147 	.word	0x0801a147
 801a0e0:	0801a139 	.word	0x0801a139
 801a0e4:	2b40      	cmp	r3, #64	@ 0x40
 801a0e6:	d02a      	beq.n	801a13e <UART_SetConfig+0x8aa>
 801a0e8:	e02d      	b.n	801a146 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801a0ea:	f7fb fd69 	bl	8015bc0 <HAL_RCCEx_GetD3PCLK1Freq>
 801a0ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a0f0:	e02f      	b.n	801a152 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a0f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a0f6:	4618      	mov	r0, r3
 801a0f8:	f7fb fd78 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801a0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a100:	e027      	b.n	801a152 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a102:	f107 0318 	add.w	r3, r7, #24
 801a106:	4618      	mov	r0, r3
 801a108:	f7fb fec4 	bl	8015e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801a10c:	69fb      	ldr	r3, [r7, #28]
 801a10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a110:	e01f      	b.n	801a152 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a112:	4b21      	ldr	r3, [pc, #132]	@ (801a198 <UART_SetConfig+0x904>)
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	f003 0320 	and.w	r3, r3, #32
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d009      	beq.n	801a132 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801a11e:	4b1e      	ldr	r3, [pc, #120]	@ (801a198 <UART_SetConfig+0x904>)
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	08db      	lsrs	r3, r3, #3
 801a124:	f003 0303 	and.w	r3, r3, #3
 801a128:	4a1d      	ldr	r2, [pc, #116]	@ (801a1a0 <UART_SetConfig+0x90c>)
 801a12a:	fa22 f303 	lsr.w	r3, r2, r3
 801a12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a130:	e00f      	b.n	801a152 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801a132:	4b1b      	ldr	r3, [pc, #108]	@ (801a1a0 <UART_SetConfig+0x90c>)
 801a134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a136:	e00c      	b.n	801a152 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801a138:	4b1a      	ldr	r3, [pc, #104]	@ (801a1a4 <UART_SetConfig+0x910>)
 801a13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a13c:	e009      	b.n	801a152 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a13e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a144:	e005      	b.n	801a152 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801a146:	2300      	movs	r3, #0
 801a148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801a14a:	2301      	movs	r3, #1
 801a14c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801a150:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801a152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a154:	2b00      	cmp	r3, #0
 801a156:	f000 81ee 	beq.w	801a536 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801a15a:	697b      	ldr	r3, [r7, #20]
 801a15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a15e:	4a12      	ldr	r2, [pc, #72]	@ (801a1a8 <UART_SetConfig+0x914>)
 801a160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a164:	461a      	mov	r2, r3
 801a166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a168:	fbb3 f3f2 	udiv	r3, r3, r2
 801a16c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a16e:	697b      	ldr	r3, [r7, #20]
 801a170:	685a      	ldr	r2, [r3, #4]
 801a172:	4613      	mov	r3, r2
 801a174:	005b      	lsls	r3, r3, #1
 801a176:	4413      	add	r3, r2
 801a178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a17a:	429a      	cmp	r2, r3
 801a17c:	d305      	bcc.n	801a18a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801a17e:	697b      	ldr	r3, [r7, #20]
 801a180:	685b      	ldr	r3, [r3, #4]
 801a182:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a186:	429a      	cmp	r2, r3
 801a188:	d910      	bls.n	801a1ac <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801a18a:	2301      	movs	r3, #1
 801a18c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801a190:	e1d1      	b.n	801a536 <UART_SetConfig+0xca2>
 801a192:	bf00      	nop
 801a194:	40011c00 	.word	0x40011c00
 801a198:	58024400 	.word	0x58024400
 801a19c:	58000c00 	.word	0x58000c00
 801a1a0:	03d09000 	.word	0x03d09000
 801a1a4:	003d0900 	.word	0x003d0900
 801a1a8:	0802be70 	.word	0x0802be70
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	60bb      	str	r3, [r7, #8]
 801a1b2:	60fa      	str	r2, [r7, #12]
 801a1b4:	697b      	ldr	r3, [r7, #20]
 801a1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1b8:	4ac0      	ldr	r2, [pc, #768]	@ (801a4bc <UART_SetConfig+0xc28>)
 801a1ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a1be:	b29b      	uxth	r3, r3
 801a1c0:	2200      	movs	r2, #0
 801a1c2:	603b      	str	r3, [r7, #0]
 801a1c4:	607a      	str	r2, [r7, #4]
 801a1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a1ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a1ce:	f7e6 fab3 	bl	8000738 <__aeabi_uldivmod>
 801a1d2:	4602      	mov	r2, r0
 801a1d4:	460b      	mov	r3, r1
 801a1d6:	4610      	mov	r0, r2
 801a1d8:	4619      	mov	r1, r3
 801a1da:	f04f 0200 	mov.w	r2, #0
 801a1de:	f04f 0300 	mov.w	r3, #0
 801a1e2:	020b      	lsls	r3, r1, #8
 801a1e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801a1e8:	0202      	lsls	r2, r0, #8
 801a1ea:	6979      	ldr	r1, [r7, #20]
 801a1ec:	6849      	ldr	r1, [r1, #4]
 801a1ee:	0849      	lsrs	r1, r1, #1
 801a1f0:	2000      	movs	r0, #0
 801a1f2:	460c      	mov	r4, r1
 801a1f4:	4605      	mov	r5, r0
 801a1f6:	eb12 0804 	adds.w	r8, r2, r4
 801a1fa:	eb43 0905 	adc.w	r9, r3, r5
 801a1fe:	697b      	ldr	r3, [r7, #20]
 801a200:	685b      	ldr	r3, [r3, #4]
 801a202:	2200      	movs	r2, #0
 801a204:	469a      	mov	sl, r3
 801a206:	4693      	mov	fp, r2
 801a208:	4652      	mov	r2, sl
 801a20a:	465b      	mov	r3, fp
 801a20c:	4640      	mov	r0, r8
 801a20e:	4649      	mov	r1, r9
 801a210:	f7e6 fa92 	bl	8000738 <__aeabi_uldivmod>
 801a214:	4602      	mov	r2, r0
 801a216:	460b      	mov	r3, r1
 801a218:	4613      	mov	r3, r2
 801a21a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a21e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801a222:	d308      	bcc.n	801a236 <UART_SetConfig+0x9a2>
 801a224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a22a:	d204      	bcs.n	801a236 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801a22c:	697b      	ldr	r3, [r7, #20]
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a232:	60da      	str	r2, [r3, #12]
 801a234:	e17f      	b.n	801a536 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801a236:	2301      	movs	r3, #1
 801a238:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801a23c:	e17b      	b.n	801a536 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a23e:	697b      	ldr	r3, [r7, #20]
 801a240:	69db      	ldr	r3, [r3, #28]
 801a242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a246:	f040 80bd 	bne.w	801a3c4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801a24a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801a24e:	2b20      	cmp	r3, #32
 801a250:	dc48      	bgt.n	801a2e4 <UART_SetConfig+0xa50>
 801a252:	2b00      	cmp	r3, #0
 801a254:	db7b      	blt.n	801a34e <UART_SetConfig+0xaba>
 801a256:	2b20      	cmp	r3, #32
 801a258:	d879      	bhi.n	801a34e <UART_SetConfig+0xaba>
 801a25a:	a201      	add	r2, pc, #4	@ (adr r2, 801a260 <UART_SetConfig+0x9cc>)
 801a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a260:	0801a2eb 	.word	0x0801a2eb
 801a264:	0801a2f3 	.word	0x0801a2f3
 801a268:	0801a34f 	.word	0x0801a34f
 801a26c:	0801a34f 	.word	0x0801a34f
 801a270:	0801a2fb 	.word	0x0801a2fb
 801a274:	0801a34f 	.word	0x0801a34f
 801a278:	0801a34f 	.word	0x0801a34f
 801a27c:	0801a34f 	.word	0x0801a34f
 801a280:	0801a30b 	.word	0x0801a30b
 801a284:	0801a34f 	.word	0x0801a34f
 801a288:	0801a34f 	.word	0x0801a34f
 801a28c:	0801a34f 	.word	0x0801a34f
 801a290:	0801a34f 	.word	0x0801a34f
 801a294:	0801a34f 	.word	0x0801a34f
 801a298:	0801a34f 	.word	0x0801a34f
 801a29c:	0801a34f 	.word	0x0801a34f
 801a2a0:	0801a31b 	.word	0x0801a31b
 801a2a4:	0801a34f 	.word	0x0801a34f
 801a2a8:	0801a34f 	.word	0x0801a34f
 801a2ac:	0801a34f 	.word	0x0801a34f
 801a2b0:	0801a34f 	.word	0x0801a34f
 801a2b4:	0801a34f 	.word	0x0801a34f
 801a2b8:	0801a34f 	.word	0x0801a34f
 801a2bc:	0801a34f 	.word	0x0801a34f
 801a2c0:	0801a34f 	.word	0x0801a34f
 801a2c4:	0801a34f 	.word	0x0801a34f
 801a2c8:	0801a34f 	.word	0x0801a34f
 801a2cc:	0801a34f 	.word	0x0801a34f
 801a2d0:	0801a34f 	.word	0x0801a34f
 801a2d4:	0801a34f 	.word	0x0801a34f
 801a2d8:	0801a34f 	.word	0x0801a34f
 801a2dc:	0801a34f 	.word	0x0801a34f
 801a2e0:	0801a341 	.word	0x0801a341
 801a2e4:	2b40      	cmp	r3, #64	@ 0x40
 801a2e6:	d02e      	beq.n	801a346 <UART_SetConfig+0xab2>
 801a2e8:	e031      	b.n	801a34e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a2ea:	f7f9 fd89 	bl	8013e00 <HAL_RCC_GetPCLK1Freq>
 801a2ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a2f0:	e033      	b.n	801a35a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a2f2:	f7f9 fd9b 	bl	8013e2c <HAL_RCC_GetPCLK2Freq>
 801a2f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a2f8:	e02f      	b.n	801a35a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a2fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a2fe:	4618      	mov	r0, r3
 801a300:	f7fb fc74 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801a304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a308:	e027      	b.n	801a35a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a30a:	f107 0318 	add.w	r3, r7, #24
 801a30e:	4618      	mov	r0, r3
 801a310:	f7fb fdc0 	bl	8015e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801a314:	69fb      	ldr	r3, [r7, #28]
 801a316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a318:	e01f      	b.n	801a35a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a31a:	4b69      	ldr	r3, [pc, #420]	@ (801a4c0 <UART_SetConfig+0xc2c>)
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	f003 0320 	and.w	r3, r3, #32
 801a322:	2b00      	cmp	r3, #0
 801a324:	d009      	beq.n	801a33a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801a326:	4b66      	ldr	r3, [pc, #408]	@ (801a4c0 <UART_SetConfig+0xc2c>)
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	08db      	lsrs	r3, r3, #3
 801a32c:	f003 0303 	and.w	r3, r3, #3
 801a330:	4a64      	ldr	r2, [pc, #400]	@ (801a4c4 <UART_SetConfig+0xc30>)
 801a332:	fa22 f303 	lsr.w	r3, r2, r3
 801a336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a338:	e00f      	b.n	801a35a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801a33a:	4b62      	ldr	r3, [pc, #392]	@ (801a4c4 <UART_SetConfig+0xc30>)
 801a33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a33e:	e00c      	b.n	801a35a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801a340:	4b61      	ldr	r3, [pc, #388]	@ (801a4c8 <UART_SetConfig+0xc34>)
 801a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a344:	e009      	b.n	801a35a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a34c:	e005      	b.n	801a35a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801a34e:	2300      	movs	r3, #0
 801a350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801a352:	2301      	movs	r3, #1
 801a354:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801a358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	f000 80ea 	beq.w	801a536 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a362:	697b      	ldr	r3, [r7, #20]
 801a364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a366:	4a55      	ldr	r2, [pc, #340]	@ (801a4bc <UART_SetConfig+0xc28>)
 801a368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a36c:	461a      	mov	r2, r3
 801a36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a370:	fbb3 f3f2 	udiv	r3, r3, r2
 801a374:	005a      	lsls	r2, r3, #1
 801a376:	697b      	ldr	r3, [r7, #20]
 801a378:	685b      	ldr	r3, [r3, #4]
 801a37a:	085b      	lsrs	r3, r3, #1
 801a37c:	441a      	add	r2, r3
 801a37e:	697b      	ldr	r3, [r7, #20]
 801a380:	685b      	ldr	r3, [r3, #4]
 801a382:	fbb2 f3f3 	udiv	r3, r2, r3
 801a386:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a38a:	2b0f      	cmp	r3, #15
 801a38c:	d916      	bls.n	801a3bc <UART_SetConfig+0xb28>
 801a38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a394:	d212      	bcs.n	801a3bc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a398:	b29b      	uxth	r3, r3
 801a39a:	f023 030f 	bic.w	r3, r3, #15
 801a39e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3a2:	085b      	lsrs	r3, r3, #1
 801a3a4:	b29b      	uxth	r3, r3
 801a3a6:	f003 0307 	and.w	r3, r3, #7
 801a3aa:	b29a      	uxth	r2, r3
 801a3ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a3ae:	4313      	orrs	r3, r2
 801a3b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801a3b2:	697b      	ldr	r3, [r7, #20]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a3b8:	60da      	str	r2, [r3, #12]
 801a3ba:	e0bc      	b.n	801a536 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801a3bc:	2301      	movs	r3, #1
 801a3be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801a3c2:	e0b8      	b.n	801a536 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801a3c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801a3c8:	2b20      	cmp	r3, #32
 801a3ca:	dc4b      	bgt.n	801a464 <UART_SetConfig+0xbd0>
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	f2c0 8087 	blt.w	801a4e0 <UART_SetConfig+0xc4c>
 801a3d2:	2b20      	cmp	r3, #32
 801a3d4:	f200 8084 	bhi.w	801a4e0 <UART_SetConfig+0xc4c>
 801a3d8:	a201      	add	r2, pc, #4	@ (adr r2, 801a3e0 <UART_SetConfig+0xb4c>)
 801a3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3de:	bf00      	nop
 801a3e0:	0801a46b 	.word	0x0801a46b
 801a3e4:	0801a473 	.word	0x0801a473
 801a3e8:	0801a4e1 	.word	0x0801a4e1
 801a3ec:	0801a4e1 	.word	0x0801a4e1
 801a3f0:	0801a47b 	.word	0x0801a47b
 801a3f4:	0801a4e1 	.word	0x0801a4e1
 801a3f8:	0801a4e1 	.word	0x0801a4e1
 801a3fc:	0801a4e1 	.word	0x0801a4e1
 801a400:	0801a48b 	.word	0x0801a48b
 801a404:	0801a4e1 	.word	0x0801a4e1
 801a408:	0801a4e1 	.word	0x0801a4e1
 801a40c:	0801a4e1 	.word	0x0801a4e1
 801a410:	0801a4e1 	.word	0x0801a4e1
 801a414:	0801a4e1 	.word	0x0801a4e1
 801a418:	0801a4e1 	.word	0x0801a4e1
 801a41c:	0801a4e1 	.word	0x0801a4e1
 801a420:	0801a49b 	.word	0x0801a49b
 801a424:	0801a4e1 	.word	0x0801a4e1
 801a428:	0801a4e1 	.word	0x0801a4e1
 801a42c:	0801a4e1 	.word	0x0801a4e1
 801a430:	0801a4e1 	.word	0x0801a4e1
 801a434:	0801a4e1 	.word	0x0801a4e1
 801a438:	0801a4e1 	.word	0x0801a4e1
 801a43c:	0801a4e1 	.word	0x0801a4e1
 801a440:	0801a4e1 	.word	0x0801a4e1
 801a444:	0801a4e1 	.word	0x0801a4e1
 801a448:	0801a4e1 	.word	0x0801a4e1
 801a44c:	0801a4e1 	.word	0x0801a4e1
 801a450:	0801a4e1 	.word	0x0801a4e1
 801a454:	0801a4e1 	.word	0x0801a4e1
 801a458:	0801a4e1 	.word	0x0801a4e1
 801a45c:	0801a4e1 	.word	0x0801a4e1
 801a460:	0801a4d3 	.word	0x0801a4d3
 801a464:	2b40      	cmp	r3, #64	@ 0x40
 801a466:	d037      	beq.n	801a4d8 <UART_SetConfig+0xc44>
 801a468:	e03a      	b.n	801a4e0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a46a:	f7f9 fcc9 	bl	8013e00 <HAL_RCC_GetPCLK1Freq>
 801a46e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a470:	e03c      	b.n	801a4ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a472:	f7f9 fcdb 	bl	8013e2c <HAL_RCC_GetPCLK2Freq>
 801a476:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a478:	e038      	b.n	801a4ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a47a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a47e:	4618      	mov	r0, r3
 801a480:	f7fb fbb4 	bl	8015bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801a484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a488:	e030      	b.n	801a4ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a48a:	f107 0318 	add.w	r3, r7, #24
 801a48e:	4618      	mov	r0, r3
 801a490:	f7fb fd00 	bl	8015e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801a494:	69fb      	ldr	r3, [r7, #28]
 801a496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a498:	e028      	b.n	801a4ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a49a:	4b09      	ldr	r3, [pc, #36]	@ (801a4c0 <UART_SetConfig+0xc2c>)
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	f003 0320 	and.w	r3, r3, #32
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d012      	beq.n	801a4cc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801a4a6:	4b06      	ldr	r3, [pc, #24]	@ (801a4c0 <UART_SetConfig+0xc2c>)
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	08db      	lsrs	r3, r3, #3
 801a4ac:	f003 0303 	and.w	r3, r3, #3
 801a4b0:	4a04      	ldr	r2, [pc, #16]	@ (801a4c4 <UART_SetConfig+0xc30>)
 801a4b2:	fa22 f303 	lsr.w	r3, r2, r3
 801a4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a4b8:	e018      	b.n	801a4ec <UART_SetConfig+0xc58>
 801a4ba:	bf00      	nop
 801a4bc:	0802be70 	.word	0x0802be70
 801a4c0:	58024400 	.word	0x58024400
 801a4c4:	03d09000 	.word	0x03d09000
 801a4c8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801a4cc:	4b24      	ldr	r3, [pc, #144]	@ (801a560 <UART_SetConfig+0xccc>)
 801a4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a4d0:	e00c      	b.n	801a4ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801a4d2:	4b24      	ldr	r3, [pc, #144]	@ (801a564 <UART_SetConfig+0xcd0>)
 801a4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a4d6:	e009      	b.n	801a4ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a4d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a4de:	e005      	b.n	801a4ec <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801a4e4:	2301      	movs	r3, #1
 801a4e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801a4ea:	bf00      	nop
    }

    if (pclk != 0U)
 801a4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d021      	beq.n	801a536 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a4f2:	697b      	ldr	r3, [r7, #20]
 801a4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4f6:	4a1c      	ldr	r2, [pc, #112]	@ (801a568 <UART_SetConfig+0xcd4>)
 801a4f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a4fc:	461a      	mov	r2, r3
 801a4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a500:	fbb3 f2f2 	udiv	r2, r3, r2
 801a504:	697b      	ldr	r3, [r7, #20]
 801a506:	685b      	ldr	r3, [r3, #4]
 801a508:	085b      	lsrs	r3, r3, #1
 801a50a:	441a      	add	r2, r3
 801a50c:	697b      	ldr	r3, [r7, #20]
 801a50e:	685b      	ldr	r3, [r3, #4]
 801a510:	fbb2 f3f3 	udiv	r3, r2, r3
 801a514:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a518:	2b0f      	cmp	r3, #15
 801a51a:	d909      	bls.n	801a530 <UART_SetConfig+0xc9c>
 801a51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a51e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a522:	d205      	bcs.n	801a530 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a526:	b29a      	uxth	r2, r3
 801a528:	697b      	ldr	r3, [r7, #20]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	60da      	str	r2, [r3, #12]
 801a52e:	e002      	b.n	801a536 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801a530:	2301      	movs	r3, #1
 801a532:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a536:	697b      	ldr	r3, [r7, #20]
 801a538:	2201      	movs	r2, #1
 801a53a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801a53e:	697b      	ldr	r3, [r7, #20]
 801a540:	2201      	movs	r2, #1
 801a542:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a546:	697b      	ldr	r3, [r7, #20]
 801a548:	2200      	movs	r2, #0
 801a54a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801a54c:	697b      	ldr	r3, [r7, #20]
 801a54e:	2200      	movs	r2, #0
 801a550:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801a552:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801a556:	4618      	mov	r0, r3
 801a558:	3748      	adds	r7, #72	@ 0x48
 801a55a:	46bd      	mov	sp, r7
 801a55c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a560:	03d09000 	.word	0x03d09000
 801a564:	003d0900 	.word	0x003d0900
 801a568:	0802be70 	.word	0x0802be70

0801a56c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a56c:	b480      	push	{r7}
 801a56e:	b083      	sub	sp, #12
 801a570:	af00      	add	r7, sp, #0
 801a572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a578:	f003 0308 	and.w	r3, r3, #8
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d00a      	beq.n	801a596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	685b      	ldr	r3, [r3, #4]
 801a586:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	430a      	orrs	r2, r1
 801a594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a59a:	f003 0301 	and.w	r3, r3, #1
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d00a      	beq.n	801a5b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	685b      	ldr	r3, [r3, #4]
 801a5a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	430a      	orrs	r2, r1
 801a5b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a5bc:	f003 0302 	and.w	r3, r3, #2
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d00a      	beq.n	801a5da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	685b      	ldr	r3, [r3, #4]
 801a5ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	430a      	orrs	r2, r1
 801a5d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a5de:	f003 0304 	and.w	r3, r3, #4
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d00a      	beq.n	801a5fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	681b      	ldr	r3, [r3, #0]
 801a5ea:	685b      	ldr	r3, [r3, #4]
 801a5ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	430a      	orrs	r2, r1
 801a5fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a600:	f003 0310 	and.w	r3, r3, #16
 801a604:	2b00      	cmp	r3, #0
 801a606:	d00a      	beq.n	801a61e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	689b      	ldr	r3, [r3, #8]
 801a60e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	430a      	orrs	r2, r1
 801a61c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a622:	f003 0320 	and.w	r3, r3, #32
 801a626:	2b00      	cmp	r3, #0
 801a628:	d00a      	beq.n	801a640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	689b      	ldr	r3, [r3, #8]
 801a630:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	430a      	orrs	r2, r1
 801a63e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d01a      	beq.n	801a682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	685b      	ldr	r3, [r3, #4]
 801a652:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	430a      	orrs	r2, r1
 801a660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a66a:	d10a      	bne.n	801a682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	685b      	ldr	r3, [r3, #4]
 801a672:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	430a      	orrs	r2, r1
 801a680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d00a      	beq.n	801a6a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	685b      	ldr	r3, [r3, #4]
 801a694:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	430a      	orrs	r2, r1
 801a6a2:	605a      	str	r2, [r3, #4]
  }
}
 801a6a4:	bf00      	nop
 801a6a6:	370c      	adds	r7, #12
 801a6a8:	46bd      	mov	sp, r7
 801a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ae:	4770      	bx	lr

0801a6b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a6b0:	b580      	push	{r7, lr}
 801a6b2:	b098      	sub	sp, #96	@ 0x60
 801a6b4:	af02      	add	r7, sp, #8
 801a6b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801a6c0:	f7f0 ff6c 	bl	800b59c <HAL_GetTick>
 801a6c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	f003 0308 	and.w	r3, r3, #8
 801a6d0:	2b08      	cmp	r3, #8
 801a6d2:	d12f      	bne.n	801a734 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a6d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801a6d8:	9300      	str	r3, [sp, #0]
 801a6da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6dc:	2200      	movs	r2, #0
 801a6de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801a6e2:	6878      	ldr	r0, [r7, #4]
 801a6e4:	f000 f88e 	bl	801a804 <UART_WaitOnFlagUntilTimeout>
 801a6e8:	4603      	mov	r3, r0
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d022      	beq.n	801a734 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6f6:	e853 3f00 	ldrex	r3, [r3]
 801a6fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a702:	653b      	str	r3, [r7, #80]	@ 0x50
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	461a      	mov	r2, r3
 801a70a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a70c:	647b      	str	r3, [r7, #68]	@ 0x44
 801a70e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a710:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a714:	e841 2300 	strex	r3, r2, [r1]
 801a718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d1e6      	bne.n	801a6ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	2220      	movs	r2, #32
 801a724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	2200      	movs	r2, #0
 801a72c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a730:	2303      	movs	r3, #3
 801a732:	e063      	b.n	801a7fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	f003 0304 	and.w	r3, r3, #4
 801a73e:	2b04      	cmp	r3, #4
 801a740:	d149      	bne.n	801a7d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a742:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801a746:	9300      	str	r3, [sp, #0]
 801a748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a74a:	2200      	movs	r2, #0
 801a74c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801a750:	6878      	ldr	r0, [r7, #4]
 801a752:	f000 f857 	bl	801a804 <UART_WaitOnFlagUntilTimeout>
 801a756:	4603      	mov	r3, r0
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d03c      	beq.n	801a7d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a764:	e853 3f00 	ldrex	r3, [r3]
 801a768:	623b      	str	r3, [r7, #32]
   return(result);
 801a76a:	6a3b      	ldr	r3, [r7, #32]
 801a76c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	461a      	mov	r2, r3
 801a778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a77a:	633b      	str	r3, [r7, #48]	@ 0x30
 801a77c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a77e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a782:	e841 2300 	strex	r3, r2, [r1]
 801a786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d1e6      	bne.n	801a75c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	3308      	adds	r3, #8
 801a794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a796:	693b      	ldr	r3, [r7, #16]
 801a798:	e853 3f00 	ldrex	r3, [r3]
 801a79c:	60fb      	str	r3, [r7, #12]
   return(result);
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	f023 0301 	bic.w	r3, r3, #1
 801a7a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	3308      	adds	r3, #8
 801a7ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a7ae:	61fa      	str	r2, [r7, #28]
 801a7b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7b2:	69b9      	ldr	r1, [r7, #24]
 801a7b4:	69fa      	ldr	r2, [r7, #28]
 801a7b6:	e841 2300 	strex	r3, r2, [r1]
 801a7ba:	617b      	str	r3, [r7, #20]
   return(result);
 801a7bc:	697b      	ldr	r3, [r7, #20]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d1e5      	bne.n	801a78e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	2220      	movs	r2, #32
 801a7c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a7d2:	2303      	movs	r3, #3
 801a7d4:	e012      	b.n	801a7fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	2220      	movs	r2, #32
 801a7da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	2220      	movs	r2, #32
 801a7e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	2200      	movs	r2, #0
 801a7ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	2200      	movs	r2, #0
 801a7f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	2200      	movs	r2, #0
 801a7f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a7fa:	2300      	movs	r3, #0
}
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	3758      	adds	r7, #88	@ 0x58
 801a800:	46bd      	mov	sp, r7
 801a802:	bd80      	pop	{r7, pc}

0801a804 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a804:	b580      	push	{r7, lr}
 801a806:	b084      	sub	sp, #16
 801a808:	af00      	add	r7, sp, #0
 801a80a:	60f8      	str	r0, [r7, #12]
 801a80c:	60b9      	str	r1, [r7, #8]
 801a80e:	603b      	str	r3, [r7, #0]
 801a810:	4613      	mov	r3, r2
 801a812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a814:	e04f      	b.n	801a8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a816:	69bb      	ldr	r3, [r7, #24]
 801a818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a81c:	d04b      	beq.n	801a8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a81e:	f7f0 febd 	bl	800b59c <HAL_GetTick>
 801a822:	4602      	mov	r2, r0
 801a824:	683b      	ldr	r3, [r7, #0]
 801a826:	1ad3      	subs	r3, r2, r3
 801a828:	69ba      	ldr	r2, [r7, #24]
 801a82a:	429a      	cmp	r2, r3
 801a82c:	d302      	bcc.n	801a834 <UART_WaitOnFlagUntilTimeout+0x30>
 801a82e:	69bb      	ldr	r3, [r7, #24]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d101      	bne.n	801a838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801a834:	2303      	movs	r3, #3
 801a836:	e04e      	b.n	801a8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801a838:	68fb      	ldr	r3, [r7, #12]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	f003 0304 	and.w	r3, r3, #4
 801a842:	2b00      	cmp	r3, #0
 801a844:	d037      	beq.n	801a8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801a846:	68bb      	ldr	r3, [r7, #8]
 801a848:	2b80      	cmp	r3, #128	@ 0x80
 801a84a:	d034      	beq.n	801a8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801a84c:	68bb      	ldr	r3, [r7, #8]
 801a84e:	2b40      	cmp	r3, #64	@ 0x40
 801a850:	d031      	beq.n	801a8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	69db      	ldr	r3, [r3, #28]
 801a858:	f003 0308 	and.w	r3, r3, #8
 801a85c:	2b08      	cmp	r3, #8
 801a85e:	d110      	bne.n	801a882 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	2208      	movs	r2, #8
 801a866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a868:	68f8      	ldr	r0, [r7, #12]
 801a86a:	f000 f921 	bl	801aab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	2208      	movs	r2, #8
 801a872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a876:	68fb      	ldr	r3, [r7, #12]
 801a878:	2200      	movs	r2, #0
 801a87a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801a87e:	2301      	movs	r3, #1
 801a880:	e029      	b.n	801a8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a882:	68fb      	ldr	r3, [r7, #12]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	69db      	ldr	r3, [r3, #28]
 801a888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a88c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801a890:	d111      	bne.n	801a8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a89a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a89c:	68f8      	ldr	r0, [r7, #12]
 801a89e:	f000 f907 	bl	801aab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	2220      	movs	r2, #32
 801a8a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a8aa:	68fb      	ldr	r3, [r7, #12]
 801a8ac:	2200      	movs	r2, #0
 801a8ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801a8b2:	2303      	movs	r3, #3
 801a8b4:	e00f      	b.n	801a8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	69da      	ldr	r2, [r3, #28]
 801a8bc:	68bb      	ldr	r3, [r7, #8]
 801a8be:	4013      	ands	r3, r2
 801a8c0:	68ba      	ldr	r2, [r7, #8]
 801a8c2:	429a      	cmp	r2, r3
 801a8c4:	bf0c      	ite	eq
 801a8c6:	2301      	moveq	r3, #1
 801a8c8:	2300      	movne	r3, #0
 801a8ca:	b2db      	uxtb	r3, r3
 801a8cc:	461a      	mov	r2, r3
 801a8ce:	79fb      	ldrb	r3, [r7, #7]
 801a8d0:	429a      	cmp	r2, r3
 801a8d2:	d0a0      	beq.n	801a816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a8d4:	2300      	movs	r3, #0
}
 801a8d6:	4618      	mov	r0, r3
 801a8d8:	3710      	adds	r7, #16
 801a8da:	46bd      	mov	sp, r7
 801a8dc:	bd80      	pop	{r7, pc}
	...

0801a8e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a8e0:	b580      	push	{r7, lr}
 801a8e2:	b096      	sub	sp, #88	@ 0x58
 801a8e4:	af00      	add	r7, sp, #0
 801a8e6:	60f8      	str	r0, [r7, #12]
 801a8e8:	60b9      	str	r1, [r7, #8]
 801a8ea:	4613      	mov	r3, r2
 801a8ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	68ba      	ldr	r2, [r7, #8]
 801a8f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	88fa      	ldrh	r2, [r7, #6]
 801a8f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	2200      	movs	r2, #0
 801a900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	2222      	movs	r2, #34	@ 0x22
 801a908:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a912:	2b00      	cmp	r3, #0
 801a914:	d02d      	beq.n	801a972 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a91c:	4a40      	ldr	r2, [pc, #256]	@ (801aa20 <UART_Start_Receive_DMA+0x140>)
 801a91e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a926:	4a3f      	ldr	r2, [pc, #252]	@ (801aa24 <UART_Start_Receive_DMA+0x144>)
 801a928:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a930:	4a3d      	ldr	r2, [pc, #244]	@ (801aa28 <UART_Start_Receive_DMA+0x148>)
 801a932:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a93a:	2200      	movs	r2, #0
 801a93c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	3324      	adds	r3, #36	@ 0x24
 801a94a:	4619      	mov	r1, r3
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a950:	461a      	mov	r2, r3
 801a952:	88fb      	ldrh	r3, [r7, #6]
 801a954:	f7f4 f976 	bl	800ec44 <HAL_DMA_Start_IT>
 801a958:	4603      	mov	r3, r0
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d009      	beq.n	801a972 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	2210      	movs	r2, #16
 801a962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a966:	68fb      	ldr	r3, [r7, #12]
 801a968:	2220      	movs	r2, #32
 801a96a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 801a96e:	2301      	movs	r3, #1
 801a970:	e051      	b.n	801aa16 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	691b      	ldr	r3, [r3, #16]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d018      	beq.n	801a9ac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a982:	e853 3f00 	ldrex	r3, [r3]
 801a986:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a98a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a98e:	657b      	str	r3, [r7, #84]	@ 0x54
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	461a      	mov	r2, r3
 801a996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a998:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a99a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a99c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801a99e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a9a0:	e841 2300 	strex	r3, r2, [r1]
 801a9a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801a9a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d1e6      	bne.n	801a97a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	3308      	adds	r3, #8
 801a9b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a9b6:	e853 3f00 	ldrex	r3, [r3]
 801a9ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9be:	f043 0301 	orr.w	r3, r3, #1
 801a9c2:	653b      	str	r3, [r7, #80]	@ 0x50
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	3308      	adds	r3, #8
 801a9ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a9cc:	637a      	str	r2, [r7, #52]	@ 0x34
 801a9ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801a9d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a9d4:	e841 2300 	strex	r3, r2, [r1]
 801a9d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801a9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d1e5      	bne.n	801a9ac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	3308      	adds	r3, #8
 801a9e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9e8:	697b      	ldr	r3, [r7, #20]
 801a9ea:	e853 3f00 	ldrex	r3, [r3]
 801a9ee:	613b      	str	r3, [r7, #16]
   return(result);
 801a9f0:	693b      	ldr	r3, [r7, #16]
 801a9f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a9f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	3308      	adds	r3, #8
 801a9fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801aa00:	623a      	str	r2, [r7, #32]
 801aa02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa04:	69f9      	ldr	r1, [r7, #28]
 801aa06:	6a3a      	ldr	r2, [r7, #32]
 801aa08:	e841 2300 	strex	r3, r2, [r1]
 801aa0c:	61bb      	str	r3, [r7, #24]
   return(result);
 801aa0e:	69bb      	ldr	r3, [r7, #24]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d1e5      	bne.n	801a9e0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801aa14:	2300      	movs	r3, #0
}
 801aa16:	4618      	mov	r0, r3
 801aa18:	3758      	adds	r7, #88	@ 0x58
 801aa1a:	46bd      	mov	sp, r7
 801aa1c:	bd80      	pop	{r7, pc}
 801aa1e:	bf00      	nop
 801aa20:	0801ac2f 	.word	0x0801ac2f
 801aa24:	0801ad57 	.word	0x0801ad57
 801aa28:	0801ad95 	.word	0x0801ad95

0801aa2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801aa2c:	b480      	push	{r7}
 801aa2e:	b08f      	sub	sp, #60	@ 0x3c
 801aa30:	af00      	add	r7, sp, #0
 801aa32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa3a:	6a3b      	ldr	r3, [r7, #32]
 801aa3c:	e853 3f00 	ldrex	r3, [r3]
 801aa40:	61fb      	str	r3, [r7, #28]
   return(result);
 801aa42:	69fb      	ldr	r3, [r7, #28]
 801aa44:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801aa48:	637b      	str	r3, [r7, #52]	@ 0x34
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	461a      	mov	r2, r3
 801aa50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801aa54:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801aa58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801aa5a:	e841 2300 	strex	r3, r2, [r1]
 801aa5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801aa60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d1e6      	bne.n	801aa34 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	3308      	adds	r3, #8
 801aa6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	e853 3f00 	ldrex	r3, [r3]
 801aa74:	60bb      	str	r3, [r7, #8]
   return(result);
 801aa76:	68bb      	ldr	r3, [r7, #8]
 801aa78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801aa7c:	633b      	str	r3, [r7, #48]	@ 0x30
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	3308      	adds	r3, #8
 801aa84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aa86:	61ba      	str	r2, [r7, #24]
 801aa88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa8a:	6979      	ldr	r1, [r7, #20]
 801aa8c:	69ba      	ldr	r2, [r7, #24]
 801aa8e:	e841 2300 	strex	r3, r2, [r1]
 801aa92:	613b      	str	r3, [r7, #16]
   return(result);
 801aa94:	693b      	ldr	r3, [r7, #16]
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	d1e5      	bne.n	801aa66 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	2220      	movs	r2, #32
 801aa9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801aaa2:	bf00      	nop
 801aaa4:	373c      	adds	r7, #60	@ 0x3c
 801aaa6:	46bd      	mov	sp, r7
 801aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaac:	4770      	bx	lr
	...

0801aab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801aab0:	b480      	push	{r7}
 801aab2:	b095      	sub	sp, #84	@ 0x54
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aabe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aac0:	e853 3f00 	ldrex	r3, [r3]
 801aac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801aac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801aacc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	461a      	mov	r2, r3
 801aad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aad6:	643b      	str	r3, [r7, #64]	@ 0x40
 801aad8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801aadc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aade:	e841 2300 	strex	r3, r2, [r1]
 801aae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801aae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d1e6      	bne.n	801aab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	3308      	adds	r3, #8
 801aaf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aaf2:	6a3b      	ldr	r3, [r7, #32]
 801aaf4:	e853 3f00 	ldrex	r3, [r3]
 801aaf8:	61fb      	str	r3, [r7, #28]
   return(result);
 801aafa:	69fa      	ldr	r2, [r7, #28]
 801aafc:	4b1e      	ldr	r3, [pc, #120]	@ (801ab78 <UART_EndRxTransfer+0xc8>)
 801aafe:	4013      	ands	r3, r2
 801ab00:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	3308      	adds	r3, #8
 801ab08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ab0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ab0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ab10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ab12:	e841 2300 	strex	r3, r2, [r1]
 801ab16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801ab18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d1e5      	bne.n	801aaea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab22:	2b01      	cmp	r3, #1
 801ab24:	d118      	bne.n	801ab58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	e853 3f00 	ldrex	r3, [r3]
 801ab32:	60bb      	str	r3, [r7, #8]
   return(result);
 801ab34:	68bb      	ldr	r3, [r7, #8]
 801ab36:	f023 0310 	bic.w	r3, r3, #16
 801ab3a:	647b      	str	r3, [r7, #68]	@ 0x44
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	461a      	mov	r2, r3
 801ab42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab44:	61bb      	str	r3, [r7, #24]
 801ab46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab48:	6979      	ldr	r1, [r7, #20]
 801ab4a:	69ba      	ldr	r2, [r7, #24]
 801ab4c:	e841 2300 	strex	r3, r2, [r1]
 801ab50:	613b      	str	r3, [r7, #16]
   return(result);
 801ab52:	693b      	ldr	r3, [r7, #16]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d1e6      	bne.n	801ab26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	2220      	movs	r2, #32
 801ab5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	2200      	movs	r2, #0
 801ab64:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	2200      	movs	r2, #0
 801ab6a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801ab6c:	bf00      	nop
 801ab6e:	3754      	adds	r7, #84	@ 0x54
 801ab70:	46bd      	mov	sp, r7
 801ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab76:	4770      	bx	lr
 801ab78:	effffffe 	.word	0xeffffffe

0801ab7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b090      	sub	sp, #64	@ 0x40
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ab88:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	69db      	ldr	r3, [r3, #28]
 801ab8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ab92:	d037      	beq.n	801ac04 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 801ab94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab96:	2200      	movs	r2, #0
 801ab98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ab9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	3308      	adds	r3, #8
 801aba2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aba6:	e853 3f00 	ldrex	r3, [r3]
 801abaa:	623b      	str	r3, [r7, #32]
   return(result);
 801abac:	6a3b      	ldr	r3, [r7, #32]
 801abae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801abb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801abb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	3308      	adds	r3, #8
 801abba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801abbc:	633a      	str	r2, [r7, #48]	@ 0x30
 801abbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801abc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801abc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801abc4:	e841 2300 	strex	r3, r2, [r1]
 801abc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801abca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abcc:	2b00      	cmp	r3, #0
 801abce:	d1e5      	bne.n	801ab9c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801abd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801abd6:	693b      	ldr	r3, [r7, #16]
 801abd8:	e853 3f00 	ldrex	r3, [r3]
 801abdc:	60fb      	str	r3, [r7, #12]
   return(result);
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801abe4:	637b      	str	r3, [r7, #52]	@ 0x34
 801abe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	461a      	mov	r2, r3
 801abec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801abee:	61fb      	str	r3, [r7, #28]
 801abf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801abf2:	69b9      	ldr	r1, [r7, #24]
 801abf4:	69fa      	ldr	r2, [r7, #28]
 801abf6:	e841 2300 	strex	r3, r2, [r1]
 801abfa:	617b      	str	r3, [r7, #20]
   return(result);
 801abfc:	697b      	ldr	r3, [r7, #20]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d1e6      	bne.n	801abd0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ac02:	e002      	b.n	801ac0a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 801ac04:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801ac06:	f7ee fca7 	bl	8009558 <HAL_UART_TxCpltCallback>
}
 801ac0a:	bf00      	nop
 801ac0c:	3740      	adds	r7, #64	@ 0x40
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	bd80      	pop	{r7, pc}

0801ac12 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ac12:	b580      	push	{r7, lr}
 801ac14:	b084      	sub	sp, #16
 801ac16:	af00      	add	r7, sp, #0
 801ac18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ac1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801ac20:	68f8      	ldr	r0, [r7, #12]
 801ac22:	f7fe fe03 	bl	801982c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ac26:	bf00      	nop
 801ac28:	3710      	adds	r7, #16
 801ac2a:	46bd      	mov	sp, r7
 801ac2c:	bd80      	pop	{r7, pc}

0801ac2e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801ac2e:	b580      	push	{r7, lr}
 801ac30:	b09c      	sub	sp, #112	@ 0x70
 801ac32:	af00      	add	r7, sp, #0
 801ac34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ac3a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	69db      	ldr	r3, [r3, #28]
 801ac40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ac44:	d071      	beq.n	801ad2a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801ac46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ac48:	2200      	movs	r2, #0
 801ac4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ac4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ac54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ac56:	e853 3f00 	ldrex	r3, [r3]
 801ac5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801ac5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ac5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801ac62:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ac64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	461a      	mov	r2, r3
 801ac6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ac6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ac6e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ac70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801ac72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ac74:	e841 2300 	strex	r3, r2, [r1]
 801ac78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801ac7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d1e6      	bne.n	801ac4e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ac80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	3308      	adds	r3, #8
 801ac86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ac88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac8a:	e853 3f00 	ldrex	r3, [r3]
 801ac8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801ac90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac92:	f023 0301 	bic.w	r3, r3, #1
 801ac96:	667b      	str	r3, [r7, #100]	@ 0x64
 801ac98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	3308      	adds	r3, #8
 801ac9e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801aca0:	647a      	str	r2, [r7, #68]	@ 0x44
 801aca2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aca4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801aca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aca8:	e841 2300 	strex	r3, r2, [r1]
 801acac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801acae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d1e5      	bne.n	801ac80 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801acb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	3308      	adds	r3, #8
 801acba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801acbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acbe:	e853 3f00 	ldrex	r3, [r3]
 801acc2:	623b      	str	r3, [r7, #32]
   return(result);
 801acc4:	6a3b      	ldr	r3, [r7, #32]
 801acc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801acca:	663b      	str	r3, [r7, #96]	@ 0x60
 801accc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	3308      	adds	r3, #8
 801acd2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801acd4:	633a      	str	r2, [r7, #48]	@ 0x30
 801acd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801acd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801acda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801acdc:	e841 2300 	strex	r3, r2, [r1]
 801ace0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801ace2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d1e5      	bne.n	801acb4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801ace8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801acea:	2220      	movs	r2, #32
 801acec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801acf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801acf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801acf4:	2b01      	cmp	r3, #1
 801acf6:	d118      	bne.n	801ad2a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801acf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801acfe:	693b      	ldr	r3, [r7, #16]
 801ad00:	e853 3f00 	ldrex	r3, [r3]
 801ad04:	60fb      	str	r3, [r7, #12]
   return(result);
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	f023 0310 	bic.w	r3, r3, #16
 801ad0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ad0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	461a      	mov	r2, r3
 801ad14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ad16:	61fb      	str	r3, [r7, #28]
 801ad18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ad1a:	69b9      	ldr	r1, [r7, #24]
 801ad1c:	69fa      	ldr	r2, [r7, #28]
 801ad1e:	e841 2300 	strex	r3, r2, [r1]
 801ad22:	617b      	str	r3, [r7, #20]
   return(result);
 801ad24:	697b      	ldr	r3, [r7, #20]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d1e6      	bne.n	801acf8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ad2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad2c:	2200      	movs	r2, #0
 801ad2e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ad30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad34:	2b01      	cmp	r3, #1
 801ad36:	d107      	bne.n	801ad48 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801ad38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ad3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801ad3e:	4619      	mov	r1, r3
 801ad40:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801ad42:	f7fe fd9b 	bl	801987c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ad46:	e002      	b.n	801ad4e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801ad48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801ad4a:	f7fe fd79 	bl	8019840 <HAL_UART_RxCpltCallback>
}
 801ad4e:	bf00      	nop
 801ad50:	3770      	adds	r7, #112	@ 0x70
 801ad52:	46bd      	mov	sp, r7
 801ad54:	bd80      	pop	{r7, pc}

0801ad56 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ad56:	b580      	push	{r7, lr}
 801ad58:	b084      	sub	sp, #16
 801ad5a:	af00      	add	r7, sp, #0
 801ad5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ad62:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	2201      	movs	r2, #1
 801ad68:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad6e:	2b01      	cmp	r3, #1
 801ad70:	d109      	bne.n	801ad86 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801ad78:	085b      	lsrs	r3, r3, #1
 801ad7a:	b29b      	uxth	r3, r3
 801ad7c:	4619      	mov	r1, r3
 801ad7e:	68f8      	ldr	r0, [r7, #12]
 801ad80:	f7fe fd7c 	bl	801987c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ad84:	e002      	b.n	801ad8c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801ad86:	68f8      	ldr	r0, [r7, #12]
 801ad88:	f7fe fd64 	bl	8019854 <HAL_UART_RxHalfCpltCallback>
}
 801ad8c:	bf00      	nop
 801ad8e:	3710      	adds	r7, #16
 801ad90:	46bd      	mov	sp, r7
 801ad92:	bd80      	pop	{r7, pc}

0801ad94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801ad94:	b580      	push	{r7, lr}
 801ad96:	b086      	sub	sp, #24
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ada0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801ada2:	697b      	ldr	r3, [r7, #20]
 801ada4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ada8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801adaa:	697b      	ldr	r3, [r7, #20]
 801adac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801adb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801adb2:	697b      	ldr	r3, [r7, #20]
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	689b      	ldr	r3, [r3, #8]
 801adb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801adbc:	2b80      	cmp	r3, #128	@ 0x80
 801adbe:	d109      	bne.n	801add4 <UART_DMAError+0x40>
 801adc0:	693b      	ldr	r3, [r7, #16]
 801adc2:	2b21      	cmp	r3, #33	@ 0x21
 801adc4:	d106      	bne.n	801add4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801adc6:	697b      	ldr	r3, [r7, #20]
 801adc8:	2200      	movs	r2, #0
 801adca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 801adce:	6978      	ldr	r0, [r7, #20]
 801add0:	f7ff fe2c 	bl	801aa2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801add4:	697b      	ldr	r3, [r7, #20]
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	689b      	ldr	r3, [r3, #8]
 801adda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801adde:	2b40      	cmp	r3, #64	@ 0x40
 801ade0:	d109      	bne.n	801adf6 <UART_DMAError+0x62>
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	2b22      	cmp	r3, #34	@ 0x22
 801ade6:	d106      	bne.n	801adf6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801ade8:	697b      	ldr	r3, [r7, #20]
 801adea:	2200      	movs	r2, #0
 801adec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 801adf0:	6978      	ldr	r0, [r7, #20]
 801adf2:	f7ff fe5d 	bl	801aab0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801adf6:	697b      	ldr	r3, [r7, #20]
 801adf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801adfc:	f043 0210 	orr.w	r2, r3, #16
 801ae00:	697b      	ldr	r3, [r7, #20]
 801ae02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801ae06:	6978      	ldr	r0, [r7, #20]
 801ae08:	f7fe fd2e 	bl	8019868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ae0c:	bf00      	nop
 801ae0e:	3718      	adds	r7, #24
 801ae10:	46bd      	mov	sp, r7
 801ae12:	bd80      	pop	{r7, pc}

0801ae14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801ae14:	b580      	push	{r7, lr}
 801ae16:	b084      	sub	sp, #16
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ae20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801ae22:	68fb      	ldr	r3, [r7, #12]
 801ae24:	2200      	movs	r2, #0
 801ae26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801ae2a:	68f8      	ldr	r0, [r7, #12]
 801ae2c:	f7fe fd1c 	bl	8019868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ae30:	bf00      	nop
 801ae32:	3710      	adds	r7, #16
 801ae34:	46bd      	mov	sp, r7
 801ae36:	bd80      	pop	{r7, pc}

0801ae38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801ae38:	b580      	push	{r7, lr}
 801ae3a:	b088      	sub	sp, #32
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	e853 3f00 	ldrex	r3, [r3]
 801ae4c:	60bb      	str	r3, [r7, #8]
   return(result);
 801ae4e:	68bb      	ldr	r3, [r7, #8]
 801ae50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801ae54:	61fb      	str	r3, [r7, #28]
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	461a      	mov	r2, r3
 801ae5c:	69fb      	ldr	r3, [r7, #28]
 801ae5e:	61bb      	str	r3, [r7, #24]
 801ae60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ae62:	6979      	ldr	r1, [r7, #20]
 801ae64:	69ba      	ldr	r2, [r7, #24]
 801ae66:	e841 2300 	strex	r3, r2, [r1]
 801ae6a:	613b      	str	r3, [r7, #16]
   return(result);
 801ae6c:	693b      	ldr	r3, [r7, #16]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d1e6      	bne.n	801ae40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	2220      	movs	r2, #32
 801ae76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	2200      	movs	r2, #0
 801ae7e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801ae80:	6878      	ldr	r0, [r7, #4]
 801ae82:	f7ee fb69 	bl	8009558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ae86:	bf00      	nop
 801ae88:	3720      	adds	r7, #32
 801ae8a:	46bd      	mov	sp, r7
 801ae8c:	bd80      	pop	{r7, pc}

0801ae8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801ae8e:	b480      	push	{r7}
 801ae90:	b083      	sub	sp, #12
 801ae92:	af00      	add	r7, sp, #0
 801ae94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801ae96:	bf00      	nop
 801ae98:	370c      	adds	r7, #12
 801ae9a:	46bd      	mov	sp, r7
 801ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea0:	4770      	bx	lr

0801aea2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801aea2:	b480      	push	{r7}
 801aea4:	b083      	sub	sp, #12
 801aea6:	af00      	add	r7, sp, #0
 801aea8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801aeaa:	bf00      	nop
 801aeac:	370c      	adds	r7, #12
 801aeae:	46bd      	mov	sp, r7
 801aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeb4:	4770      	bx	lr

0801aeb6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801aeb6:	b480      	push	{r7}
 801aeb8:	b083      	sub	sp, #12
 801aeba:	af00      	add	r7, sp, #0
 801aebc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801aebe:	bf00      	nop
 801aec0:	370c      	adds	r7, #12
 801aec2:	46bd      	mov	sp, r7
 801aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec8:	4770      	bx	lr

0801aeca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801aeca:	b480      	push	{r7}
 801aecc:	b085      	sub	sp, #20
 801aece:	af00      	add	r7, sp, #0
 801aed0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801aed8:	2b01      	cmp	r3, #1
 801aeda:	d101      	bne.n	801aee0 <HAL_UARTEx_DisableFifoMode+0x16>
 801aedc:	2302      	movs	r3, #2
 801aede:	e027      	b.n	801af30 <HAL_UARTEx_DisableFifoMode+0x66>
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	2201      	movs	r2, #1
 801aee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	2224      	movs	r2, #36	@ 0x24
 801aeec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	681a      	ldr	r2, [r3, #0]
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	f022 0201 	bic.w	r2, r2, #1
 801af06:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801af0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	2200      	movs	r2, #0
 801af14:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	68fa      	ldr	r2, [r7, #12]
 801af1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	2220      	movs	r2, #32
 801af22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	2200      	movs	r2, #0
 801af2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801af2e:	2300      	movs	r3, #0
}
 801af30:	4618      	mov	r0, r3
 801af32:	3714      	adds	r7, #20
 801af34:	46bd      	mov	sp, r7
 801af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af3a:	4770      	bx	lr

0801af3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801af3c:	b580      	push	{r7, lr}
 801af3e:	b084      	sub	sp, #16
 801af40:	af00      	add	r7, sp, #0
 801af42:	6078      	str	r0, [r7, #4]
 801af44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801af4c:	2b01      	cmp	r3, #1
 801af4e:	d101      	bne.n	801af54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801af50:	2302      	movs	r3, #2
 801af52:	e02d      	b.n	801afb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	2201      	movs	r2, #1
 801af58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	2224      	movs	r2, #36	@ 0x24
 801af60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	681a      	ldr	r2, [r3, #0]
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	f022 0201 	bic.w	r2, r2, #1
 801af7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	689b      	ldr	r3, [r3, #8]
 801af82:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	683a      	ldr	r2, [r7, #0]
 801af8c:	430a      	orrs	r2, r1
 801af8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801af90:	6878      	ldr	r0, [r7, #4]
 801af92:	f000 f84f 	bl	801b034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	681b      	ldr	r3, [r3, #0]
 801af9a:	68fa      	ldr	r2, [r7, #12]
 801af9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	2220      	movs	r2, #32
 801afa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	2200      	movs	r2, #0
 801afaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801afae:	2300      	movs	r3, #0
}
 801afb0:	4618      	mov	r0, r3
 801afb2:	3710      	adds	r7, #16
 801afb4:	46bd      	mov	sp, r7
 801afb6:	bd80      	pop	{r7, pc}

0801afb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b084      	sub	sp, #16
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
 801afc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801afc8:	2b01      	cmp	r3, #1
 801afca:	d101      	bne.n	801afd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801afcc:	2302      	movs	r3, #2
 801afce:	e02d      	b.n	801b02c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	2201      	movs	r2, #1
 801afd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	2224      	movs	r2, #36	@ 0x24
 801afdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	681a      	ldr	r2, [r3, #0]
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	f022 0201 	bic.w	r2, r2, #1
 801aff6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	689b      	ldr	r3, [r3, #8]
 801affe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	683a      	ldr	r2, [r7, #0]
 801b008:	430a      	orrs	r2, r1
 801b00a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801b00c:	6878      	ldr	r0, [r7, #4]
 801b00e:	f000 f811 	bl	801b034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	68fa      	ldr	r2, [r7, #12]
 801b018:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	2220      	movs	r2, #32
 801b01e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	2200      	movs	r2, #0
 801b026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801b02a:	2300      	movs	r3, #0
}
 801b02c:	4618      	mov	r0, r3
 801b02e:	3710      	adds	r7, #16
 801b030:	46bd      	mov	sp, r7
 801b032:	bd80      	pop	{r7, pc}

0801b034 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801b034:	b480      	push	{r7}
 801b036:	b085      	sub	sp, #20
 801b038:	af00      	add	r7, sp, #0
 801b03a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b040:	2b00      	cmp	r3, #0
 801b042:	d108      	bne.n	801b056 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	2201      	movs	r2, #1
 801b048:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	2201      	movs	r2, #1
 801b050:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801b054:	e031      	b.n	801b0ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801b056:	2310      	movs	r3, #16
 801b058:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801b05a:	2310      	movs	r3, #16
 801b05c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	689b      	ldr	r3, [r3, #8]
 801b064:	0e5b      	lsrs	r3, r3, #25
 801b066:	b2db      	uxtb	r3, r3
 801b068:	f003 0307 	and.w	r3, r3, #7
 801b06c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	689b      	ldr	r3, [r3, #8]
 801b074:	0f5b      	lsrs	r3, r3, #29
 801b076:	b2db      	uxtb	r3, r3
 801b078:	f003 0307 	and.w	r3, r3, #7
 801b07c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801b07e:	7bbb      	ldrb	r3, [r7, #14]
 801b080:	7b3a      	ldrb	r2, [r7, #12]
 801b082:	4911      	ldr	r1, [pc, #68]	@ (801b0c8 <UARTEx_SetNbDataToProcess+0x94>)
 801b084:	5c8a      	ldrb	r2, [r1, r2]
 801b086:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801b08a:	7b3a      	ldrb	r2, [r7, #12]
 801b08c:	490f      	ldr	r1, [pc, #60]	@ (801b0cc <UARTEx_SetNbDataToProcess+0x98>)
 801b08e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801b090:	fb93 f3f2 	sdiv	r3, r3, r2
 801b094:	b29a      	uxth	r2, r3
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801b09c:	7bfb      	ldrb	r3, [r7, #15]
 801b09e:	7b7a      	ldrb	r2, [r7, #13]
 801b0a0:	4909      	ldr	r1, [pc, #36]	@ (801b0c8 <UARTEx_SetNbDataToProcess+0x94>)
 801b0a2:	5c8a      	ldrb	r2, [r1, r2]
 801b0a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801b0a8:	7b7a      	ldrb	r2, [r7, #13]
 801b0aa:	4908      	ldr	r1, [pc, #32]	@ (801b0cc <UARTEx_SetNbDataToProcess+0x98>)
 801b0ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801b0ae:	fb93 f3f2 	sdiv	r3, r3, r2
 801b0b2:	b29a      	uxth	r2, r3
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801b0ba:	bf00      	nop
 801b0bc:	3714      	adds	r7, #20
 801b0be:	46bd      	mov	sp, r7
 801b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0c4:	4770      	bx	lr
 801b0c6:	bf00      	nop
 801b0c8:	0802be88 	.word	0x0802be88
 801b0cc:	0802be90 	.word	0x0802be90

0801b0d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801b0d0:	b084      	sub	sp, #16
 801b0d2:	b580      	push	{r7, lr}
 801b0d4:	b084      	sub	sp, #16
 801b0d6:	af00      	add	r7, sp, #0
 801b0d8:	6078      	str	r0, [r7, #4]
 801b0da:	f107 001c 	add.w	r0, r7, #28
 801b0de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801b0e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b0e6:	2b01      	cmp	r3, #1
 801b0e8:	d121      	bne.n	801b12e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b0ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	68da      	ldr	r2, [r3, #12]
 801b0fa:	4b2c      	ldr	r3, [pc, #176]	@ (801b1ac <USB_CoreInit+0xdc>)
 801b0fc:	4013      	ands	r3, r2
 801b0fe:	687a      	ldr	r2, [r7, #4]
 801b100:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	68db      	ldr	r3, [r3, #12]
 801b106:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801b10e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801b112:	2b01      	cmp	r3, #1
 801b114:	d105      	bne.n	801b122 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	68db      	ldr	r3, [r3, #12]
 801b11a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801b122:	6878      	ldr	r0, [r7, #4]
 801b124:	f001 fafa 	bl	801c71c <USB_CoreReset>
 801b128:	4603      	mov	r3, r0
 801b12a:	73fb      	strb	r3, [r7, #15]
 801b12c:	e01b      	b.n	801b166 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	68db      	ldr	r3, [r3, #12]
 801b132:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801b13a:	6878      	ldr	r0, [r7, #4]
 801b13c:	f001 faee 	bl	801c71c <USB_CoreReset>
 801b140:	4603      	mov	r3, r0
 801b142:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801b144:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d106      	bne.n	801b15a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b150:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	639a      	str	r2, [r3, #56]	@ 0x38
 801b158:	e005      	b.n	801b166 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b15e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801b166:	7fbb      	ldrb	r3, [r7, #30]
 801b168:	2b01      	cmp	r3, #1
 801b16a:	d116      	bne.n	801b19a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b170:	b29a      	uxth	r2, r3
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801b17a:	4b0d      	ldr	r3, [pc, #52]	@ (801b1b0 <USB_CoreInit+0xe0>)
 801b17c:	4313      	orrs	r3, r2
 801b17e:	687a      	ldr	r2, [r7, #4]
 801b180:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	689b      	ldr	r3, [r3, #8]
 801b186:	f043 0206 	orr.w	r2, r3, #6
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	689b      	ldr	r3, [r3, #8]
 801b192:	f043 0220 	orr.w	r2, r3, #32
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801b19a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b19c:	4618      	mov	r0, r3
 801b19e:	3710      	adds	r7, #16
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b1a6:	b004      	add	sp, #16
 801b1a8:	4770      	bx	lr
 801b1aa:	bf00      	nop
 801b1ac:	ffbdffbf 	.word	0xffbdffbf
 801b1b0:	03ee0000 	.word	0x03ee0000

0801b1b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801b1b4:	b480      	push	{r7}
 801b1b6:	b087      	sub	sp, #28
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	60f8      	str	r0, [r7, #12]
 801b1bc:	60b9      	str	r1, [r7, #8]
 801b1be:	4613      	mov	r3, r2
 801b1c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801b1c2:	79fb      	ldrb	r3, [r7, #7]
 801b1c4:	2b02      	cmp	r3, #2
 801b1c6:	d165      	bne.n	801b294 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801b1c8:	68bb      	ldr	r3, [r7, #8]
 801b1ca:	4a41      	ldr	r2, [pc, #260]	@ (801b2d0 <USB_SetTurnaroundTime+0x11c>)
 801b1cc:	4293      	cmp	r3, r2
 801b1ce:	d906      	bls.n	801b1de <USB_SetTurnaroundTime+0x2a>
 801b1d0:	68bb      	ldr	r3, [r7, #8]
 801b1d2:	4a40      	ldr	r2, [pc, #256]	@ (801b2d4 <USB_SetTurnaroundTime+0x120>)
 801b1d4:	4293      	cmp	r3, r2
 801b1d6:	d202      	bcs.n	801b1de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801b1d8:	230f      	movs	r3, #15
 801b1da:	617b      	str	r3, [r7, #20]
 801b1dc:	e062      	b.n	801b2a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801b1de:	68bb      	ldr	r3, [r7, #8]
 801b1e0:	4a3c      	ldr	r2, [pc, #240]	@ (801b2d4 <USB_SetTurnaroundTime+0x120>)
 801b1e2:	4293      	cmp	r3, r2
 801b1e4:	d306      	bcc.n	801b1f4 <USB_SetTurnaroundTime+0x40>
 801b1e6:	68bb      	ldr	r3, [r7, #8]
 801b1e8:	4a3b      	ldr	r2, [pc, #236]	@ (801b2d8 <USB_SetTurnaroundTime+0x124>)
 801b1ea:	4293      	cmp	r3, r2
 801b1ec:	d202      	bcs.n	801b1f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801b1ee:	230e      	movs	r3, #14
 801b1f0:	617b      	str	r3, [r7, #20]
 801b1f2:	e057      	b.n	801b2a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801b1f4:	68bb      	ldr	r3, [r7, #8]
 801b1f6:	4a38      	ldr	r2, [pc, #224]	@ (801b2d8 <USB_SetTurnaroundTime+0x124>)
 801b1f8:	4293      	cmp	r3, r2
 801b1fa:	d306      	bcc.n	801b20a <USB_SetTurnaroundTime+0x56>
 801b1fc:	68bb      	ldr	r3, [r7, #8]
 801b1fe:	4a37      	ldr	r2, [pc, #220]	@ (801b2dc <USB_SetTurnaroundTime+0x128>)
 801b200:	4293      	cmp	r3, r2
 801b202:	d202      	bcs.n	801b20a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801b204:	230d      	movs	r3, #13
 801b206:	617b      	str	r3, [r7, #20]
 801b208:	e04c      	b.n	801b2a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801b20a:	68bb      	ldr	r3, [r7, #8]
 801b20c:	4a33      	ldr	r2, [pc, #204]	@ (801b2dc <USB_SetTurnaroundTime+0x128>)
 801b20e:	4293      	cmp	r3, r2
 801b210:	d306      	bcc.n	801b220 <USB_SetTurnaroundTime+0x6c>
 801b212:	68bb      	ldr	r3, [r7, #8]
 801b214:	4a32      	ldr	r2, [pc, #200]	@ (801b2e0 <USB_SetTurnaroundTime+0x12c>)
 801b216:	4293      	cmp	r3, r2
 801b218:	d802      	bhi.n	801b220 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801b21a:	230c      	movs	r3, #12
 801b21c:	617b      	str	r3, [r7, #20]
 801b21e:	e041      	b.n	801b2a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801b220:	68bb      	ldr	r3, [r7, #8]
 801b222:	4a2f      	ldr	r2, [pc, #188]	@ (801b2e0 <USB_SetTurnaroundTime+0x12c>)
 801b224:	4293      	cmp	r3, r2
 801b226:	d906      	bls.n	801b236 <USB_SetTurnaroundTime+0x82>
 801b228:	68bb      	ldr	r3, [r7, #8]
 801b22a:	4a2e      	ldr	r2, [pc, #184]	@ (801b2e4 <USB_SetTurnaroundTime+0x130>)
 801b22c:	4293      	cmp	r3, r2
 801b22e:	d802      	bhi.n	801b236 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801b230:	230b      	movs	r3, #11
 801b232:	617b      	str	r3, [r7, #20]
 801b234:	e036      	b.n	801b2a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801b236:	68bb      	ldr	r3, [r7, #8]
 801b238:	4a2a      	ldr	r2, [pc, #168]	@ (801b2e4 <USB_SetTurnaroundTime+0x130>)
 801b23a:	4293      	cmp	r3, r2
 801b23c:	d906      	bls.n	801b24c <USB_SetTurnaroundTime+0x98>
 801b23e:	68bb      	ldr	r3, [r7, #8]
 801b240:	4a29      	ldr	r2, [pc, #164]	@ (801b2e8 <USB_SetTurnaroundTime+0x134>)
 801b242:	4293      	cmp	r3, r2
 801b244:	d802      	bhi.n	801b24c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801b246:	230a      	movs	r3, #10
 801b248:	617b      	str	r3, [r7, #20]
 801b24a:	e02b      	b.n	801b2a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801b24c:	68bb      	ldr	r3, [r7, #8]
 801b24e:	4a26      	ldr	r2, [pc, #152]	@ (801b2e8 <USB_SetTurnaroundTime+0x134>)
 801b250:	4293      	cmp	r3, r2
 801b252:	d906      	bls.n	801b262 <USB_SetTurnaroundTime+0xae>
 801b254:	68bb      	ldr	r3, [r7, #8]
 801b256:	4a25      	ldr	r2, [pc, #148]	@ (801b2ec <USB_SetTurnaroundTime+0x138>)
 801b258:	4293      	cmp	r3, r2
 801b25a:	d202      	bcs.n	801b262 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801b25c:	2309      	movs	r3, #9
 801b25e:	617b      	str	r3, [r7, #20]
 801b260:	e020      	b.n	801b2a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801b262:	68bb      	ldr	r3, [r7, #8]
 801b264:	4a21      	ldr	r2, [pc, #132]	@ (801b2ec <USB_SetTurnaroundTime+0x138>)
 801b266:	4293      	cmp	r3, r2
 801b268:	d306      	bcc.n	801b278 <USB_SetTurnaroundTime+0xc4>
 801b26a:	68bb      	ldr	r3, [r7, #8]
 801b26c:	4a20      	ldr	r2, [pc, #128]	@ (801b2f0 <USB_SetTurnaroundTime+0x13c>)
 801b26e:	4293      	cmp	r3, r2
 801b270:	d802      	bhi.n	801b278 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801b272:	2308      	movs	r3, #8
 801b274:	617b      	str	r3, [r7, #20]
 801b276:	e015      	b.n	801b2a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801b278:	68bb      	ldr	r3, [r7, #8]
 801b27a:	4a1d      	ldr	r2, [pc, #116]	@ (801b2f0 <USB_SetTurnaroundTime+0x13c>)
 801b27c:	4293      	cmp	r3, r2
 801b27e:	d906      	bls.n	801b28e <USB_SetTurnaroundTime+0xda>
 801b280:	68bb      	ldr	r3, [r7, #8]
 801b282:	4a1c      	ldr	r2, [pc, #112]	@ (801b2f4 <USB_SetTurnaroundTime+0x140>)
 801b284:	4293      	cmp	r3, r2
 801b286:	d202      	bcs.n	801b28e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801b288:	2307      	movs	r3, #7
 801b28a:	617b      	str	r3, [r7, #20]
 801b28c:	e00a      	b.n	801b2a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801b28e:	2306      	movs	r3, #6
 801b290:	617b      	str	r3, [r7, #20]
 801b292:	e007      	b.n	801b2a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801b294:	79fb      	ldrb	r3, [r7, #7]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d102      	bne.n	801b2a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801b29a:	2309      	movs	r3, #9
 801b29c:	617b      	str	r3, [r7, #20]
 801b29e:	e001      	b.n	801b2a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801b2a0:	2309      	movs	r3, #9
 801b2a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	68db      	ldr	r3, [r3, #12]
 801b2a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	68da      	ldr	r2, [r3, #12]
 801b2b4:	697b      	ldr	r3, [r7, #20]
 801b2b6:	029b      	lsls	r3, r3, #10
 801b2b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 801b2bc:	431a      	orrs	r2, r3
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801b2c2:	2300      	movs	r3, #0
}
 801b2c4:	4618      	mov	r0, r3
 801b2c6:	371c      	adds	r7, #28
 801b2c8:	46bd      	mov	sp, r7
 801b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ce:	4770      	bx	lr
 801b2d0:	00d8acbf 	.word	0x00d8acbf
 801b2d4:	00e4e1c0 	.word	0x00e4e1c0
 801b2d8:	00f42400 	.word	0x00f42400
 801b2dc:	01067380 	.word	0x01067380
 801b2e0:	011a499f 	.word	0x011a499f
 801b2e4:	01312cff 	.word	0x01312cff
 801b2e8:	014ca43f 	.word	0x014ca43f
 801b2ec:	016e3600 	.word	0x016e3600
 801b2f0:	01a6ab1f 	.word	0x01a6ab1f
 801b2f4:	01e84800 	.word	0x01e84800

0801b2f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801b2f8:	b480      	push	{r7}
 801b2fa:	b083      	sub	sp, #12
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	689b      	ldr	r3, [r3, #8]
 801b304:	f043 0201 	orr.w	r2, r3, #1
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801b30c:	2300      	movs	r3, #0
}
 801b30e:	4618      	mov	r0, r3
 801b310:	370c      	adds	r7, #12
 801b312:	46bd      	mov	sp, r7
 801b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b318:	4770      	bx	lr

0801b31a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801b31a:	b480      	push	{r7}
 801b31c:	b083      	sub	sp, #12
 801b31e:	af00      	add	r7, sp, #0
 801b320:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	689b      	ldr	r3, [r3, #8]
 801b326:	f023 0201 	bic.w	r2, r3, #1
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801b32e:	2300      	movs	r3, #0
}
 801b330:	4618      	mov	r0, r3
 801b332:	370c      	adds	r7, #12
 801b334:	46bd      	mov	sp, r7
 801b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b33a:	4770      	bx	lr

0801b33c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	b084      	sub	sp, #16
 801b340:	af00      	add	r7, sp, #0
 801b342:	6078      	str	r0, [r7, #4]
 801b344:	460b      	mov	r3, r1
 801b346:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801b348:	2300      	movs	r3, #0
 801b34a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	68db      	ldr	r3, [r3, #12]
 801b350:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801b358:	78fb      	ldrb	r3, [r7, #3]
 801b35a:	2b01      	cmp	r3, #1
 801b35c:	d115      	bne.n	801b38a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	68db      	ldr	r3, [r3, #12]
 801b362:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801b36a:	200a      	movs	r0, #10
 801b36c:	f7f0 f922 	bl	800b5b4 <HAL_Delay>
      ms += 10U;
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	330a      	adds	r3, #10
 801b374:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801b376:	6878      	ldr	r0, [r7, #4]
 801b378:	f001 f93f 	bl	801c5fa <USB_GetMode>
 801b37c:	4603      	mov	r3, r0
 801b37e:	2b01      	cmp	r3, #1
 801b380:	d01e      	beq.n	801b3c0 <USB_SetCurrentMode+0x84>
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	2bc7      	cmp	r3, #199	@ 0xc7
 801b386:	d9f0      	bls.n	801b36a <USB_SetCurrentMode+0x2e>
 801b388:	e01a      	b.n	801b3c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801b38a:	78fb      	ldrb	r3, [r7, #3]
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d115      	bne.n	801b3bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	68db      	ldr	r3, [r3, #12]
 801b394:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801b39c:	200a      	movs	r0, #10
 801b39e:	f7f0 f909 	bl	800b5b4 <HAL_Delay>
      ms += 10U;
 801b3a2:	68fb      	ldr	r3, [r7, #12]
 801b3a4:	330a      	adds	r3, #10
 801b3a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801b3a8:	6878      	ldr	r0, [r7, #4]
 801b3aa:	f001 f926 	bl	801c5fa <USB_GetMode>
 801b3ae:	4603      	mov	r3, r0
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d005      	beq.n	801b3c0 <USB_SetCurrentMode+0x84>
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	2bc7      	cmp	r3, #199	@ 0xc7
 801b3b8:	d9f0      	bls.n	801b39c <USB_SetCurrentMode+0x60>
 801b3ba:	e001      	b.n	801b3c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801b3bc:	2301      	movs	r3, #1
 801b3be:	e005      	b.n	801b3cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	2bc8      	cmp	r3, #200	@ 0xc8
 801b3c4:	d101      	bne.n	801b3ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801b3c6:	2301      	movs	r3, #1
 801b3c8:	e000      	b.n	801b3cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801b3ca:	2300      	movs	r3, #0
}
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	3710      	adds	r7, #16
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bd80      	pop	{r7, pc}

0801b3d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801b3d4:	b084      	sub	sp, #16
 801b3d6:	b580      	push	{r7, lr}
 801b3d8:	b086      	sub	sp, #24
 801b3da:	af00      	add	r7, sp, #0
 801b3dc:	6078      	str	r0, [r7, #4]
 801b3de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801b3e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801b3e6:	2300      	movs	r3, #0
 801b3e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801b3ee:	2300      	movs	r3, #0
 801b3f0:	613b      	str	r3, [r7, #16]
 801b3f2:	e009      	b.n	801b408 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801b3f4:	687a      	ldr	r2, [r7, #4]
 801b3f6:	693b      	ldr	r3, [r7, #16]
 801b3f8:	3340      	adds	r3, #64	@ 0x40
 801b3fa:	009b      	lsls	r3, r3, #2
 801b3fc:	4413      	add	r3, r2
 801b3fe:	2200      	movs	r2, #0
 801b400:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801b402:	693b      	ldr	r3, [r7, #16]
 801b404:	3301      	adds	r3, #1
 801b406:	613b      	str	r3, [r7, #16]
 801b408:	693b      	ldr	r3, [r7, #16]
 801b40a:	2b0e      	cmp	r3, #14
 801b40c:	d9f2      	bls.n	801b3f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801b40e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801b412:	2b00      	cmp	r3, #0
 801b414:	d11c      	bne.n	801b450 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801b416:	68fb      	ldr	r3, [r7, #12]
 801b418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801b41c:	685b      	ldr	r3, [r3, #4]
 801b41e:	68fa      	ldr	r2, [r7, #12]
 801b420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801b424:	f043 0302 	orr.w	r3, r3, #2
 801b428:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b42e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	601a      	str	r2, [r3, #0]
 801b44e:	e005      	b.n	801b45c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b454:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801b462:	461a      	mov	r2, r3
 801b464:	2300      	movs	r3, #0
 801b466:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801b468:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801b46c:	2b01      	cmp	r3, #1
 801b46e:	d10d      	bne.n	801b48c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801b470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b474:	2b00      	cmp	r3, #0
 801b476:	d104      	bne.n	801b482 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801b478:	2100      	movs	r1, #0
 801b47a:	6878      	ldr	r0, [r7, #4]
 801b47c:	f000 f968 	bl	801b750 <USB_SetDevSpeed>
 801b480:	e008      	b.n	801b494 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801b482:	2101      	movs	r1, #1
 801b484:	6878      	ldr	r0, [r7, #4]
 801b486:	f000 f963 	bl	801b750 <USB_SetDevSpeed>
 801b48a:	e003      	b.n	801b494 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801b48c:	2103      	movs	r1, #3
 801b48e:	6878      	ldr	r0, [r7, #4]
 801b490:	f000 f95e 	bl	801b750 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801b494:	2110      	movs	r1, #16
 801b496:	6878      	ldr	r0, [r7, #4]
 801b498:	f000 f8fa 	bl	801b690 <USB_FlushTxFifo>
 801b49c:	4603      	mov	r3, r0
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d001      	beq.n	801b4a6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801b4a2:	2301      	movs	r3, #1
 801b4a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801b4a6:	6878      	ldr	r0, [r7, #4]
 801b4a8:	f000 f924 	bl	801b6f4 <USB_FlushRxFifo>
 801b4ac:	4603      	mov	r3, r0
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d001      	beq.n	801b4b6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801b4b2:	2301      	movs	r3, #1
 801b4b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801b4bc:	461a      	mov	r2, r3
 801b4be:	2300      	movs	r3, #0
 801b4c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801b4c8:	461a      	mov	r2, r3
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801b4ce:	68fb      	ldr	r3, [r7, #12]
 801b4d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801b4d4:	461a      	mov	r2, r3
 801b4d6:	2300      	movs	r3, #0
 801b4d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b4da:	2300      	movs	r3, #0
 801b4dc:	613b      	str	r3, [r7, #16]
 801b4de:	e043      	b.n	801b568 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801b4e0:	693b      	ldr	r3, [r7, #16]
 801b4e2:	015a      	lsls	r2, r3, #5
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	4413      	add	r3, r2
 801b4e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801b4f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801b4f6:	d118      	bne.n	801b52a <USB_DevInit+0x156>
    {
      if (i == 0U)
 801b4f8:	693b      	ldr	r3, [r7, #16]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d10a      	bne.n	801b514 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801b4fe:	693b      	ldr	r3, [r7, #16]
 801b500:	015a      	lsls	r2, r3, #5
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	4413      	add	r3, r2
 801b506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b50a:	461a      	mov	r2, r3
 801b50c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801b510:	6013      	str	r3, [r2, #0]
 801b512:	e013      	b.n	801b53c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801b514:	693b      	ldr	r3, [r7, #16]
 801b516:	015a      	lsls	r2, r3, #5
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	4413      	add	r3, r2
 801b51c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b520:	461a      	mov	r2, r3
 801b522:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801b526:	6013      	str	r3, [r2, #0]
 801b528:	e008      	b.n	801b53c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801b52a:	693b      	ldr	r3, [r7, #16]
 801b52c:	015a      	lsls	r2, r3, #5
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	4413      	add	r3, r2
 801b532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b536:	461a      	mov	r2, r3
 801b538:	2300      	movs	r3, #0
 801b53a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801b53c:	693b      	ldr	r3, [r7, #16]
 801b53e:	015a      	lsls	r2, r3, #5
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	4413      	add	r3, r2
 801b544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b548:	461a      	mov	r2, r3
 801b54a:	2300      	movs	r3, #0
 801b54c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801b54e:	693b      	ldr	r3, [r7, #16]
 801b550:	015a      	lsls	r2, r3, #5
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	4413      	add	r3, r2
 801b556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b55a:	461a      	mov	r2, r3
 801b55c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801b560:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b562:	693b      	ldr	r3, [r7, #16]
 801b564:	3301      	adds	r3, #1
 801b566:	613b      	str	r3, [r7, #16]
 801b568:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b56c:	461a      	mov	r2, r3
 801b56e:	693b      	ldr	r3, [r7, #16]
 801b570:	4293      	cmp	r3, r2
 801b572:	d3b5      	bcc.n	801b4e0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b574:	2300      	movs	r3, #0
 801b576:	613b      	str	r3, [r7, #16]
 801b578:	e043      	b.n	801b602 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801b57a:	693b      	ldr	r3, [r7, #16]
 801b57c:	015a      	lsls	r2, r3, #5
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	4413      	add	r3, r2
 801b582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801b58c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801b590:	d118      	bne.n	801b5c4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801b592:	693b      	ldr	r3, [r7, #16]
 801b594:	2b00      	cmp	r3, #0
 801b596:	d10a      	bne.n	801b5ae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801b598:	693b      	ldr	r3, [r7, #16]
 801b59a:	015a      	lsls	r2, r3, #5
 801b59c:	68fb      	ldr	r3, [r7, #12]
 801b59e:	4413      	add	r3, r2
 801b5a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b5a4:	461a      	mov	r2, r3
 801b5a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801b5aa:	6013      	str	r3, [r2, #0]
 801b5ac:	e013      	b.n	801b5d6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801b5ae:	693b      	ldr	r3, [r7, #16]
 801b5b0:	015a      	lsls	r2, r3, #5
 801b5b2:	68fb      	ldr	r3, [r7, #12]
 801b5b4:	4413      	add	r3, r2
 801b5b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b5ba:	461a      	mov	r2, r3
 801b5bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801b5c0:	6013      	str	r3, [r2, #0]
 801b5c2:	e008      	b.n	801b5d6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801b5c4:	693b      	ldr	r3, [r7, #16]
 801b5c6:	015a      	lsls	r2, r3, #5
 801b5c8:	68fb      	ldr	r3, [r7, #12]
 801b5ca:	4413      	add	r3, r2
 801b5cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b5d0:	461a      	mov	r2, r3
 801b5d2:	2300      	movs	r3, #0
 801b5d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801b5d6:	693b      	ldr	r3, [r7, #16]
 801b5d8:	015a      	lsls	r2, r3, #5
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	4413      	add	r3, r2
 801b5de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b5e2:	461a      	mov	r2, r3
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801b5e8:	693b      	ldr	r3, [r7, #16]
 801b5ea:	015a      	lsls	r2, r3, #5
 801b5ec:	68fb      	ldr	r3, [r7, #12]
 801b5ee:	4413      	add	r3, r2
 801b5f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b5f4:	461a      	mov	r2, r3
 801b5f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801b5fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b5fc:	693b      	ldr	r3, [r7, #16]
 801b5fe:	3301      	adds	r3, #1
 801b600:	613b      	str	r3, [r7, #16]
 801b602:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b606:	461a      	mov	r2, r3
 801b608:	693b      	ldr	r3, [r7, #16]
 801b60a:	4293      	cmp	r3, r2
 801b60c:	d3b5      	bcc.n	801b57a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801b614:	691b      	ldr	r3, [r3, #16]
 801b616:	68fa      	ldr	r2, [r7, #12]
 801b618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801b61c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b620:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	2200      	movs	r2, #0
 801b626:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801b62e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801b630:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b634:	2b00      	cmp	r3, #0
 801b636:	d105      	bne.n	801b644 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	699b      	ldr	r3, [r3, #24]
 801b63c:	f043 0210 	orr.w	r2, r3, #16
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	699a      	ldr	r2, [r3, #24]
 801b648:	4b0f      	ldr	r3, [pc, #60]	@ (801b688 <USB_DevInit+0x2b4>)
 801b64a:	4313      	orrs	r3, r2
 801b64c:	687a      	ldr	r2, [r7, #4]
 801b64e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801b650:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801b654:	2b00      	cmp	r3, #0
 801b656:	d005      	beq.n	801b664 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	699b      	ldr	r3, [r3, #24]
 801b65c:	f043 0208 	orr.w	r2, r3, #8
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801b664:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801b668:	2b01      	cmp	r3, #1
 801b66a:	d105      	bne.n	801b678 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	699a      	ldr	r2, [r3, #24]
 801b670:	4b06      	ldr	r3, [pc, #24]	@ (801b68c <USB_DevInit+0x2b8>)
 801b672:	4313      	orrs	r3, r2
 801b674:	687a      	ldr	r2, [r7, #4]
 801b676:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801b678:	7dfb      	ldrb	r3, [r7, #23]
}
 801b67a:	4618      	mov	r0, r3
 801b67c:	3718      	adds	r7, #24
 801b67e:	46bd      	mov	sp, r7
 801b680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b684:	b004      	add	sp, #16
 801b686:	4770      	bx	lr
 801b688:	803c3800 	.word	0x803c3800
 801b68c:	40000004 	.word	0x40000004

0801b690 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801b690:	b480      	push	{r7}
 801b692:	b085      	sub	sp, #20
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
 801b698:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801b69a:	2300      	movs	r3, #0
 801b69c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	3301      	adds	r3, #1
 801b6a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801b6a4:	68fb      	ldr	r3, [r7, #12]
 801b6a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801b6aa:	d901      	bls.n	801b6b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801b6ac:	2303      	movs	r3, #3
 801b6ae:	e01b      	b.n	801b6e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	691b      	ldr	r3, [r3, #16]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	daf2      	bge.n	801b69e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801b6b8:	2300      	movs	r3, #0
 801b6ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801b6bc:	683b      	ldr	r3, [r7, #0]
 801b6be:	019b      	lsls	r3, r3, #6
 801b6c0:	f043 0220 	orr.w	r2, r3, #32
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	3301      	adds	r3, #1
 801b6cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801b6ce:	68fb      	ldr	r3, [r7, #12]
 801b6d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801b6d4:	d901      	bls.n	801b6da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801b6d6:	2303      	movs	r3, #3
 801b6d8:	e006      	b.n	801b6e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	691b      	ldr	r3, [r3, #16]
 801b6de:	f003 0320 	and.w	r3, r3, #32
 801b6e2:	2b20      	cmp	r3, #32
 801b6e4:	d0f0      	beq.n	801b6c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801b6e6:	2300      	movs	r3, #0
}
 801b6e8:	4618      	mov	r0, r3
 801b6ea:	3714      	adds	r7, #20
 801b6ec:	46bd      	mov	sp, r7
 801b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6f2:	4770      	bx	lr

0801b6f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801b6f4:	b480      	push	{r7}
 801b6f6:	b085      	sub	sp, #20
 801b6f8:	af00      	add	r7, sp, #0
 801b6fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801b6fc:	2300      	movs	r3, #0
 801b6fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	3301      	adds	r3, #1
 801b704:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801b70c:	d901      	bls.n	801b712 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801b70e:	2303      	movs	r3, #3
 801b710:	e018      	b.n	801b744 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	691b      	ldr	r3, [r3, #16]
 801b716:	2b00      	cmp	r3, #0
 801b718:	daf2      	bge.n	801b700 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801b71a:	2300      	movs	r3, #0
 801b71c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	2210      	movs	r2, #16
 801b722:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801b724:	68fb      	ldr	r3, [r7, #12]
 801b726:	3301      	adds	r3, #1
 801b728:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801b72a:	68fb      	ldr	r3, [r7, #12]
 801b72c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801b730:	d901      	bls.n	801b736 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801b732:	2303      	movs	r3, #3
 801b734:	e006      	b.n	801b744 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	691b      	ldr	r3, [r3, #16]
 801b73a:	f003 0310 	and.w	r3, r3, #16
 801b73e:	2b10      	cmp	r3, #16
 801b740:	d0f0      	beq.n	801b724 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801b742:	2300      	movs	r3, #0
}
 801b744:	4618      	mov	r0, r3
 801b746:	3714      	adds	r7, #20
 801b748:	46bd      	mov	sp, r7
 801b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b74e:	4770      	bx	lr

0801b750 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801b750:	b480      	push	{r7}
 801b752:	b085      	sub	sp, #20
 801b754:	af00      	add	r7, sp, #0
 801b756:	6078      	str	r0, [r7, #4]
 801b758:	460b      	mov	r3, r1
 801b75a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801b766:	681a      	ldr	r2, [r3, #0]
 801b768:	78fb      	ldrb	r3, [r7, #3]
 801b76a:	68f9      	ldr	r1, [r7, #12]
 801b76c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801b770:	4313      	orrs	r3, r2
 801b772:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801b774:	2300      	movs	r3, #0
}
 801b776:	4618      	mov	r0, r3
 801b778:	3714      	adds	r7, #20
 801b77a:	46bd      	mov	sp, r7
 801b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b780:	4770      	bx	lr

0801b782 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801b782:	b480      	push	{r7}
 801b784:	b087      	sub	sp, #28
 801b786:	af00      	add	r7, sp, #0
 801b788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801b78e:	693b      	ldr	r3, [r7, #16]
 801b790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801b794:	689b      	ldr	r3, [r3, #8]
 801b796:	f003 0306 	and.w	r3, r3, #6
 801b79a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801b79c:	68fb      	ldr	r3, [r7, #12]
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d102      	bne.n	801b7a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801b7a2:	2300      	movs	r3, #0
 801b7a4:	75fb      	strb	r3, [r7, #23]
 801b7a6:	e00a      	b.n	801b7be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	2b02      	cmp	r3, #2
 801b7ac:	d002      	beq.n	801b7b4 <USB_GetDevSpeed+0x32>
 801b7ae:	68fb      	ldr	r3, [r7, #12]
 801b7b0:	2b06      	cmp	r3, #6
 801b7b2:	d102      	bne.n	801b7ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801b7b4:	2302      	movs	r3, #2
 801b7b6:	75fb      	strb	r3, [r7, #23]
 801b7b8:	e001      	b.n	801b7be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801b7ba:	230f      	movs	r3, #15
 801b7bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801b7be:	7dfb      	ldrb	r3, [r7, #23]
}
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	371c      	adds	r7, #28
 801b7c4:	46bd      	mov	sp, r7
 801b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ca:	4770      	bx	lr

0801b7cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801b7cc:	b480      	push	{r7}
 801b7ce:	b085      	sub	sp, #20
 801b7d0:	af00      	add	r7, sp, #0
 801b7d2:	6078      	str	r0, [r7, #4]
 801b7d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b7da:	683b      	ldr	r3, [r7, #0]
 801b7dc:	781b      	ldrb	r3, [r3, #0]
 801b7de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801b7e0:	683b      	ldr	r3, [r7, #0]
 801b7e2:	785b      	ldrb	r3, [r3, #1]
 801b7e4:	2b01      	cmp	r3, #1
 801b7e6:	d139      	bne.n	801b85c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801b7ee:	69da      	ldr	r2, [r3, #28]
 801b7f0:	683b      	ldr	r3, [r7, #0]
 801b7f2:	781b      	ldrb	r3, [r3, #0]
 801b7f4:	f003 030f 	and.w	r3, r3, #15
 801b7f8:	2101      	movs	r1, #1
 801b7fa:	fa01 f303 	lsl.w	r3, r1, r3
 801b7fe:	b29b      	uxth	r3, r3
 801b800:	68f9      	ldr	r1, [r7, #12]
 801b802:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801b806:	4313      	orrs	r3, r2
 801b808:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801b80a:	68bb      	ldr	r3, [r7, #8]
 801b80c:	015a      	lsls	r2, r3, #5
 801b80e:	68fb      	ldr	r3, [r7, #12]
 801b810:	4413      	add	r3, r2
 801b812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b816:	681b      	ldr	r3, [r3, #0]
 801b818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d153      	bne.n	801b8c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b820:	68bb      	ldr	r3, [r7, #8]
 801b822:	015a      	lsls	r2, r3, #5
 801b824:	68fb      	ldr	r3, [r7, #12]
 801b826:	4413      	add	r3, r2
 801b828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b82c:	681a      	ldr	r2, [r3, #0]
 801b82e:	683b      	ldr	r3, [r7, #0]
 801b830:	689b      	ldr	r3, [r3, #8]
 801b832:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b836:	683b      	ldr	r3, [r7, #0]
 801b838:	791b      	ldrb	r3, [r3, #4]
 801b83a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b83c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b83e:	68bb      	ldr	r3, [r7, #8]
 801b840:	059b      	lsls	r3, r3, #22
 801b842:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b844:	431a      	orrs	r2, r3
 801b846:	68bb      	ldr	r3, [r7, #8]
 801b848:	0159      	lsls	r1, r3, #5
 801b84a:	68fb      	ldr	r3, [r7, #12]
 801b84c:	440b      	add	r3, r1
 801b84e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b852:	4619      	mov	r1, r3
 801b854:	4b20      	ldr	r3, [pc, #128]	@ (801b8d8 <USB_ActivateEndpoint+0x10c>)
 801b856:	4313      	orrs	r3, r2
 801b858:	600b      	str	r3, [r1, #0]
 801b85a:	e035      	b.n	801b8c8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801b862:	69da      	ldr	r2, [r3, #28]
 801b864:	683b      	ldr	r3, [r7, #0]
 801b866:	781b      	ldrb	r3, [r3, #0]
 801b868:	f003 030f 	and.w	r3, r3, #15
 801b86c:	2101      	movs	r1, #1
 801b86e:	fa01 f303 	lsl.w	r3, r1, r3
 801b872:	041b      	lsls	r3, r3, #16
 801b874:	68f9      	ldr	r1, [r7, #12]
 801b876:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801b87a:	4313      	orrs	r3, r2
 801b87c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801b87e:	68bb      	ldr	r3, [r7, #8]
 801b880:	015a      	lsls	r2, r3, #5
 801b882:	68fb      	ldr	r3, [r7, #12]
 801b884:	4413      	add	r3, r2
 801b886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b890:	2b00      	cmp	r3, #0
 801b892:	d119      	bne.n	801b8c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b894:	68bb      	ldr	r3, [r7, #8]
 801b896:	015a      	lsls	r2, r3, #5
 801b898:	68fb      	ldr	r3, [r7, #12]
 801b89a:	4413      	add	r3, r2
 801b89c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b8a0:	681a      	ldr	r2, [r3, #0]
 801b8a2:	683b      	ldr	r3, [r7, #0]
 801b8a4:	689b      	ldr	r3, [r3, #8]
 801b8a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801b8aa:	683b      	ldr	r3, [r7, #0]
 801b8ac:	791b      	ldrb	r3, [r3, #4]
 801b8ae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b8b0:	430b      	orrs	r3, r1
 801b8b2:	431a      	orrs	r2, r3
 801b8b4:	68bb      	ldr	r3, [r7, #8]
 801b8b6:	0159      	lsls	r1, r3, #5
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	440b      	add	r3, r1
 801b8bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b8c0:	4619      	mov	r1, r3
 801b8c2:	4b05      	ldr	r3, [pc, #20]	@ (801b8d8 <USB_ActivateEndpoint+0x10c>)
 801b8c4:	4313      	orrs	r3, r2
 801b8c6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801b8c8:	2300      	movs	r3, #0
}
 801b8ca:	4618      	mov	r0, r3
 801b8cc:	3714      	adds	r7, #20
 801b8ce:	46bd      	mov	sp, r7
 801b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8d4:	4770      	bx	lr
 801b8d6:	bf00      	nop
 801b8d8:	10008000 	.word	0x10008000

0801b8dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801b8dc:	b480      	push	{r7}
 801b8de:	b085      	sub	sp, #20
 801b8e0:	af00      	add	r7, sp, #0
 801b8e2:	6078      	str	r0, [r7, #4]
 801b8e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b8ea:	683b      	ldr	r3, [r7, #0]
 801b8ec:	781b      	ldrb	r3, [r3, #0]
 801b8ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801b8f0:	683b      	ldr	r3, [r7, #0]
 801b8f2:	785b      	ldrb	r3, [r3, #1]
 801b8f4:	2b01      	cmp	r3, #1
 801b8f6:	d161      	bne.n	801b9bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801b8f8:	68bb      	ldr	r3, [r7, #8]
 801b8fa:	015a      	lsls	r2, r3, #5
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	4413      	add	r3, r2
 801b900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801b90a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801b90e:	d11f      	bne.n	801b950 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801b910:	68bb      	ldr	r3, [r7, #8]
 801b912:	015a      	lsls	r2, r3, #5
 801b914:	68fb      	ldr	r3, [r7, #12]
 801b916:	4413      	add	r3, r2
 801b918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	68ba      	ldr	r2, [r7, #8]
 801b920:	0151      	lsls	r1, r2, #5
 801b922:	68fa      	ldr	r2, [r7, #12]
 801b924:	440a      	add	r2, r1
 801b926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801b92a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801b92e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801b930:	68bb      	ldr	r3, [r7, #8]
 801b932:	015a      	lsls	r2, r3, #5
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	4413      	add	r3, r2
 801b938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	68ba      	ldr	r2, [r7, #8]
 801b940:	0151      	lsls	r1, r2, #5
 801b942:	68fa      	ldr	r2, [r7, #12]
 801b944:	440a      	add	r2, r1
 801b946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801b94a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801b94e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801b956:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801b958:	683b      	ldr	r3, [r7, #0]
 801b95a:	781b      	ldrb	r3, [r3, #0]
 801b95c:	f003 030f 	and.w	r3, r3, #15
 801b960:	2101      	movs	r1, #1
 801b962:	fa01 f303 	lsl.w	r3, r1, r3
 801b966:	b29b      	uxth	r3, r3
 801b968:	43db      	mvns	r3, r3
 801b96a:	68f9      	ldr	r1, [r7, #12]
 801b96c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801b970:	4013      	ands	r3, r2
 801b972:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801b97a:	69da      	ldr	r2, [r3, #28]
 801b97c:	683b      	ldr	r3, [r7, #0]
 801b97e:	781b      	ldrb	r3, [r3, #0]
 801b980:	f003 030f 	and.w	r3, r3, #15
 801b984:	2101      	movs	r1, #1
 801b986:	fa01 f303 	lsl.w	r3, r1, r3
 801b98a:	b29b      	uxth	r3, r3
 801b98c:	43db      	mvns	r3, r3
 801b98e:	68f9      	ldr	r1, [r7, #12]
 801b990:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801b994:	4013      	ands	r3, r2
 801b996:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801b998:	68bb      	ldr	r3, [r7, #8]
 801b99a:	015a      	lsls	r2, r3, #5
 801b99c:	68fb      	ldr	r3, [r7, #12]
 801b99e:	4413      	add	r3, r2
 801b9a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b9a4:	681a      	ldr	r2, [r3, #0]
 801b9a6:	68bb      	ldr	r3, [r7, #8]
 801b9a8:	0159      	lsls	r1, r3, #5
 801b9aa:	68fb      	ldr	r3, [r7, #12]
 801b9ac:	440b      	add	r3, r1
 801b9ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b9b2:	4619      	mov	r1, r3
 801b9b4:	4b35      	ldr	r3, [pc, #212]	@ (801ba8c <USB_DeactivateEndpoint+0x1b0>)
 801b9b6:	4013      	ands	r3, r2
 801b9b8:	600b      	str	r3, [r1, #0]
 801b9ba:	e060      	b.n	801ba7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801b9bc:	68bb      	ldr	r3, [r7, #8]
 801b9be:	015a      	lsls	r2, r3, #5
 801b9c0:	68fb      	ldr	r3, [r7, #12]
 801b9c2:	4413      	add	r3, r2
 801b9c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801b9ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801b9d2:	d11f      	bne.n	801ba14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801b9d4:	68bb      	ldr	r3, [r7, #8]
 801b9d6:	015a      	lsls	r2, r3, #5
 801b9d8:	68fb      	ldr	r3, [r7, #12]
 801b9da:	4413      	add	r3, r2
 801b9dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	68ba      	ldr	r2, [r7, #8]
 801b9e4:	0151      	lsls	r1, r2, #5
 801b9e6:	68fa      	ldr	r2, [r7, #12]
 801b9e8:	440a      	add	r2, r1
 801b9ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801b9ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801b9f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801b9f4:	68bb      	ldr	r3, [r7, #8]
 801b9f6:	015a      	lsls	r2, r3, #5
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	4413      	add	r3, r2
 801b9fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801ba00:	681b      	ldr	r3, [r3, #0]
 801ba02:	68ba      	ldr	r2, [r7, #8]
 801ba04:	0151      	lsls	r1, r2, #5
 801ba06:	68fa      	ldr	r2, [r7, #12]
 801ba08:	440a      	add	r2, r1
 801ba0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801ba0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ba12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801ba1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ba1c:	683b      	ldr	r3, [r7, #0]
 801ba1e:	781b      	ldrb	r3, [r3, #0]
 801ba20:	f003 030f 	and.w	r3, r3, #15
 801ba24:	2101      	movs	r1, #1
 801ba26:	fa01 f303 	lsl.w	r3, r1, r3
 801ba2a:	041b      	lsls	r3, r3, #16
 801ba2c:	43db      	mvns	r3, r3
 801ba2e:	68f9      	ldr	r1, [r7, #12]
 801ba30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801ba34:	4013      	ands	r3, r2
 801ba36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801ba3e:	69da      	ldr	r2, [r3, #28]
 801ba40:	683b      	ldr	r3, [r7, #0]
 801ba42:	781b      	ldrb	r3, [r3, #0]
 801ba44:	f003 030f 	and.w	r3, r3, #15
 801ba48:	2101      	movs	r1, #1
 801ba4a:	fa01 f303 	lsl.w	r3, r1, r3
 801ba4e:	041b      	lsls	r3, r3, #16
 801ba50:	43db      	mvns	r3, r3
 801ba52:	68f9      	ldr	r1, [r7, #12]
 801ba54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801ba58:	4013      	ands	r3, r2
 801ba5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801ba5c:	68bb      	ldr	r3, [r7, #8]
 801ba5e:	015a      	lsls	r2, r3, #5
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	4413      	add	r3, r2
 801ba64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801ba68:	681a      	ldr	r2, [r3, #0]
 801ba6a:	68bb      	ldr	r3, [r7, #8]
 801ba6c:	0159      	lsls	r1, r3, #5
 801ba6e:	68fb      	ldr	r3, [r7, #12]
 801ba70:	440b      	add	r3, r1
 801ba72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801ba76:	4619      	mov	r1, r3
 801ba78:	4b05      	ldr	r3, [pc, #20]	@ (801ba90 <USB_DeactivateEndpoint+0x1b4>)
 801ba7a:	4013      	ands	r3, r2
 801ba7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801ba7e:	2300      	movs	r3, #0
}
 801ba80:	4618      	mov	r0, r3
 801ba82:	3714      	adds	r7, #20
 801ba84:	46bd      	mov	sp, r7
 801ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba8a:	4770      	bx	lr
 801ba8c:	ec337800 	.word	0xec337800
 801ba90:	eff37800 	.word	0xeff37800

0801ba94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801ba94:	b580      	push	{r7, lr}
 801ba96:	b08a      	sub	sp, #40	@ 0x28
 801ba98:	af02      	add	r7, sp, #8
 801ba9a:	60f8      	str	r0, [r7, #12]
 801ba9c:	60b9      	str	r1, [r7, #8]
 801ba9e:	4613      	mov	r3, r2
 801baa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801baa6:	68bb      	ldr	r3, [r7, #8]
 801baa8:	781b      	ldrb	r3, [r3, #0]
 801baaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801baac:	68bb      	ldr	r3, [r7, #8]
 801baae:	785b      	ldrb	r3, [r3, #1]
 801bab0:	2b01      	cmp	r3, #1
 801bab2:	f040 8185 	bne.w	801bdc0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801bab6:	68bb      	ldr	r3, [r7, #8]
 801bab8:	691b      	ldr	r3, [r3, #16]
 801baba:	2b00      	cmp	r3, #0
 801babc:	d132      	bne.n	801bb24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801babe:	69bb      	ldr	r3, [r7, #24]
 801bac0:	015a      	lsls	r2, r3, #5
 801bac2:	69fb      	ldr	r3, [r7, #28]
 801bac4:	4413      	add	r3, r2
 801bac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801baca:	691a      	ldr	r2, [r3, #16]
 801bacc:	69bb      	ldr	r3, [r7, #24]
 801bace:	0159      	lsls	r1, r3, #5
 801bad0:	69fb      	ldr	r3, [r7, #28]
 801bad2:	440b      	add	r3, r1
 801bad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bad8:	4619      	mov	r1, r3
 801bada:	4ba7      	ldr	r3, [pc, #668]	@ (801bd78 <USB_EPStartXfer+0x2e4>)
 801badc:	4013      	ands	r3, r2
 801bade:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801bae0:	69bb      	ldr	r3, [r7, #24]
 801bae2:	015a      	lsls	r2, r3, #5
 801bae4:	69fb      	ldr	r3, [r7, #28]
 801bae6:	4413      	add	r3, r2
 801bae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801baec:	691b      	ldr	r3, [r3, #16]
 801baee:	69ba      	ldr	r2, [r7, #24]
 801baf0:	0151      	lsls	r1, r2, #5
 801baf2:	69fa      	ldr	r2, [r7, #28]
 801baf4:	440a      	add	r2, r1
 801baf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801bafa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801bafe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801bb00:	69bb      	ldr	r3, [r7, #24]
 801bb02:	015a      	lsls	r2, r3, #5
 801bb04:	69fb      	ldr	r3, [r7, #28]
 801bb06:	4413      	add	r3, r2
 801bb08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bb0c:	691a      	ldr	r2, [r3, #16]
 801bb0e:	69bb      	ldr	r3, [r7, #24]
 801bb10:	0159      	lsls	r1, r3, #5
 801bb12:	69fb      	ldr	r3, [r7, #28]
 801bb14:	440b      	add	r3, r1
 801bb16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bb1a:	4619      	mov	r1, r3
 801bb1c:	4b97      	ldr	r3, [pc, #604]	@ (801bd7c <USB_EPStartXfer+0x2e8>)
 801bb1e:	4013      	ands	r3, r2
 801bb20:	610b      	str	r3, [r1, #16]
 801bb22:	e097      	b.n	801bc54 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801bb24:	69bb      	ldr	r3, [r7, #24]
 801bb26:	015a      	lsls	r2, r3, #5
 801bb28:	69fb      	ldr	r3, [r7, #28]
 801bb2a:	4413      	add	r3, r2
 801bb2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bb30:	691a      	ldr	r2, [r3, #16]
 801bb32:	69bb      	ldr	r3, [r7, #24]
 801bb34:	0159      	lsls	r1, r3, #5
 801bb36:	69fb      	ldr	r3, [r7, #28]
 801bb38:	440b      	add	r3, r1
 801bb3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bb3e:	4619      	mov	r1, r3
 801bb40:	4b8e      	ldr	r3, [pc, #568]	@ (801bd7c <USB_EPStartXfer+0x2e8>)
 801bb42:	4013      	ands	r3, r2
 801bb44:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801bb46:	69bb      	ldr	r3, [r7, #24]
 801bb48:	015a      	lsls	r2, r3, #5
 801bb4a:	69fb      	ldr	r3, [r7, #28]
 801bb4c:	4413      	add	r3, r2
 801bb4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bb52:	691a      	ldr	r2, [r3, #16]
 801bb54:	69bb      	ldr	r3, [r7, #24]
 801bb56:	0159      	lsls	r1, r3, #5
 801bb58:	69fb      	ldr	r3, [r7, #28]
 801bb5a:	440b      	add	r3, r1
 801bb5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bb60:	4619      	mov	r1, r3
 801bb62:	4b85      	ldr	r3, [pc, #532]	@ (801bd78 <USB_EPStartXfer+0x2e4>)
 801bb64:	4013      	ands	r3, r2
 801bb66:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801bb68:	69bb      	ldr	r3, [r7, #24]
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d11a      	bne.n	801bba4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801bb6e:	68bb      	ldr	r3, [r7, #8]
 801bb70:	691a      	ldr	r2, [r3, #16]
 801bb72:	68bb      	ldr	r3, [r7, #8]
 801bb74:	689b      	ldr	r3, [r3, #8]
 801bb76:	429a      	cmp	r2, r3
 801bb78:	d903      	bls.n	801bb82 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801bb7a:	68bb      	ldr	r3, [r7, #8]
 801bb7c:	689a      	ldr	r2, [r3, #8]
 801bb7e:	68bb      	ldr	r3, [r7, #8]
 801bb80:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801bb82:	69bb      	ldr	r3, [r7, #24]
 801bb84:	015a      	lsls	r2, r3, #5
 801bb86:	69fb      	ldr	r3, [r7, #28]
 801bb88:	4413      	add	r3, r2
 801bb8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bb8e:	691b      	ldr	r3, [r3, #16]
 801bb90:	69ba      	ldr	r2, [r7, #24]
 801bb92:	0151      	lsls	r1, r2, #5
 801bb94:	69fa      	ldr	r2, [r7, #28]
 801bb96:	440a      	add	r2, r1
 801bb98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801bb9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801bba0:	6113      	str	r3, [r2, #16]
 801bba2:	e044      	b.n	801bc2e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801bba4:	68bb      	ldr	r3, [r7, #8]
 801bba6:	691a      	ldr	r2, [r3, #16]
 801bba8:	68bb      	ldr	r3, [r7, #8]
 801bbaa:	689b      	ldr	r3, [r3, #8]
 801bbac:	4413      	add	r3, r2
 801bbae:	1e5a      	subs	r2, r3, #1
 801bbb0:	68bb      	ldr	r3, [r7, #8]
 801bbb2:	689b      	ldr	r3, [r3, #8]
 801bbb4:	fbb2 f3f3 	udiv	r3, r2, r3
 801bbb8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 801bbba:	69bb      	ldr	r3, [r7, #24]
 801bbbc:	015a      	lsls	r2, r3, #5
 801bbbe:	69fb      	ldr	r3, [r7, #28]
 801bbc0:	4413      	add	r3, r2
 801bbc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bbc6:	691a      	ldr	r2, [r3, #16]
 801bbc8:	8afb      	ldrh	r3, [r7, #22]
 801bbca:	04d9      	lsls	r1, r3, #19
 801bbcc:	4b6c      	ldr	r3, [pc, #432]	@ (801bd80 <USB_EPStartXfer+0x2ec>)
 801bbce:	400b      	ands	r3, r1
 801bbd0:	69b9      	ldr	r1, [r7, #24]
 801bbd2:	0148      	lsls	r0, r1, #5
 801bbd4:	69f9      	ldr	r1, [r7, #28]
 801bbd6:	4401      	add	r1, r0
 801bbd8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801bbdc:	4313      	orrs	r3, r2
 801bbde:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 801bbe0:	68bb      	ldr	r3, [r7, #8]
 801bbe2:	791b      	ldrb	r3, [r3, #4]
 801bbe4:	2b01      	cmp	r3, #1
 801bbe6:	d122      	bne.n	801bc2e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801bbe8:	69bb      	ldr	r3, [r7, #24]
 801bbea:	015a      	lsls	r2, r3, #5
 801bbec:	69fb      	ldr	r3, [r7, #28]
 801bbee:	4413      	add	r3, r2
 801bbf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bbf4:	691b      	ldr	r3, [r3, #16]
 801bbf6:	69ba      	ldr	r2, [r7, #24]
 801bbf8:	0151      	lsls	r1, r2, #5
 801bbfa:	69fa      	ldr	r2, [r7, #28]
 801bbfc:	440a      	add	r2, r1
 801bbfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801bc02:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801bc06:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 801bc08:	69bb      	ldr	r3, [r7, #24]
 801bc0a:	015a      	lsls	r2, r3, #5
 801bc0c:	69fb      	ldr	r3, [r7, #28]
 801bc0e:	4413      	add	r3, r2
 801bc10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bc14:	691a      	ldr	r2, [r3, #16]
 801bc16:	8afb      	ldrh	r3, [r7, #22]
 801bc18:	075b      	lsls	r3, r3, #29
 801bc1a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801bc1e:	69b9      	ldr	r1, [r7, #24]
 801bc20:	0148      	lsls	r0, r1, #5
 801bc22:	69f9      	ldr	r1, [r7, #28]
 801bc24:	4401      	add	r1, r0
 801bc26:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801bc2a:	4313      	orrs	r3, r2
 801bc2c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801bc2e:	69bb      	ldr	r3, [r7, #24]
 801bc30:	015a      	lsls	r2, r3, #5
 801bc32:	69fb      	ldr	r3, [r7, #28]
 801bc34:	4413      	add	r3, r2
 801bc36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bc3a:	691a      	ldr	r2, [r3, #16]
 801bc3c:	68bb      	ldr	r3, [r7, #8]
 801bc3e:	691b      	ldr	r3, [r3, #16]
 801bc40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bc44:	69b9      	ldr	r1, [r7, #24]
 801bc46:	0148      	lsls	r0, r1, #5
 801bc48:	69f9      	ldr	r1, [r7, #28]
 801bc4a:	4401      	add	r1, r0
 801bc4c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801bc50:	4313      	orrs	r3, r2
 801bc52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801bc54:	79fb      	ldrb	r3, [r7, #7]
 801bc56:	2b01      	cmp	r3, #1
 801bc58:	d14b      	bne.n	801bcf2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801bc5a:	68bb      	ldr	r3, [r7, #8]
 801bc5c:	69db      	ldr	r3, [r3, #28]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d009      	beq.n	801bc76 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801bc62:	69bb      	ldr	r3, [r7, #24]
 801bc64:	015a      	lsls	r2, r3, #5
 801bc66:	69fb      	ldr	r3, [r7, #28]
 801bc68:	4413      	add	r3, r2
 801bc6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bc6e:	461a      	mov	r2, r3
 801bc70:	68bb      	ldr	r3, [r7, #8]
 801bc72:	69db      	ldr	r3, [r3, #28]
 801bc74:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801bc76:	68bb      	ldr	r3, [r7, #8]
 801bc78:	791b      	ldrb	r3, [r3, #4]
 801bc7a:	2b01      	cmp	r3, #1
 801bc7c:	d128      	bne.n	801bcd0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801bc7e:	69fb      	ldr	r3, [r7, #28]
 801bc80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801bc84:	689b      	ldr	r3, [r3, #8]
 801bc86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d110      	bne.n	801bcb0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801bc8e:	69bb      	ldr	r3, [r7, #24]
 801bc90:	015a      	lsls	r2, r3, #5
 801bc92:	69fb      	ldr	r3, [r7, #28]
 801bc94:	4413      	add	r3, r2
 801bc96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	69ba      	ldr	r2, [r7, #24]
 801bc9e:	0151      	lsls	r1, r2, #5
 801bca0:	69fa      	ldr	r2, [r7, #28]
 801bca2:	440a      	add	r2, r1
 801bca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801bca8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801bcac:	6013      	str	r3, [r2, #0]
 801bcae:	e00f      	b.n	801bcd0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801bcb0:	69bb      	ldr	r3, [r7, #24]
 801bcb2:	015a      	lsls	r2, r3, #5
 801bcb4:	69fb      	ldr	r3, [r7, #28]
 801bcb6:	4413      	add	r3, r2
 801bcb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	69ba      	ldr	r2, [r7, #24]
 801bcc0:	0151      	lsls	r1, r2, #5
 801bcc2:	69fa      	ldr	r2, [r7, #28]
 801bcc4:	440a      	add	r2, r1
 801bcc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801bcca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801bcce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801bcd0:	69bb      	ldr	r3, [r7, #24]
 801bcd2:	015a      	lsls	r2, r3, #5
 801bcd4:	69fb      	ldr	r3, [r7, #28]
 801bcd6:	4413      	add	r3, r2
 801bcd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bcdc:	681b      	ldr	r3, [r3, #0]
 801bcde:	69ba      	ldr	r2, [r7, #24]
 801bce0:	0151      	lsls	r1, r2, #5
 801bce2:	69fa      	ldr	r2, [r7, #28]
 801bce4:	440a      	add	r2, r1
 801bce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801bcea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801bcee:	6013      	str	r3, [r2, #0]
 801bcf0:	e169      	b.n	801bfc6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801bcf2:	69bb      	ldr	r3, [r7, #24]
 801bcf4:	015a      	lsls	r2, r3, #5
 801bcf6:	69fb      	ldr	r3, [r7, #28]
 801bcf8:	4413      	add	r3, r2
 801bcfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	69ba      	ldr	r2, [r7, #24]
 801bd02:	0151      	lsls	r1, r2, #5
 801bd04:	69fa      	ldr	r2, [r7, #28]
 801bd06:	440a      	add	r2, r1
 801bd08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801bd0c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801bd10:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801bd12:	68bb      	ldr	r3, [r7, #8]
 801bd14:	791b      	ldrb	r3, [r3, #4]
 801bd16:	2b01      	cmp	r3, #1
 801bd18:	d015      	beq.n	801bd46 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801bd1a:	68bb      	ldr	r3, [r7, #8]
 801bd1c:	691b      	ldr	r3, [r3, #16]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	f000 8151 	beq.w	801bfc6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801bd24:	69fb      	ldr	r3, [r7, #28]
 801bd26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801bd2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bd2c:	68bb      	ldr	r3, [r7, #8]
 801bd2e:	781b      	ldrb	r3, [r3, #0]
 801bd30:	f003 030f 	and.w	r3, r3, #15
 801bd34:	2101      	movs	r1, #1
 801bd36:	fa01 f303 	lsl.w	r3, r1, r3
 801bd3a:	69f9      	ldr	r1, [r7, #28]
 801bd3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801bd40:	4313      	orrs	r3, r2
 801bd42:	634b      	str	r3, [r1, #52]	@ 0x34
 801bd44:	e13f      	b.n	801bfc6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801bd46:	69fb      	ldr	r3, [r7, #28]
 801bd48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801bd4c:	689b      	ldr	r3, [r3, #8]
 801bd4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d116      	bne.n	801bd84 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801bd56:	69bb      	ldr	r3, [r7, #24]
 801bd58:	015a      	lsls	r2, r3, #5
 801bd5a:	69fb      	ldr	r3, [r7, #28]
 801bd5c:	4413      	add	r3, r2
 801bd5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	69ba      	ldr	r2, [r7, #24]
 801bd66:	0151      	lsls	r1, r2, #5
 801bd68:	69fa      	ldr	r2, [r7, #28]
 801bd6a:	440a      	add	r2, r1
 801bd6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801bd70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801bd74:	6013      	str	r3, [r2, #0]
 801bd76:	e015      	b.n	801bda4 <USB_EPStartXfer+0x310>
 801bd78:	e007ffff 	.word	0xe007ffff
 801bd7c:	fff80000 	.word	0xfff80000
 801bd80:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801bd84:	69bb      	ldr	r3, [r7, #24]
 801bd86:	015a      	lsls	r2, r3, #5
 801bd88:	69fb      	ldr	r3, [r7, #28]
 801bd8a:	4413      	add	r3, r2
 801bd8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	69ba      	ldr	r2, [r7, #24]
 801bd94:	0151      	lsls	r1, r2, #5
 801bd96:	69fa      	ldr	r2, [r7, #28]
 801bd98:	440a      	add	r2, r1
 801bd9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801bd9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801bda2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801bda4:	68bb      	ldr	r3, [r7, #8]
 801bda6:	68d9      	ldr	r1, [r3, #12]
 801bda8:	68bb      	ldr	r3, [r7, #8]
 801bdaa:	781a      	ldrb	r2, [r3, #0]
 801bdac:	68bb      	ldr	r3, [r7, #8]
 801bdae:	691b      	ldr	r3, [r3, #16]
 801bdb0:	b298      	uxth	r0, r3
 801bdb2:	79fb      	ldrb	r3, [r7, #7]
 801bdb4:	9300      	str	r3, [sp, #0]
 801bdb6:	4603      	mov	r3, r0
 801bdb8:	68f8      	ldr	r0, [r7, #12]
 801bdba:	f000 f9b9 	bl	801c130 <USB_WritePacket>
 801bdbe:	e102      	b.n	801bfc6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801bdc0:	69bb      	ldr	r3, [r7, #24]
 801bdc2:	015a      	lsls	r2, r3, #5
 801bdc4:	69fb      	ldr	r3, [r7, #28]
 801bdc6:	4413      	add	r3, r2
 801bdc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801bdcc:	691a      	ldr	r2, [r3, #16]
 801bdce:	69bb      	ldr	r3, [r7, #24]
 801bdd0:	0159      	lsls	r1, r3, #5
 801bdd2:	69fb      	ldr	r3, [r7, #28]
 801bdd4:	440b      	add	r3, r1
 801bdd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801bdda:	4619      	mov	r1, r3
 801bddc:	4b7c      	ldr	r3, [pc, #496]	@ (801bfd0 <USB_EPStartXfer+0x53c>)
 801bdde:	4013      	ands	r3, r2
 801bde0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801bde2:	69bb      	ldr	r3, [r7, #24]
 801bde4:	015a      	lsls	r2, r3, #5
 801bde6:	69fb      	ldr	r3, [r7, #28]
 801bde8:	4413      	add	r3, r2
 801bdea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801bdee:	691a      	ldr	r2, [r3, #16]
 801bdf0:	69bb      	ldr	r3, [r7, #24]
 801bdf2:	0159      	lsls	r1, r3, #5
 801bdf4:	69fb      	ldr	r3, [r7, #28]
 801bdf6:	440b      	add	r3, r1
 801bdf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801bdfc:	4619      	mov	r1, r3
 801bdfe:	4b75      	ldr	r3, [pc, #468]	@ (801bfd4 <USB_EPStartXfer+0x540>)
 801be00:	4013      	ands	r3, r2
 801be02:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801be04:	69bb      	ldr	r3, [r7, #24]
 801be06:	2b00      	cmp	r3, #0
 801be08:	d12f      	bne.n	801be6a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 801be0a:	68bb      	ldr	r3, [r7, #8]
 801be0c:	691b      	ldr	r3, [r3, #16]
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d003      	beq.n	801be1a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 801be12:	68bb      	ldr	r3, [r7, #8]
 801be14:	689a      	ldr	r2, [r3, #8]
 801be16:	68bb      	ldr	r3, [r7, #8]
 801be18:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801be1a:	68bb      	ldr	r3, [r7, #8]
 801be1c:	689a      	ldr	r2, [r3, #8]
 801be1e:	68bb      	ldr	r3, [r7, #8]
 801be20:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801be22:	69bb      	ldr	r3, [r7, #24]
 801be24:	015a      	lsls	r2, r3, #5
 801be26:	69fb      	ldr	r3, [r7, #28]
 801be28:	4413      	add	r3, r2
 801be2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801be2e:	691a      	ldr	r2, [r3, #16]
 801be30:	68bb      	ldr	r3, [r7, #8]
 801be32:	6a1b      	ldr	r3, [r3, #32]
 801be34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801be38:	69b9      	ldr	r1, [r7, #24]
 801be3a:	0148      	lsls	r0, r1, #5
 801be3c:	69f9      	ldr	r1, [r7, #28]
 801be3e:	4401      	add	r1, r0
 801be40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801be44:	4313      	orrs	r3, r2
 801be46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801be48:	69bb      	ldr	r3, [r7, #24]
 801be4a:	015a      	lsls	r2, r3, #5
 801be4c:	69fb      	ldr	r3, [r7, #28]
 801be4e:	4413      	add	r3, r2
 801be50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801be54:	691b      	ldr	r3, [r3, #16]
 801be56:	69ba      	ldr	r2, [r7, #24]
 801be58:	0151      	lsls	r1, r2, #5
 801be5a:	69fa      	ldr	r2, [r7, #28]
 801be5c:	440a      	add	r2, r1
 801be5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801be62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801be66:	6113      	str	r3, [r2, #16]
 801be68:	e05f      	b.n	801bf2a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801be6a:	68bb      	ldr	r3, [r7, #8]
 801be6c:	691b      	ldr	r3, [r3, #16]
 801be6e:	2b00      	cmp	r3, #0
 801be70:	d123      	bne.n	801beba <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801be72:	69bb      	ldr	r3, [r7, #24]
 801be74:	015a      	lsls	r2, r3, #5
 801be76:	69fb      	ldr	r3, [r7, #28]
 801be78:	4413      	add	r3, r2
 801be7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801be7e:	691a      	ldr	r2, [r3, #16]
 801be80:	68bb      	ldr	r3, [r7, #8]
 801be82:	689b      	ldr	r3, [r3, #8]
 801be84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801be88:	69b9      	ldr	r1, [r7, #24]
 801be8a:	0148      	lsls	r0, r1, #5
 801be8c:	69f9      	ldr	r1, [r7, #28]
 801be8e:	4401      	add	r1, r0
 801be90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801be94:	4313      	orrs	r3, r2
 801be96:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801be98:	69bb      	ldr	r3, [r7, #24]
 801be9a:	015a      	lsls	r2, r3, #5
 801be9c:	69fb      	ldr	r3, [r7, #28]
 801be9e:	4413      	add	r3, r2
 801bea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801bea4:	691b      	ldr	r3, [r3, #16]
 801bea6:	69ba      	ldr	r2, [r7, #24]
 801bea8:	0151      	lsls	r1, r2, #5
 801beaa:	69fa      	ldr	r2, [r7, #28]
 801beac:	440a      	add	r2, r1
 801beae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801beb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801beb6:	6113      	str	r3, [r2, #16]
 801beb8:	e037      	b.n	801bf2a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801beba:	68bb      	ldr	r3, [r7, #8]
 801bebc:	691a      	ldr	r2, [r3, #16]
 801bebe:	68bb      	ldr	r3, [r7, #8]
 801bec0:	689b      	ldr	r3, [r3, #8]
 801bec2:	4413      	add	r3, r2
 801bec4:	1e5a      	subs	r2, r3, #1
 801bec6:	68bb      	ldr	r3, [r7, #8]
 801bec8:	689b      	ldr	r3, [r3, #8]
 801beca:	fbb2 f3f3 	udiv	r3, r2, r3
 801bece:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801bed0:	68bb      	ldr	r3, [r7, #8]
 801bed2:	689b      	ldr	r3, [r3, #8]
 801bed4:	8afa      	ldrh	r2, [r7, #22]
 801bed6:	fb03 f202 	mul.w	r2, r3, r2
 801beda:	68bb      	ldr	r3, [r7, #8]
 801bedc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801bede:	69bb      	ldr	r3, [r7, #24]
 801bee0:	015a      	lsls	r2, r3, #5
 801bee2:	69fb      	ldr	r3, [r7, #28]
 801bee4:	4413      	add	r3, r2
 801bee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801beea:	691a      	ldr	r2, [r3, #16]
 801beec:	8afb      	ldrh	r3, [r7, #22]
 801beee:	04d9      	lsls	r1, r3, #19
 801bef0:	4b39      	ldr	r3, [pc, #228]	@ (801bfd8 <USB_EPStartXfer+0x544>)
 801bef2:	400b      	ands	r3, r1
 801bef4:	69b9      	ldr	r1, [r7, #24]
 801bef6:	0148      	lsls	r0, r1, #5
 801bef8:	69f9      	ldr	r1, [r7, #28]
 801befa:	4401      	add	r1, r0
 801befc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801bf00:	4313      	orrs	r3, r2
 801bf02:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801bf04:	69bb      	ldr	r3, [r7, #24]
 801bf06:	015a      	lsls	r2, r3, #5
 801bf08:	69fb      	ldr	r3, [r7, #28]
 801bf0a:	4413      	add	r3, r2
 801bf0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801bf10:	691a      	ldr	r2, [r3, #16]
 801bf12:	68bb      	ldr	r3, [r7, #8]
 801bf14:	6a1b      	ldr	r3, [r3, #32]
 801bf16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bf1a:	69b9      	ldr	r1, [r7, #24]
 801bf1c:	0148      	lsls	r0, r1, #5
 801bf1e:	69f9      	ldr	r1, [r7, #28]
 801bf20:	4401      	add	r1, r0
 801bf22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801bf26:	4313      	orrs	r3, r2
 801bf28:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801bf2a:	79fb      	ldrb	r3, [r7, #7]
 801bf2c:	2b01      	cmp	r3, #1
 801bf2e:	d10d      	bne.n	801bf4c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801bf30:	68bb      	ldr	r3, [r7, #8]
 801bf32:	68db      	ldr	r3, [r3, #12]
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d009      	beq.n	801bf4c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801bf38:	68bb      	ldr	r3, [r7, #8]
 801bf3a:	68d9      	ldr	r1, [r3, #12]
 801bf3c:	69bb      	ldr	r3, [r7, #24]
 801bf3e:	015a      	lsls	r2, r3, #5
 801bf40:	69fb      	ldr	r3, [r7, #28]
 801bf42:	4413      	add	r3, r2
 801bf44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801bf48:	460a      	mov	r2, r1
 801bf4a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801bf4c:	68bb      	ldr	r3, [r7, #8]
 801bf4e:	791b      	ldrb	r3, [r3, #4]
 801bf50:	2b01      	cmp	r3, #1
 801bf52:	d128      	bne.n	801bfa6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801bf54:	69fb      	ldr	r3, [r7, #28]
 801bf56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801bf5a:	689b      	ldr	r3, [r3, #8]
 801bf5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d110      	bne.n	801bf86 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801bf64:	69bb      	ldr	r3, [r7, #24]
 801bf66:	015a      	lsls	r2, r3, #5
 801bf68:	69fb      	ldr	r3, [r7, #28]
 801bf6a:	4413      	add	r3, r2
 801bf6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	69ba      	ldr	r2, [r7, #24]
 801bf74:	0151      	lsls	r1, r2, #5
 801bf76:	69fa      	ldr	r2, [r7, #28]
 801bf78:	440a      	add	r2, r1
 801bf7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801bf7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801bf82:	6013      	str	r3, [r2, #0]
 801bf84:	e00f      	b.n	801bfa6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801bf86:	69bb      	ldr	r3, [r7, #24]
 801bf88:	015a      	lsls	r2, r3, #5
 801bf8a:	69fb      	ldr	r3, [r7, #28]
 801bf8c:	4413      	add	r3, r2
 801bf8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	69ba      	ldr	r2, [r7, #24]
 801bf96:	0151      	lsls	r1, r2, #5
 801bf98:	69fa      	ldr	r2, [r7, #28]
 801bf9a:	440a      	add	r2, r1
 801bf9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801bfa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801bfa4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801bfa6:	69bb      	ldr	r3, [r7, #24]
 801bfa8:	015a      	lsls	r2, r3, #5
 801bfaa:	69fb      	ldr	r3, [r7, #28]
 801bfac:	4413      	add	r3, r2
 801bfae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	69ba      	ldr	r2, [r7, #24]
 801bfb6:	0151      	lsls	r1, r2, #5
 801bfb8:	69fa      	ldr	r2, [r7, #28]
 801bfba:	440a      	add	r2, r1
 801bfbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801bfc0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801bfc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bfc6:	2300      	movs	r3, #0
}
 801bfc8:	4618      	mov	r0, r3
 801bfca:	3720      	adds	r7, #32
 801bfcc:	46bd      	mov	sp, r7
 801bfce:	bd80      	pop	{r7, pc}
 801bfd0:	fff80000 	.word	0xfff80000
 801bfd4:	e007ffff 	.word	0xe007ffff
 801bfd8:	1ff80000 	.word	0x1ff80000

0801bfdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801bfdc:	b480      	push	{r7}
 801bfde:	b087      	sub	sp, #28
 801bfe0:	af00      	add	r7, sp, #0
 801bfe2:	6078      	str	r0, [r7, #4]
 801bfe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801bfe6:	2300      	movs	r3, #0
 801bfe8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801bfea:	2300      	movs	r3, #0
 801bfec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801bff2:	683b      	ldr	r3, [r7, #0]
 801bff4:	785b      	ldrb	r3, [r3, #1]
 801bff6:	2b01      	cmp	r3, #1
 801bff8:	d14a      	bne.n	801c090 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801bffa:	683b      	ldr	r3, [r7, #0]
 801bffc:	781b      	ldrb	r3, [r3, #0]
 801bffe:	015a      	lsls	r2, r3, #5
 801c000:	693b      	ldr	r3, [r7, #16]
 801c002:	4413      	add	r3, r2
 801c004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801c00e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801c012:	f040 8086 	bne.w	801c122 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801c016:	683b      	ldr	r3, [r7, #0]
 801c018:	781b      	ldrb	r3, [r3, #0]
 801c01a:	015a      	lsls	r2, r3, #5
 801c01c:	693b      	ldr	r3, [r7, #16]
 801c01e:	4413      	add	r3, r2
 801c020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	683a      	ldr	r2, [r7, #0]
 801c028:	7812      	ldrb	r2, [r2, #0]
 801c02a:	0151      	lsls	r1, r2, #5
 801c02c:	693a      	ldr	r2, [r7, #16]
 801c02e:	440a      	add	r2, r1
 801c030:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801c034:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801c038:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801c03a:	683b      	ldr	r3, [r7, #0]
 801c03c:	781b      	ldrb	r3, [r3, #0]
 801c03e:	015a      	lsls	r2, r3, #5
 801c040:	693b      	ldr	r3, [r7, #16]
 801c042:	4413      	add	r3, r2
 801c044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	683a      	ldr	r2, [r7, #0]
 801c04c:	7812      	ldrb	r2, [r2, #0]
 801c04e:	0151      	lsls	r1, r2, #5
 801c050:	693a      	ldr	r2, [r7, #16]
 801c052:	440a      	add	r2, r1
 801c054:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801c058:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c05c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	3301      	adds	r3, #1
 801c062:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	f242 7210 	movw	r2, #10000	@ 0x2710
 801c06a:	4293      	cmp	r3, r2
 801c06c:	d902      	bls.n	801c074 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801c06e:	2301      	movs	r3, #1
 801c070:	75fb      	strb	r3, [r7, #23]
          break;
 801c072:	e056      	b.n	801c122 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801c074:	683b      	ldr	r3, [r7, #0]
 801c076:	781b      	ldrb	r3, [r3, #0]
 801c078:	015a      	lsls	r2, r3, #5
 801c07a:	693b      	ldr	r3, [r7, #16]
 801c07c:	4413      	add	r3, r2
 801c07e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c082:	681b      	ldr	r3, [r3, #0]
 801c084:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801c088:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801c08c:	d0e7      	beq.n	801c05e <USB_EPStopXfer+0x82>
 801c08e:	e048      	b.n	801c122 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801c090:	683b      	ldr	r3, [r7, #0]
 801c092:	781b      	ldrb	r3, [r3, #0]
 801c094:	015a      	lsls	r2, r3, #5
 801c096:	693b      	ldr	r3, [r7, #16]
 801c098:	4413      	add	r3, r2
 801c09a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801c0a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801c0a8:	d13b      	bne.n	801c122 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801c0aa:	683b      	ldr	r3, [r7, #0]
 801c0ac:	781b      	ldrb	r3, [r3, #0]
 801c0ae:	015a      	lsls	r2, r3, #5
 801c0b0:	693b      	ldr	r3, [r7, #16]
 801c0b2:	4413      	add	r3, r2
 801c0b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	683a      	ldr	r2, [r7, #0]
 801c0bc:	7812      	ldrb	r2, [r2, #0]
 801c0be:	0151      	lsls	r1, r2, #5
 801c0c0:	693a      	ldr	r2, [r7, #16]
 801c0c2:	440a      	add	r2, r1
 801c0c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801c0c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801c0cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801c0ce:	683b      	ldr	r3, [r7, #0]
 801c0d0:	781b      	ldrb	r3, [r3, #0]
 801c0d2:	015a      	lsls	r2, r3, #5
 801c0d4:	693b      	ldr	r3, [r7, #16]
 801c0d6:	4413      	add	r3, r2
 801c0d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	683a      	ldr	r2, [r7, #0]
 801c0e0:	7812      	ldrb	r2, [r2, #0]
 801c0e2:	0151      	lsls	r1, r2, #5
 801c0e4:	693a      	ldr	r2, [r7, #16]
 801c0e6:	440a      	add	r2, r1
 801c0e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801c0ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c0f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	3301      	adds	r3, #1
 801c0f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 801c0fe:	4293      	cmp	r3, r2
 801c100:	d902      	bls.n	801c108 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801c102:	2301      	movs	r3, #1
 801c104:	75fb      	strb	r3, [r7, #23]
          break;
 801c106:	e00c      	b.n	801c122 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801c108:	683b      	ldr	r3, [r7, #0]
 801c10a:	781b      	ldrb	r3, [r3, #0]
 801c10c:	015a      	lsls	r2, r3, #5
 801c10e:	693b      	ldr	r3, [r7, #16]
 801c110:	4413      	add	r3, r2
 801c112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801c11c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801c120:	d0e7      	beq.n	801c0f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801c122:	7dfb      	ldrb	r3, [r7, #23]
}
 801c124:	4618      	mov	r0, r3
 801c126:	371c      	adds	r7, #28
 801c128:	46bd      	mov	sp, r7
 801c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c12e:	4770      	bx	lr

0801c130 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801c130:	b480      	push	{r7}
 801c132:	b089      	sub	sp, #36	@ 0x24
 801c134:	af00      	add	r7, sp, #0
 801c136:	60f8      	str	r0, [r7, #12]
 801c138:	60b9      	str	r1, [r7, #8]
 801c13a:	4611      	mov	r1, r2
 801c13c:	461a      	mov	r2, r3
 801c13e:	460b      	mov	r3, r1
 801c140:	71fb      	strb	r3, [r7, #7]
 801c142:	4613      	mov	r3, r2
 801c144:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c146:	68fb      	ldr	r3, [r7, #12]
 801c148:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801c14a:	68bb      	ldr	r3, [r7, #8]
 801c14c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801c14e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801c152:	2b00      	cmp	r3, #0
 801c154:	d123      	bne.n	801c19e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801c156:	88bb      	ldrh	r3, [r7, #4]
 801c158:	3303      	adds	r3, #3
 801c15a:	089b      	lsrs	r3, r3, #2
 801c15c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801c15e:	2300      	movs	r3, #0
 801c160:	61bb      	str	r3, [r7, #24]
 801c162:	e018      	b.n	801c196 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801c164:	79fb      	ldrb	r3, [r7, #7]
 801c166:	031a      	lsls	r2, r3, #12
 801c168:	697b      	ldr	r3, [r7, #20]
 801c16a:	4413      	add	r3, r2
 801c16c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c170:	461a      	mov	r2, r3
 801c172:	69fb      	ldr	r3, [r7, #28]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	6013      	str	r3, [r2, #0]
      pSrc++;
 801c178:	69fb      	ldr	r3, [r7, #28]
 801c17a:	3301      	adds	r3, #1
 801c17c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801c17e:	69fb      	ldr	r3, [r7, #28]
 801c180:	3301      	adds	r3, #1
 801c182:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801c184:	69fb      	ldr	r3, [r7, #28]
 801c186:	3301      	adds	r3, #1
 801c188:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801c18a:	69fb      	ldr	r3, [r7, #28]
 801c18c:	3301      	adds	r3, #1
 801c18e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801c190:	69bb      	ldr	r3, [r7, #24]
 801c192:	3301      	adds	r3, #1
 801c194:	61bb      	str	r3, [r7, #24]
 801c196:	69ba      	ldr	r2, [r7, #24]
 801c198:	693b      	ldr	r3, [r7, #16]
 801c19a:	429a      	cmp	r2, r3
 801c19c:	d3e2      	bcc.n	801c164 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801c19e:	2300      	movs	r3, #0
}
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	3724      	adds	r7, #36	@ 0x24
 801c1a4:	46bd      	mov	sp, r7
 801c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1aa:	4770      	bx	lr

0801c1ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801c1ac:	b480      	push	{r7}
 801c1ae:	b08b      	sub	sp, #44	@ 0x2c
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	60f8      	str	r0, [r7, #12]
 801c1b4:	60b9      	str	r1, [r7, #8]
 801c1b6:	4613      	mov	r3, r2
 801c1b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801c1be:	68bb      	ldr	r3, [r7, #8]
 801c1c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801c1c2:	88fb      	ldrh	r3, [r7, #6]
 801c1c4:	089b      	lsrs	r3, r3, #2
 801c1c6:	b29b      	uxth	r3, r3
 801c1c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801c1ca:	88fb      	ldrh	r3, [r7, #6]
 801c1cc:	f003 0303 	and.w	r3, r3, #3
 801c1d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	623b      	str	r3, [r7, #32]
 801c1d6:	e014      	b.n	801c202 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801c1d8:	69bb      	ldr	r3, [r7, #24]
 801c1da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c1de:	681a      	ldr	r2, [r3, #0]
 801c1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1e2:	601a      	str	r2, [r3, #0]
    pDest++;
 801c1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1e6:	3301      	adds	r3, #1
 801c1e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801c1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1ec:	3301      	adds	r3, #1
 801c1ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1f2:	3301      	adds	r3, #1
 801c1f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801c1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1f8:	3301      	adds	r3, #1
 801c1fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801c1fc:	6a3b      	ldr	r3, [r7, #32]
 801c1fe:	3301      	adds	r3, #1
 801c200:	623b      	str	r3, [r7, #32]
 801c202:	6a3a      	ldr	r2, [r7, #32]
 801c204:	697b      	ldr	r3, [r7, #20]
 801c206:	429a      	cmp	r2, r3
 801c208:	d3e6      	bcc.n	801c1d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801c20a:	8bfb      	ldrh	r3, [r7, #30]
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d01e      	beq.n	801c24e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801c210:	2300      	movs	r3, #0
 801c212:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801c214:	69bb      	ldr	r3, [r7, #24]
 801c216:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c21a:	461a      	mov	r2, r3
 801c21c:	f107 0310 	add.w	r3, r7, #16
 801c220:	6812      	ldr	r2, [r2, #0]
 801c222:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801c224:	693a      	ldr	r2, [r7, #16]
 801c226:	6a3b      	ldr	r3, [r7, #32]
 801c228:	b2db      	uxtb	r3, r3
 801c22a:	00db      	lsls	r3, r3, #3
 801c22c:	fa22 f303 	lsr.w	r3, r2, r3
 801c230:	b2da      	uxtb	r2, r3
 801c232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c234:	701a      	strb	r2, [r3, #0]
      i++;
 801c236:	6a3b      	ldr	r3, [r7, #32]
 801c238:	3301      	adds	r3, #1
 801c23a:	623b      	str	r3, [r7, #32]
      pDest++;
 801c23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c23e:	3301      	adds	r3, #1
 801c240:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801c242:	8bfb      	ldrh	r3, [r7, #30]
 801c244:	3b01      	subs	r3, #1
 801c246:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801c248:	8bfb      	ldrh	r3, [r7, #30]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d1ea      	bne.n	801c224 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801c24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801c250:	4618      	mov	r0, r3
 801c252:	372c      	adds	r7, #44	@ 0x2c
 801c254:	46bd      	mov	sp, r7
 801c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c25a:	4770      	bx	lr

0801c25c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801c25c:	b480      	push	{r7}
 801c25e:	b085      	sub	sp, #20
 801c260:	af00      	add	r7, sp, #0
 801c262:	6078      	str	r0, [r7, #4]
 801c264:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801c26a:	683b      	ldr	r3, [r7, #0]
 801c26c:	781b      	ldrb	r3, [r3, #0]
 801c26e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801c270:	683b      	ldr	r3, [r7, #0]
 801c272:	785b      	ldrb	r3, [r3, #1]
 801c274:	2b01      	cmp	r3, #1
 801c276:	d12c      	bne.n	801c2d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801c278:	68bb      	ldr	r3, [r7, #8]
 801c27a:	015a      	lsls	r2, r3, #5
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	4413      	add	r3, r2
 801c280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	2b00      	cmp	r3, #0
 801c288:	db12      	blt.n	801c2b0 <USB_EPSetStall+0x54>
 801c28a:	68bb      	ldr	r3, [r7, #8]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d00f      	beq.n	801c2b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801c290:	68bb      	ldr	r3, [r7, #8]
 801c292:	015a      	lsls	r2, r3, #5
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	4413      	add	r3, r2
 801c298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	68ba      	ldr	r2, [r7, #8]
 801c2a0:	0151      	lsls	r1, r2, #5
 801c2a2:	68fa      	ldr	r2, [r7, #12]
 801c2a4:	440a      	add	r2, r1
 801c2a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801c2aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801c2ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801c2b0:	68bb      	ldr	r3, [r7, #8]
 801c2b2:	015a      	lsls	r2, r3, #5
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	4413      	add	r3, r2
 801c2b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	68ba      	ldr	r2, [r7, #8]
 801c2c0:	0151      	lsls	r1, r2, #5
 801c2c2:	68fa      	ldr	r2, [r7, #12]
 801c2c4:	440a      	add	r2, r1
 801c2c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801c2ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801c2ce:	6013      	str	r3, [r2, #0]
 801c2d0:	e02b      	b.n	801c32a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801c2d2:	68bb      	ldr	r3, [r7, #8]
 801c2d4:	015a      	lsls	r2, r3, #5
 801c2d6:	68fb      	ldr	r3, [r7, #12]
 801c2d8:	4413      	add	r3, r2
 801c2da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	db12      	blt.n	801c30a <USB_EPSetStall+0xae>
 801c2e4:	68bb      	ldr	r3, [r7, #8]
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d00f      	beq.n	801c30a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801c2ea:	68bb      	ldr	r3, [r7, #8]
 801c2ec:	015a      	lsls	r2, r3, #5
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	4413      	add	r3, r2
 801c2f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	68ba      	ldr	r2, [r7, #8]
 801c2fa:	0151      	lsls	r1, r2, #5
 801c2fc:	68fa      	ldr	r2, [r7, #12]
 801c2fe:	440a      	add	r2, r1
 801c300:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801c304:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801c308:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801c30a:	68bb      	ldr	r3, [r7, #8]
 801c30c:	015a      	lsls	r2, r3, #5
 801c30e:	68fb      	ldr	r3, [r7, #12]
 801c310:	4413      	add	r3, r2
 801c312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	68ba      	ldr	r2, [r7, #8]
 801c31a:	0151      	lsls	r1, r2, #5
 801c31c:	68fa      	ldr	r2, [r7, #12]
 801c31e:	440a      	add	r2, r1
 801c320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801c324:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801c328:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c32a:	2300      	movs	r3, #0
}
 801c32c:	4618      	mov	r0, r3
 801c32e:	3714      	adds	r7, #20
 801c330:	46bd      	mov	sp, r7
 801c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c336:	4770      	bx	lr

0801c338 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801c338:	b480      	push	{r7}
 801c33a:	b085      	sub	sp, #20
 801c33c:	af00      	add	r7, sp, #0
 801c33e:	6078      	str	r0, [r7, #4]
 801c340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801c346:	683b      	ldr	r3, [r7, #0]
 801c348:	781b      	ldrb	r3, [r3, #0]
 801c34a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801c34c:	683b      	ldr	r3, [r7, #0]
 801c34e:	785b      	ldrb	r3, [r3, #1]
 801c350:	2b01      	cmp	r3, #1
 801c352:	d128      	bne.n	801c3a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801c354:	68bb      	ldr	r3, [r7, #8]
 801c356:	015a      	lsls	r2, r3, #5
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	4413      	add	r3, r2
 801c35c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	68ba      	ldr	r2, [r7, #8]
 801c364:	0151      	lsls	r1, r2, #5
 801c366:	68fa      	ldr	r2, [r7, #12]
 801c368:	440a      	add	r2, r1
 801c36a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801c36e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801c372:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801c374:	683b      	ldr	r3, [r7, #0]
 801c376:	791b      	ldrb	r3, [r3, #4]
 801c378:	2b03      	cmp	r3, #3
 801c37a:	d003      	beq.n	801c384 <USB_EPClearStall+0x4c>
 801c37c:	683b      	ldr	r3, [r7, #0]
 801c37e:	791b      	ldrb	r3, [r3, #4]
 801c380:	2b02      	cmp	r3, #2
 801c382:	d138      	bne.n	801c3f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801c384:	68bb      	ldr	r3, [r7, #8]
 801c386:	015a      	lsls	r2, r3, #5
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	4413      	add	r3, r2
 801c38c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	68ba      	ldr	r2, [r7, #8]
 801c394:	0151      	lsls	r1, r2, #5
 801c396:	68fa      	ldr	r2, [r7, #12]
 801c398:	440a      	add	r2, r1
 801c39a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801c39e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801c3a2:	6013      	str	r3, [r2, #0]
 801c3a4:	e027      	b.n	801c3f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801c3a6:	68bb      	ldr	r3, [r7, #8]
 801c3a8:	015a      	lsls	r2, r3, #5
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	4413      	add	r3, r2
 801c3ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	68ba      	ldr	r2, [r7, #8]
 801c3b6:	0151      	lsls	r1, r2, #5
 801c3b8:	68fa      	ldr	r2, [r7, #12]
 801c3ba:	440a      	add	r2, r1
 801c3bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801c3c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801c3c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801c3c6:	683b      	ldr	r3, [r7, #0]
 801c3c8:	791b      	ldrb	r3, [r3, #4]
 801c3ca:	2b03      	cmp	r3, #3
 801c3cc:	d003      	beq.n	801c3d6 <USB_EPClearStall+0x9e>
 801c3ce:	683b      	ldr	r3, [r7, #0]
 801c3d0:	791b      	ldrb	r3, [r3, #4]
 801c3d2:	2b02      	cmp	r3, #2
 801c3d4:	d10f      	bne.n	801c3f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801c3d6:	68bb      	ldr	r3, [r7, #8]
 801c3d8:	015a      	lsls	r2, r3, #5
 801c3da:	68fb      	ldr	r3, [r7, #12]
 801c3dc:	4413      	add	r3, r2
 801c3de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c3e2:	681b      	ldr	r3, [r3, #0]
 801c3e4:	68ba      	ldr	r2, [r7, #8]
 801c3e6:	0151      	lsls	r1, r2, #5
 801c3e8:	68fa      	ldr	r2, [r7, #12]
 801c3ea:	440a      	add	r2, r1
 801c3ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801c3f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801c3f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801c3f6:	2300      	movs	r3, #0
}
 801c3f8:	4618      	mov	r0, r3
 801c3fa:	3714      	adds	r7, #20
 801c3fc:	46bd      	mov	sp, r7
 801c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c402:	4770      	bx	lr

0801c404 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801c404:	b480      	push	{r7}
 801c406:	b085      	sub	sp, #20
 801c408:	af00      	add	r7, sp, #0
 801c40a:	6078      	str	r0, [r7, #4]
 801c40c:	460b      	mov	r3, r1
 801c40e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	68fa      	ldr	r2, [r7, #12]
 801c41e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801c422:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801c426:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801c428:	68fb      	ldr	r3, [r7, #12]
 801c42a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c42e:	681a      	ldr	r2, [r3, #0]
 801c430:	78fb      	ldrb	r3, [r7, #3]
 801c432:	011b      	lsls	r3, r3, #4
 801c434:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 801c438:	68f9      	ldr	r1, [r7, #12]
 801c43a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801c43e:	4313      	orrs	r3, r2
 801c440:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801c442:	2300      	movs	r3, #0
}
 801c444:	4618      	mov	r0, r3
 801c446:	3714      	adds	r7, #20
 801c448:	46bd      	mov	sp, r7
 801c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c44e:	4770      	bx	lr

0801c450 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801c450:	b480      	push	{r7}
 801c452:	b085      	sub	sp, #20
 801c454:	af00      	add	r7, sp, #0
 801c456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	68fa      	ldr	r2, [r7, #12]
 801c466:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801c46a:	f023 0303 	bic.w	r3, r3, #3
 801c46e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c476:	685b      	ldr	r3, [r3, #4]
 801c478:	68fa      	ldr	r2, [r7, #12]
 801c47a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801c47e:	f023 0302 	bic.w	r3, r3, #2
 801c482:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801c484:	2300      	movs	r3, #0
}
 801c486:	4618      	mov	r0, r3
 801c488:	3714      	adds	r7, #20
 801c48a:	46bd      	mov	sp, r7
 801c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c490:	4770      	bx	lr

0801c492 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801c492:	b480      	push	{r7}
 801c494:	b085      	sub	sp, #20
 801c496:	af00      	add	r7, sp, #0
 801c498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	68fa      	ldr	r2, [r7, #12]
 801c4a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801c4ac:	f023 0303 	bic.w	r3, r3, #3
 801c4b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c4b8:	685b      	ldr	r3, [r3, #4]
 801c4ba:	68fa      	ldr	r2, [r7, #12]
 801c4bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801c4c0:	f043 0302 	orr.w	r3, r3, #2
 801c4c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801c4c6:	2300      	movs	r3, #0
}
 801c4c8:	4618      	mov	r0, r3
 801c4ca:	3714      	adds	r7, #20
 801c4cc:	46bd      	mov	sp, r7
 801c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4d2:	4770      	bx	lr

0801c4d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801c4d4:	b480      	push	{r7}
 801c4d6:	b085      	sub	sp, #20
 801c4d8:	af00      	add	r7, sp, #0
 801c4da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	695b      	ldr	r3, [r3, #20]
 801c4e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	699b      	ldr	r3, [r3, #24]
 801c4e6:	68fa      	ldr	r2, [r7, #12]
 801c4e8:	4013      	ands	r3, r2
 801c4ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801c4ec:	68fb      	ldr	r3, [r7, #12]
}
 801c4ee:	4618      	mov	r0, r3
 801c4f0:	3714      	adds	r7, #20
 801c4f2:	46bd      	mov	sp, r7
 801c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4f8:	4770      	bx	lr

0801c4fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801c4fa:	b480      	push	{r7}
 801c4fc:	b085      	sub	sp, #20
 801c4fe:	af00      	add	r7, sp, #0
 801c500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c50c:	699b      	ldr	r3, [r3, #24]
 801c50e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c516:	69db      	ldr	r3, [r3, #28]
 801c518:	68ba      	ldr	r2, [r7, #8]
 801c51a:	4013      	ands	r3, r2
 801c51c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801c51e:	68bb      	ldr	r3, [r7, #8]
 801c520:	0c1b      	lsrs	r3, r3, #16
}
 801c522:	4618      	mov	r0, r3
 801c524:	3714      	adds	r7, #20
 801c526:	46bd      	mov	sp, r7
 801c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c52c:	4770      	bx	lr

0801c52e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801c52e:	b480      	push	{r7}
 801c530:	b085      	sub	sp, #20
 801c532:	af00      	add	r7, sp, #0
 801c534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801c53a:	68fb      	ldr	r3, [r7, #12]
 801c53c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c540:	699b      	ldr	r3, [r3, #24]
 801c542:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c54a:	69db      	ldr	r3, [r3, #28]
 801c54c:	68ba      	ldr	r2, [r7, #8]
 801c54e:	4013      	ands	r3, r2
 801c550:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801c552:	68bb      	ldr	r3, [r7, #8]
 801c554:	b29b      	uxth	r3, r3
}
 801c556:	4618      	mov	r0, r3
 801c558:	3714      	adds	r7, #20
 801c55a:	46bd      	mov	sp, r7
 801c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c560:	4770      	bx	lr

0801c562 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801c562:	b480      	push	{r7}
 801c564:	b085      	sub	sp, #20
 801c566:	af00      	add	r7, sp, #0
 801c568:	6078      	str	r0, [r7, #4]
 801c56a:	460b      	mov	r3, r1
 801c56c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801c572:	78fb      	ldrb	r3, [r7, #3]
 801c574:	015a      	lsls	r2, r3, #5
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	4413      	add	r3, r2
 801c57a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c57e:	689b      	ldr	r3, [r3, #8]
 801c580:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c588:	695b      	ldr	r3, [r3, #20]
 801c58a:	68ba      	ldr	r2, [r7, #8]
 801c58c:	4013      	ands	r3, r2
 801c58e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801c590:	68bb      	ldr	r3, [r7, #8]
}
 801c592:	4618      	mov	r0, r3
 801c594:	3714      	adds	r7, #20
 801c596:	46bd      	mov	sp, r7
 801c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c59c:	4770      	bx	lr

0801c59e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801c59e:	b480      	push	{r7}
 801c5a0:	b087      	sub	sp, #28
 801c5a2:	af00      	add	r7, sp, #0
 801c5a4:	6078      	str	r0, [r7, #4]
 801c5a6:	460b      	mov	r3, r1
 801c5a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801c5ae:	697b      	ldr	r3, [r7, #20]
 801c5b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c5b4:	691b      	ldr	r3, [r3, #16]
 801c5b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801c5b8:	697b      	ldr	r3, [r7, #20]
 801c5ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c5be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c5c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801c5c2:	78fb      	ldrb	r3, [r7, #3]
 801c5c4:	f003 030f 	and.w	r3, r3, #15
 801c5c8:	68fa      	ldr	r2, [r7, #12]
 801c5ca:	fa22 f303 	lsr.w	r3, r2, r3
 801c5ce:	01db      	lsls	r3, r3, #7
 801c5d0:	b2db      	uxtb	r3, r3
 801c5d2:	693a      	ldr	r2, [r7, #16]
 801c5d4:	4313      	orrs	r3, r2
 801c5d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801c5d8:	78fb      	ldrb	r3, [r7, #3]
 801c5da:	015a      	lsls	r2, r3, #5
 801c5dc:	697b      	ldr	r3, [r7, #20]
 801c5de:	4413      	add	r3, r2
 801c5e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c5e4:	689b      	ldr	r3, [r3, #8]
 801c5e6:	693a      	ldr	r2, [r7, #16]
 801c5e8:	4013      	ands	r3, r2
 801c5ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801c5ec:	68bb      	ldr	r3, [r7, #8]
}
 801c5ee:	4618      	mov	r0, r3
 801c5f0:	371c      	adds	r7, #28
 801c5f2:	46bd      	mov	sp, r7
 801c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5f8:	4770      	bx	lr

0801c5fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801c5fa:	b480      	push	{r7}
 801c5fc:	b083      	sub	sp, #12
 801c5fe:	af00      	add	r7, sp, #0
 801c600:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	695b      	ldr	r3, [r3, #20]
 801c606:	f003 0301 	and.w	r3, r3, #1
}
 801c60a:	4618      	mov	r0, r3
 801c60c:	370c      	adds	r7, #12
 801c60e:	46bd      	mov	sp, r7
 801c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c614:	4770      	bx	lr
	...

0801c618 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 801c618:	b480      	push	{r7}
 801c61a:	b085      	sub	sp, #20
 801c61c:	af00      	add	r7, sp, #0
 801c61e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c62a:	681a      	ldr	r2, [r3, #0]
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801c632:	4619      	mov	r1, r3
 801c634:	4b09      	ldr	r3, [pc, #36]	@ (801c65c <USB_ActivateSetup+0x44>)
 801c636:	4013      	ands	r3, r2
 801c638:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801c640:	685b      	ldr	r3, [r3, #4]
 801c642:	68fa      	ldr	r2, [r7, #12]
 801c644:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801c648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c64c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801c64e:	2300      	movs	r3, #0
}
 801c650:	4618      	mov	r0, r3
 801c652:	3714      	adds	r7, #20
 801c654:	46bd      	mov	sp, r7
 801c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c65a:	4770      	bx	lr
 801c65c:	fffff800 	.word	0xfffff800

0801c660 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 801c660:	b480      	push	{r7}
 801c662:	b087      	sub	sp, #28
 801c664:	af00      	add	r7, sp, #0
 801c666:	60f8      	str	r0, [r7, #12]
 801c668:	460b      	mov	r3, r1
 801c66a:	607a      	str	r2, [r7, #4]
 801c66c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	333c      	adds	r3, #60	@ 0x3c
 801c676:	3304      	adds	r3, #4
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801c67c:	693b      	ldr	r3, [r7, #16]
 801c67e:	4a26      	ldr	r2, [pc, #152]	@ (801c718 <USB_EP0_OutStart+0xb8>)
 801c680:	4293      	cmp	r3, r2
 801c682:	d90a      	bls.n	801c69a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801c684:	697b      	ldr	r3, [r7, #20]
 801c686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c68a:	681b      	ldr	r3, [r3, #0]
 801c68c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801c690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801c694:	d101      	bne.n	801c69a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801c696:	2300      	movs	r3, #0
 801c698:	e037      	b.n	801c70a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801c69a:	697b      	ldr	r3, [r7, #20]
 801c69c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c6a0:	461a      	mov	r2, r3
 801c6a2:	2300      	movs	r3, #0
 801c6a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801c6a6:	697b      	ldr	r3, [r7, #20]
 801c6a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c6ac:	691b      	ldr	r3, [r3, #16]
 801c6ae:	697a      	ldr	r2, [r7, #20]
 801c6b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801c6b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c6b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801c6ba:	697b      	ldr	r3, [r7, #20]
 801c6bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c6c0:	691b      	ldr	r3, [r3, #16]
 801c6c2:	697a      	ldr	r2, [r7, #20]
 801c6c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801c6c8:	f043 0318 	orr.w	r3, r3, #24
 801c6cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801c6ce:	697b      	ldr	r3, [r7, #20]
 801c6d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c6d4:	691b      	ldr	r3, [r3, #16]
 801c6d6:	697a      	ldr	r2, [r7, #20]
 801c6d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801c6dc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801c6e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801c6e2:	7afb      	ldrb	r3, [r7, #11]
 801c6e4:	2b01      	cmp	r3, #1
 801c6e6:	d10f      	bne.n	801c708 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801c6e8:	697b      	ldr	r3, [r7, #20]
 801c6ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c6ee:	461a      	mov	r2, r3
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801c6f4:	697b      	ldr	r3, [r7, #20]
 801c6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	697a      	ldr	r2, [r7, #20]
 801c6fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801c702:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801c706:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c708:	2300      	movs	r3, #0
}
 801c70a:	4618      	mov	r0, r3
 801c70c:	371c      	adds	r7, #28
 801c70e:	46bd      	mov	sp, r7
 801c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c714:	4770      	bx	lr
 801c716:	bf00      	nop
 801c718:	4f54300a 	.word	0x4f54300a

0801c71c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801c71c:	b480      	push	{r7}
 801c71e:	b085      	sub	sp, #20
 801c720:	af00      	add	r7, sp, #0
 801c722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801c724:	2300      	movs	r3, #0
 801c726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801c728:	68fb      	ldr	r3, [r7, #12]
 801c72a:	3301      	adds	r3, #1
 801c72c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801c734:	d901      	bls.n	801c73a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801c736:	2303      	movs	r3, #3
 801c738:	e01b      	b.n	801c772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	691b      	ldr	r3, [r3, #16]
 801c73e:	2b00      	cmp	r3, #0
 801c740:	daf2      	bge.n	801c728 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801c742:	2300      	movs	r3, #0
 801c744:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	691b      	ldr	r3, [r3, #16]
 801c74a:	f043 0201 	orr.w	r2, r3, #1
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	3301      	adds	r3, #1
 801c756:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801c758:	68fb      	ldr	r3, [r7, #12]
 801c75a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801c75e:	d901      	bls.n	801c764 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801c760:	2303      	movs	r3, #3
 801c762:	e006      	b.n	801c772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	691b      	ldr	r3, [r3, #16]
 801c768:	f003 0301 	and.w	r3, r3, #1
 801c76c:	2b01      	cmp	r3, #1
 801c76e:	d0f0      	beq.n	801c752 <USB_CoreReset+0x36>

  return HAL_OK;
 801c770:	2300      	movs	r3, #0
}
 801c772:	4618      	mov	r0, r3
 801c774:	3714      	adds	r7, #20
 801c776:	46bd      	mov	sp, r7
 801c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c77c:	4770      	bx	lr
	...

0801c780 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c780:	b580      	push	{r7, lr}
 801c782:	b084      	sub	sp, #16
 801c784:	af00      	add	r7, sp, #0
 801c786:	6078      	str	r0, [r7, #4]
 801c788:	460b      	mov	r3, r1
 801c78a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801c78c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 801c790:	f006 fd30 	bl	80231f4 <USBD_static_malloc>
 801c794:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d109      	bne.n	801c7b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	32b0      	adds	r2, #176	@ 0xb0
 801c7a6:	2100      	movs	r1, #0
 801c7a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801c7ac:	2302      	movs	r3, #2
 801c7ae:	e0d4      	b.n	801c95a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801c7b0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801c7b4:	2100      	movs	r1, #0
 801c7b6:	68f8      	ldr	r0, [r7, #12]
 801c7b8:	f008 fe23 	bl	8025402 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	32b0      	adds	r2, #176	@ 0xb0
 801c7c6:	68f9      	ldr	r1, [r7, #12]
 801c7c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	32b0      	adds	r2, #176	@ 0xb0
 801c7d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	7c1b      	ldrb	r3, [r3, #16]
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d138      	bne.n	801c85a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801c7e8:	4b5e      	ldr	r3, [pc, #376]	@ (801c964 <USBD_CDC_Init+0x1e4>)
 801c7ea:	7819      	ldrb	r1, [r3, #0]
 801c7ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801c7f0:	2202      	movs	r2, #2
 801c7f2:	6878      	ldr	r0, [r7, #4]
 801c7f4:	f006 fbdb 	bl	8022fae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801c7f8:	4b5a      	ldr	r3, [pc, #360]	@ (801c964 <USBD_CDC_Init+0x1e4>)
 801c7fa:	781b      	ldrb	r3, [r3, #0]
 801c7fc:	f003 020f 	and.w	r2, r3, #15
 801c800:	6879      	ldr	r1, [r7, #4]
 801c802:	4613      	mov	r3, r2
 801c804:	009b      	lsls	r3, r3, #2
 801c806:	4413      	add	r3, r2
 801c808:	009b      	lsls	r3, r3, #2
 801c80a:	440b      	add	r3, r1
 801c80c:	3324      	adds	r3, #36	@ 0x24
 801c80e:	2201      	movs	r2, #1
 801c810:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801c812:	4b55      	ldr	r3, [pc, #340]	@ (801c968 <USBD_CDC_Init+0x1e8>)
 801c814:	7819      	ldrb	r1, [r3, #0]
 801c816:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801c81a:	2202      	movs	r2, #2
 801c81c:	6878      	ldr	r0, [r7, #4]
 801c81e:	f006 fbc6 	bl	8022fae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801c822:	4b51      	ldr	r3, [pc, #324]	@ (801c968 <USBD_CDC_Init+0x1e8>)
 801c824:	781b      	ldrb	r3, [r3, #0]
 801c826:	f003 020f 	and.w	r2, r3, #15
 801c82a:	6879      	ldr	r1, [r7, #4]
 801c82c:	4613      	mov	r3, r2
 801c82e:	009b      	lsls	r3, r3, #2
 801c830:	4413      	add	r3, r2
 801c832:	009b      	lsls	r3, r3, #2
 801c834:	440b      	add	r3, r1
 801c836:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801c83a:	2201      	movs	r2, #1
 801c83c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801c83e:	4b4b      	ldr	r3, [pc, #300]	@ (801c96c <USBD_CDC_Init+0x1ec>)
 801c840:	781b      	ldrb	r3, [r3, #0]
 801c842:	f003 020f 	and.w	r2, r3, #15
 801c846:	6879      	ldr	r1, [r7, #4]
 801c848:	4613      	mov	r3, r2
 801c84a:	009b      	lsls	r3, r3, #2
 801c84c:	4413      	add	r3, r2
 801c84e:	009b      	lsls	r3, r3, #2
 801c850:	440b      	add	r3, r1
 801c852:	3326      	adds	r3, #38	@ 0x26
 801c854:	2210      	movs	r2, #16
 801c856:	801a      	strh	r2, [r3, #0]
 801c858:	e035      	b.n	801c8c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801c85a:	4b42      	ldr	r3, [pc, #264]	@ (801c964 <USBD_CDC_Init+0x1e4>)
 801c85c:	7819      	ldrb	r1, [r3, #0]
 801c85e:	2340      	movs	r3, #64	@ 0x40
 801c860:	2202      	movs	r2, #2
 801c862:	6878      	ldr	r0, [r7, #4]
 801c864:	f006 fba3 	bl	8022fae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801c868:	4b3e      	ldr	r3, [pc, #248]	@ (801c964 <USBD_CDC_Init+0x1e4>)
 801c86a:	781b      	ldrb	r3, [r3, #0]
 801c86c:	f003 020f 	and.w	r2, r3, #15
 801c870:	6879      	ldr	r1, [r7, #4]
 801c872:	4613      	mov	r3, r2
 801c874:	009b      	lsls	r3, r3, #2
 801c876:	4413      	add	r3, r2
 801c878:	009b      	lsls	r3, r3, #2
 801c87a:	440b      	add	r3, r1
 801c87c:	3324      	adds	r3, #36	@ 0x24
 801c87e:	2201      	movs	r2, #1
 801c880:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801c882:	4b39      	ldr	r3, [pc, #228]	@ (801c968 <USBD_CDC_Init+0x1e8>)
 801c884:	7819      	ldrb	r1, [r3, #0]
 801c886:	2340      	movs	r3, #64	@ 0x40
 801c888:	2202      	movs	r2, #2
 801c88a:	6878      	ldr	r0, [r7, #4]
 801c88c:	f006 fb8f 	bl	8022fae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801c890:	4b35      	ldr	r3, [pc, #212]	@ (801c968 <USBD_CDC_Init+0x1e8>)
 801c892:	781b      	ldrb	r3, [r3, #0]
 801c894:	f003 020f 	and.w	r2, r3, #15
 801c898:	6879      	ldr	r1, [r7, #4]
 801c89a:	4613      	mov	r3, r2
 801c89c:	009b      	lsls	r3, r3, #2
 801c89e:	4413      	add	r3, r2
 801c8a0:	009b      	lsls	r3, r3, #2
 801c8a2:	440b      	add	r3, r1
 801c8a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801c8a8:	2201      	movs	r2, #1
 801c8aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801c8ac:	4b2f      	ldr	r3, [pc, #188]	@ (801c96c <USBD_CDC_Init+0x1ec>)
 801c8ae:	781b      	ldrb	r3, [r3, #0]
 801c8b0:	f003 020f 	and.w	r2, r3, #15
 801c8b4:	6879      	ldr	r1, [r7, #4]
 801c8b6:	4613      	mov	r3, r2
 801c8b8:	009b      	lsls	r3, r3, #2
 801c8ba:	4413      	add	r3, r2
 801c8bc:	009b      	lsls	r3, r3, #2
 801c8be:	440b      	add	r3, r1
 801c8c0:	3326      	adds	r3, #38	@ 0x26
 801c8c2:	2210      	movs	r2, #16
 801c8c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801c8c6:	4b29      	ldr	r3, [pc, #164]	@ (801c96c <USBD_CDC_Init+0x1ec>)
 801c8c8:	7819      	ldrb	r1, [r3, #0]
 801c8ca:	2308      	movs	r3, #8
 801c8cc:	2203      	movs	r2, #3
 801c8ce:	6878      	ldr	r0, [r7, #4]
 801c8d0:	f006 fb6d 	bl	8022fae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801c8d4:	4b25      	ldr	r3, [pc, #148]	@ (801c96c <USBD_CDC_Init+0x1ec>)
 801c8d6:	781b      	ldrb	r3, [r3, #0]
 801c8d8:	f003 020f 	and.w	r2, r3, #15
 801c8dc:	6879      	ldr	r1, [r7, #4]
 801c8de:	4613      	mov	r3, r2
 801c8e0:	009b      	lsls	r3, r3, #2
 801c8e2:	4413      	add	r3, r2
 801c8e4:	009b      	lsls	r3, r3, #2
 801c8e6:	440b      	add	r3, r1
 801c8e8:	3324      	adds	r3, #36	@ 0x24
 801c8ea:	2201      	movs	r2, #1
 801c8ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	2200      	movs	r2, #0
 801c8f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801c8fc:	687a      	ldr	r2, [r7, #4]
 801c8fe:	33b0      	adds	r3, #176	@ 0xb0
 801c900:	009b      	lsls	r3, r3, #2
 801c902:	4413      	add	r3, r2
 801c904:	685b      	ldr	r3, [r3, #4]
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	2200      	movs	r2, #0
 801c90e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	2200      	movs	r2, #0
 801c916:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801c920:	2b00      	cmp	r3, #0
 801c922:	d101      	bne.n	801c928 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801c924:	2302      	movs	r3, #2
 801c926:	e018      	b.n	801c95a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	7c1b      	ldrb	r3, [r3, #16]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d10a      	bne.n	801c946 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801c930:	4b0d      	ldr	r3, [pc, #52]	@ (801c968 <USBD_CDC_Init+0x1e8>)
 801c932:	7819      	ldrb	r1, [r3, #0]
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801c93a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801c93e:	6878      	ldr	r0, [r7, #4]
 801c940:	f006 fc24 	bl	802318c <USBD_LL_PrepareReceive>
 801c944:	e008      	b.n	801c958 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801c946:	4b08      	ldr	r3, [pc, #32]	@ (801c968 <USBD_CDC_Init+0x1e8>)
 801c948:	7819      	ldrb	r1, [r3, #0]
 801c94a:	68fb      	ldr	r3, [r7, #12]
 801c94c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801c950:	2340      	movs	r3, #64	@ 0x40
 801c952:	6878      	ldr	r0, [r7, #4]
 801c954:	f006 fc1a 	bl	802318c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801c958:	2300      	movs	r3, #0
}
 801c95a:	4618      	mov	r0, r3
 801c95c:	3710      	adds	r7, #16
 801c95e:	46bd      	mov	sp, r7
 801c960:	bd80      	pop	{r7, pc}
 801c962:	bf00      	nop
 801c964:	24000327 	.word	0x24000327
 801c968:	24000328 	.word	0x24000328
 801c96c:	24000329 	.word	0x24000329

0801c970 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c970:	b580      	push	{r7, lr}
 801c972:	b082      	sub	sp, #8
 801c974:	af00      	add	r7, sp, #0
 801c976:	6078      	str	r0, [r7, #4]
 801c978:	460b      	mov	r3, r1
 801c97a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801c97c:	4b3a      	ldr	r3, [pc, #232]	@ (801ca68 <USBD_CDC_DeInit+0xf8>)
 801c97e:	781b      	ldrb	r3, [r3, #0]
 801c980:	4619      	mov	r1, r3
 801c982:	6878      	ldr	r0, [r7, #4]
 801c984:	f006 fb39 	bl	8022ffa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801c988:	4b37      	ldr	r3, [pc, #220]	@ (801ca68 <USBD_CDC_DeInit+0xf8>)
 801c98a:	781b      	ldrb	r3, [r3, #0]
 801c98c:	f003 020f 	and.w	r2, r3, #15
 801c990:	6879      	ldr	r1, [r7, #4]
 801c992:	4613      	mov	r3, r2
 801c994:	009b      	lsls	r3, r3, #2
 801c996:	4413      	add	r3, r2
 801c998:	009b      	lsls	r3, r3, #2
 801c99a:	440b      	add	r3, r1
 801c99c:	3324      	adds	r3, #36	@ 0x24
 801c99e:	2200      	movs	r2, #0
 801c9a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801c9a2:	4b32      	ldr	r3, [pc, #200]	@ (801ca6c <USBD_CDC_DeInit+0xfc>)
 801c9a4:	781b      	ldrb	r3, [r3, #0]
 801c9a6:	4619      	mov	r1, r3
 801c9a8:	6878      	ldr	r0, [r7, #4]
 801c9aa:	f006 fb26 	bl	8022ffa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801c9ae:	4b2f      	ldr	r3, [pc, #188]	@ (801ca6c <USBD_CDC_DeInit+0xfc>)
 801c9b0:	781b      	ldrb	r3, [r3, #0]
 801c9b2:	f003 020f 	and.w	r2, r3, #15
 801c9b6:	6879      	ldr	r1, [r7, #4]
 801c9b8:	4613      	mov	r3, r2
 801c9ba:	009b      	lsls	r3, r3, #2
 801c9bc:	4413      	add	r3, r2
 801c9be:	009b      	lsls	r3, r3, #2
 801c9c0:	440b      	add	r3, r1
 801c9c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801c9c6:	2200      	movs	r2, #0
 801c9c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801c9ca:	4b29      	ldr	r3, [pc, #164]	@ (801ca70 <USBD_CDC_DeInit+0x100>)
 801c9cc:	781b      	ldrb	r3, [r3, #0]
 801c9ce:	4619      	mov	r1, r3
 801c9d0:	6878      	ldr	r0, [r7, #4]
 801c9d2:	f006 fb12 	bl	8022ffa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801c9d6:	4b26      	ldr	r3, [pc, #152]	@ (801ca70 <USBD_CDC_DeInit+0x100>)
 801c9d8:	781b      	ldrb	r3, [r3, #0]
 801c9da:	f003 020f 	and.w	r2, r3, #15
 801c9de:	6879      	ldr	r1, [r7, #4]
 801c9e0:	4613      	mov	r3, r2
 801c9e2:	009b      	lsls	r3, r3, #2
 801c9e4:	4413      	add	r3, r2
 801c9e6:	009b      	lsls	r3, r3, #2
 801c9e8:	440b      	add	r3, r1
 801c9ea:	3324      	adds	r3, #36	@ 0x24
 801c9ec:	2200      	movs	r2, #0
 801c9ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801c9f0:	4b1f      	ldr	r3, [pc, #124]	@ (801ca70 <USBD_CDC_DeInit+0x100>)
 801c9f2:	781b      	ldrb	r3, [r3, #0]
 801c9f4:	f003 020f 	and.w	r2, r3, #15
 801c9f8:	6879      	ldr	r1, [r7, #4]
 801c9fa:	4613      	mov	r3, r2
 801c9fc:	009b      	lsls	r3, r3, #2
 801c9fe:	4413      	add	r3, r2
 801ca00:	009b      	lsls	r3, r3, #2
 801ca02:	440b      	add	r3, r1
 801ca04:	3326      	adds	r3, #38	@ 0x26
 801ca06:	2200      	movs	r2, #0
 801ca08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	32b0      	adds	r2, #176	@ 0xb0
 801ca14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d01f      	beq.n	801ca5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801ca22:	687a      	ldr	r2, [r7, #4]
 801ca24:	33b0      	adds	r3, #176	@ 0xb0
 801ca26:	009b      	lsls	r3, r3, #2
 801ca28:	4413      	add	r3, r2
 801ca2a:	685b      	ldr	r3, [r3, #4]
 801ca2c:	685b      	ldr	r3, [r3, #4]
 801ca2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	32b0      	adds	r2, #176	@ 0xb0
 801ca3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca3e:	4618      	mov	r0, r3
 801ca40:	f006 fbe6 	bl	8023210 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	32b0      	adds	r2, #176	@ 0xb0
 801ca4e:	2100      	movs	r1, #0
 801ca50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	2200      	movs	r2, #0
 801ca58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801ca5c:	2300      	movs	r3, #0
}
 801ca5e:	4618      	mov	r0, r3
 801ca60:	3708      	adds	r7, #8
 801ca62:	46bd      	mov	sp, r7
 801ca64:	bd80      	pop	{r7, pc}
 801ca66:	bf00      	nop
 801ca68:	24000327 	.word	0x24000327
 801ca6c:	24000328 	.word	0x24000328
 801ca70:	24000329 	.word	0x24000329

0801ca74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b086      	sub	sp, #24
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	6078      	str	r0, [r7, #4]
 801ca7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	32b0      	adds	r2, #176	@ 0xb0
 801ca88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801ca8e:	2300      	movs	r3, #0
 801ca90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801ca92:	2300      	movs	r3, #0
 801ca94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801ca96:	2300      	movs	r3, #0
 801ca98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801ca9a:	693b      	ldr	r3, [r7, #16]
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d101      	bne.n	801caa4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801caa0:	2303      	movs	r3, #3
 801caa2:	e0bf      	b.n	801cc24 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801caa4:	683b      	ldr	r3, [r7, #0]
 801caa6:	781b      	ldrb	r3, [r3, #0]
 801caa8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801caac:	2b00      	cmp	r3, #0
 801caae:	d050      	beq.n	801cb52 <USBD_CDC_Setup+0xde>
 801cab0:	2b20      	cmp	r3, #32
 801cab2:	f040 80af 	bne.w	801cc14 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801cab6:	683b      	ldr	r3, [r7, #0]
 801cab8:	88db      	ldrh	r3, [r3, #6]
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d03a      	beq.n	801cb34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801cabe:	683b      	ldr	r3, [r7, #0]
 801cac0:	781b      	ldrb	r3, [r3, #0]
 801cac2:	b25b      	sxtb	r3, r3
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	da1b      	bge.n	801cb00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801cace:	687a      	ldr	r2, [r7, #4]
 801cad0:	33b0      	adds	r3, #176	@ 0xb0
 801cad2:	009b      	lsls	r3, r3, #2
 801cad4:	4413      	add	r3, r2
 801cad6:	685b      	ldr	r3, [r3, #4]
 801cad8:	689b      	ldr	r3, [r3, #8]
 801cada:	683a      	ldr	r2, [r7, #0]
 801cadc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801cade:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801cae0:	683a      	ldr	r2, [r7, #0]
 801cae2:	88d2      	ldrh	r2, [r2, #6]
 801cae4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801cae6:	683b      	ldr	r3, [r7, #0]
 801cae8:	88db      	ldrh	r3, [r3, #6]
 801caea:	2b07      	cmp	r3, #7
 801caec:	bf28      	it	cs
 801caee:	2307      	movcs	r3, #7
 801caf0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801caf2:	693b      	ldr	r3, [r7, #16]
 801caf4:	89fa      	ldrh	r2, [r7, #14]
 801caf6:	4619      	mov	r1, r3
 801caf8:	6878      	ldr	r0, [r7, #4]
 801cafa:	f001 fdbd 	bl	801e678 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801cafe:	e090      	b.n	801cc22 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801cb00:	683b      	ldr	r3, [r7, #0]
 801cb02:	785a      	ldrb	r2, [r3, #1]
 801cb04:	693b      	ldr	r3, [r7, #16]
 801cb06:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801cb0a:	683b      	ldr	r3, [r7, #0]
 801cb0c:	88db      	ldrh	r3, [r3, #6]
 801cb0e:	2b3f      	cmp	r3, #63	@ 0x3f
 801cb10:	d803      	bhi.n	801cb1a <USBD_CDC_Setup+0xa6>
 801cb12:	683b      	ldr	r3, [r7, #0]
 801cb14:	88db      	ldrh	r3, [r3, #6]
 801cb16:	b2da      	uxtb	r2, r3
 801cb18:	e000      	b.n	801cb1c <USBD_CDC_Setup+0xa8>
 801cb1a:	2240      	movs	r2, #64	@ 0x40
 801cb1c:	693b      	ldr	r3, [r7, #16]
 801cb1e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801cb22:	6939      	ldr	r1, [r7, #16]
 801cb24:	693b      	ldr	r3, [r7, #16]
 801cb26:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801cb2a:	461a      	mov	r2, r3
 801cb2c:	6878      	ldr	r0, [r7, #4]
 801cb2e:	f001 fdcf 	bl	801e6d0 <USBD_CtlPrepareRx>
      break;
 801cb32:	e076      	b.n	801cc22 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801cb3a:	687a      	ldr	r2, [r7, #4]
 801cb3c:	33b0      	adds	r3, #176	@ 0xb0
 801cb3e:	009b      	lsls	r3, r3, #2
 801cb40:	4413      	add	r3, r2
 801cb42:	685b      	ldr	r3, [r3, #4]
 801cb44:	689b      	ldr	r3, [r3, #8]
 801cb46:	683a      	ldr	r2, [r7, #0]
 801cb48:	7850      	ldrb	r0, [r2, #1]
 801cb4a:	2200      	movs	r2, #0
 801cb4c:	6839      	ldr	r1, [r7, #0]
 801cb4e:	4798      	blx	r3
      break;
 801cb50:	e067      	b.n	801cc22 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801cb52:	683b      	ldr	r3, [r7, #0]
 801cb54:	785b      	ldrb	r3, [r3, #1]
 801cb56:	2b0b      	cmp	r3, #11
 801cb58:	d851      	bhi.n	801cbfe <USBD_CDC_Setup+0x18a>
 801cb5a:	a201      	add	r2, pc, #4	@ (adr r2, 801cb60 <USBD_CDC_Setup+0xec>)
 801cb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb60:	0801cb91 	.word	0x0801cb91
 801cb64:	0801cc0d 	.word	0x0801cc0d
 801cb68:	0801cbff 	.word	0x0801cbff
 801cb6c:	0801cbff 	.word	0x0801cbff
 801cb70:	0801cbff 	.word	0x0801cbff
 801cb74:	0801cbff 	.word	0x0801cbff
 801cb78:	0801cbff 	.word	0x0801cbff
 801cb7c:	0801cbff 	.word	0x0801cbff
 801cb80:	0801cbff 	.word	0x0801cbff
 801cb84:	0801cbff 	.word	0x0801cbff
 801cb88:	0801cbbb 	.word	0x0801cbbb
 801cb8c:	0801cbe5 	.word	0x0801cbe5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801cb96:	b2db      	uxtb	r3, r3
 801cb98:	2b03      	cmp	r3, #3
 801cb9a:	d107      	bne.n	801cbac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801cb9c:	f107 030a 	add.w	r3, r7, #10
 801cba0:	2202      	movs	r2, #2
 801cba2:	4619      	mov	r1, r3
 801cba4:	6878      	ldr	r0, [r7, #4]
 801cba6:	f001 fd67 	bl	801e678 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801cbaa:	e032      	b.n	801cc12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801cbac:	6839      	ldr	r1, [r7, #0]
 801cbae:	6878      	ldr	r0, [r7, #4]
 801cbb0:	f001 fce5 	bl	801e57e <USBD_CtlError>
            ret = USBD_FAIL;
 801cbb4:	2303      	movs	r3, #3
 801cbb6:	75fb      	strb	r3, [r7, #23]
          break;
 801cbb8:	e02b      	b.n	801cc12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801cbc0:	b2db      	uxtb	r3, r3
 801cbc2:	2b03      	cmp	r3, #3
 801cbc4:	d107      	bne.n	801cbd6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801cbc6:	f107 030d 	add.w	r3, r7, #13
 801cbca:	2201      	movs	r2, #1
 801cbcc:	4619      	mov	r1, r3
 801cbce:	6878      	ldr	r0, [r7, #4]
 801cbd0:	f001 fd52 	bl	801e678 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801cbd4:	e01d      	b.n	801cc12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801cbd6:	6839      	ldr	r1, [r7, #0]
 801cbd8:	6878      	ldr	r0, [r7, #4]
 801cbda:	f001 fcd0 	bl	801e57e <USBD_CtlError>
            ret = USBD_FAIL;
 801cbde:	2303      	movs	r3, #3
 801cbe0:	75fb      	strb	r3, [r7, #23]
          break;
 801cbe2:	e016      	b.n	801cc12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801cbea:	b2db      	uxtb	r3, r3
 801cbec:	2b03      	cmp	r3, #3
 801cbee:	d00f      	beq.n	801cc10 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801cbf0:	6839      	ldr	r1, [r7, #0]
 801cbf2:	6878      	ldr	r0, [r7, #4]
 801cbf4:	f001 fcc3 	bl	801e57e <USBD_CtlError>
            ret = USBD_FAIL;
 801cbf8:	2303      	movs	r3, #3
 801cbfa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801cbfc:	e008      	b.n	801cc10 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801cbfe:	6839      	ldr	r1, [r7, #0]
 801cc00:	6878      	ldr	r0, [r7, #4]
 801cc02:	f001 fcbc 	bl	801e57e <USBD_CtlError>
          ret = USBD_FAIL;
 801cc06:	2303      	movs	r3, #3
 801cc08:	75fb      	strb	r3, [r7, #23]
          break;
 801cc0a:	e002      	b.n	801cc12 <USBD_CDC_Setup+0x19e>
          break;
 801cc0c:	bf00      	nop
 801cc0e:	e008      	b.n	801cc22 <USBD_CDC_Setup+0x1ae>
          break;
 801cc10:	bf00      	nop
      }
      break;
 801cc12:	e006      	b.n	801cc22 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801cc14:	6839      	ldr	r1, [r7, #0]
 801cc16:	6878      	ldr	r0, [r7, #4]
 801cc18:	f001 fcb1 	bl	801e57e <USBD_CtlError>
      ret = USBD_FAIL;
 801cc1c:	2303      	movs	r3, #3
 801cc1e:	75fb      	strb	r3, [r7, #23]
      break;
 801cc20:	bf00      	nop
  }

  return (uint8_t)ret;
 801cc22:	7dfb      	ldrb	r3, [r7, #23]
}
 801cc24:	4618      	mov	r0, r3
 801cc26:	3718      	adds	r7, #24
 801cc28:	46bd      	mov	sp, r7
 801cc2a:	bd80      	pop	{r7, pc}

0801cc2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801cc2c:	b580      	push	{r7, lr}
 801cc2e:	b084      	sub	sp, #16
 801cc30:	af00      	add	r7, sp, #0
 801cc32:	6078      	str	r0, [r7, #4]
 801cc34:	460b      	mov	r3, r1
 801cc36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801cc3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	32b0      	adds	r2, #176	@ 0xb0
 801cc4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d101      	bne.n	801cc56 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801cc52:	2303      	movs	r3, #3
 801cc54:	e065      	b.n	801cd22 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	32b0      	adds	r2, #176	@ 0xb0
 801cc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cc64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801cc66:	78fb      	ldrb	r3, [r7, #3]
 801cc68:	f003 020f 	and.w	r2, r3, #15
 801cc6c:	6879      	ldr	r1, [r7, #4]
 801cc6e:	4613      	mov	r3, r2
 801cc70:	009b      	lsls	r3, r3, #2
 801cc72:	4413      	add	r3, r2
 801cc74:	009b      	lsls	r3, r3, #2
 801cc76:	440b      	add	r3, r1
 801cc78:	3318      	adds	r3, #24
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d02f      	beq.n	801cce0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801cc80:	78fb      	ldrb	r3, [r7, #3]
 801cc82:	f003 020f 	and.w	r2, r3, #15
 801cc86:	6879      	ldr	r1, [r7, #4]
 801cc88:	4613      	mov	r3, r2
 801cc8a:	009b      	lsls	r3, r3, #2
 801cc8c:	4413      	add	r3, r2
 801cc8e:	009b      	lsls	r3, r3, #2
 801cc90:	440b      	add	r3, r1
 801cc92:	3318      	adds	r3, #24
 801cc94:	681a      	ldr	r2, [r3, #0]
 801cc96:	78fb      	ldrb	r3, [r7, #3]
 801cc98:	f003 010f 	and.w	r1, r3, #15
 801cc9c:	68f8      	ldr	r0, [r7, #12]
 801cc9e:	460b      	mov	r3, r1
 801cca0:	00db      	lsls	r3, r3, #3
 801cca2:	440b      	add	r3, r1
 801cca4:	009b      	lsls	r3, r3, #2
 801cca6:	4403      	add	r3, r0
 801cca8:	331c      	adds	r3, #28
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	fbb2 f1f3 	udiv	r1, r2, r3
 801ccb0:	fb01 f303 	mul.w	r3, r1, r3
 801ccb4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d112      	bne.n	801cce0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801ccba:	78fb      	ldrb	r3, [r7, #3]
 801ccbc:	f003 020f 	and.w	r2, r3, #15
 801ccc0:	6879      	ldr	r1, [r7, #4]
 801ccc2:	4613      	mov	r3, r2
 801ccc4:	009b      	lsls	r3, r3, #2
 801ccc6:	4413      	add	r3, r2
 801ccc8:	009b      	lsls	r3, r3, #2
 801ccca:	440b      	add	r3, r1
 801cccc:	3318      	adds	r3, #24
 801ccce:	2200      	movs	r2, #0
 801ccd0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ccd2:	78f9      	ldrb	r1, [r7, #3]
 801ccd4:	2300      	movs	r3, #0
 801ccd6:	2200      	movs	r2, #0
 801ccd8:	6878      	ldr	r0, [r7, #4]
 801ccda:	f006 fa36 	bl	802314a <USBD_LL_Transmit>
 801ccde:	e01f      	b.n	801cd20 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801cce0:	68bb      	ldr	r3, [r7, #8]
 801cce2:	2200      	movs	r2, #0
 801cce4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801ccee:	687a      	ldr	r2, [r7, #4]
 801ccf0:	33b0      	adds	r3, #176	@ 0xb0
 801ccf2:	009b      	lsls	r3, r3, #2
 801ccf4:	4413      	add	r3, r2
 801ccf6:	685b      	ldr	r3, [r3, #4]
 801ccf8:	691b      	ldr	r3, [r3, #16]
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d010      	beq.n	801cd20 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801cd04:	687a      	ldr	r2, [r7, #4]
 801cd06:	33b0      	adds	r3, #176	@ 0xb0
 801cd08:	009b      	lsls	r3, r3, #2
 801cd0a:	4413      	add	r3, r2
 801cd0c:	685b      	ldr	r3, [r3, #4]
 801cd0e:	691b      	ldr	r3, [r3, #16]
 801cd10:	68ba      	ldr	r2, [r7, #8]
 801cd12:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801cd16:	68ba      	ldr	r2, [r7, #8]
 801cd18:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801cd1c:	78fa      	ldrb	r2, [r7, #3]
 801cd1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801cd20:	2300      	movs	r3, #0
}
 801cd22:	4618      	mov	r0, r3
 801cd24:	3710      	adds	r7, #16
 801cd26:	46bd      	mov	sp, r7
 801cd28:	bd80      	pop	{r7, pc}

0801cd2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801cd2a:	b580      	push	{r7, lr}
 801cd2c:	b084      	sub	sp, #16
 801cd2e:	af00      	add	r7, sp, #0
 801cd30:	6078      	str	r0, [r7, #4]
 801cd32:	460b      	mov	r3, r1
 801cd34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	32b0      	adds	r2, #176	@ 0xb0
 801cd40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cd44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	32b0      	adds	r2, #176	@ 0xb0
 801cd50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d101      	bne.n	801cd5c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801cd58:	2303      	movs	r3, #3
 801cd5a:	e01a      	b.n	801cd92 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801cd5c:	78fb      	ldrb	r3, [r7, #3]
 801cd5e:	4619      	mov	r1, r3
 801cd60:	6878      	ldr	r0, [r7, #4]
 801cd62:	f006 fa34 	bl	80231ce <USBD_LL_GetRxDataSize>
 801cd66:	4602      	mov	r2, r0
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801cd6e:	687b      	ldr	r3, [r7, #4]
 801cd70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801cd74:	687a      	ldr	r2, [r7, #4]
 801cd76:	33b0      	adds	r3, #176	@ 0xb0
 801cd78:	009b      	lsls	r3, r3, #2
 801cd7a:	4413      	add	r3, r2
 801cd7c:	685b      	ldr	r3, [r3, #4]
 801cd7e:	68db      	ldr	r3, [r3, #12]
 801cd80:	68fa      	ldr	r2, [r7, #12]
 801cd82:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801cd86:	68fa      	ldr	r2, [r7, #12]
 801cd88:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801cd8c:	4611      	mov	r1, r2
 801cd8e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801cd90:	2300      	movs	r3, #0
}
 801cd92:	4618      	mov	r0, r3
 801cd94:	3710      	adds	r7, #16
 801cd96:	46bd      	mov	sp, r7
 801cd98:	bd80      	pop	{r7, pc}

0801cd9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801cd9a:	b580      	push	{r7, lr}
 801cd9c:	b084      	sub	sp, #16
 801cd9e:	af00      	add	r7, sp, #0
 801cda0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	32b0      	adds	r2, #176	@ 0xb0
 801cdac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cdb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801cdb2:	68fb      	ldr	r3, [r7, #12]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d101      	bne.n	801cdbc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801cdb8:	2303      	movs	r3, #3
 801cdba:	e024      	b.n	801ce06 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801cdc2:	687a      	ldr	r2, [r7, #4]
 801cdc4:	33b0      	adds	r3, #176	@ 0xb0
 801cdc6:	009b      	lsls	r3, r3, #2
 801cdc8:	4413      	add	r3, r2
 801cdca:	685b      	ldr	r3, [r3, #4]
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d019      	beq.n	801ce04 <USBD_CDC_EP0_RxReady+0x6a>
 801cdd0:	68fb      	ldr	r3, [r7, #12]
 801cdd2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801cdd6:	2bff      	cmp	r3, #255	@ 0xff
 801cdd8:	d014      	beq.n	801ce04 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801cde0:	687a      	ldr	r2, [r7, #4]
 801cde2:	33b0      	adds	r3, #176	@ 0xb0
 801cde4:	009b      	lsls	r3, r3, #2
 801cde6:	4413      	add	r3, r2
 801cde8:	685b      	ldr	r3, [r3, #4]
 801cdea:	689b      	ldr	r3, [r3, #8]
 801cdec:	68fa      	ldr	r2, [r7, #12]
 801cdee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801cdf2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801cdf4:	68fa      	ldr	r2, [r7, #12]
 801cdf6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801cdfa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	22ff      	movs	r2, #255	@ 0xff
 801ce00:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801ce04:	2300      	movs	r3, #0
}
 801ce06:	4618      	mov	r0, r3
 801ce08:	3710      	adds	r7, #16
 801ce0a:	46bd      	mov	sp, r7
 801ce0c:	bd80      	pop	{r7, pc}
	...

0801ce10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b086      	sub	sp, #24
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801ce18:	2182      	movs	r1, #130	@ 0x82
 801ce1a:	4818      	ldr	r0, [pc, #96]	@ (801ce7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801ce1c:	f000 fd4f 	bl	801d8be <USBD_GetEpDesc>
 801ce20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801ce22:	2101      	movs	r1, #1
 801ce24:	4815      	ldr	r0, [pc, #84]	@ (801ce7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801ce26:	f000 fd4a 	bl	801d8be <USBD_GetEpDesc>
 801ce2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801ce2c:	2181      	movs	r1, #129	@ 0x81
 801ce2e:	4813      	ldr	r0, [pc, #76]	@ (801ce7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801ce30:	f000 fd45 	bl	801d8be <USBD_GetEpDesc>
 801ce34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801ce36:	697b      	ldr	r3, [r7, #20]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d002      	beq.n	801ce42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801ce3c:	697b      	ldr	r3, [r7, #20]
 801ce3e:	2210      	movs	r2, #16
 801ce40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801ce42:	693b      	ldr	r3, [r7, #16]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d006      	beq.n	801ce56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801ce48:	693b      	ldr	r3, [r7, #16]
 801ce4a:	2200      	movs	r2, #0
 801ce4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801ce50:	711a      	strb	r2, [r3, #4]
 801ce52:	2200      	movs	r2, #0
 801ce54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d006      	beq.n	801ce6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801ce5c:	68fb      	ldr	r3, [r7, #12]
 801ce5e:	2200      	movs	r2, #0
 801ce60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801ce64:	711a      	strb	r2, [r3, #4]
 801ce66:	2200      	movs	r2, #0
 801ce68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	2243      	movs	r2, #67	@ 0x43
 801ce6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801ce70:	4b02      	ldr	r3, [pc, #8]	@ (801ce7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801ce72:	4618      	mov	r0, r3
 801ce74:	3718      	adds	r7, #24
 801ce76:	46bd      	mov	sp, r7
 801ce78:	bd80      	pop	{r7, pc}
 801ce7a:	bf00      	nop
 801ce7c:	240002e4 	.word	0x240002e4

0801ce80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801ce80:	b580      	push	{r7, lr}
 801ce82:	b086      	sub	sp, #24
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801ce88:	2182      	movs	r1, #130	@ 0x82
 801ce8a:	4818      	ldr	r0, [pc, #96]	@ (801ceec <USBD_CDC_GetHSCfgDesc+0x6c>)
 801ce8c:	f000 fd17 	bl	801d8be <USBD_GetEpDesc>
 801ce90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801ce92:	2101      	movs	r1, #1
 801ce94:	4815      	ldr	r0, [pc, #84]	@ (801ceec <USBD_CDC_GetHSCfgDesc+0x6c>)
 801ce96:	f000 fd12 	bl	801d8be <USBD_GetEpDesc>
 801ce9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801ce9c:	2181      	movs	r1, #129	@ 0x81
 801ce9e:	4813      	ldr	r0, [pc, #76]	@ (801ceec <USBD_CDC_GetHSCfgDesc+0x6c>)
 801cea0:	f000 fd0d 	bl	801d8be <USBD_GetEpDesc>
 801cea4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801cea6:	697b      	ldr	r3, [r7, #20]
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d002      	beq.n	801ceb2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801ceac:	697b      	ldr	r3, [r7, #20]
 801ceae:	2210      	movs	r2, #16
 801ceb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801ceb2:	693b      	ldr	r3, [r7, #16]
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	d006      	beq.n	801cec6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801ceb8:	693b      	ldr	r3, [r7, #16]
 801ceba:	2200      	movs	r2, #0
 801cebc:	711a      	strb	r2, [r3, #4]
 801cebe:	2200      	movs	r2, #0
 801cec0:	f042 0202 	orr.w	r2, r2, #2
 801cec4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d006      	beq.n	801ceda <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	2200      	movs	r2, #0
 801ced0:	711a      	strb	r2, [r3, #4]
 801ced2:	2200      	movs	r2, #0
 801ced4:	f042 0202 	orr.w	r2, r2, #2
 801ced8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	2243      	movs	r2, #67	@ 0x43
 801cede:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801cee0:	4b02      	ldr	r3, [pc, #8]	@ (801ceec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801cee2:	4618      	mov	r0, r3
 801cee4:	3718      	adds	r7, #24
 801cee6:	46bd      	mov	sp, r7
 801cee8:	bd80      	pop	{r7, pc}
 801ceea:	bf00      	nop
 801ceec:	240002e4 	.word	0x240002e4

0801cef0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801cef0:	b580      	push	{r7, lr}
 801cef2:	b086      	sub	sp, #24
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801cef8:	2182      	movs	r1, #130	@ 0x82
 801cefa:	4818      	ldr	r0, [pc, #96]	@ (801cf5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801cefc:	f000 fcdf 	bl	801d8be <USBD_GetEpDesc>
 801cf00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801cf02:	2101      	movs	r1, #1
 801cf04:	4815      	ldr	r0, [pc, #84]	@ (801cf5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801cf06:	f000 fcda 	bl	801d8be <USBD_GetEpDesc>
 801cf0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801cf0c:	2181      	movs	r1, #129	@ 0x81
 801cf0e:	4813      	ldr	r0, [pc, #76]	@ (801cf5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801cf10:	f000 fcd5 	bl	801d8be <USBD_GetEpDesc>
 801cf14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801cf16:	697b      	ldr	r3, [r7, #20]
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d002      	beq.n	801cf22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801cf1c:	697b      	ldr	r3, [r7, #20]
 801cf1e:	2210      	movs	r2, #16
 801cf20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801cf22:	693b      	ldr	r3, [r7, #16]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d006      	beq.n	801cf36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801cf28:	693b      	ldr	r3, [r7, #16]
 801cf2a:	2200      	movs	r2, #0
 801cf2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801cf30:	711a      	strb	r2, [r3, #4]
 801cf32:	2200      	movs	r2, #0
 801cf34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d006      	beq.n	801cf4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	2200      	movs	r2, #0
 801cf40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801cf44:	711a      	strb	r2, [r3, #4]
 801cf46:	2200      	movs	r2, #0
 801cf48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	2243      	movs	r2, #67	@ 0x43
 801cf4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801cf50:	4b02      	ldr	r3, [pc, #8]	@ (801cf5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801cf52:	4618      	mov	r0, r3
 801cf54:	3718      	adds	r7, #24
 801cf56:	46bd      	mov	sp, r7
 801cf58:	bd80      	pop	{r7, pc}
 801cf5a:	bf00      	nop
 801cf5c:	240002e4 	.word	0x240002e4

0801cf60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801cf60:	b480      	push	{r7}
 801cf62:	b083      	sub	sp, #12
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	220a      	movs	r2, #10
 801cf6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801cf6e:	4b03      	ldr	r3, [pc, #12]	@ (801cf7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801cf70:	4618      	mov	r0, r3
 801cf72:	370c      	adds	r7, #12
 801cf74:	46bd      	mov	sp, r7
 801cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf7a:	4770      	bx	lr
 801cf7c:	240002a0 	.word	0x240002a0

0801cf80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801cf80:	b480      	push	{r7}
 801cf82:	b083      	sub	sp, #12
 801cf84:	af00      	add	r7, sp, #0
 801cf86:	6078      	str	r0, [r7, #4]
 801cf88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801cf8a:	683b      	ldr	r3, [r7, #0]
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d101      	bne.n	801cf94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801cf90:	2303      	movs	r3, #3
 801cf92:	e009      	b.n	801cfa8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801cf9a:	687a      	ldr	r2, [r7, #4]
 801cf9c:	33b0      	adds	r3, #176	@ 0xb0
 801cf9e:	009b      	lsls	r3, r3, #2
 801cfa0:	4413      	add	r3, r2
 801cfa2:	683a      	ldr	r2, [r7, #0]
 801cfa4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801cfa6:	2300      	movs	r3, #0
}
 801cfa8:	4618      	mov	r0, r3
 801cfaa:	370c      	adds	r7, #12
 801cfac:	46bd      	mov	sp, r7
 801cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfb2:	4770      	bx	lr

0801cfb4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801cfb4:	b480      	push	{r7}
 801cfb6:	b087      	sub	sp, #28
 801cfb8:	af00      	add	r7, sp, #0
 801cfba:	60f8      	str	r0, [r7, #12]
 801cfbc:	60b9      	str	r1, [r7, #8]
 801cfbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	32b0      	adds	r2, #176	@ 0xb0
 801cfca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cfce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801cfd0:	697b      	ldr	r3, [r7, #20]
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	d101      	bne.n	801cfda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801cfd6:	2303      	movs	r3, #3
 801cfd8:	e008      	b.n	801cfec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801cfda:	697b      	ldr	r3, [r7, #20]
 801cfdc:	68ba      	ldr	r2, [r7, #8]
 801cfde:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801cfe2:	697b      	ldr	r3, [r7, #20]
 801cfe4:	687a      	ldr	r2, [r7, #4]
 801cfe6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801cfea:	2300      	movs	r3, #0
}
 801cfec:	4618      	mov	r0, r3
 801cfee:	371c      	adds	r7, #28
 801cff0:	46bd      	mov	sp, r7
 801cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cff6:	4770      	bx	lr

0801cff8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801cff8:	b480      	push	{r7}
 801cffa:	b085      	sub	sp, #20
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	6078      	str	r0, [r7, #4]
 801d000:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	32b0      	adds	r2, #176	@ 0xb0
 801d00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d010:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	2b00      	cmp	r3, #0
 801d016:	d101      	bne.n	801d01c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801d018:	2303      	movs	r3, #3
 801d01a:	e004      	b.n	801d026 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801d01c:	68fb      	ldr	r3, [r7, #12]
 801d01e:	683a      	ldr	r2, [r7, #0]
 801d020:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801d024:	2300      	movs	r3, #0
}
 801d026:	4618      	mov	r0, r3
 801d028:	3714      	adds	r7, #20
 801d02a:	46bd      	mov	sp, r7
 801d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d030:	4770      	bx	lr
	...

0801d034 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801d034:	b580      	push	{r7, lr}
 801d036:	b084      	sub	sp, #16
 801d038:	af00      	add	r7, sp, #0
 801d03a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	32b0      	adds	r2, #176	@ 0xb0
 801d046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d04a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801d04c:	2301      	movs	r3, #1
 801d04e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801d050:	68bb      	ldr	r3, [r7, #8]
 801d052:	2b00      	cmp	r3, #0
 801d054:	d101      	bne.n	801d05a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801d056:	2303      	movs	r3, #3
 801d058:	e025      	b.n	801d0a6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801d05a:	68bb      	ldr	r3, [r7, #8]
 801d05c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801d060:	2b00      	cmp	r3, #0
 801d062:	d11f      	bne.n	801d0a4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801d064:	68bb      	ldr	r3, [r7, #8]
 801d066:	2201      	movs	r2, #1
 801d068:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801d06c:	4b10      	ldr	r3, [pc, #64]	@ (801d0b0 <USBD_CDC_TransmitPacket+0x7c>)
 801d06e:	781b      	ldrb	r3, [r3, #0]
 801d070:	f003 020f 	and.w	r2, r3, #15
 801d074:	68bb      	ldr	r3, [r7, #8]
 801d076:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801d07a:	6878      	ldr	r0, [r7, #4]
 801d07c:	4613      	mov	r3, r2
 801d07e:	009b      	lsls	r3, r3, #2
 801d080:	4413      	add	r3, r2
 801d082:	009b      	lsls	r3, r3, #2
 801d084:	4403      	add	r3, r0
 801d086:	3318      	adds	r3, #24
 801d088:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801d08a:	4b09      	ldr	r3, [pc, #36]	@ (801d0b0 <USBD_CDC_TransmitPacket+0x7c>)
 801d08c:	7819      	ldrb	r1, [r3, #0]
 801d08e:	68bb      	ldr	r3, [r7, #8]
 801d090:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801d094:	68bb      	ldr	r3, [r7, #8]
 801d096:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801d09a:	6878      	ldr	r0, [r7, #4]
 801d09c:	f006 f855 	bl	802314a <USBD_LL_Transmit>

    ret = USBD_OK;
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801d0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d0a6:	4618      	mov	r0, r3
 801d0a8:	3710      	adds	r7, #16
 801d0aa:	46bd      	mov	sp, r7
 801d0ac:	bd80      	pop	{r7, pc}
 801d0ae:	bf00      	nop
 801d0b0:	24000327 	.word	0x24000327

0801d0b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801d0b4:	b580      	push	{r7, lr}
 801d0b6:	b084      	sub	sp, #16
 801d0b8:	af00      	add	r7, sp, #0
 801d0ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	32b0      	adds	r2, #176	@ 0xb0
 801d0c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d0ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	32b0      	adds	r2, #176	@ 0xb0
 801d0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d101      	bne.n	801d0e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801d0de:	2303      	movs	r3, #3
 801d0e0:	e018      	b.n	801d114 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	7c1b      	ldrb	r3, [r3, #16]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d10a      	bne.n	801d100 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801d0ea:	4b0c      	ldr	r3, [pc, #48]	@ (801d11c <USBD_CDC_ReceivePacket+0x68>)
 801d0ec:	7819      	ldrb	r1, [r3, #0]
 801d0ee:	68fb      	ldr	r3, [r7, #12]
 801d0f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801d0f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801d0f8:	6878      	ldr	r0, [r7, #4]
 801d0fa:	f006 f847 	bl	802318c <USBD_LL_PrepareReceive>
 801d0fe:	e008      	b.n	801d112 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801d100:	4b06      	ldr	r3, [pc, #24]	@ (801d11c <USBD_CDC_ReceivePacket+0x68>)
 801d102:	7819      	ldrb	r1, [r3, #0]
 801d104:	68fb      	ldr	r3, [r7, #12]
 801d106:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801d10a:	2340      	movs	r3, #64	@ 0x40
 801d10c:	6878      	ldr	r0, [r7, #4]
 801d10e:	f006 f83d 	bl	802318c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801d112:	2300      	movs	r3, #0
}
 801d114:	4618      	mov	r0, r3
 801d116:	3710      	adds	r7, #16
 801d118:	46bd      	mov	sp, r7
 801d11a:	bd80      	pop	{r7, pc}
 801d11c:	24000328 	.word	0x24000328

0801d120 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801d120:	b580      	push	{r7, lr}
 801d122:	b086      	sub	sp, #24
 801d124:	af00      	add	r7, sp, #0
 801d126:	60f8      	str	r0, [r7, #12]
 801d128:	60b9      	str	r1, [r7, #8]
 801d12a:	4613      	mov	r3, r2
 801d12c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801d12e:	68fb      	ldr	r3, [r7, #12]
 801d130:	2b00      	cmp	r3, #0
 801d132:	d101      	bne.n	801d138 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801d134:	2303      	movs	r3, #3
 801d136:	e01f      	b.n	801d178 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	2200      	movs	r2, #0
 801d13c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	2200      	movs	r2, #0
 801d144:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	2200      	movs	r2, #0
 801d14c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801d150:	68bb      	ldr	r3, [r7, #8]
 801d152:	2b00      	cmp	r3, #0
 801d154:	d003      	beq.n	801d15e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801d156:	68fb      	ldr	r3, [r7, #12]
 801d158:	68ba      	ldr	r2, [r7, #8]
 801d15a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	2201      	movs	r2, #1
 801d162:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801d166:	68fb      	ldr	r3, [r7, #12]
 801d168:	79fa      	ldrb	r2, [r7, #7]
 801d16a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801d16c:	68f8      	ldr	r0, [r7, #12]
 801d16e:	f005 feb1 	bl	8022ed4 <USBD_LL_Init>
 801d172:	4603      	mov	r3, r0
 801d174:	75fb      	strb	r3, [r7, #23]

  return ret;
 801d176:	7dfb      	ldrb	r3, [r7, #23]
}
 801d178:	4618      	mov	r0, r3
 801d17a:	3718      	adds	r7, #24
 801d17c:	46bd      	mov	sp, r7
 801d17e:	bd80      	pop	{r7, pc}

0801d180 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801d180:	b580      	push	{r7, lr}
 801d182:	b084      	sub	sp, #16
 801d184:	af00      	add	r7, sp, #0
 801d186:	6078      	str	r0, [r7, #4]
 801d188:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801d18a:	2300      	movs	r3, #0
 801d18c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801d18e:	683b      	ldr	r3, [r7, #0]
 801d190:	2b00      	cmp	r3, #0
 801d192:	d101      	bne.n	801d198 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801d194:	2303      	movs	r3, #3
 801d196:	e025      	b.n	801d1e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	683a      	ldr	r2, [r7, #0]
 801d19c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	32ae      	adds	r2, #174	@ 0xae
 801d1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d00f      	beq.n	801d1d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	32ae      	adds	r2, #174	@ 0xae
 801d1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d1c4:	f107 020e 	add.w	r2, r7, #14
 801d1c8:	4610      	mov	r0, r2
 801d1ca:	4798      	blx	r3
 801d1cc:	4602      	mov	r2, r0
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801d1da:	1c5a      	adds	r2, r3, #1
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801d1e2:	2300      	movs	r3, #0
}
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	3710      	adds	r7, #16
 801d1e8:	46bd      	mov	sp, r7
 801d1ea:	bd80      	pop	{r7, pc}

0801d1ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b082      	sub	sp, #8
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801d1f4:	6878      	ldr	r0, [r7, #4]
 801d1f6:	f005 febf 	bl	8022f78 <USBD_LL_Start>
 801d1fa:	4603      	mov	r3, r0
}
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	3708      	adds	r7, #8
 801d200:	46bd      	mov	sp, r7
 801d202:	bd80      	pop	{r7, pc}

0801d204 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801d204:	b480      	push	{r7}
 801d206:	b083      	sub	sp, #12
 801d208:	af00      	add	r7, sp, #0
 801d20a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801d20c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801d20e:	4618      	mov	r0, r3
 801d210:	370c      	adds	r7, #12
 801d212:	46bd      	mov	sp, r7
 801d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d218:	4770      	bx	lr

0801d21a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801d21a:	b580      	push	{r7, lr}
 801d21c:	b084      	sub	sp, #16
 801d21e:	af00      	add	r7, sp, #0
 801d220:	6078      	str	r0, [r7, #4]
 801d222:	460b      	mov	r3, r1
 801d224:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801d226:	2300      	movs	r3, #0
 801d228:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d230:	2b00      	cmp	r3, #0
 801d232:	d009      	beq.n	801d248 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	78fa      	ldrb	r2, [r7, #3]
 801d23e:	4611      	mov	r1, r2
 801d240:	6878      	ldr	r0, [r7, #4]
 801d242:	4798      	blx	r3
 801d244:	4603      	mov	r3, r0
 801d246:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801d248:	7bfb      	ldrb	r3, [r7, #15]
}
 801d24a:	4618      	mov	r0, r3
 801d24c:	3710      	adds	r7, #16
 801d24e:	46bd      	mov	sp, r7
 801d250:	bd80      	pop	{r7, pc}

0801d252 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801d252:	b580      	push	{r7, lr}
 801d254:	b084      	sub	sp, #16
 801d256:	af00      	add	r7, sp, #0
 801d258:	6078      	str	r0, [r7, #4]
 801d25a:	460b      	mov	r3, r1
 801d25c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801d25e:	2300      	movs	r3, #0
 801d260:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d268:	685b      	ldr	r3, [r3, #4]
 801d26a:	78fa      	ldrb	r2, [r7, #3]
 801d26c:	4611      	mov	r1, r2
 801d26e:	6878      	ldr	r0, [r7, #4]
 801d270:	4798      	blx	r3
 801d272:	4603      	mov	r3, r0
 801d274:	2b00      	cmp	r3, #0
 801d276:	d001      	beq.n	801d27c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801d278:	2303      	movs	r3, #3
 801d27a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801d27c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d27e:	4618      	mov	r0, r3
 801d280:	3710      	adds	r7, #16
 801d282:	46bd      	mov	sp, r7
 801d284:	bd80      	pop	{r7, pc}

0801d286 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801d286:	b580      	push	{r7, lr}
 801d288:	b084      	sub	sp, #16
 801d28a:	af00      	add	r7, sp, #0
 801d28c:	6078      	str	r0, [r7, #4]
 801d28e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801d296:	6839      	ldr	r1, [r7, #0]
 801d298:	4618      	mov	r0, r3
 801d29a:	f001 f936 	bl	801e50a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	2201      	movs	r2, #1
 801d2a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801d2ac:	461a      	mov	r2, r3
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801d2ba:	f003 031f 	and.w	r3, r3, #31
 801d2be:	2b02      	cmp	r3, #2
 801d2c0:	d01a      	beq.n	801d2f8 <USBD_LL_SetupStage+0x72>
 801d2c2:	2b02      	cmp	r3, #2
 801d2c4:	d822      	bhi.n	801d30c <USBD_LL_SetupStage+0x86>
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d002      	beq.n	801d2d0 <USBD_LL_SetupStage+0x4a>
 801d2ca:	2b01      	cmp	r3, #1
 801d2cc:	d00a      	beq.n	801d2e4 <USBD_LL_SetupStage+0x5e>
 801d2ce:	e01d      	b.n	801d30c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801d2d6:	4619      	mov	r1, r3
 801d2d8:	6878      	ldr	r0, [r7, #4]
 801d2da:	f000 fb63 	bl	801d9a4 <USBD_StdDevReq>
 801d2de:	4603      	mov	r3, r0
 801d2e0:	73fb      	strb	r3, [r7, #15]
      break;
 801d2e2:	e020      	b.n	801d326 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801d2ea:	4619      	mov	r1, r3
 801d2ec:	6878      	ldr	r0, [r7, #4]
 801d2ee:	f000 fbcb 	bl	801da88 <USBD_StdItfReq>
 801d2f2:	4603      	mov	r3, r0
 801d2f4:	73fb      	strb	r3, [r7, #15]
      break;
 801d2f6:	e016      	b.n	801d326 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801d2fe:	4619      	mov	r1, r3
 801d300:	6878      	ldr	r0, [r7, #4]
 801d302:	f000 fc2d 	bl	801db60 <USBD_StdEPReq>
 801d306:	4603      	mov	r3, r0
 801d308:	73fb      	strb	r3, [r7, #15]
      break;
 801d30a:	e00c      	b.n	801d326 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801d312:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801d316:	b2db      	uxtb	r3, r3
 801d318:	4619      	mov	r1, r3
 801d31a:	6878      	ldr	r0, [r7, #4]
 801d31c:	f005 fe8c 	bl	8023038 <USBD_LL_StallEP>
 801d320:	4603      	mov	r3, r0
 801d322:	73fb      	strb	r3, [r7, #15]
      break;
 801d324:	bf00      	nop
  }

  return ret;
 801d326:	7bfb      	ldrb	r3, [r7, #15]
}
 801d328:	4618      	mov	r0, r3
 801d32a:	3710      	adds	r7, #16
 801d32c:	46bd      	mov	sp, r7
 801d32e:	bd80      	pop	{r7, pc}

0801d330 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801d330:	b580      	push	{r7, lr}
 801d332:	b086      	sub	sp, #24
 801d334:	af00      	add	r7, sp, #0
 801d336:	60f8      	str	r0, [r7, #12]
 801d338:	460b      	mov	r3, r1
 801d33a:	607a      	str	r2, [r7, #4]
 801d33c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801d33e:	2300      	movs	r3, #0
 801d340:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801d342:	7afb      	ldrb	r3, [r7, #11]
 801d344:	2b00      	cmp	r3, #0
 801d346:	d16e      	bne.n	801d426 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801d34e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801d350:	68fb      	ldr	r3, [r7, #12]
 801d352:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801d356:	2b03      	cmp	r3, #3
 801d358:	f040 8098 	bne.w	801d48c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801d35c:	693b      	ldr	r3, [r7, #16]
 801d35e:	689a      	ldr	r2, [r3, #8]
 801d360:	693b      	ldr	r3, [r7, #16]
 801d362:	68db      	ldr	r3, [r3, #12]
 801d364:	429a      	cmp	r2, r3
 801d366:	d913      	bls.n	801d390 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801d368:	693b      	ldr	r3, [r7, #16]
 801d36a:	689a      	ldr	r2, [r3, #8]
 801d36c:	693b      	ldr	r3, [r7, #16]
 801d36e:	68db      	ldr	r3, [r3, #12]
 801d370:	1ad2      	subs	r2, r2, r3
 801d372:	693b      	ldr	r3, [r7, #16]
 801d374:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801d376:	693b      	ldr	r3, [r7, #16]
 801d378:	68da      	ldr	r2, [r3, #12]
 801d37a:	693b      	ldr	r3, [r7, #16]
 801d37c:	689b      	ldr	r3, [r3, #8]
 801d37e:	4293      	cmp	r3, r2
 801d380:	bf28      	it	cs
 801d382:	4613      	movcs	r3, r2
 801d384:	461a      	mov	r2, r3
 801d386:	6879      	ldr	r1, [r7, #4]
 801d388:	68f8      	ldr	r0, [r7, #12]
 801d38a:	f001 f9be 	bl	801e70a <USBD_CtlContinueRx>
 801d38e:	e07d      	b.n	801d48c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801d396:	f003 031f 	and.w	r3, r3, #31
 801d39a:	2b02      	cmp	r3, #2
 801d39c:	d014      	beq.n	801d3c8 <USBD_LL_DataOutStage+0x98>
 801d39e:	2b02      	cmp	r3, #2
 801d3a0:	d81d      	bhi.n	801d3de <USBD_LL_DataOutStage+0xae>
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	d002      	beq.n	801d3ac <USBD_LL_DataOutStage+0x7c>
 801d3a6:	2b01      	cmp	r3, #1
 801d3a8:	d003      	beq.n	801d3b2 <USBD_LL_DataOutStage+0x82>
 801d3aa:	e018      	b.n	801d3de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801d3ac:	2300      	movs	r3, #0
 801d3ae:	75bb      	strb	r3, [r7, #22]
            break;
 801d3b0:	e018      	b.n	801d3e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801d3b8:	b2db      	uxtb	r3, r3
 801d3ba:	4619      	mov	r1, r3
 801d3bc:	68f8      	ldr	r0, [r7, #12]
 801d3be:	f000 fa64 	bl	801d88a <USBD_CoreFindIF>
 801d3c2:	4603      	mov	r3, r0
 801d3c4:	75bb      	strb	r3, [r7, #22]
            break;
 801d3c6:	e00d      	b.n	801d3e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801d3ce:	b2db      	uxtb	r3, r3
 801d3d0:	4619      	mov	r1, r3
 801d3d2:	68f8      	ldr	r0, [r7, #12]
 801d3d4:	f000 fa66 	bl	801d8a4 <USBD_CoreFindEP>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	75bb      	strb	r3, [r7, #22]
            break;
 801d3dc:	e002      	b.n	801d3e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801d3de:	2300      	movs	r3, #0
 801d3e0:	75bb      	strb	r3, [r7, #22]
            break;
 801d3e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801d3e4:	7dbb      	ldrb	r3, [r7, #22]
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d119      	bne.n	801d41e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d3ea:	68fb      	ldr	r3, [r7, #12]
 801d3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801d3f0:	b2db      	uxtb	r3, r3
 801d3f2:	2b03      	cmp	r3, #3
 801d3f4:	d113      	bne.n	801d41e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801d3f6:	7dba      	ldrb	r2, [r7, #22]
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	32ae      	adds	r2, #174	@ 0xae
 801d3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d400:	691b      	ldr	r3, [r3, #16]
 801d402:	2b00      	cmp	r3, #0
 801d404:	d00b      	beq.n	801d41e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801d406:	7dba      	ldrb	r2, [r7, #22]
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801d40e:	7dba      	ldrb	r2, [r7, #22]
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	32ae      	adds	r2, #174	@ 0xae
 801d414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d418:	691b      	ldr	r3, [r3, #16]
 801d41a:	68f8      	ldr	r0, [r7, #12]
 801d41c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801d41e:	68f8      	ldr	r0, [r7, #12]
 801d420:	f001 f984 	bl	801e72c <USBD_CtlSendStatus>
 801d424:	e032      	b.n	801d48c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801d426:	7afb      	ldrb	r3, [r7, #11]
 801d428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d42c:	b2db      	uxtb	r3, r3
 801d42e:	4619      	mov	r1, r3
 801d430:	68f8      	ldr	r0, [r7, #12]
 801d432:	f000 fa37 	bl	801d8a4 <USBD_CoreFindEP>
 801d436:	4603      	mov	r3, r0
 801d438:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801d43a:	7dbb      	ldrb	r3, [r7, #22]
 801d43c:	2bff      	cmp	r3, #255	@ 0xff
 801d43e:	d025      	beq.n	801d48c <USBD_LL_DataOutStage+0x15c>
 801d440:	7dbb      	ldrb	r3, [r7, #22]
 801d442:	2b00      	cmp	r3, #0
 801d444:	d122      	bne.n	801d48c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d446:	68fb      	ldr	r3, [r7, #12]
 801d448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801d44c:	b2db      	uxtb	r3, r3
 801d44e:	2b03      	cmp	r3, #3
 801d450:	d117      	bne.n	801d482 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801d452:	7dba      	ldrb	r2, [r7, #22]
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	32ae      	adds	r2, #174	@ 0xae
 801d458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d45c:	699b      	ldr	r3, [r3, #24]
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d00f      	beq.n	801d482 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801d462:	7dba      	ldrb	r2, [r7, #22]
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801d46a:	7dba      	ldrb	r2, [r7, #22]
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	32ae      	adds	r2, #174	@ 0xae
 801d470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d474:	699b      	ldr	r3, [r3, #24]
 801d476:	7afa      	ldrb	r2, [r7, #11]
 801d478:	4611      	mov	r1, r2
 801d47a:	68f8      	ldr	r0, [r7, #12]
 801d47c:	4798      	blx	r3
 801d47e:	4603      	mov	r3, r0
 801d480:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801d482:	7dfb      	ldrb	r3, [r7, #23]
 801d484:	2b00      	cmp	r3, #0
 801d486:	d001      	beq.n	801d48c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801d488:	7dfb      	ldrb	r3, [r7, #23]
 801d48a:	e000      	b.n	801d48e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801d48c:	2300      	movs	r3, #0
}
 801d48e:	4618      	mov	r0, r3
 801d490:	3718      	adds	r7, #24
 801d492:	46bd      	mov	sp, r7
 801d494:	bd80      	pop	{r7, pc}

0801d496 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801d496:	b580      	push	{r7, lr}
 801d498:	b086      	sub	sp, #24
 801d49a:	af00      	add	r7, sp, #0
 801d49c:	60f8      	str	r0, [r7, #12]
 801d49e:	460b      	mov	r3, r1
 801d4a0:	607a      	str	r2, [r7, #4]
 801d4a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801d4a4:	7afb      	ldrb	r3, [r7, #11]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d16f      	bne.n	801d58a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	3314      	adds	r3, #20
 801d4ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801d4b6:	2b02      	cmp	r3, #2
 801d4b8:	d15a      	bne.n	801d570 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801d4ba:	693b      	ldr	r3, [r7, #16]
 801d4bc:	689a      	ldr	r2, [r3, #8]
 801d4be:	693b      	ldr	r3, [r7, #16]
 801d4c0:	68db      	ldr	r3, [r3, #12]
 801d4c2:	429a      	cmp	r2, r3
 801d4c4:	d914      	bls.n	801d4f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801d4c6:	693b      	ldr	r3, [r7, #16]
 801d4c8:	689a      	ldr	r2, [r3, #8]
 801d4ca:	693b      	ldr	r3, [r7, #16]
 801d4cc:	68db      	ldr	r3, [r3, #12]
 801d4ce:	1ad2      	subs	r2, r2, r3
 801d4d0:	693b      	ldr	r3, [r7, #16]
 801d4d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801d4d4:	693b      	ldr	r3, [r7, #16]
 801d4d6:	689b      	ldr	r3, [r3, #8]
 801d4d8:	461a      	mov	r2, r3
 801d4da:	6879      	ldr	r1, [r7, #4]
 801d4dc:	68f8      	ldr	r0, [r7, #12]
 801d4de:	f001 f8e6 	bl	801e6ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d4e2:	2300      	movs	r3, #0
 801d4e4:	2200      	movs	r2, #0
 801d4e6:	2100      	movs	r1, #0
 801d4e8:	68f8      	ldr	r0, [r7, #12]
 801d4ea:	f005 fe4f 	bl	802318c <USBD_LL_PrepareReceive>
 801d4ee:	e03f      	b.n	801d570 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801d4f0:	693b      	ldr	r3, [r7, #16]
 801d4f2:	68da      	ldr	r2, [r3, #12]
 801d4f4:	693b      	ldr	r3, [r7, #16]
 801d4f6:	689b      	ldr	r3, [r3, #8]
 801d4f8:	429a      	cmp	r2, r3
 801d4fa:	d11c      	bne.n	801d536 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801d4fc:	693b      	ldr	r3, [r7, #16]
 801d4fe:	685a      	ldr	r2, [r3, #4]
 801d500:	693b      	ldr	r3, [r7, #16]
 801d502:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801d504:	429a      	cmp	r2, r3
 801d506:	d316      	bcc.n	801d536 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801d508:	693b      	ldr	r3, [r7, #16]
 801d50a:	685a      	ldr	r2, [r3, #4]
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801d512:	429a      	cmp	r2, r3
 801d514:	d20f      	bcs.n	801d536 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801d516:	2200      	movs	r2, #0
 801d518:	2100      	movs	r1, #0
 801d51a:	68f8      	ldr	r0, [r7, #12]
 801d51c:	f001 f8c7 	bl	801e6ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801d520:	68fb      	ldr	r3, [r7, #12]
 801d522:	2200      	movs	r2, #0
 801d524:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d528:	2300      	movs	r3, #0
 801d52a:	2200      	movs	r2, #0
 801d52c:	2100      	movs	r1, #0
 801d52e:	68f8      	ldr	r0, [r7, #12]
 801d530:	f005 fe2c 	bl	802318c <USBD_LL_PrepareReceive>
 801d534:	e01c      	b.n	801d570 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d536:	68fb      	ldr	r3, [r7, #12]
 801d538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801d53c:	b2db      	uxtb	r3, r3
 801d53e:	2b03      	cmp	r3, #3
 801d540:	d10f      	bne.n	801d562 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d548:	68db      	ldr	r3, [r3, #12]
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d009      	beq.n	801d562 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	2200      	movs	r2, #0
 801d552:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801d556:	68fb      	ldr	r3, [r7, #12]
 801d558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d55c:	68db      	ldr	r3, [r3, #12]
 801d55e:	68f8      	ldr	r0, [r7, #12]
 801d560:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801d562:	2180      	movs	r1, #128	@ 0x80
 801d564:	68f8      	ldr	r0, [r7, #12]
 801d566:	f005 fd67 	bl	8023038 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801d56a:	68f8      	ldr	r0, [r7, #12]
 801d56c:	f001 f8f1 	bl	801e752 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801d570:	68fb      	ldr	r3, [r7, #12]
 801d572:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801d576:	2b00      	cmp	r3, #0
 801d578:	d03a      	beq.n	801d5f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801d57a:	68f8      	ldr	r0, [r7, #12]
 801d57c:	f7ff fe42 	bl	801d204 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801d580:	68fb      	ldr	r3, [r7, #12]
 801d582:	2200      	movs	r2, #0
 801d584:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801d588:	e032      	b.n	801d5f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801d58a:	7afb      	ldrb	r3, [r7, #11]
 801d58c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801d590:	b2db      	uxtb	r3, r3
 801d592:	4619      	mov	r1, r3
 801d594:	68f8      	ldr	r0, [r7, #12]
 801d596:	f000 f985 	bl	801d8a4 <USBD_CoreFindEP>
 801d59a:	4603      	mov	r3, r0
 801d59c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801d59e:	7dfb      	ldrb	r3, [r7, #23]
 801d5a0:	2bff      	cmp	r3, #255	@ 0xff
 801d5a2:	d025      	beq.n	801d5f0 <USBD_LL_DataInStage+0x15a>
 801d5a4:	7dfb      	ldrb	r3, [r7, #23]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d122      	bne.n	801d5f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801d5b0:	b2db      	uxtb	r3, r3
 801d5b2:	2b03      	cmp	r3, #3
 801d5b4:	d11c      	bne.n	801d5f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801d5b6:	7dfa      	ldrb	r2, [r7, #23]
 801d5b8:	68fb      	ldr	r3, [r7, #12]
 801d5ba:	32ae      	adds	r2, #174	@ 0xae
 801d5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d5c0:	695b      	ldr	r3, [r3, #20]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d014      	beq.n	801d5f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801d5c6:	7dfa      	ldrb	r2, [r7, #23]
 801d5c8:	68fb      	ldr	r3, [r7, #12]
 801d5ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801d5ce:	7dfa      	ldrb	r2, [r7, #23]
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	32ae      	adds	r2, #174	@ 0xae
 801d5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d5d8:	695b      	ldr	r3, [r3, #20]
 801d5da:	7afa      	ldrb	r2, [r7, #11]
 801d5dc:	4611      	mov	r1, r2
 801d5de:	68f8      	ldr	r0, [r7, #12]
 801d5e0:	4798      	blx	r3
 801d5e2:	4603      	mov	r3, r0
 801d5e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801d5e6:	7dbb      	ldrb	r3, [r7, #22]
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	d001      	beq.n	801d5f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801d5ec:	7dbb      	ldrb	r3, [r7, #22]
 801d5ee:	e000      	b.n	801d5f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801d5f0:	2300      	movs	r3, #0
}
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	3718      	adds	r7, #24
 801d5f6:	46bd      	mov	sp, r7
 801d5f8:	bd80      	pop	{r7, pc}

0801d5fa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801d5fa:	b580      	push	{r7, lr}
 801d5fc:	b084      	sub	sp, #16
 801d5fe:	af00      	add	r7, sp, #0
 801d600:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801d602:	2300      	movs	r3, #0
 801d604:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	2201      	movs	r2, #1
 801d60a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	2200      	movs	r2, #0
 801d612:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	2200      	movs	r2, #0
 801d61a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	2200      	movs	r2, #0
 801d620:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	2200      	movs	r2, #0
 801d628:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d632:	2b00      	cmp	r3, #0
 801d634:	d014      	beq.n	801d660 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d63c:	685b      	ldr	r3, [r3, #4]
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d00e      	beq.n	801d660 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d648:	685b      	ldr	r3, [r3, #4]
 801d64a:	687a      	ldr	r2, [r7, #4]
 801d64c:	6852      	ldr	r2, [r2, #4]
 801d64e:	b2d2      	uxtb	r2, r2
 801d650:	4611      	mov	r1, r2
 801d652:	6878      	ldr	r0, [r7, #4]
 801d654:	4798      	blx	r3
 801d656:	4603      	mov	r3, r0
 801d658:	2b00      	cmp	r3, #0
 801d65a:	d001      	beq.n	801d660 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801d65c:	2303      	movs	r3, #3
 801d65e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801d660:	2340      	movs	r3, #64	@ 0x40
 801d662:	2200      	movs	r2, #0
 801d664:	2100      	movs	r1, #0
 801d666:	6878      	ldr	r0, [r7, #4]
 801d668:	f005 fca1 	bl	8022fae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	2201      	movs	r2, #1
 801d670:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	2240      	movs	r2, #64	@ 0x40
 801d678:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801d67c:	2340      	movs	r3, #64	@ 0x40
 801d67e:	2200      	movs	r2, #0
 801d680:	2180      	movs	r1, #128	@ 0x80
 801d682:	6878      	ldr	r0, [r7, #4]
 801d684:	f005 fc93 	bl	8022fae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	2201      	movs	r2, #1
 801d68c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	2240      	movs	r2, #64	@ 0x40
 801d692:	621a      	str	r2, [r3, #32]

  return ret;
 801d694:	7bfb      	ldrb	r3, [r7, #15]
}
 801d696:	4618      	mov	r0, r3
 801d698:	3710      	adds	r7, #16
 801d69a:	46bd      	mov	sp, r7
 801d69c:	bd80      	pop	{r7, pc}

0801d69e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801d69e:	b480      	push	{r7}
 801d6a0:	b083      	sub	sp, #12
 801d6a2:	af00      	add	r7, sp, #0
 801d6a4:	6078      	str	r0, [r7, #4]
 801d6a6:	460b      	mov	r3, r1
 801d6a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	78fa      	ldrb	r2, [r7, #3]
 801d6ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801d6b0:	2300      	movs	r3, #0
}
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	370c      	adds	r7, #12
 801d6b6:	46bd      	mov	sp, r7
 801d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6bc:	4770      	bx	lr

0801d6be <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801d6be:	b480      	push	{r7}
 801d6c0:	b083      	sub	sp, #12
 801d6c2:	af00      	add	r7, sp, #0
 801d6c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801d6cc:	b2db      	uxtb	r3, r3
 801d6ce:	2b04      	cmp	r3, #4
 801d6d0:	d006      	beq.n	801d6e0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801d6d8:	b2da      	uxtb	r2, r3
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	2204      	movs	r2, #4
 801d6e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801d6e8:	2300      	movs	r3, #0
}
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	370c      	adds	r7, #12
 801d6ee:	46bd      	mov	sp, r7
 801d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6f4:	4770      	bx	lr

0801d6f6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801d6f6:	b480      	push	{r7}
 801d6f8:	b083      	sub	sp, #12
 801d6fa:	af00      	add	r7, sp, #0
 801d6fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801d704:	b2db      	uxtb	r3, r3
 801d706:	2b04      	cmp	r3, #4
 801d708:	d106      	bne.n	801d718 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801d710:	b2da      	uxtb	r2, r3
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801d718:	2300      	movs	r3, #0
}
 801d71a:	4618      	mov	r0, r3
 801d71c:	370c      	adds	r7, #12
 801d71e:	46bd      	mov	sp, r7
 801d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d724:	4770      	bx	lr

0801d726 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801d726:	b580      	push	{r7, lr}
 801d728:	b082      	sub	sp, #8
 801d72a:	af00      	add	r7, sp, #0
 801d72c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801d734:	b2db      	uxtb	r3, r3
 801d736:	2b03      	cmp	r3, #3
 801d738:	d110      	bne.n	801d75c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d740:	2b00      	cmp	r3, #0
 801d742:	d00b      	beq.n	801d75c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d74a:	69db      	ldr	r3, [r3, #28]
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d005      	beq.n	801d75c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d756:	69db      	ldr	r3, [r3, #28]
 801d758:	6878      	ldr	r0, [r7, #4]
 801d75a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801d75c:	2300      	movs	r3, #0
}
 801d75e:	4618      	mov	r0, r3
 801d760:	3708      	adds	r7, #8
 801d762:	46bd      	mov	sp, r7
 801d764:	bd80      	pop	{r7, pc}

0801d766 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801d766:	b580      	push	{r7, lr}
 801d768:	b082      	sub	sp, #8
 801d76a:	af00      	add	r7, sp, #0
 801d76c:	6078      	str	r0, [r7, #4]
 801d76e:	460b      	mov	r3, r1
 801d770:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	32ae      	adds	r2, #174	@ 0xae
 801d77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d780:	2b00      	cmp	r3, #0
 801d782:	d101      	bne.n	801d788 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801d784:	2303      	movs	r3, #3
 801d786:	e01c      	b.n	801d7c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801d78e:	b2db      	uxtb	r3, r3
 801d790:	2b03      	cmp	r3, #3
 801d792:	d115      	bne.n	801d7c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d79a:	687b      	ldr	r3, [r7, #4]
 801d79c:	32ae      	adds	r2, #174	@ 0xae
 801d79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d7a2:	6a1b      	ldr	r3, [r3, #32]
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d00b      	beq.n	801d7c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	32ae      	adds	r2, #174	@ 0xae
 801d7b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d7b6:	6a1b      	ldr	r3, [r3, #32]
 801d7b8:	78fa      	ldrb	r2, [r7, #3]
 801d7ba:	4611      	mov	r1, r2
 801d7bc:	6878      	ldr	r0, [r7, #4]
 801d7be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801d7c0:	2300      	movs	r3, #0
}
 801d7c2:	4618      	mov	r0, r3
 801d7c4:	3708      	adds	r7, #8
 801d7c6:	46bd      	mov	sp, r7
 801d7c8:	bd80      	pop	{r7, pc}

0801d7ca <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801d7ca:	b580      	push	{r7, lr}
 801d7cc:	b082      	sub	sp, #8
 801d7ce:	af00      	add	r7, sp, #0
 801d7d0:	6078      	str	r0, [r7, #4]
 801d7d2:	460b      	mov	r3, r1
 801d7d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	32ae      	adds	r2, #174	@ 0xae
 801d7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d101      	bne.n	801d7ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801d7e8:	2303      	movs	r3, #3
 801d7ea:	e01c      	b.n	801d826 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801d7f2:	b2db      	uxtb	r3, r3
 801d7f4:	2b03      	cmp	r3, #3
 801d7f6:	d115      	bne.n	801d824 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	32ae      	adds	r2, #174	@ 0xae
 801d802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d808:	2b00      	cmp	r3, #0
 801d80a:	d00b      	beq.n	801d824 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	32ae      	adds	r2, #174	@ 0xae
 801d816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d81c:	78fa      	ldrb	r2, [r7, #3]
 801d81e:	4611      	mov	r1, r2
 801d820:	6878      	ldr	r0, [r7, #4]
 801d822:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801d824:	2300      	movs	r3, #0
}
 801d826:	4618      	mov	r0, r3
 801d828:	3708      	adds	r7, #8
 801d82a:	46bd      	mov	sp, r7
 801d82c:	bd80      	pop	{r7, pc}

0801d82e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801d82e:	b480      	push	{r7}
 801d830:	b083      	sub	sp, #12
 801d832:	af00      	add	r7, sp, #0
 801d834:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801d836:	2300      	movs	r3, #0
}
 801d838:	4618      	mov	r0, r3
 801d83a:	370c      	adds	r7, #12
 801d83c:	46bd      	mov	sp, r7
 801d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d842:	4770      	bx	lr

0801d844 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801d844:	b580      	push	{r7, lr}
 801d846:	b084      	sub	sp, #16
 801d848:	af00      	add	r7, sp, #0
 801d84a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801d84c:	2300      	movs	r3, #0
 801d84e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	2201      	movs	r2, #1
 801d854:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d00e      	beq.n	801d880 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801d868:	685b      	ldr	r3, [r3, #4]
 801d86a:	687a      	ldr	r2, [r7, #4]
 801d86c:	6852      	ldr	r2, [r2, #4]
 801d86e:	b2d2      	uxtb	r2, r2
 801d870:	4611      	mov	r1, r2
 801d872:	6878      	ldr	r0, [r7, #4]
 801d874:	4798      	blx	r3
 801d876:	4603      	mov	r3, r0
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d001      	beq.n	801d880 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801d87c:	2303      	movs	r3, #3
 801d87e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801d880:	7bfb      	ldrb	r3, [r7, #15]
}
 801d882:	4618      	mov	r0, r3
 801d884:	3710      	adds	r7, #16
 801d886:	46bd      	mov	sp, r7
 801d888:	bd80      	pop	{r7, pc}

0801d88a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801d88a:	b480      	push	{r7}
 801d88c:	b083      	sub	sp, #12
 801d88e:	af00      	add	r7, sp, #0
 801d890:	6078      	str	r0, [r7, #4]
 801d892:	460b      	mov	r3, r1
 801d894:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801d896:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801d898:	4618      	mov	r0, r3
 801d89a:	370c      	adds	r7, #12
 801d89c:	46bd      	mov	sp, r7
 801d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8a2:	4770      	bx	lr

0801d8a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801d8a4:	b480      	push	{r7}
 801d8a6:	b083      	sub	sp, #12
 801d8a8:	af00      	add	r7, sp, #0
 801d8aa:	6078      	str	r0, [r7, #4]
 801d8ac:	460b      	mov	r3, r1
 801d8ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801d8b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	370c      	adds	r7, #12
 801d8b6:	46bd      	mov	sp, r7
 801d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8bc:	4770      	bx	lr

0801d8be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801d8be:	b580      	push	{r7, lr}
 801d8c0:	b086      	sub	sp, #24
 801d8c2:	af00      	add	r7, sp, #0
 801d8c4:	6078      	str	r0, [r7, #4]
 801d8c6:	460b      	mov	r3, r1
 801d8c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801d8d2:	2300      	movs	r3, #0
 801d8d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801d8d6:	68fb      	ldr	r3, [r7, #12]
 801d8d8:	885b      	ldrh	r3, [r3, #2]
 801d8da:	b29b      	uxth	r3, r3
 801d8dc:	68fa      	ldr	r2, [r7, #12]
 801d8de:	7812      	ldrb	r2, [r2, #0]
 801d8e0:	4293      	cmp	r3, r2
 801d8e2:	d91f      	bls.n	801d924 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	781b      	ldrb	r3, [r3, #0]
 801d8e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801d8ea:	e013      	b.n	801d914 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801d8ec:	f107 030a 	add.w	r3, r7, #10
 801d8f0:	4619      	mov	r1, r3
 801d8f2:	6978      	ldr	r0, [r7, #20]
 801d8f4:	f000 f81b 	bl	801d92e <USBD_GetNextDesc>
 801d8f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801d8fa:	697b      	ldr	r3, [r7, #20]
 801d8fc:	785b      	ldrb	r3, [r3, #1]
 801d8fe:	2b05      	cmp	r3, #5
 801d900:	d108      	bne.n	801d914 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801d902:	697b      	ldr	r3, [r7, #20]
 801d904:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801d906:	693b      	ldr	r3, [r7, #16]
 801d908:	789b      	ldrb	r3, [r3, #2]
 801d90a:	78fa      	ldrb	r2, [r7, #3]
 801d90c:	429a      	cmp	r2, r3
 801d90e:	d008      	beq.n	801d922 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801d910:	2300      	movs	r3, #0
 801d912:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801d914:	68fb      	ldr	r3, [r7, #12]
 801d916:	885b      	ldrh	r3, [r3, #2]
 801d918:	b29a      	uxth	r2, r3
 801d91a:	897b      	ldrh	r3, [r7, #10]
 801d91c:	429a      	cmp	r2, r3
 801d91e:	d8e5      	bhi.n	801d8ec <USBD_GetEpDesc+0x2e>
 801d920:	e000      	b.n	801d924 <USBD_GetEpDesc+0x66>
          break;
 801d922:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801d924:	693b      	ldr	r3, [r7, #16]
}
 801d926:	4618      	mov	r0, r3
 801d928:	3718      	adds	r7, #24
 801d92a:	46bd      	mov	sp, r7
 801d92c:	bd80      	pop	{r7, pc}

0801d92e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801d92e:	b480      	push	{r7}
 801d930:	b085      	sub	sp, #20
 801d932:	af00      	add	r7, sp, #0
 801d934:	6078      	str	r0, [r7, #4]
 801d936:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801d93c:	683b      	ldr	r3, [r7, #0]
 801d93e:	881b      	ldrh	r3, [r3, #0]
 801d940:	68fa      	ldr	r2, [r7, #12]
 801d942:	7812      	ldrb	r2, [r2, #0]
 801d944:	4413      	add	r3, r2
 801d946:	b29a      	uxth	r2, r3
 801d948:	683b      	ldr	r3, [r7, #0]
 801d94a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801d94c:	68fb      	ldr	r3, [r7, #12]
 801d94e:	781b      	ldrb	r3, [r3, #0]
 801d950:	461a      	mov	r2, r3
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	4413      	add	r3, r2
 801d956:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801d958:	68fb      	ldr	r3, [r7, #12]
}
 801d95a:	4618      	mov	r0, r3
 801d95c:	3714      	adds	r7, #20
 801d95e:	46bd      	mov	sp, r7
 801d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d964:	4770      	bx	lr

0801d966 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801d966:	b480      	push	{r7}
 801d968:	b087      	sub	sp, #28
 801d96a:	af00      	add	r7, sp, #0
 801d96c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801d972:	697b      	ldr	r3, [r7, #20]
 801d974:	781b      	ldrb	r3, [r3, #0]
 801d976:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801d978:	697b      	ldr	r3, [r7, #20]
 801d97a:	3301      	adds	r3, #1
 801d97c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801d97e:	697b      	ldr	r3, [r7, #20]
 801d980:	781b      	ldrb	r3, [r3, #0]
 801d982:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801d984:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801d988:	021b      	lsls	r3, r3, #8
 801d98a:	b21a      	sxth	r2, r3
 801d98c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d990:	4313      	orrs	r3, r2
 801d992:	b21b      	sxth	r3, r3
 801d994:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801d996:	89fb      	ldrh	r3, [r7, #14]
}
 801d998:	4618      	mov	r0, r3
 801d99a:	371c      	adds	r7, #28
 801d99c:	46bd      	mov	sp, r7
 801d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9a2:	4770      	bx	lr

0801d9a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d9a4:	b580      	push	{r7, lr}
 801d9a6:	b084      	sub	sp, #16
 801d9a8:	af00      	add	r7, sp, #0
 801d9aa:	6078      	str	r0, [r7, #4]
 801d9ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801d9ae:	2300      	movs	r3, #0
 801d9b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d9b2:	683b      	ldr	r3, [r7, #0]
 801d9b4:	781b      	ldrb	r3, [r3, #0]
 801d9b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d9ba:	2b40      	cmp	r3, #64	@ 0x40
 801d9bc:	d005      	beq.n	801d9ca <USBD_StdDevReq+0x26>
 801d9be:	2b40      	cmp	r3, #64	@ 0x40
 801d9c0:	d857      	bhi.n	801da72 <USBD_StdDevReq+0xce>
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d00f      	beq.n	801d9e6 <USBD_StdDevReq+0x42>
 801d9c6:	2b20      	cmp	r3, #32
 801d9c8:	d153      	bne.n	801da72 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	32ae      	adds	r2, #174	@ 0xae
 801d9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d9d8:	689b      	ldr	r3, [r3, #8]
 801d9da:	6839      	ldr	r1, [r7, #0]
 801d9dc:	6878      	ldr	r0, [r7, #4]
 801d9de:	4798      	blx	r3
 801d9e0:	4603      	mov	r3, r0
 801d9e2:	73fb      	strb	r3, [r7, #15]
      break;
 801d9e4:	e04a      	b.n	801da7c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801d9e6:	683b      	ldr	r3, [r7, #0]
 801d9e8:	785b      	ldrb	r3, [r3, #1]
 801d9ea:	2b09      	cmp	r3, #9
 801d9ec:	d83b      	bhi.n	801da66 <USBD_StdDevReq+0xc2>
 801d9ee:	a201      	add	r2, pc, #4	@ (adr r2, 801d9f4 <USBD_StdDevReq+0x50>)
 801d9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d9f4:	0801da49 	.word	0x0801da49
 801d9f8:	0801da5d 	.word	0x0801da5d
 801d9fc:	0801da67 	.word	0x0801da67
 801da00:	0801da53 	.word	0x0801da53
 801da04:	0801da67 	.word	0x0801da67
 801da08:	0801da27 	.word	0x0801da27
 801da0c:	0801da1d 	.word	0x0801da1d
 801da10:	0801da67 	.word	0x0801da67
 801da14:	0801da3f 	.word	0x0801da3f
 801da18:	0801da31 	.word	0x0801da31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801da1c:	6839      	ldr	r1, [r7, #0]
 801da1e:	6878      	ldr	r0, [r7, #4]
 801da20:	f000 fa3c 	bl	801de9c <USBD_GetDescriptor>
          break;
 801da24:	e024      	b.n	801da70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801da26:	6839      	ldr	r1, [r7, #0]
 801da28:	6878      	ldr	r0, [r7, #4]
 801da2a:	f000 fbcb 	bl	801e1c4 <USBD_SetAddress>
          break;
 801da2e:	e01f      	b.n	801da70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801da30:	6839      	ldr	r1, [r7, #0]
 801da32:	6878      	ldr	r0, [r7, #4]
 801da34:	f000 fc0a 	bl	801e24c <USBD_SetConfig>
 801da38:	4603      	mov	r3, r0
 801da3a:	73fb      	strb	r3, [r7, #15]
          break;
 801da3c:	e018      	b.n	801da70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801da3e:	6839      	ldr	r1, [r7, #0]
 801da40:	6878      	ldr	r0, [r7, #4]
 801da42:	f000 fcad 	bl	801e3a0 <USBD_GetConfig>
          break;
 801da46:	e013      	b.n	801da70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801da48:	6839      	ldr	r1, [r7, #0]
 801da4a:	6878      	ldr	r0, [r7, #4]
 801da4c:	f000 fcde 	bl	801e40c <USBD_GetStatus>
          break;
 801da50:	e00e      	b.n	801da70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801da52:	6839      	ldr	r1, [r7, #0]
 801da54:	6878      	ldr	r0, [r7, #4]
 801da56:	f000 fd0d 	bl	801e474 <USBD_SetFeature>
          break;
 801da5a:	e009      	b.n	801da70 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801da5c:	6839      	ldr	r1, [r7, #0]
 801da5e:	6878      	ldr	r0, [r7, #4]
 801da60:	f000 fd31 	bl	801e4c6 <USBD_ClrFeature>
          break;
 801da64:	e004      	b.n	801da70 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801da66:	6839      	ldr	r1, [r7, #0]
 801da68:	6878      	ldr	r0, [r7, #4]
 801da6a:	f000 fd88 	bl	801e57e <USBD_CtlError>
          break;
 801da6e:	bf00      	nop
      }
      break;
 801da70:	e004      	b.n	801da7c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801da72:	6839      	ldr	r1, [r7, #0]
 801da74:	6878      	ldr	r0, [r7, #4]
 801da76:	f000 fd82 	bl	801e57e <USBD_CtlError>
      break;
 801da7a:	bf00      	nop
  }

  return ret;
 801da7c:	7bfb      	ldrb	r3, [r7, #15]
}
 801da7e:	4618      	mov	r0, r3
 801da80:	3710      	adds	r7, #16
 801da82:	46bd      	mov	sp, r7
 801da84:	bd80      	pop	{r7, pc}
 801da86:	bf00      	nop

0801da88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801da88:	b580      	push	{r7, lr}
 801da8a:	b084      	sub	sp, #16
 801da8c:	af00      	add	r7, sp, #0
 801da8e:	6078      	str	r0, [r7, #4]
 801da90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801da92:	2300      	movs	r3, #0
 801da94:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801da96:	683b      	ldr	r3, [r7, #0]
 801da98:	781b      	ldrb	r3, [r3, #0]
 801da9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801da9e:	2b40      	cmp	r3, #64	@ 0x40
 801daa0:	d005      	beq.n	801daae <USBD_StdItfReq+0x26>
 801daa2:	2b40      	cmp	r3, #64	@ 0x40
 801daa4:	d852      	bhi.n	801db4c <USBD_StdItfReq+0xc4>
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d001      	beq.n	801daae <USBD_StdItfReq+0x26>
 801daaa:	2b20      	cmp	r3, #32
 801daac:	d14e      	bne.n	801db4c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801dab4:	b2db      	uxtb	r3, r3
 801dab6:	3b01      	subs	r3, #1
 801dab8:	2b02      	cmp	r3, #2
 801daba:	d840      	bhi.n	801db3e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801dabc:	683b      	ldr	r3, [r7, #0]
 801dabe:	889b      	ldrh	r3, [r3, #4]
 801dac0:	b2db      	uxtb	r3, r3
 801dac2:	2b01      	cmp	r3, #1
 801dac4:	d836      	bhi.n	801db34 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801dac6:	683b      	ldr	r3, [r7, #0]
 801dac8:	889b      	ldrh	r3, [r3, #4]
 801daca:	b2db      	uxtb	r3, r3
 801dacc:	4619      	mov	r1, r3
 801dace:	6878      	ldr	r0, [r7, #4]
 801dad0:	f7ff fedb 	bl	801d88a <USBD_CoreFindIF>
 801dad4:	4603      	mov	r3, r0
 801dad6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801dad8:	7bbb      	ldrb	r3, [r7, #14]
 801dada:	2bff      	cmp	r3, #255	@ 0xff
 801dadc:	d01d      	beq.n	801db1a <USBD_StdItfReq+0x92>
 801dade:	7bbb      	ldrb	r3, [r7, #14]
 801dae0:	2b00      	cmp	r3, #0
 801dae2:	d11a      	bne.n	801db1a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801dae4:	7bba      	ldrb	r2, [r7, #14]
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	32ae      	adds	r2, #174	@ 0xae
 801daea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801daee:	689b      	ldr	r3, [r3, #8]
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	d00f      	beq.n	801db14 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801daf4:	7bba      	ldrb	r2, [r7, #14]
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801dafc:	7bba      	ldrb	r2, [r7, #14]
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	32ae      	adds	r2, #174	@ 0xae
 801db02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801db06:	689b      	ldr	r3, [r3, #8]
 801db08:	6839      	ldr	r1, [r7, #0]
 801db0a:	6878      	ldr	r0, [r7, #4]
 801db0c:	4798      	blx	r3
 801db0e:	4603      	mov	r3, r0
 801db10:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801db12:	e004      	b.n	801db1e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801db14:	2303      	movs	r3, #3
 801db16:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801db18:	e001      	b.n	801db1e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801db1a:	2303      	movs	r3, #3
 801db1c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801db1e:	683b      	ldr	r3, [r7, #0]
 801db20:	88db      	ldrh	r3, [r3, #6]
 801db22:	2b00      	cmp	r3, #0
 801db24:	d110      	bne.n	801db48 <USBD_StdItfReq+0xc0>
 801db26:	7bfb      	ldrb	r3, [r7, #15]
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d10d      	bne.n	801db48 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801db2c:	6878      	ldr	r0, [r7, #4]
 801db2e:	f000 fdfd 	bl	801e72c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801db32:	e009      	b.n	801db48 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801db34:	6839      	ldr	r1, [r7, #0]
 801db36:	6878      	ldr	r0, [r7, #4]
 801db38:	f000 fd21 	bl	801e57e <USBD_CtlError>
          break;
 801db3c:	e004      	b.n	801db48 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801db3e:	6839      	ldr	r1, [r7, #0]
 801db40:	6878      	ldr	r0, [r7, #4]
 801db42:	f000 fd1c 	bl	801e57e <USBD_CtlError>
          break;
 801db46:	e000      	b.n	801db4a <USBD_StdItfReq+0xc2>
          break;
 801db48:	bf00      	nop
      }
      break;
 801db4a:	e004      	b.n	801db56 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801db4c:	6839      	ldr	r1, [r7, #0]
 801db4e:	6878      	ldr	r0, [r7, #4]
 801db50:	f000 fd15 	bl	801e57e <USBD_CtlError>
      break;
 801db54:	bf00      	nop
  }

  return ret;
 801db56:	7bfb      	ldrb	r3, [r7, #15]
}
 801db58:	4618      	mov	r0, r3
 801db5a:	3710      	adds	r7, #16
 801db5c:	46bd      	mov	sp, r7
 801db5e:	bd80      	pop	{r7, pc}

0801db60 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801db60:	b580      	push	{r7, lr}
 801db62:	b084      	sub	sp, #16
 801db64:	af00      	add	r7, sp, #0
 801db66:	6078      	str	r0, [r7, #4]
 801db68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801db6a:	2300      	movs	r3, #0
 801db6c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801db6e:	683b      	ldr	r3, [r7, #0]
 801db70:	889b      	ldrh	r3, [r3, #4]
 801db72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801db74:	683b      	ldr	r3, [r7, #0]
 801db76:	781b      	ldrb	r3, [r3, #0]
 801db78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801db7c:	2b40      	cmp	r3, #64	@ 0x40
 801db7e:	d007      	beq.n	801db90 <USBD_StdEPReq+0x30>
 801db80:	2b40      	cmp	r3, #64	@ 0x40
 801db82:	f200 817f 	bhi.w	801de84 <USBD_StdEPReq+0x324>
 801db86:	2b00      	cmp	r3, #0
 801db88:	d02a      	beq.n	801dbe0 <USBD_StdEPReq+0x80>
 801db8a:	2b20      	cmp	r3, #32
 801db8c:	f040 817a 	bne.w	801de84 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801db90:	7bbb      	ldrb	r3, [r7, #14]
 801db92:	4619      	mov	r1, r3
 801db94:	6878      	ldr	r0, [r7, #4]
 801db96:	f7ff fe85 	bl	801d8a4 <USBD_CoreFindEP>
 801db9a:	4603      	mov	r3, r0
 801db9c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801db9e:	7b7b      	ldrb	r3, [r7, #13]
 801dba0:	2bff      	cmp	r3, #255	@ 0xff
 801dba2:	f000 8174 	beq.w	801de8e <USBD_StdEPReq+0x32e>
 801dba6:	7b7b      	ldrb	r3, [r7, #13]
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	f040 8170 	bne.w	801de8e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801dbae:	7b7a      	ldrb	r2, [r7, #13]
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801dbb6:	7b7a      	ldrb	r2, [r7, #13]
 801dbb8:	687b      	ldr	r3, [r7, #4]
 801dbba:	32ae      	adds	r2, #174	@ 0xae
 801dbbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dbc0:	689b      	ldr	r3, [r3, #8]
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	f000 8163 	beq.w	801de8e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801dbc8:	7b7a      	ldrb	r2, [r7, #13]
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	32ae      	adds	r2, #174	@ 0xae
 801dbce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dbd2:	689b      	ldr	r3, [r3, #8]
 801dbd4:	6839      	ldr	r1, [r7, #0]
 801dbd6:	6878      	ldr	r0, [r7, #4]
 801dbd8:	4798      	blx	r3
 801dbda:	4603      	mov	r3, r0
 801dbdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801dbde:	e156      	b.n	801de8e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801dbe0:	683b      	ldr	r3, [r7, #0]
 801dbe2:	785b      	ldrb	r3, [r3, #1]
 801dbe4:	2b03      	cmp	r3, #3
 801dbe6:	d008      	beq.n	801dbfa <USBD_StdEPReq+0x9a>
 801dbe8:	2b03      	cmp	r3, #3
 801dbea:	f300 8145 	bgt.w	801de78 <USBD_StdEPReq+0x318>
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	f000 809b 	beq.w	801dd2a <USBD_StdEPReq+0x1ca>
 801dbf4:	2b01      	cmp	r3, #1
 801dbf6:	d03c      	beq.n	801dc72 <USBD_StdEPReq+0x112>
 801dbf8:	e13e      	b.n	801de78 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801dc00:	b2db      	uxtb	r3, r3
 801dc02:	2b02      	cmp	r3, #2
 801dc04:	d002      	beq.n	801dc0c <USBD_StdEPReq+0xac>
 801dc06:	2b03      	cmp	r3, #3
 801dc08:	d016      	beq.n	801dc38 <USBD_StdEPReq+0xd8>
 801dc0a:	e02c      	b.n	801dc66 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801dc0c:	7bbb      	ldrb	r3, [r7, #14]
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d00d      	beq.n	801dc2e <USBD_StdEPReq+0xce>
 801dc12:	7bbb      	ldrb	r3, [r7, #14]
 801dc14:	2b80      	cmp	r3, #128	@ 0x80
 801dc16:	d00a      	beq.n	801dc2e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801dc18:	7bbb      	ldrb	r3, [r7, #14]
 801dc1a:	4619      	mov	r1, r3
 801dc1c:	6878      	ldr	r0, [r7, #4]
 801dc1e:	f005 fa0b 	bl	8023038 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801dc22:	2180      	movs	r1, #128	@ 0x80
 801dc24:	6878      	ldr	r0, [r7, #4]
 801dc26:	f005 fa07 	bl	8023038 <USBD_LL_StallEP>
 801dc2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801dc2c:	e020      	b.n	801dc70 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801dc2e:	6839      	ldr	r1, [r7, #0]
 801dc30:	6878      	ldr	r0, [r7, #4]
 801dc32:	f000 fca4 	bl	801e57e <USBD_CtlError>
              break;
 801dc36:	e01b      	b.n	801dc70 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801dc38:	683b      	ldr	r3, [r7, #0]
 801dc3a:	885b      	ldrh	r3, [r3, #2]
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d10e      	bne.n	801dc5e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801dc40:	7bbb      	ldrb	r3, [r7, #14]
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d00b      	beq.n	801dc5e <USBD_StdEPReq+0xfe>
 801dc46:	7bbb      	ldrb	r3, [r7, #14]
 801dc48:	2b80      	cmp	r3, #128	@ 0x80
 801dc4a:	d008      	beq.n	801dc5e <USBD_StdEPReq+0xfe>
 801dc4c:	683b      	ldr	r3, [r7, #0]
 801dc4e:	88db      	ldrh	r3, [r3, #6]
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d104      	bne.n	801dc5e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801dc54:	7bbb      	ldrb	r3, [r7, #14]
 801dc56:	4619      	mov	r1, r3
 801dc58:	6878      	ldr	r0, [r7, #4]
 801dc5a:	f005 f9ed 	bl	8023038 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801dc5e:	6878      	ldr	r0, [r7, #4]
 801dc60:	f000 fd64 	bl	801e72c <USBD_CtlSendStatus>

              break;
 801dc64:	e004      	b.n	801dc70 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801dc66:	6839      	ldr	r1, [r7, #0]
 801dc68:	6878      	ldr	r0, [r7, #4]
 801dc6a:	f000 fc88 	bl	801e57e <USBD_CtlError>
              break;
 801dc6e:	bf00      	nop
          }
          break;
 801dc70:	e107      	b.n	801de82 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801dc78:	b2db      	uxtb	r3, r3
 801dc7a:	2b02      	cmp	r3, #2
 801dc7c:	d002      	beq.n	801dc84 <USBD_StdEPReq+0x124>
 801dc7e:	2b03      	cmp	r3, #3
 801dc80:	d016      	beq.n	801dcb0 <USBD_StdEPReq+0x150>
 801dc82:	e04b      	b.n	801dd1c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801dc84:	7bbb      	ldrb	r3, [r7, #14]
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d00d      	beq.n	801dca6 <USBD_StdEPReq+0x146>
 801dc8a:	7bbb      	ldrb	r3, [r7, #14]
 801dc8c:	2b80      	cmp	r3, #128	@ 0x80
 801dc8e:	d00a      	beq.n	801dca6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801dc90:	7bbb      	ldrb	r3, [r7, #14]
 801dc92:	4619      	mov	r1, r3
 801dc94:	6878      	ldr	r0, [r7, #4]
 801dc96:	f005 f9cf 	bl	8023038 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801dc9a:	2180      	movs	r1, #128	@ 0x80
 801dc9c:	6878      	ldr	r0, [r7, #4]
 801dc9e:	f005 f9cb 	bl	8023038 <USBD_LL_StallEP>
 801dca2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801dca4:	e040      	b.n	801dd28 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801dca6:	6839      	ldr	r1, [r7, #0]
 801dca8:	6878      	ldr	r0, [r7, #4]
 801dcaa:	f000 fc68 	bl	801e57e <USBD_CtlError>
              break;
 801dcae:	e03b      	b.n	801dd28 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801dcb0:	683b      	ldr	r3, [r7, #0]
 801dcb2:	885b      	ldrh	r3, [r3, #2]
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d136      	bne.n	801dd26 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801dcb8:	7bbb      	ldrb	r3, [r7, #14]
 801dcba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	d004      	beq.n	801dccc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801dcc2:	7bbb      	ldrb	r3, [r7, #14]
 801dcc4:	4619      	mov	r1, r3
 801dcc6:	6878      	ldr	r0, [r7, #4]
 801dcc8:	f005 f9d5 	bl	8023076 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801dccc:	6878      	ldr	r0, [r7, #4]
 801dcce:	f000 fd2d 	bl	801e72c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801dcd2:	7bbb      	ldrb	r3, [r7, #14]
 801dcd4:	4619      	mov	r1, r3
 801dcd6:	6878      	ldr	r0, [r7, #4]
 801dcd8:	f7ff fde4 	bl	801d8a4 <USBD_CoreFindEP>
 801dcdc:	4603      	mov	r3, r0
 801dcde:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801dce0:	7b7b      	ldrb	r3, [r7, #13]
 801dce2:	2bff      	cmp	r3, #255	@ 0xff
 801dce4:	d01f      	beq.n	801dd26 <USBD_StdEPReq+0x1c6>
 801dce6:	7b7b      	ldrb	r3, [r7, #13]
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d11c      	bne.n	801dd26 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801dcec:	7b7a      	ldrb	r2, [r7, #13]
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801dcf4:	7b7a      	ldrb	r2, [r7, #13]
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	32ae      	adds	r2, #174	@ 0xae
 801dcfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dcfe:	689b      	ldr	r3, [r3, #8]
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	d010      	beq.n	801dd26 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801dd04:	7b7a      	ldrb	r2, [r7, #13]
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	32ae      	adds	r2, #174	@ 0xae
 801dd0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dd0e:	689b      	ldr	r3, [r3, #8]
 801dd10:	6839      	ldr	r1, [r7, #0]
 801dd12:	6878      	ldr	r0, [r7, #4]
 801dd14:	4798      	blx	r3
 801dd16:	4603      	mov	r3, r0
 801dd18:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801dd1a:	e004      	b.n	801dd26 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801dd1c:	6839      	ldr	r1, [r7, #0]
 801dd1e:	6878      	ldr	r0, [r7, #4]
 801dd20:	f000 fc2d 	bl	801e57e <USBD_CtlError>
              break;
 801dd24:	e000      	b.n	801dd28 <USBD_StdEPReq+0x1c8>
              break;
 801dd26:	bf00      	nop
          }
          break;
 801dd28:	e0ab      	b.n	801de82 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801dd30:	b2db      	uxtb	r3, r3
 801dd32:	2b02      	cmp	r3, #2
 801dd34:	d002      	beq.n	801dd3c <USBD_StdEPReq+0x1dc>
 801dd36:	2b03      	cmp	r3, #3
 801dd38:	d032      	beq.n	801dda0 <USBD_StdEPReq+0x240>
 801dd3a:	e097      	b.n	801de6c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801dd3c:	7bbb      	ldrb	r3, [r7, #14]
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d007      	beq.n	801dd52 <USBD_StdEPReq+0x1f2>
 801dd42:	7bbb      	ldrb	r3, [r7, #14]
 801dd44:	2b80      	cmp	r3, #128	@ 0x80
 801dd46:	d004      	beq.n	801dd52 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801dd48:	6839      	ldr	r1, [r7, #0]
 801dd4a:	6878      	ldr	r0, [r7, #4]
 801dd4c:	f000 fc17 	bl	801e57e <USBD_CtlError>
                break;
 801dd50:	e091      	b.n	801de76 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801dd52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	da0b      	bge.n	801dd72 <USBD_StdEPReq+0x212>
 801dd5a:	7bbb      	ldrb	r3, [r7, #14]
 801dd5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801dd60:	4613      	mov	r3, r2
 801dd62:	009b      	lsls	r3, r3, #2
 801dd64:	4413      	add	r3, r2
 801dd66:	009b      	lsls	r3, r3, #2
 801dd68:	3310      	adds	r3, #16
 801dd6a:	687a      	ldr	r2, [r7, #4]
 801dd6c:	4413      	add	r3, r2
 801dd6e:	3304      	adds	r3, #4
 801dd70:	e00b      	b.n	801dd8a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801dd72:	7bbb      	ldrb	r3, [r7, #14]
 801dd74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801dd78:	4613      	mov	r3, r2
 801dd7a:	009b      	lsls	r3, r3, #2
 801dd7c:	4413      	add	r3, r2
 801dd7e:	009b      	lsls	r3, r3, #2
 801dd80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801dd84:	687a      	ldr	r2, [r7, #4]
 801dd86:	4413      	add	r3, r2
 801dd88:	3304      	adds	r3, #4
 801dd8a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801dd8c:	68bb      	ldr	r3, [r7, #8]
 801dd8e:	2200      	movs	r2, #0
 801dd90:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801dd92:	68bb      	ldr	r3, [r7, #8]
 801dd94:	2202      	movs	r2, #2
 801dd96:	4619      	mov	r1, r3
 801dd98:	6878      	ldr	r0, [r7, #4]
 801dd9a:	f000 fc6d 	bl	801e678 <USBD_CtlSendData>
              break;
 801dd9e:	e06a      	b.n	801de76 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801dda0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	da11      	bge.n	801ddcc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801dda8:	7bbb      	ldrb	r3, [r7, #14]
 801ddaa:	f003 020f 	and.w	r2, r3, #15
 801ddae:	6879      	ldr	r1, [r7, #4]
 801ddb0:	4613      	mov	r3, r2
 801ddb2:	009b      	lsls	r3, r3, #2
 801ddb4:	4413      	add	r3, r2
 801ddb6:	009b      	lsls	r3, r3, #2
 801ddb8:	440b      	add	r3, r1
 801ddba:	3324      	adds	r3, #36	@ 0x24
 801ddbc:	881b      	ldrh	r3, [r3, #0]
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d117      	bne.n	801ddf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801ddc2:	6839      	ldr	r1, [r7, #0]
 801ddc4:	6878      	ldr	r0, [r7, #4]
 801ddc6:	f000 fbda 	bl	801e57e <USBD_CtlError>
                  break;
 801ddca:	e054      	b.n	801de76 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801ddcc:	7bbb      	ldrb	r3, [r7, #14]
 801ddce:	f003 020f 	and.w	r2, r3, #15
 801ddd2:	6879      	ldr	r1, [r7, #4]
 801ddd4:	4613      	mov	r3, r2
 801ddd6:	009b      	lsls	r3, r3, #2
 801ddd8:	4413      	add	r3, r2
 801ddda:	009b      	lsls	r3, r3, #2
 801dddc:	440b      	add	r3, r1
 801ddde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801dde2:	881b      	ldrh	r3, [r3, #0]
 801dde4:	2b00      	cmp	r3, #0
 801dde6:	d104      	bne.n	801ddf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801dde8:	6839      	ldr	r1, [r7, #0]
 801ddea:	6878      	ldr	r0, [r7, #4]
 801ddec:	f000 fbc7 	bl	801e57e <USBD_CtlError>
                  break;
 801ddf0:	e041      	b.n	801de76 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ddf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	da0b      	bge.n	801de12 <USBD_StdEPReq+0x2b2>
 801ddfa:	7bbb      	ldrb	r3, [r7, #14]
 801ddfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801de00:	4613      	mov	r3, r2
 801de02:	009b      	lsls	r3, r3, #2
 801de04:	4413      	add	r3, r2
 801de06:	009b      	lsls	r3, r3, #2
 801de08:	3310      	adds	r3, #16
 801de0a:	687a      	ldr	r2, [r7, #4]
 801de0c:	4413      	add	r3, r2
 801de0e:	3304      	adds	r3, #4
 801de10:	e00b      	b.n	801de2a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801de12:	7bbb      	ldrb	r3, [r7, #14]
 801de14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801de18:	4613      	mov	r3, r2
 801de1a:	009b      	lsls	r3, r3, #2
 801de1c:	4413      	add	r3, r2
 801de1e:	009b      	lsls	r3, r3, #2
 801de20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801de24:	687a      	ldr	r2, [r7, #4]
 801de26:	4413      	add	r3, r2
 801de28:	3304      	adds	r3, #4
 801de2a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801de2c:	7bbb      	ldrb	r3, [r7, #14]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d002      	beq.n	801de38 <USBD_StdEPReq+0x2d8>
 801de32:	7bbb      	ldrb	r3, [r7, #14]
 801de34:	2b80      	cmp	r3, #128	@ 0x80
 801de36:	d103      	bne.n	801de40 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801de38:	68bb      	ldr	r3, [r7, #8]
 801de3a:	2200      	movs	r2, #0
 801de3c:	601a      	str	r2, [r3, #0]
 801de3e:	e00e      	b.n	801de5e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801de40:	7bbb      	ldrb	r3, [r7, #14]
 801de42:	4619      	mov	r1, r3
 801de44:	6878      	ldr	r0, [r7, #4]
 801de46:	f005 f935 	bl	80230b4 <USBD_LL_IsStallEP>
 801de4a:	4603      	mov	r3, r0
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	d003      	beq.n	801de58 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801de50:	68bb      	ldr	r3, [r7, #8]
 801de52:	2201      	movs	r2, #1
 801de54:	601a      	str	r2, [r3, #0]
 801de56:	e002      	b.n	801de5e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801de58:	68bb      	ldr	r3, [r7, #8]
 801de5a:	2200      	movs	r2, #0
 801de5c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801de5e:	68bb      	ldr	r3, [r7, #8]
 801de60:	2202      	movs	r2, #2
 801de62:	4619      	mov	r1, r3
 801de64:	6878      	ldr	r0, [r7, #4]
 801de66:	f000 fc07 	bl	801e678 <USBD_CtlSendData>
              break;
 801de6a:	e004      	b.n	801de76 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801de6c:	6839      	ldr	r1, [r7, #0]
 801de6e:	6878      	ldr	r0, [r7, #4]
 801de70:	f000 fb85 	bl	801e57e <USBD_CtlError>
              break;
 801de74:	bf00      	nop
          }
          break;
 801de76:	e004      	b.n	801de82 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801de78:	6839      	ldr	r1, [r7, #0]
 801de7a:	6878      	ldr	r0, [r7, #4]
 801de7c:	f000 fb7f 	bl	801e57e <USBD_CtlError>
          break;
 801de80:	bf00      	nop
      }
      break;
 801de82:	e005      	b.n	801de90 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801de84:	6839      	ldr	r1, [r7, #0]
 801de86:	6878      	ldr	r0, [r7, #4]
 801de88:	f000 fb79 	bl	801e57e <USBD_CtlError>
      break;
 801de8c:	e000      	b.n	801de90 <USBD_StdEPReq+0x330>
      break;
 801de8e:	bf00      	nop
  }

  return ret;
 801de90:	7bfb      	ldrb	r3, [r7, #15]
}
 801de92:	4618      	mov	r0, r3
 801de94:	3710      	adds	r7, #16
 801de96:	46bd      	mov	sp, r7
 801de98:	bd80      	pop	{r7, pc}
	...

0801de9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801de9c:	b580      	push	{r7, lr}
 801de9e:	b084      	sub	sp, #16
 801dea0:	af00      	add	r7, sp, #0
 801dea2:	6078      	str	r0, [r7, #4]
 801dea4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801dea6:	2300      	movs	r3, #0
 801dea8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801deaa:	2300      	movs	r3, #0
 801deac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801deae:	2300      	movs	r3, #0
 801deb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801deb2:	683b      	ldr	r3, [r7, #0]
 801deb4:	885b      	ldrh	r3, [r3, #2]
 801deb6:	0a1b      	lsrs	r3, r3, #8
 801deb8:	b29b      	uxth	r3, r3
 801deba:	3b01      	subs	r3, #1
 801debc:	2b0e      	cmp	r3, #14
 801debe:	f200 8152 	bhi.w	801e166 <USBD_GetDescriptor+0x2ca>
 801dec2:	a201      	add	r2, pc, #4	@ (adr r2, 801dec8 <USBD_GetDescriptor+0x2c>)
 801dec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dec8:	0801df39 	.word	0x0801df39
 801decc:	0801df51 	.word	0x0801df51
 801ded0:	0801df91 	.word	0x0801df91
 801ded4:	0801e167 	.word	0x0801e167
 801ded8:	0801e167 	.word	0x0801e167
 801dedc:	0801e107 	.word	0x0801e107
 801dee0:	0801e133 	.word	0x0801e133
 801dee4:	0801e167 	.word	0x0801e167
 801dee8:	0801e167 	.word	0x0801e167
 801deec:	0801e167 	.word	0x0801e167
 801def0:	0801e167 	.word	0x0801e167
 801def4:	0801e167 	.word	0x0801e167
 801def8:	0801e167 	.word	0x0801e167
 801defc:	0801e167 	.word	0x0801e167
 801df00:	0801df05 	.word	0x0801df05
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801df0a:	69db      	ldr	r3, [r3, #28]
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d00b      	beq.n	801df28 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801df16:	69db      	ldr	r3, [r3, #28]
 801df18:	687a      	ldr	r2, [r7, #4]
 801df1a:	7c12      	ldrb	r2, [r2, #16]
 801df1c:	f107 0108 	add.w	r1, r7, #8
 801df20:	4610      	mov	r0, r2
 801df22:	4798      	blx	r3
 801df24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801df26:	e126      	b.n	801e176 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801df28:	6839      	ldr	r1, [r7, #0]
 801df2a:	6878      	ldr	r0, [r7, #4]
 801df2c:	f000 fb27 	bl	801e57e <USBD_CtlError>
        err++;
 801df30:	7afb      	ldrb	r3, [r7, #11]
 801df32:	3301      	adds	r3, #1
 801df34:	72fb      	strb	r3, [r7, #11]
      break;
 801df36:	e11e      	b.n	801e176 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801df3e:	681b      	ldr	r3, [r3, #0]
 801df40:	687a      	ldr	r2, [r7, #4]
 801df42:	7c12      	ldrb	r2, [r2, #16]
 801df44:	f107 0108 	add.w	r1, r7, #8
 801df48:	4610      	mov	r0, r2
 801df4a:	4798      	blx	r3
 801df4c:	60f8      	str	r0, [r7, #12]
      break;
 801df4e:	e112      	b.n	801e176 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	7c1b      	ldrb	r3, [r3, #16]
 801df54:	2b00      	cmp	r3, #0
 801df56:	d10d      	bne.n	801df74 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801df5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801df60:	f107 0208 	add.w	r2, r7, #8
 801df64:	4610      	mov	r0, r2
 801df66:	4798      	blx	r3
 801df68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801df6a:	68fb      	ldr	r3, [r7, #12]
 801df6c:	3301      	adds	r3, #1
 801df6e:	2202      	movs	r2, #2
 801df70:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801df72:	e100      	b.n	801e176 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801df74:	687b      	ldr	r3, [r7, #4]
 801df76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801df7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801df7c:	f107 0208 	add.w	r2, r7, #8
 801df80:	4610      	mov	r0, r2
 801df82:	4798      	blx	r3
 801df84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	3301      	adds	r3, #1
 801df8a:	2202      	movs	r2, #2
 801df8c:	701a      	strb	r2, [r3, #0]
      break;
 801df8e:	e0f2      	b.n	801e176 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801df90:	683b      	ldr	r3, [r7, #0]
 801df92:	885b      	ldrh	r3, [r3, #2]
 801df94:	b2db      	uxtb	r3, r3
 801df96:	2b05      	cmp	r3, #5
 801df98:	f200 80ac 	bhi.w	801e0f4 <USBD_GetDescriptor+0x258>
 801df9c:	a201      	add	r2, pc, #4	@ (adr r2, 801dfa4 <USBD_GetDescriptor+0x108>)
 801df9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dfa2:	bf00      	nop
 801dfa4:	0801dfbd 	.word	0x0801dfbd
 801dfa8:	0801dff1 	.word	0x0801dff1
 801dfac:	0801e025 	.word	0x0801e025
 801dfb0:	0801e059 	.word	0x0801e059
 801dfb4:	0801e08d 	.word	0x0801e08d
 801dfb8:	0801e0c1 	.word	0x0801e0c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801dfc2:	685b      	ldr	r3, [r3, #4]
 801dfc4:	2b00      	cmp	r3, #0
 801dfc6:	d00b      	beq.n	801dfe0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801dfce:	685b      	ldr	r3, [r3, #4]
 801dfd0:	687a      	ldr	r2, [r7, #4]
 801dfd2:	7c12      	ldrb	r2, [r2, #16]
 801dfd4:	f107 0108 	add.w	r1, r7, #8
 801dfd8:	4610      	mov	r0, r2
 801dfda:	4798      	blx	r3
 801dfdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801dfde:	e091      	b.n	801e104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801dfe0:	6839      	ldr	r1, [r7, #0]
 801dfe2:	6878      	ldr	r0, [r7, #4]
 801dfe4:	f000 facb 	bl	801e57e <USBD_CtlError>
            err++;
 801dfe8:	7afb      	ldrb	r3, [r7, #11]
 801dfea:	3301      	adds	r3, #1
 801dfec:	72fb      	strb	r3, [r7, #11]
          break;
 801dfee:	e089      	b.n	801e104 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801dff6:	689b      	ldr	r3, [r3, #8]
 801dff8:	2b00      	cmp	r3, #0
 801dffa:	d00b      	beq.n	801e014 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801e002:	689b      	ldr	r3, [r3, #8]
 801e004:	687a      	ldr	r2, [r7, #4]
 801e006:	7c12      	ldrb	r2, [r2, #16]
 801e008:	f107 0108 	add.w	r1, r7, #8
 801e00c:	4610      	mov	r0, r2
 801e00e:	4798      	blx	r3
 801e010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e012:	e077      	b.n	801e104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801e014:	6839      	ldr	r1, [r7, #0]
 801e016:	6878      	ldr	r0, [r7, #4]
 801e018:	f000 fab1 	bl	801e57e <USBD_CtlError>
            err++;
 801e01c:	7afb      	ldrb	r3, [r7, #11]
 801e01e:	3301      	adds	r3, #1
 801e020:	72fb      	strb	r3, [r7, #11]
          break;
 801e022:	e06f      	b.n	801e104 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801e024:	687b      	ldr	r3, [r7, #4]
 801e026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801e02a:	68db      	ldr	r3, [r3, #12]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d00b      	beq.n	801e048 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801e036:	68db      	ldr	r3, [r3, #12]
 801e038:	687a      	ldr	r2, [r7, #4]
 801e03a:	7c12      	ldrb	r2, [r2, #16]
 801e03c:	f107 0108 	add.w	r1, r7, #8
 801e040:	4610      	mov	r0, r2
 801e042:	4798      	blx	r3
 801e044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e046:	e05d      	b.n	801e104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801e048:	6839      	ldr	r1, [r7, #0]
 801e04a:	6878      	ldr	r0, [r7, #4]
 801e04c:	f000 fa97 	bl	801e57e <USBD_CtlError>
            err++;
 801e050:	7afb      	ldrb	r3, [r7, #11]
 801e052:	3301      	adds	r3, #1
 801e054:	72fb      	strb	r3, [r7, #11]
          break;
 801e056:	e055      	b.n	801e104 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801e05e:	691b      	ldr	r3, [r3, #16]
 801e060:	2b00      	cmp	r3, #0
 801e062:	d00b      	beq.n	801e07c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801e06a:	691b      	ldr	r3, [r3, #16]
 801e06c:	687a      	ldr	r2, [r7, #4]
 801e06e:	7c12      	ldrb	r2, [r2, #16]
 801e070:	f107 0108 	add.w	r1, r7, #8
 801e074:	4610      	mov	r0, r2
 801e076:	4798      	blx	r3
 801e078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e07a:	e043      	b.n	801e104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801e07c:	6839      	ldr	r1, [r7, #0]
 801e07e:	6878      	ldr	r0, [r7, #4]
 801e080:	f000 fa7d 	bl	801e57e <USBD_CtlError>
            err++;
 801e084:	7afb      	ldrb	r3, [r7, #11]
 801e086:	3301      	adds	r3, #1
 801e088:	72fb      	strb	r3, [r7, #11]
          break;
 801e08a:	e03b      	b.n	801e104 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801e092:	695b      	ldr	r3, [r3, #20]
 801e094:	2b00      	cmp	r3, #0
 801e096:	d00b      	beq.n	801e0b0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801e09e:	695b      	ldr	r3, [r3, #20]
 801e0a0:	687a      	ldr	r2, [r7, #4]
 801e0a2:	7c12      	ldrb	r2, [r2, #16]
 801e0a4:	f107 0108 	add.w	r1, r7, #8
 801e0a8:	4610      	mov	r0, r2
 801e0aa:	4798      	blx	r3
 801e0ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e0ae:	e029      	b.n	801e104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801e0b0:	6839      	ldr	r1, [r7, #0]
 801e0b2:	6878      	ldr	r0, [r7, #4]
 801e0b4:	f000 fa63 	bl	801e57e <USBD_CtlError>
            err++;
 801e0b8:	7afb      	ldrb	r3, [r7, #11]
 801e0ba:	3301      	adds	r3, #1
 801e0bc:	72fb      	strb	r3, [r7, #11]
          break;
 801e0be:	e021      	b.n	801e104 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801e0c6:	699b      	ldr	r3, [r3, #24]
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d00b      	beq.n	801e0e4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801e0d2:	699b      	ldr	r3, [r3, #24]
 801e0d4:	687a      	ldr	r2, [r7, #4]
 801e0d6:	7c12      	ldrb	r2, [r2, #16]
 801e0d8:	f107 0108 	add.w	r1, r7, #8
 801e0dc:	4610      	mov	r0, r2
 801e0de:	4798      	blx	r3
 801e0e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801e0e2:	e00f      	b.n	801e104 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801e0e4:	6839      	ldr	r1, [r7, #0]
 801e0e6:	6878      	ldr	r0, [r7, #4]
 801e0e8:	f000 fa49 	bl	801e57e <USBD_CtlError>
            err++;
 801e0ec:	7afb      	ldrb	r3, [r7, #11]
 801e0ee:	3301      	adds	r3, #1
 801e0f0:	72fb      	strb	r3, [r7, #11]
          break;
 801e0f2:	e007      	b.n	801e104 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801e0f4:	6839      	ldr	r1, [r7, #0]
 801e0f6:	6878      	ldr	r0, [r7, #4]
 801e0f8:	f000 fa41 	bl	801e57e <USBD_CtlError>
          err++;
 801e0fc:	7afb      	ldrb	r3, [r7, #11]
 801e0fe:	3301      	adds	r3, #1
 801e100:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801e102:	bf00      	nop
      }
      break;
 801e104:	e037      	b.n	801e176 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	7c1b      	ldrb	r3, [r3, #16]
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d109      	bne.n	801e122 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801e114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e116:	f107 0208 	add.w	r2, r7, #8
 801e11a:	4610      	mov	r0, r2
 801e11c:	4798      	blx	r3
 801e11e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801e120:	e029      	b.n	801e176 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801e122:	6839      	ldr	r1, [r7, #0]
 801e124:	6878      	ldr	r0, [r7, #4]
 801e126:	f000 fa2a 	bl	801e57e <USBD_CtlError>
        err++;
 801e12a:	7afb      	ldrb	r3, [r7, #11]
 801e12c:	3301      	adds	r3, #1
 801e12e:	72fb      	strb	r3, [r7, #11]
      break;
 801e130:	e021      	b.n	801e176 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	7c1b      	ldrb	r3, [r3, #16]
 801e136:	2b00      	cmp	r3, #0
 801e138:	d10d      	bne.n	801e156 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801e140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e142:	f107 0208 	add.w	r2, r7, #8
 801e146:	4610      	mov	r0, r2
 801e148:	4798      	blx	r3
 801e14a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801e14c:	68fb      	ldr	r3, [r7, #12]
 801e14e:	3301      	adds	r3, #1
 801e150:	2207      	movs	r2, #7
 801e152:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801e154:	e00f      	b.n	801e176 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801e156:	6839      	ldr	r1, [r7, #0]
 801e158:	6878      	ldr	r0, [r7, #4]
 801e15a:	f000 fa10 	bl	801e57e <USBD_CtlError>
        err++;
 801e15e:	7afb      	ldrb	r3, [r7, #11]
 801e160:	3301      	adds	r3, #1
 801e162:	72fb      	strb	r3, [r7, #11]
      break;
 801e164:	e007      	b.n	801e176 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801e166:	6839      	ldr	r1, [r7, #0]
 801e168:	6878      	ldr	r0, [r7, #4]
 801e16a:	f000 fa08 	bl	801e57e <USBD_CtlError>
      err++;
 801e16e:	7afb      	ldrb	r3, [r7, #11]
 801e170:	3301      	adds	r3, #1
 801e172:	72fb      	strb	r3, [r7, #11]
      break;
 801e174:	bf00      	nop
  }

  if (err != 0U)
 801e176:	7afb      	ldrb	r3, [r7, #11]
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d11e      	bne.n	801e1ba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801e17c:	683b      	ldr	r3, [r7, #0]
 801e17e:	88db      	ldrh	r3, [r3, #6]
 801e180:	2b00      	cmp	r3, #0
 801e182:	d016      	beq.n	801e1b2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801e184:	893b      	ldrh	r3, [r7, #8]
 801e186:	2b00      	cmp	r3, #0
 801e188:	d00e      	beq.n	801e1a8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801e18a:	683b      	ldr	r3, [r7, #0]
 801e18c:	88da      	ldrh	r2, [r3, #6]
 801e18e:	893b      	ldrh	r3, [r7, #8]
 801e190:	4293      	cmp	r3, r2
 801e192:	bf28      	it	cs
 801e194:	4613      	movcs	r3, r2
 801e196:	b29b      	uxth	r3, r3
 801e198:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801e19a:	893b      	ldrh	r3, [r7, #8]
 801e19c:	461a      	mov	r2, r3
 801e19e:	68f9      	ldr	r1, [r7, #12]
 801e1a0:	6878      	ldr	r0, [r7, #4]
 801e1a2:	f000 fa69 	bl	801e678 <USBD_CtlSendData>
 801e1a6:	e009      	b.n	801e1bc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801e1a8:	6839      	ldr	r1, [r7, #0]
 801e1aa:	6878      	ldr	r0, [r7, #4]
 801e1ac:	f000 f9e7 	bl	801e57e <USBD_CtlError>
 801e1b0:	e004      	b.n	801e1bc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801e1b2:	6878      	ldr	r0, [r7, #4]
 801e1b4:	f000 faba 	bl	801e72c <USBD_CtlSendStatus>
 801e1b8:	e000      	b.n	801e1bc <USBD_GetDescriptor+0x320>
    return;
 801e1ba:	bf00      	nop
  }
}
 801e1bc:	3710      	adds	r7, #16
 801e1be:	46bd      	mov	sp, r7
 801e1c0:	bd80      	pop	{r7, pc}
 801e1c2:	bf00      	nop

0801e1c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e1c4:	b580      	push	{r7, lr}
 801e1c6:	b084      	sub	sp, #16
 801e1c8:	af00      	add	r7, sp, #0
 801e1ca:	6078      	str	r0, [r7, #4]
 801e1cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801e1ce:	683b      	ldr	r3, [r7, #0]
 801e1d0:	889b      	ldrh	r3, [r3, #4]
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d131      	bne.n	801e23a <USBD_SetAddress+0x76>
 801e1d6:	683b      	ldr	r3, [r7, #0]
 801e1d8:	88db      	ldrh	r3, [r3, #6]
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	d12d      	bne.n	801e23a <USBD_SetAddress+0x76>
 801e1de:	683b      	ldr	r3, [r7, #0]
 801e1e0:	885b      	ldrh	r3, [r3, #2]
 801e1e2:	2b7f      	cmp	r3, #127	@ 0x7f
 801e1e4:	d829      	bhi.n	801e23a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801e1e6:	683b      	ldr	r3, [r7, #0]
 801e1e8:	885b      	ldrh	r3, [r3, #2]
 801e1ea:	b2db      	uxtb	r3, r3
 801e1ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e1f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801e1f8:	b2db      	uxtb	r3, r3
 801e1fa:	2b03      	cmp	r3, #3
 801e1fc:	d104      	bne.n	801e208 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801e1fe:	6839      	ldr	r1, [r7, #0]
 801e200:	6878      	ldr	r0, [r7, #4]
 801e202:	f000 f9bc 	bl	801e57e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e206:	e01d      	b.n	801e244 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	7bfa      	ldrb	r2, [r7, #15]
 801e20c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801e210:	7bfb      	ldrb	r3, [r7, #15]
 801e212:	4619      	mov	r1, r3
 801e214:	6878      	ldr	r0, [r7, #4]
 801e216:	f004 ff79 	bl	802310c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801e21a:	6878      	ldr	r0, [r7, #4]
 801e21c:	f000 fa86 	bl	801e72c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801e220:	7bfb      	ldrb	r3, [r7, #15]
 801e222:	2b00      	cmp	r3, #0
 801e224:	d004      	beq.n	801e230 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	2202      	movs	r2, #2
 801e22a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e22e:	e009      	b.n	801e244 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	2201      	movs	r2, #1
 801e234:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e238:	e004      	b.n	801e244 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801e23a:	6839      	ldr	r1, [r7, #0]
 801e23c:	6878      	ldr	r0, [r7, #4]
 801e23e:	f000 f99e 	bl	801e57e <USBD_CtlError>
  }
}
 801e242:	bf00      	nop
 801e244:	bf00      	nop
 801e246:	3710      	adds	r7, #16
 801e248:	46bd      	mov	sp, r7
 801e24a:	bd80      	pop	{r7, pc}

0801e24c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e24c:	b580      	push	{r7, lr}
 801e24e:	b084      	sub	sp, #16
 801e250:	af00      	add	r7, sp, #0
 801e252:	6078      	str	r0, [r7, #4]
 801e254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e256:	2300      	movs	r3, #0
 801e258:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801e25a:	683b      	ldr	r3, [r7, #0]
 801e25c:	885b      	ldrh	r3, [r3, #2]
 801e25e:	b2da      	uxtb	r2, r3
 801e260:	4b4e      	ldr	r3, [pc, #312]	@ (801e39c <USBD_SetConfig+0x150>)
 801e262:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801e264:	4b4d      	ldr	r3, [pc, #308]	@ (801e39c <USBD_SetConfig+0x150>)
 801e266:	781b      	ldrb	r3, [r3, #0]
 801e268:	2b01      	cmp	r3, #1
 801e26a:	d905      	bls.n	801e278 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801e26c:	6839      	ldr	r1, [r7, #0]
 801e26e:	6878      	ldr	r0, [r7, #4]
 801e270:	f000 f985 	bl	801e57e <USBD_CtlError>
    return USBD_FAIL;
 801e274:	2303      	movs	r3, #3
 801e276:	e08c      	b.n	801e392 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801e278:	687b      	ldr	r3, [r7, #4]
 801e27a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801e27e:	b2db      	uxtb	r3, r3
 801e280:	2b02      	cmp	r3, #2
 801e282:	d002      	beq.n	801e28a <USBD_SetConfig+0x3e>
 801e284:	2b03      	cmp	r3, #3
 801e286:	d029      	beq.n	801e2dc <USBD_SetConfig+0x90>
 801e288:	e075      	b.n	801e376 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801e28a:	4b44      	ldr	r3, [pc, #272]	@ (801e39c <USBD_SetConfig+0x150>)
 801e28c:	781b      	ldrb	r3, [r3, #0]
 801e28e:	2b00      	cmp	r3, #0
 801e290:	d020      	beq.n	801e2d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801e292:	4b42      	ldr	r3, [pc, #264]	@ (801e39c <USBD_SetConfig+0x150>)
 801e294:	781b      	ldrb	r3, [r3, #0]
 801e296:	461a      	mov	r2, r3
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801e29c:	4b3f      	ldr	r3, [pc, #252]	@ (801e39c <USBD_SetConfig+0x150>)
 801e29e:	781b      	ldrb	r3, [r3, #0]
 801e2a0:	4619      	mov	r1, r3
 801e2a2:	6878      	ldr	r0, [r7, #4]
 801e2a4:	f7fe ffb9 	bl	801d21a <USBD_SetClassConfig>
 801e2a8:	4603      	mov	r3, r0
 801e2aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801e2ac:	7bfb      	ldrb	r3, [r7, #15]
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d008      	beq.n	801e2c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801e2b2:	6839      	ldr	r1, [r7, #0]
 801e2b4:	6878      	ldr	r0, [r7, #4]
 801e2b6:	f000 f962 	bl	801e57e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	2202      	movs	r2, #2
 801e2be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801e2c2:	e065      	b.n	801e390 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801e2c4:	6878      	ldr	r0, [r7, #4]
 801e2c6:	f000 fa31 	bl	801e72c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	2203      	movs	r2, #3
 801e2ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801e2d2:	e05d      	b.n	801e390 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801e2d4:	6878      	ldr	r0, [r7, #4]
 801e2d6:	f000 fa29 	bl	801e72c <USBD_CtlSendStatus>
      break;
 801e2da:	e059      	b.n	801e390 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801e2dc:	4b2f      	ldr	r3, [pc, #188]	@ (801e39c <USBD_SetConfig+0x150>)
 801e2de:	781b      	ldrb	r3, [r3, #0]
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d112      	bne.n	801e30a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	2202      	movs	r2, #2
 801e2e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801e2ec:	4b2b      	ldr	r3, [pc, #172]	@ (801e39c <USBD_SetConfig+0x150>)
 801e2ee:	781b      	ldrb	r3, [r3, #0]
 801e2f0:	461a      	mov	r2, r3
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801e2f6:	4b29      	ldr	r3, [pc, #164]	@ (801e39c <USBD_SetConfig+0x150>)
 801e2f8:	781b      	ldrb	r3, [r3, #0]
 801e2fa:	4619      	mov	r1, r3
 801e2fc:	6878      	ldr	r0, [r7, #4]
 801e2fe:	f7fe ffa8 	bl	801d252 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801e302:	6878      	ldr	r0, [r7, #4]
 801e304:	f000 fa12 	bl	801e72c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801e308:	e042      	b.n	801e390 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801e30a:	4b24      	ldr	r3, [pc, #144]	@ (801e39c <USBD_SetConfig+0x150>)
 801e30c:	781b      	ldrb	r3, [r3, #0]
 801e30e:	461a      	mov	r2, r3
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	685b      	ldr	r3, [r3, #4]
 801e314:	429a      	cmp	r2, r3
 801e316:	d02a      	beq.n	801e36e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	685b      	ldr	r3, [r3, #4]
 801e31c:	b2db      	uxtb	r3, r3
 801e31e:	4619      	mov	r1, r3
 801e320:	6878      	ldr	r0, [r7, #4]
 801e322:	f7fe ff96 	bl	801d252 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801e326:	4b1d      	ldr	r3, [pc, #116]	@ (801e39c <USBD_SetConfig+0x150>)
 801e328:	781b      	ldrb	r3, [r3, #0]
 801e32a:	461a      	mov	r2, r3
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801e330:	4b1a      	ldr	r3, [pc, #104]	@ (801e39c <USBD_SetConfig+0x150>)
 801e332:	781b      	ldrb	r3, [r3, #0]
 801e334:	4619      	mov	r1, r3
 801e336:	6878      	ldr	r0, [r7, #4]
 801e338:	f7fe ff6f 	bl	801d21a <USBD_SetClassConfig>
 801e33c:	4603      	mov	r3, r0
 801e33e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801e340:	7bfb      	ldrb	r3, [r7, #15]
 801e342:	2b00      	cmp	r3, #0
 801e344:	d00f      	beq.n	801e366 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801e346:	6839      	ldr	r1, [r7, #0]
 801e348:	6878      	ldr	r0, [r7, #4]
 801e34a:	f000 f918 	bl	801e57e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	685b      	ldr	r3, [r3, #4]
 801e352:	b2db      	uxtb	r3, r3
 801e354:	4619      	mov	r1, r3
 801e356:	6878      	ldr	r0, [r7, #4]
 801e358:	f7fe ff7b 	bl	801d252 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	2202      	movs	r2, #2
 801e360:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801e364:	e014      	b.n	801e390 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801e366:	6878      	ldr	r0, [r7, #4]
 801e368:	f000 f9e0 	bl	801e72c <USBD_CtlSendStatus>
      break;
 801e36c:	e010      	b.n	801e390 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801e36e:	6878      	ldr	r0, [r7, #4]
 801e370:	f000 f9dc 	bl	801e72c <USBD_CtlSendStatus>
      break;
 801e374:	e00c      	b.n	801e390 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801e376:	6839      	ldr	r1, [r7, #0]
 801e378:	6878      	ldr	r0, [r7, #4]
 801e37a:	f000 f900 	bl	801e57e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801e37e:	4b07      	ldr	r3, [pc, #28]	@ (801e39c <USBD_SetConfig+0x150>)
 801e380:	781b      	ldrb	r3, [r3, #0]
 801e382:	4619      	mov	r1, r3
 801e384:	6878      	ldr	r0, [r7, #4]
 801e386:	f7fe ff64 	bl	801d252 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801e38a:	2303      	movs	r3, #3
 801e38c:	73fb      	strb	r3, [r7, #15]
      break;
 801e38e:	bf00      	nop
  }

  return ret;
 801e390:	7bfb      	ldrb	r3, [r7, #15]
}
 801e392:	4618      	mov	r0, r3
 801e394:	3710      	adds	r7, #16
 801e396:	46bd      	mov	sp, r7
 801e398:	bd80      	pop	{r7, pc}
 801e39a:	bf00      	nop
 801e39c:	2401878c 	.word	0x2401878c

0801e3a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e3a0:	b580      	push	{r7, lr}
 801e3a2:	b082      	sub	sp, #8
 801e3a4:	af00      	add	r7, sp, #0
 801e3a6:	6078      	str	r0, [r7, #4]
 801e3a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801e3aa:	683b      	ldr	r3, [r7, #0]
 801e3ac:	88db      	ldrh	r3, [r3, #6]
 801e3ae:	2b01      	cmp	r3, #1
 801e3b0:	d004      	beq.n	801e3bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801e3b2:	6839      	ldr	r1, [r7, #0]
 801e3b4:	6878      	ldr	r0, [r7, #4]
 801e3b6:	f000 f8e2 	bl	801e57e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801e3ba:	e023      	b.n	801e404 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801e3c2:	b2db      	uxtb	r3, r3
 801e3c4:	2b02      	cmp	r3, #2
 801e3c6:	dc02      	bgt.n	801e3ce <USBD_GetConfig+0x2e>
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	dc03      	bgt.n	801e3d4 <USBD_GetConfig+0x34>
 801e3cc:	e015      	b.n	801e3fa <USBD_GetConfig+0x5a>
 801e3ce:	2b03      	cmp	r3, #3
 801e3d0:	d00b      	beq.n	801e3ea <USBD_GetConfig+0x4a>
 801e3d2:	e012      	b.n	801e3fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	2200      	movs	r2, #0
 801e3d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	3308      	adds	r3, #8
 801e3de:	2201      	movs	r2, #1
 801e3e0:	4619      	mov	r1, r3
 801e3e2:	6878      	ldr	r0, [r7, #4]
 801e3e4:	f000 f948 	bl	801e678 <USBD_CtlSendData>
        break;
 801e3e8:	e00c      	b.n	801e404 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	3304      	adds	r3, #4
 801e3ee:	2201      	movs	r2, #1
 801e3f0:	4619      	mov	r1, r3
 801e3f2:	6878      	ldr	r0, [r7, #4]
 801e3f4:	f000 f940 	bl	801e678 <USBD_CtlSendData>
        break;
 801e3f8:	e004      	b.n	801e404 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801e3fa:	6839      	ldr	r1, [r7, #0]
 801e3fc:	6878      	ldr	r0, [r7, #4]
 801e3fe:	f000 f8be 	bl	801e57e <USBD_CtlError>
        break;
 801e402:	bf00      	nop
}
 801e404:	bf00      	nop
 801e406:	3708      	adds	r7, #8
 801e408:	46bd      	mov	sp, r7
 801e40a:	bd80      	pop	{r7, pc}

0801e40c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e40c:	b580      	push	{r7, lr}
 801e40e:	b082      	sub	sp, #8
 801e410:	af00      	add	r7, sp, #0
 801e412:	6078      	str	r0, [r7, #4]
 801e414:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801e41c:	b2db      	uxtb	r3, r3
 801e41e:	3b01      	subs	r3, #1
 801e420:	2b02      	cmp	r3, #2
 801e422:	d81e      	bhi.n	801e462 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801e424:	683b      	ldr	r3, [r7, #0]
 801e426:	88db      	ldrh	r3, [r3, #6]
 801e428:	2b02      	cmp	r3, #2
 801e42a:	d004      	beq.n	801e436 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801e42c:	6839      	ldr	r1, [r7, #0]
 801e42e:	6878      	ldr	r0, [r7, #4]
 801e430:	f000 f8a5 	bl	801e57e <USBD_CtlError>
        break;
 801e434:	e01a      	b.n	801e46c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	2201      	movs	r2, #1
 801e43a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801e442:	2b00      	cmp	r3, #0
 801e444:	d005      	beq.n	801e452 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	68db      	ldr	r3, [r3, #12]
 801e44a:	f043 0202 	orr.w	r2, r3, #2
 801e44e:	687b      	ldr	r3, [r7, #4]
 801e450:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	330c      	adds	r3, #12
 801e456:	2202      	movs	r2, #2
 801e458:	4619      	mov	r1, r3
 801e45a:	6878      	ldr	r0, [r7, #4]
 801e45c:	f000 f90c 	bl	801e678 <USBD_CtlSendData>
      break;
 801e460:	e004      	b.n	801e46c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801e462:	6839      	ldr	r1, [r7, #0]
 801e464:	6878      	ldr	r0, [r7, #4]
 801e466:	f000 f88a 	bl	801e57e <USBD_CtlError>
      break;
 801e46a:	bf00      	nop
  }
}
 801e46c:	bf00      	nop
 801e46e:	3708      	adds	r7, #8
 801e470:	46bd      	mov	sp, r7
 801e472:	bd80      	pop	{r7, pc}

0801e474 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e474:	b580      	push	{r7, lr}
 801e476:	b082      	sub	sp, #8
 801e478:	af00      	add	r7, sp, #0
 801e47a:	6078      	str	r0, [r7, #4]
 801e47c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801e47e:	683b      	ldr	r3, [r7, #0]
 801e480:	885b      	ldrh	r3, [r3, #2]
 801e482:	2b01      	cmp	r3, #1
 801e484:	d107      	bne.n	801e496 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	2201      	movs	r2, #1
 801e48a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801e48e:	6878      	ldr	r0, [r7, #4]
 801e490:	f000 f94c 	bl	801e72c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801e494:	e013      	b.n	801e4be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801e496:	683b      	ldr	r3, [r7, #0]
 801e498:	885b      	ldrh	r3, [r3, #2]
 801e49a:	2b02      	cmp	r3, #2
 801e49c:	d10b      	bne.n	801e4b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801e49e:	683b      	ldr	r3, [r7, #0]
 801e4a0:	889b      	ldrh	r3, [r3, #4]
 801e4a2:	0a1b      	lsrs	r3, r3, #8
 801e4a4:	b29b      	uxth	r3, r3
 801e4a6:	b2da      	uxtb	r2, r3
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801e4ae:	6878      	ldr	r0, [r7, #4]
 801e4b0:	f000 f93c 	bl	801e72c <USBD_CtlSendStatus>
}
 801e4b4:	e003      	b.n	801e4be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801e4b6:	6839      	ldr	r1, [r7, #0]
 801e4b8:	6878      	ldr	r0, [r7, #4]
 801e4ba:	f000 f860 	bl	801e57e <USBD_CtlError>
}
 801e4be:	bf00      	nop
 801e4c0:	3708      	adds	r7, #8
 801e4c2:	46bd      	mov	sp, r7
 801e4c4:	bd80      	pop	{r7, pc}

0801e4c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e4c6:	b580      	push	{r7, lr}
 801e4c8:	b082      	sub	sp, #8
 801e4ca:	af00      	add	r7, sp, #0
 801e4cc:	6078      	str	r0, [r7, #4]
 801e4ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801e4d6:	b2db      	uxtb	r3, r3
 801e4d8:	3b01      	subs	r3, #1
 801e4da:	2b02      	cmp	r3, #2
 801e4dc:	d80b      	bhi.n	801e4f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801e4de:	683b      	ldr	r3, [r7, #0]
 801e4e0:	885b      	ldrh	r3, [r3, #2]
 801e4e2:	2b01      	cmp	r3, #1
 801e4e4:	d10c      	bne.n	801e500 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	2200      	movs	r2, #0
 801e4ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801e4ee:	6878      	ldr	r0, [r7, #4]
 801e4f0:	f000 f91c 	bl	801e72c <USBD_CtlSendStatus>
      }
      break;
 801e4f4:	e004      	b.n	801e500 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801e4f6:	6839      	ldr	r1, [r7, #0]
 801e4f8:	6878      	ldr	r0, [r7, #4]
 801e4fa:	f000 f840 	bl	801e57e <USBD_CtlError>
      break;
 801e4fe:	e000      	b.n	801e502 <USBD_ClrFeature+0x3c>
      break;
 801e500:	bf00      	nop
  }
}
 801e502:	bf00      	nop
 801e504:	3708      	adds	r7, #8
 801e506:	46bd      	mov	sp, r7
 801e508:	bd80      	pop	{r7, pc}

0801e50a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801e50a:	b580      	push	{r7, lr}
 801e50c:	b084      	sub	sp, #16
 801e50e:	af00      	add	r7, sp, #0
 801e510:	6078      	str	r0, [r7, #4]
 801e512:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801e514:	683b      	ldr	r3, [r7, #0]
 801e516:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801e518:	68fb      	ldr	r3, [r7, #12]
 801e51a:	781a      	ldrb	r2, [r3, #0]
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801e520:	68fb      	ldr	r3, [r7, #12]
 801e522:	3301      	adds	r3, #1
 801e524:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801e526:	68fb      	ldr	r3, [r7, #12]
 801e528:	781a      	ldrb	r2, [r3, #0]
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801e52e:	68fb      	ldr	r3, [r7, #12]
 801e530:	3301      	adds	r3, #1
 801e532:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801e534:	68f8      	ldr	r0, [r7, #12]
 801e536:	f7ff fa16 	bl	801d966 <SWAPBYTE>
 801e53a:	4603      	mov	r3, r0
 801e53c:	461a      	mov	r2, r3
 801e53e:	687b      	ldr	r3, [r7, #4]
 801e540:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801e542:	68fb      	ldr	r3, [r7, #12]
 801e544:	3301      	adds	r3, #1
 801e546:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801e548:	68fb      	ldr	r3, [r7, #12]
 801e54a:	3301      	adds	r3, #1
 801e54c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801e54e:	68f8      	ldr	r0, [r7, #12]
 801e550:	f7ff fa09 	bl	801d966 <SWAPBYTE>
 801e554:	4603      	mov	r3, r0
 801e556:	461a      	mov	r2, r3
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801e55c:	68fb      	ldr	r3, [r7, #12]
 801e55e:	3301      	adds	r3, #1
 801e560:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801e562:	68fb      	ldr	r3, [r7, #12]
 801e564:	3301      	adds	r3, #1
 801e566:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801e568:	68f8      	ldr	r0, [r7, #12]
 801e56a:	f7ff f9fc 	bl	801d966 <SWAPBYTE>
 801e56e:	4603      	mov	r3, r0
 801e570:	461a      	mov	r2, r3
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	80da      	strh	r2, [r3, #6]
}
 801e576:	bf00      	nop
 801e578:	3710      	adds	r7, #16
 801e57a:	46bd      	mov	sp, r7
 801e57c:	bd80      	pop	{r7, pc}

0801e57e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801e57e:	b580      	push	{r7, lr}
 801e580:	b082      	sub	sp, #8
 801e582:	af00      	add	r7, sp, #0
 801e584:	6078      	str	r0, [r7, #4]
 801e586:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801e588:	2180      	movs	r1, #128	@ 0x80
 801e58a:	6878      	ldr	r0, [r7, #4]
 801e58c:	f004 fd54 	bl	8023038 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801e590:	2100      	movs	r1, #0
 801e592:	6878      	ldr	r0, [r7, #4]
 801e594:	f004 fd50 	bl	8023038 <USBD_LL_StallEP>
}
 801e598:	bf00      	nop
 801e59a:	3708      	adds	r7, #8
 801e59c:	46bd      	mov	sp, r7
 801e59e:	bd80      	pop	{r7, pc}

0801e5a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801e5a0:	b580      	push	{r7, lr}
 801e5a2:	b086      	sub	sp, #24
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	60f8      	str	r0, [r7, #12]
 801e5a8:	60b9      	str	r1, [r7, #8]
 801e5aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801e5ac:	2300      	movs	r3, #0
 801e5ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	2b00      	cmp	r3, #0
 801e5b4:	d042      	beq.n	801e63c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801e5b6:	68fb      	ldr	r3, [r7, #12]
 801e5b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801e5ba:	6938      	ldr	r0, [r7, #16]
 801e5bc:	f000 f842 	bl	801e644 <USBD_GetLen>
 801e5c0:	4603      	mov	r3, r0
 801e5c2:	3301      	adds	r3, #1
 801e5c4:	005b      	lsls	r3, r3, #1
 801e5c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e5ca:	d808      	bhi.n	801e5de <USBD_GetString+0x3e>
 801e5cc:	6938      	ldr	r0, [r7, #16]
 801e5ce:	f000 f839 	bl	801e644 <USBD_GetLen>
 801e5d2:	4603      	mov	r3, r0
 801e5d4:	3301      	adds	r3, #1
 801e5d6:	b29b      	uxth	r3, r3
 801e5d8:	005b      	lsls	r3, r3, #1
 801e5da:	b29a      	uxth	r2, r3
 801e5dc:	e001      	b.n	801e5e2 <USBD_GetString+0x42>
 801e5de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e5e2:	687b      	ldr	r3, [r7, #4]
 801e5e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801e5e6:	7dfb      	ldrb	r3, [r7, #23]
 801e5e8:	68ba      	ldr	r2, [r7, #8]
 801e5ea:	4413      	add	r3, r2
 801e5ec:	687a      	ldr	r2, [r7, #4]
 801e5ee:	7812      	ldrb	r2, [r2, #0]
 801e5f0:	701a      	strb	r2, [r3, #0]
  idx++;
 801e5f2:	7dfb      	ldrb	r3, [r7, #23]
 801e5f4:	3301      	adds	r3, #1
 801e5f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801e5f8:	7dfb      	ldrb	r3, [r7, #23]
 801e5fa:	68ba      	ldr	r2, [r7, #8]
 801e5fc:	4413      	add	r3, r2
 801e5fe:	2203      	movs	r2, #3
 801e600:	701a      	strb	r2, [r3, #0]
  idx++;
 801e602:	7dfb      	ldrb	r3, [r7, #23]
 801e604:	3301      	adds	r3, #1
 801e606:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801e608:	e013      	b.n	801e632 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801e60a:	7dfb      	ldrb	r3, [r7, #23]
 801e60c:	68ba      	ldr	r2, [r7, #8]
 801e60e:	4413      	add	r3, r2
 801e610:	693a      	ldr	r2, [r7, #16]
 801e612:	7812      	ldrb	r2, [r2, #0]
 801e614:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801e616:	693b      	ldr	r3, [r7, #16]
 801e618:	3301      	adds	r3, #1
 801e61a:	613b      	str	r3, [r7, #16]
    idx++;
 801e61c:	7dfb      	ldrb	r3, [r7, #23]
 801e61e:	3301      	adds	r3, #1
 801e620:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801e622:	7dfb      	ldrb	r3, [r7, #23]
 801e624:	68ba      	ldr	r2, [r7, #8]
 801e626:	4413      	add	r3, r2
 801e628:	2200      	movs	r2, #0
 801e62a:	701a      	strb	r2, [r3, #0]
    idx++;
 801e62c:	7dfb      	ldrb	r3, [r7, #23]
 801e62e:	3301      	adds	r3, #1
 801e630:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801e632:	693b      	ldr	r3, [r7, #16]
 801e634:	781b      	ldrb	r3, [r3, #0]
 801e636:	2b00      	cmp	r3, #0
 801e638:	d1e7      	bne.n	801e60a <USBD_GetString+0x6a>
 801e63a:	e000      	b.n	801e63e <USBD_GetString+0x9e>
    return;
 801e63c:	bf00      	nop
  }
}
 801e63e:	3718      	adds	r7, #24
 801e640:	46bd      	mov	sp, r7
 801e642:	bd80      	pop	{r7, pc}

0801e644 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801e644:	b480      	push	{r7}
 801e646:	b085      	sub	sp, #20
 801e648:	af00      	add	r7, sp, #0
 801e64a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801e64c:	2300      	movs	r3, #0
 801e64e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801e654:	e005      	b.n	801e662 <USBD_GetLen+0x1e>
  {
    len++;
 801e656:	7bfb      	ldrb	r3, [r7, #15]
 801e658:	3301      	adds	r3, #1
 801e65a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801e65c:	68bb      	ldr	r3, [r7, #8]
 801e65e:	3301      	adds	r3, #1
 801e660:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801e662:	68bb      	ldr	r3, [r7, #8]
 801e664:	781b      	ldrb	r3, [r3, #0]
 801e666:	2b00      	cmp	r3, #0
 801e668:	d1f5      	bne.n	801e656 <USBD_GetLen+0x12>
  }

  return len;
 801e66a:	7bfb      	ldrb	r3, [r7, #15]
}
 801e66c:	4618      	mov	r0, r3
 801e66e:	3714      	adds	r7, #20
 801e670:	46bd      	mov	sp, r7
 801e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e676:	4770      	bx	lr

0801e678 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801e678:	b580      	push	{r7, lr}
 801e67a:	b084      	sub	sp, #16
 801e67c:	af00      	add	r7, sp, #0
 801e67e:	60f8      	str	r0, [r7, #12]
 801e680:	60b9      	str	r1, [r7, #8]
 801e682:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801e684:	68fb      	ldr	r3, [r7, #12]
 801e686:	2202      	movs	r2, #2
 801e688:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801e68c:	68fb      	ldr	r3, [r7, #12]
 801e68e:	687a      	ldr	r2, [r7, #4]
 801e690:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801e692:	68fb      	ldr	r3, [r7, #12]
 801e694:	687a      	ldr	r2, [r7, #4]
 801e696:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	68ba      	ldr	r2, [r7, #8]
 801e69c:	2100      	movs	r1, #0
 801e69e:	68f8      	ldr	r0, [r7, #12]
 801e6a0:	f004 fd53 	bl	802314a <USBD_LL_Transmit>

  return USBD_OK;
 801e6a4:	2300      	movs	r3, #0
}
 801e6a6:	4618      	mov	r0, r3
 801e6a8:	3710      	adds	r7, #16
 801e6aa:	46bd      	mov	sp, r7
 801e6ac:	bd80      	pop	{r7, pc}

0801e6ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801e6ae:	b580      	push	{r7, lr}
 801e6b0:	b084      	sub	sp, #16
 801e6b2:	af00      	add	r7, sp, #0
 801e6b4:	60f8      	str	r0, [r7, #12]
 801e6b6:	60b9      	str	r1, [r7, #8]
 801e6b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	68ba      	ldr	r2, [r7, #8]
 801e6be:	2100      	movs	r1, #0
 801e6c0:	68f8      	ldr	r0, [r7, #12]
 801e6c2:	f004 fd42 	bl	802314a <USBD_LL_Transmit>

  return USBD_OK;
 801e6c6:	2300      	movs	r3, #0
}
 801e6c8:	4618      	mov	r0, r3
 801e6ca:	3710      	adds	r7, #16
 801e6cc:	46bd      	mov	sp, r7
 801e6ce:	bd80      	pop	{r7, pc}

0801e6d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801e6d0:	b580      	push	{r7, lr}
 801e6d2:	b084      	sub	sp, #16
 801e6d4:	af00      	add	r7, sp, #0
 801e6d6:	60f8      	str	r0, [r7, #12]
 801e6d8:	60b9      	str	r1, [r7, #8]
 801e6da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801e6dc:	68fb      	ldr	r3, [r7, #12]
 801e6de:	2203      	movs	r2, #3
 801e6e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801e6e4:	68fb      	ldr	r3, [r7, #12]
 801e6e6:	687a      	ldr	r2, [r7, #4]
 801e6e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801e6ec:	68fb      	ldr	r3, [r7, #12]
 801e6ee:	687a      	ldr	r2, [r7, #4]
 801e6f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	68ba      	ldr	r2, [r7, #8]
 801e6f8:	2100      	movs	r1, #0
 801e6fa:	68f8      	ldr	r0, [r7, #12]
 801e6fc:	f004 fd46 	bl	802318c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801e700:	2300      	movs	r3, #0
}
 801e702:	4618      	mov	r0, r3
 801e704:	3710      	adds	r7, #16
 801e706:	46bd      	mov	sp, r7
 801e708:	bd80      	pop	{r7, pc}

0801e70a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801e70a:	b580      	push	{r7, lr}
 801e70c:	b084      	sub	sp, #16
 801e70e:	af00      	add	r7, sp, #0
 801e710:	60f8      	str	r0, [r7, #12]
 801e712:	60b9      	str	r1, [r7, #8]
 801e714:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	68ba      	ldr	r2, [r7, #8]
 801e71a:	2100      	movs	r1, #0
 801e71c:	68f8      	ldr	r0, [r7, #12]
 801e71e:	f004 fd35 	bl	802318c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801e722:	2300      	movs	r3, #0
}
 801e724:	4618      	mov	r0, r3
 801e726:	3710      	adds	r7, #16
 801e728:	46bd      	mov	sp, r7
 801e72a:	bd80      	pop	{r7, pc}

0801e72c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801e72c:	b580      	push	{r7, lr}
 801e72e:	b082      	sub	sp, #8
 801e730:	af00      	add	r7, sp, #0
 801e732:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	2204      	movs	r2, #4
 801e738:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801e73c:	2300      	movs	r3, #0
 801e73e:	2200      	movs	r2, #0
 801e740:	2100      	movs	r1, #0
 801e742:	6878      	ldr	r0, [r7, #4]
 801e744:	f004 fd01 	bl	802314a <USBD_LL_Transmit>

  return USBD_OK;
 801e748:	2300      	movs	r3, #0
}
 801e74a:	4618      	mov	r0, r3
 801e74c:	3708      	adds	r7, #8
 801e74e:	46bd      	mov	sp, r7
 801e750:	bd80      	pop	{r7, pc}

0801e752 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801e752:	b580      	push	{r7, lr}
 801e754:	b082      	sub	sp, #8
 801e756:	af00      	add	r7, sp, #0
 801e758:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	2205      	movs	r2, #5
 801e75e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e762:	2300      	movs	r3, #0
 801e764:	2200      	movs	r2, #0
 801e766:	2100      	movs	r1, #0
 801e768:	6878      	ldr	r0, [r7, #4]
 801e76a:	f004 fd0f 	bl	802318c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801e76e:	2300      	movs	r3, #0
}
 801e770:	4618      	mov	r0, r3
 801e772:	3708      	adds	r7, #8
 801e774:	46bd      	mov	sp, r7
 801e776:	bd80      	pop	{r7, pc}

0801e778 <__NVIC_SetPriority>:
{
 801e778:	b480      	push	{r7}
 801e77a:	b083      	sub	sp, #12
 801e77c:	af00      	add	r7, sp, #0
 801e77e:	4603      	mov	r3, r0
 801e780:	6039      	str	r1, [r7, #0]
 801e782:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801e784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801e788:	2b00      	cmp	r3, #0
 801e78a:	db0a      	blt.n	801e7a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801e78c:	683b      	ldr	r3, [r7, #0]
 801e78e:	b2da      	uxtb	r2, r3
 801e790:	490c      	ldr	r1, [pc, #48]	@ (801e7c4 <__NVIC_SetPriority+0x4c>)
 801e792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801e796:	0112      	lsls	r2, r2, #4
 801e798:	b2d2      	uxtb	r2, r2
 801e79a:	440b      	add	r3, r1
 801e79c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801e7a0:	e00a      	b.n	801e7b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801e7a2:	683b      	ldr	r3, [r7, #0]
 801e7a4:	b2da      	uxtb	r2, r3
 801e7a6:	4908      	ldr	r1, [pc, #32]	@ (801e7c8 <__NVIC_SetPriority+0x50>)
 801e7a8:	88fb      	ldrh	r3, [r7, #6]
 801e7aa:	f003 030f 	and.w	r3, r3, #15
 801e7ae:	3b04      	subs	r3, #4
 801e7b0:	0112      	lsls	r2, r2, #4
 801e7b2:	b2d2      	uxtb	r2, r2
 801e7b4:	440b      	add	r3, r1
 801e7b6:	761a      	strb	r2, [r3, #24]
}
 801e7b8:	bf00      	nop
 801e7ba:	370c      	adds	r7, #12
 801e7bc:	46bd      	mov	sp, r7
 801e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7c2:	4770      	bx	lr
 801e7c4:	e000e100 	.word	0xe000e100
 801e7c8:	e000ed00 	.word	0xe000ed00

0801e7cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801e7cc:	b580      	push	{r7, lr}
 801e7ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801e7d0:	4b05      	ldr	r3, [pc, #20]	@ (801e7e8 <SysTick_Handler+0x1c>)
 801e7d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801e7d4:	f002 fe58 	bl	8021488 <xTaskGetSchedulerState>
 801e7d8:	4603      	mov	r3, r0
 801e7da:	2b01      	cmp	r3, #1
 801e7dc:	d001      	beq.n	801e7e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801e7de:	f003 fd8b 	bl	80222f8 <xPortSysTickHandler>
  }
}
 801e7e2:	bf00      	nop
 801e7e4:	bd80      	pop	{r7, pc}
 801e7e6:	bf00      	nop
 801e7e8:	e000e010 	.word	0xe000e010

0801e7ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801e7ec:	b580      	push	{r7, lr}
 801e7ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801e7f0:	2100      	movs	r1, #0
 801e7f2:	f06f 0004 	mvn.w	r0, #4
 801e7f6:	f7ff ffbf 	bl	801e778 <__NVIC_SetPriority>
#endif
}
 801e7fa:	bf00      	nop
 801e7fc:	bd80      	pop	{r7, pc}
	...

0801e800 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801e800:	b480      	push	{r7}
 801e802:	b083      	sub	sp, #12
 801e804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e806:	f3ef 8305 	mrs	r3, IPSR
 801e80a:	603b      	str	r3, [r7, #0]
  return(result);
 801e80c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e80e:	2b00      	cmp	r3, #0
 801e810:	d003      	beq.n	801e81a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801e812:	f06f 0305 	mvn.w	r3, #5
 801e816:	607b      	str	r3, [r7, #4]
 801e818:	e00c      	b.n	801e834 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801e81a:	4b0a      	ldr	r3, [pc, #40]	@ (801e844 <osKernelInitialize+0x44>)
 801e81c:	681b      	ldr	r3, [r3, #0]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	d105      	bne.n	801e82e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801e822:	4b08      	ldr	r3, [pc, #32]	@ (801e844 <osKernelInitialize+0x44>)
 801e824:	2201      	movs	r2, #1
 801e826:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801e828:	2300      	movs	r3, #0
 801e82a:	607b      	str	r3, [r7, #4]
 801e82c:	e002      	b.n	801e834 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801e82e:	f04f 33ff 	mov.w	r3, #4294967295
 801e832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801e834:	687b      	ldr	r3, [r7, #4]
}
 801e836:	4618      	mov	r0, r3
 801e838:	370c      	adds	r7, #12
 801e83a:	46bd      	mov	sp, r7
 801e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e840:	4770      	bx	lr
 801e842:	bf00      	nop
 801e844:	24018790 	.word	0x24018790

0801e848 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801e848:	b580      	push	{r7, lr}
 801e84a:	b082      	sub	sp, #8
 801e84c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e84e:	f3ef 8305 	mrs	r3, IPSR
 801e852:	603b      	str	r3, [r7, #0]
  return(result);
 801e854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e856:	2b00      	cmp	r3, #0
 801e858:	d003      	beq.n	801e862 <osKernelStart+0x1a>
    stat = osErrorISR;
 801e85a:	f06f 0305 	mvn.w	r3, #5
 801e85e:	607b      	str	r3, [r7, #4]
 801e860:	e010      	b.n	801e884 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801e862:	4b0b      	ldr	r3, [pc, #44]	@ (801e890 <osKernelStart+0x48>)
 801e864:	681b      	ldr	r3, [r3, #0]
 801e866:	2b01      	cmp	r3, #1
 801e868:	d109      	bne.n	801e87e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801e86a:	f7ff ffbf 	bl	801e7ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801e86e:	4b08      	ldr	r3, [pc, #32]	@ (801e890 <osKernelStart+0x48>)
 801e870:	2202      	movs	r2, #2
 801e872:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801e874:	f002 f8c4 	bl	8020a00 <vTaskStartScheduler>
      stat = osOK;
 801e878:	2300      	movs	r3, #0
 801e87a:	607b      	str	r3, [r7, #4]
 801e87c:	e002      	b.n	801e884 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801e87e:	f04f 33ff 	mov.w	r3, #4294967295
 801e882:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801e884:	687b      	ldr	r3, [r7, #4]
}
 801e886:	4618      	mov	r0, r3
 801e888:	3708      	adds	r7, #8
 801e88a:	46bd      	mov	sp, r7
 801e88c:	bd80      	pop	{r7, pc}
 801e88e:	bf00      	nop
 801e890:	24018790 	.word	0x24018790

0801e894 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 801e894:	b580      	push	{r7, lr}
 801e896:	b082      	sub	sp, #8
 801e898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e89a:	f3ef 8305 	mrs	r3, IPSR
 801e89e:	603b      	str	r3, [r7, #0]
  return(result);
 801e8a0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	d003      	beq.n	801e8ae <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 801e8a6:	f002 f9d9 	bl	8020c5c <xTaskGetTickCountFromISR>
 801e8aa:	6078      	str	r0, [r7, #4]
 801e8ac:	e002      	b.n	801e8b4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 801e8ae:	f002 f9c5 	bl	8020c3c <xTaskGetTickCount>
 801e8b2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 801e8b4:	687b      	ldr	r3, [r7, #4]
}
 801e8b6:	4618      	mov	r0, r3
 801e8b8:	3708      	adds	r7, #8
 801e8ba:	46bd      	mov	sp, r7
 801e8bc:	bd80      	pop	{r7, pc}

0801e8be <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801e8be:	b580      	push	{r7, lr}
 801e8c0:	b08e      	sub	sp, #56	@ 0x38
 801e8c2:	af04      	add	r7, sp, #16
 801e8c4:	60f8      	str	r0, [r7, #12]
 801e8c6:	60b9      	str	r1, [r7, #8]
 801e8c8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801e8ca:	2300      	movs	r3, #0
 801e8cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e8ce:	f3ef 8305 	mrs	r3, IPSR
 801e8d2:	617b      	str	r3, [r7, #20]
  return(result);
 801e8d4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	d17e      	bne.n	801e9d8 <osThreadNew+0x11a>
 801e8da:	68fb      	ldr	r3, [r7, #12]
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d07b      	beq.n	801e9d8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801e8e0:	2380      	movs	r3, #128	@ 0x80
 801e8e2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801e8e4:	2318      	movs	r3, #24
 801e8e6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801e8e8:	2300      	movs	r3, #0
 801e8ea:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 801e8ec:	f04f 33ff 	mov.w	r3, #4294967295
 801e8f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801e8f2:	687b      	ldr	r3, [r7, #4]
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	d045      	beq.n	801e984 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	d002      	beq.n	801e906 <osThreadNew+0x48>
        name = attr->name;
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 801e906:	687b      	ldr	r3, [r7, #4]
 801e908:	699b      	ldr	r3, [r3, #24]
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d002      	beq.n	801e914 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801e90e:	687b      	ldr	r3, [r7, #4]
 801e910:	699b      	ldr	r3, [r3, #24]
 801e912:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801e914:	69fb      	ldr	r3, [r7, #28]
 801e916:	2b00      	cmp	r3, #0
 801e918:	d008      	beq.n	801e92c <osThreadNew+0x6e>
 801e91a:	69fb      	ldr	r3, [r7, #28]
 801e91c:	2b38      	cmp	r3, #56	@ 0x38
 801e91e:	d805      	bhi.n	801e92c <osThreadNew+0x6e>
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	685b      	ldr	r3, [r3, #4]
 801e924:	f003 0301 	and.w	r3, r3, #1
 801e928:	2b00      	cmp	r3, #0
 801e92a:	d001      	beq.n	801e930 <osThreadNew+0x72>
        return (NULL);
 801e92c:	2300      	movs	r3, #0
 801e92e:	e054      	b.n	801e9da <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	695b      	ldr	r3, [r3, #20]
 801e934:	2b00      	cmp	r3, #0
 801e936:	d003      	beq.n	801e940 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	695b      	ldr	r3, [r3, #20]
 801e93c:	089b      	lsrs	r3, r3, #2
 801e93e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	689b      	ldr	r3, [r3, #8]
 801e944:	2b00      	cmp	r3, #0
 801e946:	d00e      	beq.n	801e966 <osThreadNew+0xa8>
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	68db      	ldr	r3, [r3, #12]
 801e94c:	2bab      	cmp	r3, #171	@ 0xab
 801e94e:	d90a      	bls.n	801e966 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e954:	2b00      	cmp	r3, #0
 801e956:	d006      	beq.n	801e966 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	695b      	ldr	r3, [r3, #20]
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d002      	beq.n	801e966 <osThreadNew+0xa8>
        mem = 1;
 801e960:	2301      	movs	r3, #1
 801e962:	61bb      	str	r3, [r7, #24]
 801e964:	e010      	b.n	801e988 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	689b      	ldr	r3, [r3, #8]
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	d10c      	bne.n	801e988 <osThreadNew+0xca>
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	68db      	ldr	r3, [r3, #12]
 801e972:	2b00      	cmp	r3, #0
 801e974:	d108      	bne.n	801e988 <osThreadNew+0xca>
 801e976:	687b      	ldr	r3, [r7, #4]
 801e978:	691b      	ldr	r3, [r3, #16]
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	d104      	bne.n	801e988 <osThreadNew+0xca>
          mem = 0;
 801e97e:	2300      	movs	r3, #0
 801e980:	61bb      	str	r3, [r7, #24]
 801e982:	e001      	b.n	801e988 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801e984:	2300      	movs	r3, #0
 801e986:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801e988:	69bb      	ldr	r3, [r7, #24]
 801e98a:	2b01      	cmp	r3, #1
 801e98c:	d110      	bne.n	801e9b0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801e992:	687a      	ldr	r2, [r7, #4]
 801e994:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e996:	9202      	str	r2, [sp, #8]
 801e998:	9301      	str	r3, [sp, #4]
 801e99a:	69fb      	ldr	r3, [r7, #28]
 801e99c:	9300      	str	r3, [sp, #0]
 801e99e:	68bb      	ldr	r3, [r7, #8]
 801e9a0:	6a3a      	ldr	r2, [r7, #32]
 801e9a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e9a4:	68f8      	ldr	r0, [r7, #12]
 801e9a6:	f001 fe35 	bl	8020614 <xTaskCreateStatic>
 801e9aa:	4603      	mov	r3, r0
 801e9ac:	613b      	str	r3, [r7, #16]
 801e9ae:	e013      	b.n	801e9d8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801e9b0:	69bb      	ldr	r3, [r7, #24]
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	d110      	bne.n	801e9d8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801e9b6:	6a3b      	ldr	r3, [r7, #32]
 801e9b8:	b29a      	uxth	r2, r3
 801e9ba:	f107 0310 	add.w	r3, r7, #16
 801e9be:	9301      	str	r3, [sp, #4]
 801e9c0:	69fb      	ldr	r3, [r7, #28]
 801e9c2:	9300      	str	r3, [sp, #0]
 801e9c4:	68bb      	ldr	r3, [r7, #8]
 801e9c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e9c8:	68f8      	ldr	r0, [r7, #12]
 801e9ca:	f001 fe83 	bl	80206d4 <xTaskCreate>
 801e9ce:	4603      	mov	r3, r0
 801e9d0:	2b01      	cmp	r3, #1
 801e9d2:	d001      	beq.n	801e9d8 <osThreadNew+0x11a>
            hTask = NULL;
 801e9d4:	2300      	movs	r3, #0
 801e9d6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801e9d8:	693b      	ldr	r3, [r7, #16]
}
 801e9da:	4618      	mov	r0, r3
 801e9dc:	3728      	adds	r7, #40	@ 0x28
 801e9de:	46bd      	mov	sp, r7
 801e9e0:	bd80      	pop	{r7, pc}

0801e9e2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801e9e2:	b580      	push	{r7, lr}
 801e9e4:	b084      	sub	sp, #16
 801e9e6:	af00      	add	r7, sp, #0
 801e9e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e9ea:	f3ef 8305 	mrs	r3, IPSR
 801e9ee:	60bb      	str	r3, [r7, #8]
  return(result);
 801e9f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d003      	beq.n	801e9fe <osDelay+0x1c>
    stat = osErrorISR;
 801e9f6:	f06f 0305 	mvn.w	r3, #5
 801e9fa:	60fb      	str	r3, [r7, #12]
 801e9fc:	e007      	b.n	801ea0e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801e9fe:	2300      	movs	r3, #0
 801ea00:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d002      	beq.n	801ea0e <osDelay+0x2c>
      vTaskDelay(ticks);
 801ea08:	6878      	ldr	r0, [r7, #4]
 801ea0a:	f001 ffc3 	bl	8020994 <vTaskDelay>
    }
  }

  return (stat);
 801ea0e:	68fb      	ldr	r3, [r7, #12]
}
 801ea10:	4618      	mov	r0, r3
 801ea12:	3710      	adds	r7, #16
 801ea14:	46bd      	mov	sp, r7
 801ea16:	bd80      	pop	{r7, pc}

0801ea18 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801ea18:	b580      	push	{r7, lr}
 801ea1a:	b086      	sub	sp, #24
 801ea1c:	af00      	add	r7, sp, #0
 801ea1e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801ea20:	2300      	movs	r3, #0
 801ea22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ea24:	f3ef 8305 	mrs	r3, IPSR
 801ea28:	60fb      	str	r3, [r7, #12]
  return(result);
 801ea2a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801ea2c:	2b00      	cmp	r3, #0
 801ea2e:	d12d      	bne.n	801ea8c <osEventFlagsNew+0x74>
    mem = -1;
 801ea30:	f04f 33ff 	mov.w	r3, #4294967295
 801ea34:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	d015      	beq.n	801ea68 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	689b      	ldr	r3, [r3, #8]
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	d006      	beq.n	801ea52 <osEventFlagsNew+0x3a>
 801ea44:	687b      	ldr	r3, [r7, #4]
 801ea46:	68db      	ldr	r3, [r3, #12]
 801ea48:	2b1f      	cmp	r3, #31
 801ea4a:	d902      	bls.n	801ea52 <osEventFlagsNew+0x3a>
        mem = 1;
 801ea4c:	2301      	movs	r3, #1
 801ea4e:	613b      	str	r3, [r7, #16]
 801ea50:	e00c      	b.n	801ea6c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	689b      	ldr	r3, [r3, #8]
 801ea56:	2b00      	cmp	r3, #0
 801ea58:	d108      	bne.n	801ea6c <osEventFlagsNew+0x54>
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	68db      	ldr	r3, [r3, #12]
 801ea5e:	2b00      	cmp	r3, #0
 801ea60:	d104      	bne.n	801ea6c <osEventFlagsNew+0x54>
          mem = 0;
 801ea62:	2300      	movs	r3, #0
 801ea64:	613b      	str	r3, [r7, #16]
 801ea66:	e001      	b.n	801ea6c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801ea68:	2300      	movs	r3, #0
 801ea6a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 801ea6c:	693b      	ldr	r3, [r7, #16]
 801ea6e:	2b01      	cmp	r3, #1
 801ea70:	d106      	bne.n	801ea80 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	689b      	ldr	r3, [r3, #8]
 801ea76:	4618      	mov	r0, r3
 801ea78:	f000 fab2 	bl	801efe0 <xEventGroupCreateStatic>
 801ea7c:	6178      	str	r0, [r7, #20]
 801ea7e:	e005      	b.n	801ea8c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 801ea80:	693b      	ldr	r3, [r7, #16]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d102      	bne.n	801ea8c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801ea86:	f000 fae4 	bl	801f052 <xEventGroupCreate>
 801ea8a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801ea8c:	697b      	ldr	r3, [r7, #20]
}
 801ea8e:	4618      	mov	r0, r3
 801ea90:	3718      	adds	r7, #24
 801ea92:	46bd      	mov	sp, r7
 801ea94:	bd80      	pop	{r7, pc}
	...

0801ea98 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801ea98:	b580      	push	{r7, lr}
 801ea9a:	b086      	sub	sp, #24
 801ea9c:	af00      	add	r7, sp, #0
 801ea9e:	6078      	str	r0, [r7, #4]
 801eaa0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801eaa6:	693b      	ldr	r3, [r7, #16]
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	d003      	beq.n	801eab4 <osEventFlagsSet+0x1c>
 801eaac:	683b      	ldr	r3, [r7, #0]
 801eaae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801eab2:	d303      	bcc.n	801eabc <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 801eab4:	f06f 0303 	mvn.w	r3, #3
 801eab8:	617b      	str	r3, [r7, #20]
 801eaba:	e028      	b.n	801eb0e <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801eabc:	f3ef 8305 	mrs	r3, IPSR
 801eac0:	60fb      	str	r3, [r7, #12]
  return(result);
 801eac2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	d01d      	beq.n	801eb04 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801eac8:	2300      	movs	r3, #0
 801eaca:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801eacc:	f107 0308 	add.w	r3, r7, #8
 801ead0:	461a      	mov	r2, r3
 801ead2:	6839      	ldr	r1, [r7, #0]
 801ead4:	6938      	ldr	r0, [r7, #16]
 801ead6:	f000 fce3 	bl	801f4a0 <xEventGroupSetBitsFromISR>
 801eada:	4603      	mov	r3, r0
 801eadc:	2b00      	cmp	r3, #0
 801eade:	d103      	bne.n	801eae8 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 801eae0:	f06f 0302 	mvn.w	r3, #2
 801eae4:	617b      	str	r3, [r7, #20]
 801eae6:	e012      	b.n	801eb0e <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 801eae8:	683b      	ldr	r3, [r7, #0]
 801eaea:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801eaec:	68bb      	ldr	r3, [r7, #8]
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d00d      	beq.n	801eb0e <osEventFlagsSet+0x76>
 801eaf2:	4b09      	ldr	r3, [pc, #36]	@ (801eb18 <osEventFlagsSet+0x80>)
 801eaf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801eaf8:	601a      	str	r2, [r3, #0]
 801eafa:	f3bf 8f4f 	dsb	sy
 801eafe:	f3bf 8f6f 	isb	sy
 801eb02:	e004      	b.n	801eb0e <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801eb04:	6839      	ldr	r1, [r7, #0]
 801eb06:	6938      	ldr	r0, [r7, #16]
 801eb08:	f000 fc02 	bl	801f310 <xEventGroupSetBits>
 801eb0c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801eb0e:	697b      	ldr	r3, [r7, #20]
}
 801eb10:	4618      	mov	r0, r3
 801eb12:	3718      	adds	r7, #24
 801eb14:	46bd      	mov	sp, r7
 801eb16:	bd80      	pop	{r7, pc}
 801eb18:	e000ed04 	.word	0xe000ed04

0801eb1c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 801eb1c:	b580      	push	{r7, lr}
 801eb1e:	b086      	sub	sp, #24
 801eb20:	af00      	add	r7, sp, #0
 801eb22:	6078      	str	r0, [r7, #4]
 801eb24:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801eb2a:	693b      	ldr	r3, [r7, #16]
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	d003      	beq.n	801eb38 <osEventFlagsClear+0x1c>
 801eb30:	683b      	ldr	r3, [r7, #0]
 801eb32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801eb36:	d303      	bcc.n	801eb40 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 801eb38:	f06f 0303 	mvn.w	r3, #3
 801eb3c:	617b      	str	r3, [r7, #20]
 801eb3e:	e019      	b.n	801eb74 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801eb40:	f3ef 8305 	mrs	r3, IPSR
 801eb44:	60fb      	str	r3, [r7, #12]
  return(result);
 801eb46:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d00e      	beq.n	801eb6a <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801eb4c:	6938      	ldr	r0, [r7, #16]
 801eb4e:	f000 fbbb 	bl	801f2c8 <xEventGroupGetBitsFromISR>
 801eb52:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801eb54:	6839      	ldr	r1, [r7, #0]
 801eb56:	6938      	ldr	r0, [r7, #16]
 801eb58:	f000 fba2 	bl	801f2a0 <xEventGroupClearBitsFromISR>
 801eb5c:	4603      	mov	r3, r0
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	d108      	bne.n	801eb74 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 801eb62:	f06f 0302 	mvn.w	r3, #2
 801eb66:	617b      	str	r3, [r7, #20]
 801eb68:	e004      	b.n	801eb74 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 801eb6a:	6839      	ldr	r1, [r7, #0]
 801eb6c:	6938      	ldr	r0, [r7, #16]
 801eb6e:	f000 fb5d 	bl	801f22c <xEventGroupClearBits>
 801eb72:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801eb74:	697b      	ldr	r3, [r7, #20]
}
 801eb76:	4618      	mov	r0, r3
 801eb78:	3718      	adds	r7, #24
 801eb7a:	46bd      	mov	sp, r7
 801eb7c:	bd80      	pop	{r7, pc}

0801eb7e <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 801eb7e:	b580      	push	{r7, lr}
 801eb80:	b08c      	sub	sp, #48	@ 0x30
 801eb82:	af02      	add	r7, sp, #8
 801eb84:	60f8      	str	r0, [r7, #12]
 801eb86:	60b9      	str	r1, [r7, #8]
 801eb88:	607a      	str	r2, [r7, #4]
 801eb8a:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801eb90:	69bb      	ldr	r3, [r7, #24]
 801eb92:	2b00      	cmp	r3, #0
 801eb94:	d003      	beq.n	801eb9e <osEventFlagsWait+0x20>
 801eb96:	68bb      	ldr	r3, [r7, #8]
 801eb98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801eb9c:	d303      	bcc.n	801eba6 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 801eb9e:	f06f 0303 	mvn.w	r3, #3
 801eba2:	61fb      	str	r3, [r7, #28]
 801eba4:	e04b      	b.n	801ec3e <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801eba6:	f3ef 8305 	mrs	r3, IPSR
 801ebaa:	617b      	str	r3, [r7, #20]
  return(result);
 801ebac:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801ebae:	2b00      	cmp	r3, #0
 801ebb0:	d003      	beq.n	801ebba <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 801ebb2:	f06f 0305 	mvn.w	r3, #5
 801ebb6:	61fb      	str	r3, [r7, #28]
 801ebb8:	e041      	b.n	801ec3e <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 801ebba:	687b      	ldr	r3, [r7, #4]
 801ebbc:	f003 0301 	and.w	r3, r3, #1
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d002      	beq.n	801ebca <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 801ebc4:	2301      	movs	r3, #1
 801ebc6:	627b      	str	r3, [r7, #36]	@ 0x24
 801ebc8:	e001      	b.n	801ebce <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 801ebca:	2300      	movs	r3, #0
 801ebcc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 801ebce:	687b      	ldr	r3, [r7, #4]
 801ebd0:	f003 0302 	and.w	r3, r3, #2
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d002      	beq.n	801ebde <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 801ebd8:	2300      	movs	r3, #0
 801ebda:	623b      	str	r3, [r7, #32]
 801ebdc:	e001      	b.n	801ebe2 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 801ebde:	2301      	movs	r3, #1
 801ebe0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801ebe2:	683b      	ldr	r3, [r7, #0]
 801ebe4:	9300      	str	r3, [sp, #0]
 801ebe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebe8:	6a3a      	ldr	r2, [r7, #32]
 801ebea:	68b9      	ldr	r1, [r7, #8]
 801ebec:	69b8      	ldr	r0, [r7, #24]
 801ebee:	f000 fa4b 	bl	801f088 <xEventGroupWaitBits>
 801ebf2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	f003 0301 	and.w	r3, r3, #1
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d010      	beq.n	801ec20 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 801ebfe:	68ba      	ldr	r2, [r7, #8]
 801ec00:	69fb      	ldr	r3, [r7, #28]
 801ec02:	4013      	ands	r3, r2
 801ec04:	68ba      	ldr	r2, [r7, #8]
 801ec06:	429a      	cmp	r2, r3
 801ec08:	d019      	beq.n	801ec3e <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 801ec0a:	683b      	ldr	r3, [r7, #0]
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	d003      	beq.n	801ec18 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 801ec10:	f06f 0301 	mvn.w	r3, #1
 801ec14:	61fb      	str	r3, [r7, #28]
 801ec16:	e012      	b.n	801ec3e <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 801ec18:	f06f 0302 	mvn.w	r3, #2
 801ec1c:	61fb      	str	r3, [r7, #28]
 801ec1e:	e00e      	b.n	801ec3e <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801ec20:	68ba      	ldr	r2, [r7, #8]
 801ec22:	69fb      	ldr	r3, [r7, #28]
 801ec24:	4013      	ands	r3, r2
 801ec26:	2b00      	cmp	r3, #0
 801ec28:	d109      	bne.n	801ec3e <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 801ec2a:	683b      	ldr	r3, [r7, #0]
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d003      	beq.n	801ec38 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 801ec30:	f06f 0301 	mvn.w	r3, #1
 801ec34:	61fb      	str	r3, [r7, #28]
 801ec36:	e002      	b.n	801ec3e <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 801ec38:	f06f 0302 	mvn.w	r3, #2
 801ec3c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801ec3e:	69fb      	ldr	r3, [r7, #28]
}
 801ec40:	4618      	mov	r0, r3
 801ec42:	3728      	adds	r7, #40	@ 0x28
 801ec44:	46bd      	mov	sp, r7
 801ec46:	bd80      	pop	{r7, pc}

0801ec48 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801ec48:	b580      	push	{r7, lr}
 801ec4a:	b088      	sub	sp, #32
 801ec4c:	af00      	add	r7, sp, #0
 801ec4e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801ec50:	2300      	movs	r3, #0
 801ec52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ec54:	f3ef 8305 	mrs	r3, IPSR
 801ec58:	60bb      	str	r3, [r7, #8]
  return(result);
 801ec5a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d174      	bne.n	801ed4a <osMutexNew+0x102>
    if (attr != NULL) {
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d003      	beq.n	801ec6e <osMutexNew+0x26>
      type = attr->attr_bits;
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	685b      	ldr	r3, [r3, #4]
 801ec6a:	61bb      	str	r3, [r7, #24]
 801ec6c:	e001      	b.n	801ec72 <osMutexNew+0x2a>
    } else {
      type = 0U;
 801ec6e:	2300      	movs	r3, #0
 801ec70:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801ec72:	69bb      	ldr	r3, [r7, #24]
 801ec74:	f003 0301 	and.w	r3, r3, #1
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	d002      	beq.n	801ec82 <osMutexNew+0x3a>
      rmtx = 1U;
 801ec7c:	2301      	movs	r3, #1
 801ec7e:	617b      	str	r3, [r7, #20]
 801ec80:	e001      	b.n	801ec86 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801ec82:	2300      	movs	r3, #0
 801ec84:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801ec86:	69bb      	ldr	r3, [r7, #24]
 801ec88:	f003 0308 	and.w	r3, r3, #8
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d15c      	bne.n	801ed4a <osMutexNew+0x102>
      mem = -1;
 801ec90:	f04f 33ff 	mov.w	r3, #4294967295
 801ec94:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d015      	beq.n	801ecc8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	689b      	ldr	r3, [r3, #8]
 801eca0:	2b00      	cmp	r3, #0
 801eca2:	d006      	beq.n	801ecb2 <osMutexNew+0x6a>
 801eca4:	687b      	ldr	r3, [r7, #4]
 801eca6:	68db      	ldr	r3, [r3, #12]
 801eca8:	2b4f      	cmp	r3, #79	@ 0x4f
 801ecaa:	d902      	bls.n	801ecb2 <osMutexNew+0x6a>
          mem = 1;
 801ecac:	2301      	movs	r3, #1
 801ecae:	613b      	str	r3, [r7, #16]
 801ecb0:	e00c      	b.n	801eccc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	689b      	ldr	r3, [r3, #8]
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	d108      	bne.n	801eccc <osMutexNew+0x84>
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	68db      	ldr	r3, [r3, #12]
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d104      	bne.n	801eccc <osMutexNew+0x84>
            mem = 0;
 801ecc2:	2300      	movs	r3, #0
 801ecc4:	613b      	str	r3, [r7, #16]
 801ecc6:	e001      	b.n	801eccc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 801ecc8:	2300      	movs	r3, #0
 801ecca:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 801eccc:	693b      	ldr	r3, [r7, #16]
 801ecce:	2b01      	cmp	r3, #1
 801ecd0:	d112      	bne.n	801ecf8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 801ecd2:	697b      	ldr	r3, [r7, #20]
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d007      	beq.n	801ece8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	689b      	ldr	r3, [r3, #8]
 801ecdc:	4619      	mov	r1, r3
 801ecde:	2004      	movs	r0, #4
 801ece0:	f000 fe1d 	bl	801f91e <xQueueCreateMutexStatic>
 801ece4:	61f8      	str	r0, [r7, #28]
 801ece6:	e016      	b.n	801ed16 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	689b      	ldr	r3, [r3, #8]
 801ecec:	4619      	mov	r1, r3
 801ecee:	2001      	movs	r0, #1
 801ecf0:	f000 fe15 	bl	801f91e <xQueueCreateMutexStatic>
 801ecf4:	61f8      	str	r0, [r7, #28]
 801ecf6:	e00e      	b.n	801ed16 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 801ecf8:	693b      	ldr	r3, [r7, #16]
 801ecfa:	2b00      	cmp	r3, #0
 801ecfc:	d10b      	bne.n	801ed16 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 801ecfe:	697b      	ldr	r3, [r7, #20]
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	d004      	beq.n	801ed0e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801ed04:	2004      	movs	r0, #4
 801ed06:	f000 fdf2 	bl	801f8ee <xQueueCreateMutex>
 801ed0a:	61f8      	str	r0, [r7, #28]
 801ed0c:	e003      	b.n	801ed16 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 801ed0e:	2001      	movs	r0, #1
 801ed10:	f000 fded 	bl	801f8ee <xQueueCreateMutex>
 801ed14:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801ed16:	69fb      	ldr	r3, [r7, #28]
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	d00c      	beq.n	801ed36 <osMutexNew+0xee>
        if (attr != NULL) {
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d003      	beq.n	801ed2a <osMutexNew+0xe2>
          name = attr->name;
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	60fb      	str	r3, [r7, #12]
 801ed28:	e001      	b.n	801ed2e <osMutexNew+0xe6>
        } else {
          name = NULL;
 801ed2a:	2300      	movs	r3, #0
 801ed2c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 801ed2e:	68f9      	ldr	r1, [r7, #12]
 801ed30:	69f8      	ldr	r0, [r7, #28]
 801ed32:	f001 fbe7 	bl	8020504 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801ed36:	69fb      	ldr	r3, [r7, #28]
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	d006      	beq.n	801ed4a <osMutexNew+0x102>
 801ed3c:	697b      	ldr	r3, [r7, #20]
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	d003      	beq.n	801ed4a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801ed42:	69fb      	ldr	r3, [r7, #28]
 801ed44:	f043 0301 	orr.w	r3, r3, #1
 801ed48:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801ed4a:	69fb      	ldr	r3, [r7, #28]
}
 801ed4c:	4618      	mov	r0, r3
 801ed4e:	3720      	adds	r7, #32
 801ed50:	46bd      	mov	sp, r7
 801ed52:	bd80      	pop	{r7, pc}

0801ed54 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801ed54:	b580      	push	{r7, lr}
 801ed56:	b086      	sub	sp, #24
 801ed58:	af00      	add	r7, sp, #0
 801ed5a:	6078      	str	r0, [r7, #4]
 801ed5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801ed5e:	687b      	ldr	r3, [r7, #4]
 801ed60:	f023 0301 	bic.w	r3, r3, #1
 801ed64:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	f003 0301 	and.w	r3, r3, #1
 801ed6c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801ed6e:	2300      	movs	r3, #0
 801ed70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ed72:	f3ef 8305 	mrs	r3, IPSR
 801ed76:	60bb      	str	r3, [r7, #8]
  return(result);
 801ed78:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801ed7a:	2b00      	cmp	r3, #0
 801ed7c:	d003      	beq.n	801ed86 <osMutexAcquire+0x32>
    stat = osErrorISR;
 801ed7e:	f06f 0305 	mvn.w	r3, #5
 801ed82:	617b      	str	r3, [r7, #20]
 801ed84:	e02c      	b.n	801ede0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 801ed86:	693b      	ldr	r3, [r7, #16]
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	d103      	bne.n	801ed94 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 801ed8c:	f06f 0303 	mvn.w	r3, #3
 801ed90:	617b      	str	r3, [r7, #20]
 801ed92:	e025      	b.n	801ede0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 801ed94:	68fb      	ldr	r3, [r7, #12]
 801ed96:	2b00      	cmp	r3, #0
 801ed98:	d011      	beq.n	801edbe <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801ed9a:	6839      	ldr	r1, [r7, #0]
 801ed9c:	6938      	ldr	r0, [r7, #16]
 801ed9e:	f000 fe0e 	bl	801f9be <xQueueTakeMutexRecursive>
 801eda2:	4603      	mov	r3, r0
 801eda4:	2b01      	cmp	r3, #1
 801eda6:	d01b      	beq.n	801ede0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801eda8:	683b      	ldr	r3, [r7, #0]
 801edaa:	2b00      	cmp	r3, #0
 801edac:	d003      	beq.n	801edb6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 801edae:	f06f 0301 	mvn.w	r3, #1
 801edb2:	617b      	str	r3, [r7, #20]
 801edb4:	e014      	b.n	801ede0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801edb6:	f06f 0302 	mvn.w	r3, #2
 801edba:	617b      	str	r3, [r7, #20]
 801edbc:	e010      	b.n	801ede0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801edbe:	6839      	ldr	r1, [r7, #0]
 801edc0:	6938      	ldr	r0, [r7, #16]
 801edc2:	f001 f923 	bl	802000c <xQueueSemaphoreTake>
 801edc6:	4603      	mov	r3, r0
 801edc8:	2b01      	cmp	r3, #1
 801edca:	d009      	beq.n	801ede0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 801edcc:	683b      	ldr	r3, [r7, #0]
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d003      	beq.n	801edda <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 801edd2:	f06f 0301 	mvn.w	r3, #1
 801edd6:	617b      	str	r3, [r7, #20]
 801edd8:	e002      	b.n	801ede0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801edda:	f06f 0302 	mvn.w	r3, #2
 801edde:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 801ede0:	697b      	ldr	r3, [r7, #20]
}
 801ede2:	4618      	mov	r0, r3
 801ede4:	3718      	adds	r7, #24
 801ede6:	46bd      	mov	sp, r7
 801ede8:	bd80      	pop	{r7, pc}

0801edea <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801edea:	b580      	push	{r7, lr}
 801edec:	b086      	sub	sp, #24
 801edee:	af00      	add	r7, sp, #0
 801edf0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	f023 0301 	bic.w	r3, r3, #1
 801edf8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	f003 0301 	and.w	r3, r3, #1
 801ee00:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801ee02:	2300      	movs	r3, #0
 801ee04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ee06:	f3ef 8305 	mrs	r3, IPSR
 801ee0a:	60bb      	str	r3, [r7, #8]
  return(result);
 801ee0c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d003      	beq.n	801ee1a <osMutexRelease+0x30>
    stat = osErrorISR;
 801ee12:	f06f 0305 	mvn.w	r3, #5
 801ee16:	617b      	str	r3, [r7, #20]
 801ee18:	e01f      	b.n	801ee5a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 801ee1a:	693b      	ldr	r3, [r7, #16]
 801ee1c:	2b00      	cmp	r3, #0
 801ee1e:	d103      	bne.n	801ee28 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 801ee20:	f06f 0303 	mvn.w	r3, #3
 801ee24:	617b      	str	r3, [r7, #20]
 801ee26:	e018      	b.n	801ee5a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 801ee28:	68fb      	ldr	r3, [r7, #12]
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d009      	beq.n	801ee42 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801ee2e:	6938      	ldr	r0, [r7, #16]
 801ee30:	f000 fd90 	bl	801f954 <xQueueGiveMutexRecursive>
 801ee34:	4603      	mov	r3, r0
 801ee36:	2b01      	cmp	r3, #1
 801ee38:	d00f      	beq.n	801ee5a <osMutexRelease+0x70>
        stat = osErrorResource;
 801ee3a:	f06f 0302 	mvn.w	r3, #2
 801ee3e:	617b      	str	r3, [r7, #20]
 801ee40:	e00b      	b.n	801ee5a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801ee42:	2300      	movs	r3, #0
 801ee44:	2200      	movs	r2, #0
 801ee46:	2100      	movs	r1, #0
 801ee48:	6938      	ldr	r0, [r7, #16]
 801ee4a:	f000 fe5d 	bl	801fb08 <xQueueGenericSend>
 801ee4e:	4603      	mov	r3, r0
 801ee50:	2b01      	cmp	r3, #1
 801ee52:	d002      	beq.n	801ee5a <osMutexRelease+0x70>
        stat = osErrorResource;
 801ee54:	f06f 0302 	mvn.w	r3, #2
 801ee58:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801ee5a:	697b      	ldr	r3, [r7, #20]
}
 801ee5c:	4618      	mov	r0, r3
 801ee5e:	3718      	adds	r7, #24
 801ee60:	46bd      	mov	sp, r7
 801ee62:	bd80      	pop	{r7, pc}

0801ee64 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801ee64:	b580      	push	{r7, lr}
 801ee66:	b08a      	sub	sp, #40	@ 0x28
 801ee68:	af02      	add	r7, sp, #8
 801ee6a:	60f8      	str	r0, [r7, #12]
 801ee6c:	60b9      	str	r1, [r7, #8]
 801ee6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801ee70:	2300      	movs	r3, #0
 801ee72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ee74:	f3ef 8305 	mrs	r3, IPSR
 801ee78:	613b      	str	r3, [r7, #16]
  return(result);
 801ee7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	d175      	bne.n	801ef6c <osSemaphoreNew+0x108>
 801ee80:	68fb      	ldr	r3, [r7, #12]
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d072      	beq.n	801ef6c <osSemaphoreNew+0x108>
 801ee86:	68ba      	ldr	r2, [r7, #8]
 801ee88:	68fb      	ldr	r3, [r7, #12]
 801ee8a:	429a      	cmp	r2, r3
 801ee8c:	d86e      	bhi.n	801ef6c <osSemaphoreNew+0x108>
    mem = -1;
 801ee8e:	f04f 33ff 	mov.w	r3, #4294967295
 801ee92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	d015      	beq.n	801eec6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	689b      	ldr	r3, [r3, #8]
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	d006      	beq.n	801eeb0 <osSemaphoreNew+0x4c>
 801eea2:	687b      	ldr	r3, [r7, #4]
 801eea4:	68db      	ldr	r3, [r3, #12]
 801eea6:	2b4f      	cmp	r3, #79	@ 0x4f
 801eea8:	d902      	bls.n	801eeb0 <osSemaphoreNew+0x4c>
        mem = 1;
 801eeaa:	2301      	movs	r3, #1
 801eeac:	61bb      	str	r3, [r7, #24]
 801eeae:	e00c      	b.n	801eeca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801eeb0:	687b      	ldr	r3, [r7, #4]
 801eeb2:	689b      	ldr	r3, [r3, #8]
 801eeb4:	2b00      	cmp	r3, #0
 801eeb6:	d108      	bne.n	801eeca <osSemaphoreNew+0x66>
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	68db      	ldr	r3, [r3, #12]
 801eebc:	2b00      	cmp	r3, #0
 801eebe:	d104      	bne.n	801eeca <osSemaphoreNew+0x66>
          mem = 0;
 801eec0:	2300      	movs	r3, #0
 801eec2:	61bb      	str	r3, [r7, #24]
 801eec4:	e001      	b.n	801eeca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801eec6:	2300      	movs	r3, #0
 801eec8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801eeca:	69bb      	ldr	r3, [r7, #24]
 801eecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eed0:	d04c      	beq.n	801ef6c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801eed2:	68fb      	ldr	r3, [r7, #12]
 801eed4:	2b01      	cmp	r3, #1
 801eed6:	d128      	bne.n	801ef2a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801eed8:	69bb      	ldr	r3, [r7, #24]
 801eeda:	2b01      	cmp	r3, #1
 801eedc:	d10a      	bne.n	801eef4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	689b      	ldr	r3, [r3, #8]
 801eee2:	2203      	movs	r2, #3
 801eee4:	9200      	str	r2, [sp, #0]
 801eee6:	2200      	movs	r2, #0
 801eee8:	2100      	movs	r1, #0
 801eeea:	2001      	movs	r0, #1
 801eeec:	f000 fc0a 	bl	801f704 <xQueueGenericCreateStatic>
 801eef0:	61f8      	str	r0, [r7, #28]
 801eef2:	e005      	b.n	801ef00 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801eef4:	2203      	movs	r2, #3
 801eef6:	2100      	movs	r1, #0
 801eef8:	2001      	movs	r0, #1
 801eefa:	f000 fc80 	bl	801f7fe <xQueueGenericCreate>
 801eefe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801ef00:	69fb      	ldr	r3, [r7, #28]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d022      	beq.n	801ef4c <osSemaphoreNew+0xe8>
 801ef06:	68bb      	ldr	r3, [r7, #8]
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d01f      	beq.n	801ef4c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801ef0c:	2300      	movs	r3, #0
 801ef0e:	2200      	movs	r2, #0
 801ef10:	2100      	movs	r1, #0
 801ef12:	69f8      	ldr	r0, [r7, #28]
 801ef14:	f000 fdf8 	bl	801fb08 <xQueueGenericSend>
 801ef18:	4603      	mov	r3, r0
 801ef1a:	2b01      	cmp	r3, #1
 801ef1c:	d016      	beq.n	801ef4c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801ef1e:	69f8      	ldr	r0, [r7, #28]
 801ef20:	f001 f9a3 	bl	802026a <vQueueDelete>
            hSemaphore = NULL;
 801ef24:	2300      	movs	r3, #0
 801ef26:	61fb      	str	r3, [r7, #28]
 801ef28:	e010      	b.n	801ef4c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801ef2a:	69bb      	ldr	r3, [r7, #24]
 801ef2c:	2b01      	cmp	r3, #1
 801ef2e:	d108      	bne.n	801ef42 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	689b      	ldr	r3, [r3, #8]
 801ef34:	461a      	mov	r2, r3
 801ef36:	68b9      	ldr	r1, [r7, #8]
 801ef38:	68f8      	ldr	r0, [r7, #12]
 801ef3a:	f000 fd77 	bl	801fa2c <xQueueCreateCountingSemaphoreStatic>
 801ef3e:	61f8      	str	r0, [r7, #28]
 801ef40:	e004      	b.n	801ef4c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801ef42:	68b9      	ldr	r1, [r7, #8]
 801ef44:	68f8      	ldr	r0, [r7, #12]
 801ef46:	f000 fdaa 	bl	801fa9e <xQueueCreateCountingSemaphore>
 801ef4a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801ef4c:	69fb      	ldr	r3, [r7, #28]
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	d00c      	beq.n	801ef6c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d003      	beq.n	801ef60 <osSemaphoreNew+0xfc>
          name = attr->name;
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	617b      	str	r3, [r7, #20]
 801ef5e:	e001      	b.n	801ef64 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801ef60:	2300      	movs	r3, #0
 801ef62:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801ef64:	6979      	ldr	r1, [r7, #20]
 801ef66:	69f8      	ldr	r0, [r7, #28]
 801ef68:	f001 facc 	bl	8020504 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801ef6c:	69fb      	ldr	r3, [r7, #28]
}
 801ef6e:	4618      	mov	r0, r3
 801ef70:	3720      	adds	r7, #32
 801ef72:	46bd      	mov	sp, r7
 801ef74:	bd80      	pop	{r7, pc}
	...

0801ef78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801ef78:	b480      	push	{r7}
 801ef7a:	b085      	sub	sp, #20
 801ef7c:	af00      	add	r7, sp, #0
 801ef7e:	60f8      	str	r0, [r7, #12]
 801ef80:	60b9      	str	r1, [r7, #8]
 801ef82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801ef84:	68fb      	ldr	r3, [r7, #12]
 801ef86:	4a07      	ldr	r2, [pc, #28]	@ (801efa4 <vApplicationGetIdleTaskMemory+0x2c>)
 801ef88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801ef8a:	68bb      	ldr	r3, [r7, #8]
 801ef8c:	4a06      	ldr	r2, [pc, #24]	@ (801efa8 <vApplicationGetIdleTaskMemory+0x30>)
 801ef8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	2280      	movs	r2, #128	@ 0x80
 801ef94:	601a      	str	r2, [r3, #0]
}
 801ef96:	bf00      	nop
 801ef98:	3714      	adds	r7, #20
 801ef9a:	46bd      	mov	sp, r7
 801ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efa0:	4770      	bx	lr
 801efa2:	bf00      	nop
 801efa4:	24018794 	.word	0x24018794
 801efa8:	24018840 	.word	0x24018840

0801efac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801efac:	b480      	push	{r7}
 801efae:	b085      	sub	sp, #20
 801efb0:	af00      	add	r7, sp, #0
 801efb2:	60f8      	str	r0, [r7, #12]
 801efb4:	60b9      	str	r1, [r7, #8]
 801efb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801efb8:	68fb      	ldr	r3, [r7, #12]
 801efba:	4a07      	ldr	r2, [pc, #28]	@ (801efd8 <vApplicationGetTimerTaskMemory+0x2c>)
 801efbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801efbe:	68bb      	ldr	r3, [r7, #8]
 801efc0:	4a06      	ldr	r2, [pc, #24]	@ (801efdc <vApplicationGetTimerTaskMemory+0x30>)
 801efc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801efca:	601a      	str	r2, [r3, #0]
}
 801efcc:	bf00      	nop
 801efce:	3714      	adds	r7, #20
 801efd0:	46bd      	mov	sp, r7
 801efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efd6:	4770      	bx	lr
 801efd8:	24018a40 	.word	0x24018a40
 801efdc:	24018aec 	.word	0x24018aec

0801efe0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801efe0:	b580      	push	{r7, lr}
 801efe2:	b086      	sub	sp, #24
 801efe4:	af00      	add	r7, sp, #0
 801efe6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	2b00      	cmp	r3, #0
 801efec:	d10b      	bne.n	801f006 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801efee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801eff2:	f383 8811 	msr	BASEPRI, r3
 801eff6:	f3bf 8f6f 	isb	sy
 801effa:	f3bf 8f4f 	dsb	sy
 801effe:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801f000:	bf00      	nop
 801f002:	bf00      	nop
 801f004:	e7fd      	b.n	801f002 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801f006:	2320      	movs	r3, #32
 801f008:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 801f00a:	68bb      	ldr	r3, [r7, #8]
 801f00c:	2b20      	cmp	r3, #32
 801f00e:	d00b      	beq.n	801f028 <xEventGroupCreateStatic+0x48>
	__asm volatile
 801f010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f014:	f383 8811 	msr	BASEPRI, r3
 801f018:	f3bf 8f6f 	isb	sy
 801f01c:	f3bf 8f4f 	dsb	sy
 801f020:	60fb      	str	r3, [r7, #12]
}
 801f022:	bf00      	nop
 801f024:	bf00      	nop
 801f026:	e7fd      	b.n	801f024 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 801f02c:	697b      	ldr	r3, [r7, #20]
 801f02e:	2b00      	cmp	r3, #0
 801f030:	d00a      	beq.n	801f048 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 801f032:	697b      	ldr	r3, [r7, #20]
 801f034:	2200      	movs	r2, #0
 801f036:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801f038:	697b      	ldr	r3, [r7, #20]
 801f03a:	3304      	adds	r3, #4
 801f03c:	4618      	mov	r0, r3
 801f03e:	f000 fa43 	bl	801f4c8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801f042:	697b      	ldr	r3, [r7, #20]
 801f044:	2201      	movs	r2, #1
 801f046:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801f048:	697b      	ldr	r3, [r7, #20]
	}
 801f04a:	4618      	mov	r0, r3
 801f04c:	3718      	adds	r7, #24
 801f04e:	46bd      	mov	sp, r7
 801f050:	bd80      	pop	{r7, pc}

0801f052 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801f052:	b580      	push	{r7, lr}
 801f054:	b082      	sub	sp, #8
 801f056:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801f058:	2020      	movs	r0, #32
 801f05a:	f003 f9df 	bl	802241c <pvPortMalloc>
 801f05e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	2b00      	cmp	r3, #0
 801f064:	d00a      	beq.n	801f07c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	2200      	movs	r2, #0
 801f06a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	3304      	adds	r3, #4
 801f070:	4618      	mov	r0, r3
 801f072:	f000 fa29 	bl	801f4c8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	2200      	movs	r2, #0
 801f07a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801f07c:	687b      	ldr	r3, [r7, #4]
	}
 801f07e:	4618      	mov	r0, r3
 801f080:	3708      	adds	r7, #8
 801f082:	46bd      	mov	sp, r7
 801f084:	bd80      	pop	{r7, pc}
	...

0801f088 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801f088:	b580      	push	{r7, lr}
 801f08a:	b090      	sub	sp, #64	@ 0x40
 801f08c:	af00      	add	r7, sp, #0
 801f08e:	60f8      	str	r0, [r7, #12]
 801f090:	60b9      	str	r1, [r7, #8]
 801f092:	607a      	str	r2, [r7, #4]
 801f094:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801f096:	68fb      	ldr	r3, [r7, #12]
 801f098:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801f09a:	2300      	movs	r3, #0
 801f09c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801f09e:	2300      	movs	r3, #0
 801f0a0:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801f0a2:	68fb      	ldr	r3, [r7, #12]
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	d10b      	bne.n	801f0c0 <xEventGroupWaitBits+0x38>
	__asm volatile
 801f0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f0ac:	f383 8811 	msr	BASEPRI, r3
 801f0b0:	f3bf 8f6f 	isb	sy
 801f0b4:	f3bf 8f4f 	dsb	sy
 801f0b8:	623b      	str	r3, [r7, #32]
}
 801f0ba:	bf00      	nop
 801f0bc:	bf00      	nop
 801f0be:	e7fd      	b.n	801f0bc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801f0c0:	68bb      	ldr	r3, [r7, #8]
 801f0c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f0c6:	d30b      	bcc.n	801f0e0 <xEventGroupWaitBits+0x58>
	__asm volatile
 801f0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f0cc:	f383 8811 	msr	BASEPRI, r3
 801f0d0:	f3bf 8f6f 	isb	sy
 801f0d4:	f3bf 8f4f 	dsb	sy
 801f0d8:	61fb      	str	r3, [r7, #28]
}
 801f0da:	bf00      	nop
 801f0dc:	bf00      	nop
 801f0de:	e7fd      	b.n	801f0dc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801f0e0:	68bb      	ldr	r3, [r7, #8]
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	d10b      	bne.n	801f0fe <xEventGroupWaitBits+0x76>
	__asm volatile
 801f0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f0ea:	f383 8811 	msr	BASEPRI, r3
 801f0ee:	f3bf 8f6f 	isb	sy
 801f0f2:	f3bf 8f4f 	dsb	sy
 801f0f6:	61bb      	str	r3, [r7, #24]
}
 801f0f8:	bf00      	nop
 801f0fa:	bf00      	nop
 801f0fc:	e7fd      	b.n	801f0fa <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801f0fe:	f002 f9c3 	bl	8021488 <xTaskGetSchedulerState>
 801f102:	4603      	mov	r3, r0
 801f104:	2b00      	cmp	r3, #0
 801f106:	d102      	bne.n	801f10e <xEventGroupWaitBits+0x86>
 801f108:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d101      	bne.n	801f112 <xEventGroupWaitBits+0x8a>
 801f10e:	2301      	movs	r3, #1
 801f110:	e000      	b.n	801f114 <xEventGroupWaitBits+0x8c>
 801f112:	2300      	movs	r3, #0
 801f114:	2b00      	cmp	r3, #0
 801f116:	d10b      	bne.n	801f130 <xEventGroupWaitBits+0xa8>
	__asm volatile
 801f118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f11c:	f383 8811 	msr	BASEPRI, r3
 801f120:	f3bf 8f6f 	isb	sy
 801f124:	f3bf 8f4f 	dsb	sy
 801f128:	617b      	str	r3, [r7, #20]
}
 801f12a:	bf00      	nop
 801f12c:	bf00      	nop
 801f12e:	e7fd      	b.n	801f12c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 801f130:	f001 fcd8 	bl	8020ae4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801f134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801f13a:	683a      	ldr	r2, [r7, #0]
 801f13c:	68b9      	ldr	r1, [r7, #8]
 801f13e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801f140:	f000 f98c 	bl	801f45c <prvTestWaitCondition>
 801f144:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 801f146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f148:	2b00      	cmp	r3, #0
 801f14a:	d00e      	beq.n	801f16a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801f14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801f150:	2300      	movs	r3, #0
 801f152:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	2b00      	cmp	r3, #0
 801f158:	d028      	beq.n	801f1ac <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801f15a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f15c:	681a      	ldr	r2, [r3, #0]
 801f15e:	68bb      	ldr	r3, [r7, #8]
 801f160:	43db      	mvns	r3, r3
 801f162:	401a      	ands	r2, r3
 801f164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f166:	601a      	str	r2, [r3, #0]
 801f168:	e020      	b.n	801f1ac <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801f16a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	d104      	bne.n	801f17a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801f170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f172:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 801f174:	2301      	movs	r3, #1
 801f176:	633b      	str	r3, [r7, #48]	@ 0x30
 801f178:	e018      	b.n	801f1ac <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	d003      	beq.n	801f188 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801f180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f186:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801f188:	683b      	ldr	r3, [r7, #0]
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	d003      	beq.n	801f196 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801f18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f190:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801f194:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801f196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f198:	1d18      	adds	r0, r3, #4
 801f19a:	68ba      	ldr	r2, [r7, #8]
 801f19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f19e:	4313      	orrs	r3, r2
 801f1a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801f1a2:	4619      	mov	r1, r3
 801f1a4:	f001 fecc 	bl	8020f40 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801f1a8:	2300      	movs	r3, #0
 801f1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801f1ac:	f001 fca8 	bl	8020b00 <xTaskResumeAll>
 801f1b0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801f1b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	d031      	beq.n	801f21c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 801f1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1ba:	2b00      	cmp	r3, #0
 801f1bc:	d107      	bne.n	801f1ce <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 801f1be:	4b1a      	ldr	r3, [pc, #104]	@ (801f228 <xEventGroupWaitBits+0x1a0>)
 801f1c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801f1c4:	601a      	str	r2, [r3, #0]
 801f1c6:	f3bf 8f4f 	dsb	sy
 801f1ca:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801f1ce:	f002 fad5 	bl	802177c <uxTaskResetEventItemValue>
 801f1d2:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801f1d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f1d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	d11a      	bne.n	801f214 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 801f1de:	f002 fffb 	bl	80221d8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801f1e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f1e4:	681b      	ldr	r3, [r3, #0]
 801f1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801f1e8:	683a      	ldr	r2, [r7, #0]
 801f1ea:	68b9      	ldr	r1, [r7, #8]
 801f1ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801f1ee:	f000 f935 	bl	801f45c <prvTestWaitCondition>
 801f1f2:	4603      	mov	r3, r0
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	d009      	beq.n	801f20c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d006      	beq.n	801f20c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801f1fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f200:	681a      	ldr	r2, [r3, #0]
 801f202:	68bb      	ldr	r3, [r7, #8]
 801f204:	43db      	mvns	r3, r3
 801f206:	401a      	ands	r2, r3
 801f208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f20a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801f20c:	2301      	movs	r3, #1
 801f20e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 801f210:	f003 f814 	bl	802223c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801f214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f216:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801f21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801f21c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801f21e:	4618      	mov	r0, r3
 801f220:	3740      	adds	r7, #64	@ 0x40
 801f222:	46bd      	mov	sp, r7
 801f224:	bd80      	pop	{r7, pc}
 801f226:	bf00      	nop
 801f228:	e000ed04 	.word	0xe000ed04

0801f22c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 801f22c:	b580      	push	{r7, lr}
 801f22e:	b086      	sub	sp, #24
 801f230:	af00      	add	r7, sp, #0
 801f232:	6078      	str	r0, [r7, #4]
 801f234:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801f23a:	687b      	ldr	r3, [r7, #4]
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	d10b      	bne.n	801f258 <xEventGroupClearBits+0x2c>
	__asm volatile
 801f240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f244:	f383 8811 	msr	BASEPRI, r3
 801f248:	f3bf 8f6f 	isb	sy
 801f24c:	f3bf 8f4f 	dsb	sy
 801f250:	60fb      	str	r3, [r7, #12]
}
 801f252:	bf00      	nop
 801f254:	bf00      	nop
 801f256:	e7fd      	b.n	801f254 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801f258:	683b      	ldr	r3, [r7, #0]
 801f25a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f25e:	d30b      	bcc.n	801f278 <xEventGroupClearBits+0x4c>
	__asm volatile
 801f260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f264:	f383 8811 	msr	BASEPRI, r3
 801f268:	f3bf 8f6f 	isb	sy
 801f26c:	f3bf 8f4f 	dsb	sy
 801f270:	60bb      	str	r3, [r7, #8]
}
 801f272:	bf00      	nop
 801f274:	bf00      	nop
 801f276:	e7fd      	b.n	801f274 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801f278:	f002 ffae 	bl	80221d8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801f27c:	697b      	ldr	r3, [r7, #20]
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801f282:	697b      	ldr	r3, [r7, #20]
 801f284:	681a      	ldr	r2, [r3, #0]
 801f286:	683b      	ldr	r3, [r7, #0]
 801f288:	43db      	mvns	r3, r3
 801f28a:	401a      	ands	r2, r3
 801f28c:	697b      	ldr	r3, [r7, #20]
 801f28e:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801f290:	f002 ffd4 	bl	802223c <vPortExitCritical>

	return uxReturn;
 801f294:	693b      	ldr	r3, [r7, #16]
}
 801f296:	4618      	mov	r0, r3
 801f298:	3718      	adds	r7, #24
 801f29a:	46bd      	mov	sp, r7
 801f29c:	bd80      	pop	{r7, pc}
	...

0801f2a0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 801f2a0:	b580      	push	{r7, lr}
 801f2a2:	b084      	sub	sp, #16
 801f2a4:	af00      	add	r7, sp, #0
 801f2a6:	6078      	str	r0, [r7, #4]
 801f2a8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801f2aa:	2300      	movs	r3, #0
 801f2ac:	683a      	ldr	r2, [r7, #0]
 801f2ae:	6879      	ldr	r1, [r7, #4]
 801f2b0:	4804      	ldr	r0, [pc, #16]	@ (801f2c4 <xEventGroupClearBitsFromISR+0x24>)
 801f2b2:	f002 fe3d 	bl	8021f30 <xTimerPendFunctionCallFromISR>
 801f2b6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 801f2b8:	68fb      	ldr	r3, [r7, #12]
	}
 801f2ba:	4618      	mov	r0, r3
 801f2bc:	3710      	adds	r7, #16
 801f2be:	46bd      	mov	sp, r7
 801f2c0:	bd80      	pop	{r7, pc}
 801f2c2:	bf00      	nop
 801f2c4:	0801f443 	.word	0x0801f443

0801f2c8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 801f2c8:	b480      	push	{r7}
 801f2ca:	b089      	sub	sp, #36	@ 0x24
 801f2cc:	af00      	add	r7, sp, #0
 801f2ce:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801f2d4:	f3ef 8211 	mrs	r2, BASEPRI
 801f2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f2dc:	f383 8811 	msr	BASEPRI, r3
 801f2e0:	f3bf 8f6f 	isb	sy
 801f2e4:	f3bf 8f4f 	dsb	sy
 801f2e8:	60fa      	str	r2, [r7, #12]
 801f2ea:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801f2ec:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801f2ee:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 801f2f0:	69fb      	ldr	r3, [r7, #28]
 801f2f2:	681b      	ldr	r3, [r3, #0]
 801f2f4:	617b      	str	r3, [r7, #20]
 801f2f6:	69bb      	ldr	r3, [r7, #24]
 801f2f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801f2fa:	693b      	ldr	r3, [r7, #16]
 801f2fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801f300:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801f302:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 801f304:	4618      	mov	r0, r3
 801f306:	3724      	adds	r7, #36	@ 0x24
 801f308:	46bd      	mov	sp, r7
 801f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f30e:	4770      	bx	lr

0801f310 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801f310:	b580      	push	{r7, lr}
 801f312:	b08e      	sub	sp, #56	@ 0x38
 801f314:	af00      	add	r7, sp, #0
 801f316:	6078      	str	r0, [r7, #4]
 801f318:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801f31a:	2300      	movs	r3, #0
 801f31c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801f31e:	687b      	ldr	r3, [r7, #4]
 801f320:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 801f322:	2300      	movs	r3, #0
 801f324:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801f326:	687b      	ldr	r3, [r7, #4]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d10b      	bne.n	801f344 <xEventGroupSetBits+0x34>
	__asm volatile
 801f32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f330:	f383 8811 	msr	BASEPRI, r3
 801f334:	f3bf 8f6f 	isb	sy
 801f338:	f3bf 8f4f 	dsb	sy
 801f33c:	613b      	str	r3, [r7, #16]
}
 801f33e:	bf00      	nop
 801f340:	bf00      	nop
 801f342:	e7fd      	b.n	801f340 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801f344:	683b      	ldr	r3, [r7, #0]
 801f346:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f34a:	d30b      	bcc.n	801f364 <xEventGroupSetBits+0x54>
	__asm volatile
 801f34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f350:	f383 8811 	msr	BASEPRI, r3
 801f354:	f3bf 8f6f 	isb	sy
 801f358:	f3bf 8f4f 	dsb	sy
 801f35c:	60fb      	str	r3, [r7, #12]
}
 801f35e:	bf00      	nop
 801f360:	bf00      	nop
 801f362:	e7fd      	b.n	801f360 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801f364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f366:	3304      	adds	r3, #4
 801f368:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f36c:	3308      	adds	r3, #8
 801f36e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801f370:	f001 fbb8 	bl	8020ae4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801f374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f376:	68db      	ldr	r3, [r3, #12]
 801f378:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801f37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f37c:	681a      	ldr	r2, [r3, #0]
 801f37e:	683b      	ldr	r3, [r7, #0]
 801f380:	431a      	orrs	r2, r3
 801f382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f384:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801f386:	e03c      	b.n	801f402 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 801f388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f38a:	685b      	ldr	r3, [r3, #4]
 801f38c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801f38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f390:	681b      	ldr	r3, [r3, #0]
 801f392:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801f394:	2300      	movs	r3, #0
 801f396:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801f398:	69bb      	ldr	r3, [r7, #24]
 801f39a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 801f39e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801f3a0:	69bb      	ldr	r3, [r7, #24]
 801f3a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801f3a6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801f3a8:	697b      	ldr	r3, [r7, #20]
 801f3aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801f3ae:	2b00      	cmp	r3, #0
 801f3b0:	d108      	bne.n	801f3c4 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801f3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3b4:	681a      	ldr	r2, [r3, #0]
 801f3b6:	69bb      	ldr	r3, [r7, #24]
 801f3b8:	4013      	ands	r3, r2
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	d00b      	beq.n	801f3d6 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 801f3be:	2301      	movs	r3, #1
 801f3c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f3c2:	e008      	b.n	801f3d6 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801f3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3c6:	681a      	ldr	r2, [r3, #0]
 801f3c8:	69bb      	ldr	r3, [r7, #24]
 801f3ca:	4013      	ands	r3, r2
 801f3cc:	69ba      	ldr	r2, [r7, #24]
 801f3ce:	429a      	cmp	r2, r3
 801f3d0:	d101      	bne.n	801f3d6 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801f3d2:	2301      	movs	r3, #1
 801f3d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801f3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	d010      	beq.n	801f3fe <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801f3dc:	697b      	ldr	r3, [r7, #20]
 801f3de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	d003      	beq.n	801f3ee <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801f3e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f3e8:	69bb      	ldr	r3, [r7, #24]
 801f3ea:	4313      	orrs	r3, r2
 801f3ec:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801f3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801f3f6:	4619      	mov	r1, r3
 801f3f8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801f3fa:	f001 fe6f 	bl	80210dc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801f3fe:	69fb      	ldr	r3, [r7, #28]
 801f400:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 801f402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f404:	6a3b      	ldr	r3, [r7, #32]
 801f406:	429a      	cmp	r2, r3
 801f408:	d1be      	bne.n	801f388 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801f40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f40c:	681a      	ldr	r2, [r3, #0]
 801f40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f410:	43db      	mvns	r3, r3
 801f412:	401a      	ands	r2, r3
 801f414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f416:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801f418:	f001 fb72 	bl	8020b00 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801f41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f41e:	681b      	ldr	r3, [r3, #0]
}
 801f420:	4618      	mov	r0, r3
 801f422:	3738      	adds	r7, #56	@ 0x38
 801f424:	46bd      	mov	sp, r7
 801f426:	bd80      	pop	{r7, pc}

0801f428 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801f428:	b580      	push	{r7, lr}
 801f42a:	b082      	sub	sp, #8
 801f42c:	af00      	add	r7, sp, #0
 801f42e:	6078      	str	r0, [r7, #4]
 801f430:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801f432:	6839      	ldr	r1, [r7, #0]
 801f434:	6878      	ldr	r0, [r7, #4]
 801f436:	f7ff ff6b 	bl	801f310 <xEventGroupSetBits>
}
 801f43a:	bf00      	nop
 801f43c:	3708      	adds	r7, #8
 801f43e:	46bd      	mov	sp, r7
 801f440:	bd80      	pop	{r7, pc}

0801f442 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 801f442:	b580      	push	{r7, lr}
 801f444:	b082      	sub	sp, #8
 801f446:	af00      	add	r7, sp, #0
 801f448:	6078      	str	r0, [r7, #4]
 801f44a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801f44c:	6839      	ldr	r1, [r7, #0]
 801f44e:	6878      	ldr	r0, [r7, #4]
 801f450:	f7ff feec 	bl	801f22c <xEventGroupClearBits>
}
 801f454:	bf00      	nop
 801f456:	3708      	adds	r7, #8
 801f458:	46bd      	mov	sp, r7
 801f45a:	bd80      	pop	{r7, pc}

0801f45c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801f45c:	b480      	push	{r7}
 801f45e:	b087      	sub	sp, #28
 801f460:	af00      	add	r7, sp, #0
 801f462:	60f8      	str	r0, [r7, #12]
 801f464:	60b9      	str	r1, [r7, #8]
 801f466:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801f468:	2300      	movs	r3, #0
 801f46a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d107      	bne.n	801f482 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801f472:	68fa      	ldr	r2, [r7, #12]
 801f474:	68bb      	ldr	r3, [r7, #8]
 801f476:	4013      	ands	r3, r2
 801f478:	2b00      	cmp	r3, #0
 801f47a:	d00a      	beq.n	801f492 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801f47c:	2301      	movs	r3, #1
 801f47e:	617b      	str	r3, [r7, #20]
 801f480:	e007      	b.n	801f492 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801f482:	68fa      	ldr	r2, [r7, #12]
 801f484:	68bb      	ldr	r3, [r7, #8]
 801f486:	4013      	ands	r3, r2
 801f488:	68ba      	ldr	r2, [r7, #8]
 801f48a:	429a      	cmp	r2, r3
 801f48c:	d101      	bne.n	801f492 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801f48e:	2301      	movs	r3, #1
 801f490:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801f492:	697b      	ldr	r3, [r7, #20]
}
 801f494:	4618      	mov	r0, r3
 801f496:	371c      	adds	r7, #28
 801f498:	46bd      	mov	sp, r7
 801f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f49e:	4770      	bx	lr

0801f4a0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801f4a0:	b580      	push	{r7, lr}
 801f4a2:	b086      	sub	sp, #24
 801f4a4:	af00      	add	r7, sp, #0
 801f4a6:	60f8      	str	r0, [r7, #12]
 801f4a8:	60b9      	str	r1, [r7, #8]
 801f4aa:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	68ba      	ldr	r2, [r7, #8]
 801f4b0:	68f9      	ldr	r1, [r7, #12]
 801f4b2:	4804      	ldr	r0, [pc, #16]	@ (801f4c4 <xEventGroupSetBitsFromISR+0x24>)
 801f4b4:	f002 fd3c 	bl	8021f30 <xTimerPendFunctionCallFromISR>
 801f4b8:	6178      	str	r0, [r7, #20]

		return xReturn;
 801f4ba:	697b      	ldr	r3, [r7, #20]
	}
 801f4bc:	4618      	mov	r0, r3
 801f4be:	3718      	adds	r7, #24
 801f4c0:	46bd      	mov	sp, r7
 801f4c2:	bd80      	pop	{r7, pc}
 801f4c4:	0801f429 	.word	0x0801f429

0801f4c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801f4c8:	b480      	push	{r7}
 801f4ca:	b083      	sub	sp, #12
 801f4cc:	af00      	add	r7, sp, #0
 801f4ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	f103 0208 	add.w	r2, r3, #8
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801f4da:	687b      	ldr	r3, [r7, #4]
 801f4dc:	f04f 32ff 	mov.w	r2, #4294967295
 801f4e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	f103 0208 	add.w	r2, r3, #8
 801f4e8:	687b      	ldr	r3, [r7, #4]
 801f4ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	f103 0208 	add.w	r2, r3, #8
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801f4f6:	687b      	ldr	r3, [r7, #4]
 801f4f8:	2200      	movs	r2, #0
 801f4fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801f4fc:	bf00      	nop
 801f4fe:	370c      	adds	r7, #12
 801f500:	46bd      	mov	sp, r7
 801f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f506:	4770      	bx	lr

0801f508 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801f508:	b480      	push	{r7}
 801f50a:	b083      	sub	sp, #12
 801f50c:	af00      	add	r7, sp, #0
 801f50e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	2200      	movs	r2, #0
 801f514:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801f516:	bf00      	nop
 801f518:	370c      	adds	r7, #12
 801f51a:	46bd      	mov	sp, r7
 801f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f520:	4770      	bx	lr

0801f522 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801f522:	b480      	push	{r7}
 801f524:	b085      	sub	sp, #20
 801f526:	af00      	add	r7, sp, #0
 801f528:	6078      	str	r0, [r7, #4]
 801f52a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	685b      	ldr	r3, [r3, #4]
 801f530:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801f532:	683b      	ldr	r3, [r7, #0]
 801f534:	68fa      	ldr	r2, [r7, #12]
 801f536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801f538:	68fb      	ldr	r3, [r7, #12]
 801f53a:	689a      	ldr	r2, [r3, #8]
 801f53c:	683b      	ldr	r3, [r7, #0]
 801f53e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801f540:	68fb      	ldr	r3, [r7, #12]
 801f542:	689b      	ldr	r3, [r3, #8]
 801f544:	683a      	ldr	r2, [r7, #0]
 801f546:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801f548:	68fb      	ldr	r3, [r7, #12]
 801f54a:	683a      	ldr	r2, [r7, #0]
 801f54c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801f54e:	683b      	ldr	r3, [r7, #0]
 801f550:	687a      	ldr	r2, [r7, #4]
 801f552:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	681b      	ldr	r3, [r3, #0]
 801f558:	1c5a      	adds	r2, r3, #1
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	601a      	str	r2, [r3, #0]
}
 801f55e:	bf00      	nop
 801f560:	3714      	adds	r7, #20
 801f562:	46bd      	mov	sp, r7
 801f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f568:	4770      	bx	lr

0801f56a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801f56a:	b480      	push	{r7}
 801f56c:	b085      	sub	sp, #20
 801f56e:	af00      	add	r7, sp, #0
 801f570:	6078      	str	r0, [r7, #4]
 801f572:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801f574:	683b      	ldr	r3, [r7, #0]
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801f57a:	68bb      	ldr	r3, [r7, #8]
 801f57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f580:	d103      	bne.n	801f58a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	691b      	ldr	r3, [r3, #16]
 801f586:	60fb      	str	r3, [r7, #12]
 801f588:	e00c      	b.n	801f5a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	3308      	adds	r3, #8
 801f58e:	60fb      	str	r3, [r7, #12]
 801f590:	e002      	b.n	801f598 <vListInsert+0x2e>
 801f592:	68fb      	ldr	r3, [r7, #12]
 801f594:	685b      	ldr	r3, [r3, #4]
 801f596:	60fb      	str	r3, [r7, #12]
 801f598:	68fb      	ldr	r3, [r7, #12]
 801f59a:	685b      	ldr	r3, [r3, #4]
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	68ba      	ldr	r2, [r7, #8]
 801f5a0:	429a      	cmp	r2, r3
 801f5a2:	d2f6      	bcs.n	801f592 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801f5a4:	68fb      	ldr	r3, [r7, #12]
 801f5a6:	685a      	ldr	r2, [r3, #4]
 801f5a8:	683b      	ldr	r3, [r7, #0]
 801f5aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801f5ac:	683b      	ldr	r3, [r7, #0]
 801f5ae:	685b      	ldr	r3, [r3, #4]
 801f5b0:	683a      	ldr	r2, [r7, #0]
 801f5b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801f5b4:	683b      	ldr	r3, [r7, #0]
 801f5b6:	68fa      	ldr	r2, [r7, #12]
 801f5b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801f5ba:	68fb      	ldr	r3, [r7, #12]
 801f5bc:	683a      	ldr	r2, [r7, #0]
 801f5be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801f5c0:	683b      	ldr	r3, [r7, #0]
 801f5c2:	687a      	ldr	r2, [r7, #4]
 801f5c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	1c5a      	adds	r2, r3, #1
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	601a      	str	r2, [r3, #0]
}
 801f5d0:	bf00      	nop
 801f5d2:	3714      	adds	r7, #20
 801f5d4:	46bd      	mov	sp, r7
 801f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5da:	4770      	bx	lr

0801f5dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801f5dc:	b480      	push	{r7}
 801f5de:	b085      	sub	sp, #20
 801f5e0:	af00      	add	r7, sp, #0
 801f5e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	691b      	ldr	r3, [r3, #16]
 801f5e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	685b      	ldr	r3, [r3, #4]
 801f5ee:	687a      	ldr	r2, [r7, #4]
 801f5f0:	6892      	ldr	r2, [r2, #8]
 801f5f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	689b      	ldr	r3, [r3, #8]
 801f5f8:	687a      	ldr	r2, [r7, #4]
 801f5fa:	6852      	ldr	r2, [r2, #4]
 801f5fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801f5fe:	68fb      	ldr	r3, [r7, #12]
 801f600:	685b      	ldr	r3, [r3, #4]
 801f602:	687a      	ldr	r2, [r7, #4]
 801f604:	429a      	cmp	r2, r3
 801f606:	d103      	bne.n	801f610 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	689a      	ldr	r2, [r3, #8]
 801f60c:	68fb      	ldr	r3, [r7, #12]
 801f60e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	2200      	movs	r2, #0
 801f614:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801f616:	68fb      	ldr	r3, [r7, #12]
 801f618:	681b      	ldr	r3, [r3, #0]
 801f61a:	1e5a      	subs	r2, r3, #1
 801f61c:	68fb      	ldr	r3, [r7, #12]
 801f61e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801f620:	68fb      	ldr	r3, [r7, #12]
 801f622:	681b      	ldr	r3, [r3, #0]
}
 801f624:	4618      	mov	r0, r3
 801f626:	3714      	adds	r7, #20
 801f628:	46bd      	mov	sp, r7
 801f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f62e:	4770      	bx	lr

0801f630 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801f630:	b580      	push	{r7, lr}
 801f632:	b084      	sub	sp, #16
 801f634:	af00      	add	r7, sp, #0
 801f636:	6078      	str	r0, [r7, #4]
 801f638:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801f63a:	687b      	ldr	r3, [r7, #4]
 801f63c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801f63e:	68fb      	ldr	r3, [r7, #12]
 801f640:	2b00      	cmp	r3, #0
 801f642:	d10b      	bne.n	801f65c <xQueueGenericReset+0x2c>
	__asm volatile
 801f644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f648:	f383 8811 	msr	BASEPRI, r3
 801f64c:	f3bf 8f6f 	isb	sy
 801f650:	f3bf 8f4f 	dsb	sy
 801f654:	60bb      	str	r3, [r7, #8]
}
 801f656:	bf00      	nop
 801f658:	bf00      	nop
 801f65a:	e7fd      	b.n	801f658 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801f65c:	f002 fdbc 	bl	80221d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801f660:	68fb      	ldr	r3, [r7, #12]
 801f662:	681a      	ldr	r2, [r3, #0]
 801f664:	68fb      	ldr	r3, [r7, #12]
 801f666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f668:	68f9      	ldr	r1, [r7, #12]
 801f66a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801f66c:	fb01 f303 	mul.w	r3, r1, r3
 801f670:	441a      	add	r2, r3
 801f672:	68fb      	ldr	r3, [r7, #12]
 801f674:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801f676:	68fb      	ldr	r3, [r7, #12]
 801f678:	2200      	movs	r2, #0
 801f67a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801f67c:	68fb      	ldr	r3, [r7, #12]
 801f67e:	681a      	ldr	r2, [r3, #0]
 801f680:	68fb      	ldr	r3, [r7, #12]
 801f682:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801f684:	68fb      	ldr	r3, [r7, #12]
 801f686:	681a      	ldr	r2, [r3, #0]
 801f688:	68fb      	ldr	r3, [r7, #12]
 801f68a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f68c:	3b01      	subs	r3, #1
 801f68e:	68f9      	ldr	r1, [r7, #12]
 801f690:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801f692:	fb01 f303 	mul.w	r3, r1, r3
 801f696:	441a      	add	r2, r3
 801f698:	68fb      	ldr	r3, [r7, #12]
 801f69a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801f69c:	68fb      	ldr	r3, [r7, #12]
 801f69e:	22ff      	movs	r2, #255	@ 0xff
 801f6a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801f6a4:	68fb      	ldr	r3, [r7, #12]
 801f6a6:	22ff      	movs	r2, #255	@ 0xff
 801f6a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801f6ac:	683b      	ldr	r3, [r7, #0]
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	d114      	bne.n	801f6dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f6b2:	68fb      	ldr	r3, [r7, #12]
 801f6b4:	691b      	ldr	r3, [r3, #16]
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d01a      	beq.n	801f6f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f6ba:	68fb      	ldr	r3, [r7, #12]
 801f6bc:	3310      	adds	r3, #16
 801f6be:	4618      	mov	r0, r3
 801f6c0:	f001 fca8 	bl	8021014 <xTaskRemoveFromEventList>
 801f6c4:	4603      	mov	r3, r0
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	d012      	beq.n	801f6f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801f6ca:	4b0d      	ldr	r3, [pc, #52]	@ (801f700 <xQueueGenericReset+0xd0>)
 801f6cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801f6d0:	601a      	str	r2, [r3, #0]
 801f6d2:	f3bf 8f4f 	dsb	sy
 801f6d6:	f3bf 8f6f 	isb	sy
 801f6da:	e009      	b.n	801f6f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801f6dc:	68fb      	ldr	r3, [r7, #12]
 801f6de:	3310      	adds	r3, #16
 801f6e0:	4618      	mov	r0, r3
 801f6e2:	f7ff fef1 	bl	801f4c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801f6e6:	68fb      	ldr	r3, [r7, #12]
 801f6e8:	3324      	adds	r3, #36	@ 0x24
 801f6ea:	4618      	mov	r0, r3
 801f6ec:	f7ff feec 	bl	801f4c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801f6f0:	f002 fda4 	bl	802223c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801f6f4:	2301      	movs	r3, #1
}
 801f6f6:	4618      	mov	r0, r3
 801f6f8:	3710      	adds	r7, #16
 801f6fa:	46bd      	mov	sp, r7
 801f6fc:	bd80      	pop	{r7, pc}
 801f6fe:	bf00      	nop
 801f700:	e000ed04 	.word	0xe000ed04

0801f704 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801f704:	b580      	push	{r7, lr}
 801f706:	b08e      	sub	sp, #56	@ 0x38
 801f708:	af02      	add	r7, sp, #8
 801f70a:	60f8      	str	r0, [r7, #12]
 801f70c:	60b9      	str	r1, [r7, #8]
 801f70e:	607a      	str	r2, [r7, #4]
 801f710:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801f712:	68fb      	ldr	r3, [r7, #12]
 801f714:	2b00      	cmp	r3, #0
 801f716:	d10b      	bne.n	801f730 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 801f718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f71c:	f383 8811 	msr	BASEPRI, r3
 801f720:	f3bf 8f6f 	isb	sy
 801f724:	f3bf 8f4f 	dsb	sy
 801f728:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801f72a:	bf00      	nop
 801f72c:	bf00      	nop
 801f72e:	e7fd      	b.n	801f72c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801f730:	683b      	ldr	r3, [r7, #0]
 801f732:	2b00      	cmp	r3, #0
 801f734:	d10b      	bne.n	801f74e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801f736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f73a:	f383 8811 	msr	BASEPRI, r3
 801f73e:	f3bf 8f6f 	isb	sy
 801f742:	f3bf 8f4f 	dsb	sy
 801f746:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801f748:	bf00      	nop
 801f74a:	bf00      	nop
 801f74c:	e7fd      	b.n	801f74a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	2b00      	cmp	r3, #0
 801f752:	d002      	beq.n	801f75a <xQueueGenericCreateStatic+0x56>
 801f754:	68bb      	ldr	r3, [r7, #8]
 801f756:	2b00      	cmp	r3, #0
 801f758:	d001      	beq.n	801f75e <xQueueGenericCreateStatic+0x5a>
 801f75a:	2301      	movs	r3, #1
 801f75c:	e000      	b.n	801f760 <xQueueGenericCreateStatic+0x5c>
 801f75e:	2300      	movs	r3, #0
 801f760:	2b00      	cmp	r3, #0
 801f762:	d10b      	bne.n	801f77c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801f764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f768:	f383 8811 	msr	BASEPRI, r3
 801f76c:	f3bf 8f6f 	isb	sy
 801f770:	f3bf 8f4f 	dsb	sy
 801f774:	623b      	str	r3, [r7, #32]
}
 801f776:	bf00      	nop
 801f778:	bf00      	nop
 801f77a:	e7fd      	b.n	801f778 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801f77c:	687b      	ldr	r3, [r7, #4]
 801f77e:	2b00      	cmp	r3, #0
 801f780:	d102      	bne.n	801f788 <xQueueGenericCreateStatic+0x84>
 801f782:	68bb      	ldr	r3, [r7, #8]
 801f784:	2b00      	cmp	r3, #0
 801f786:	d101      	bne.n	801f78c <xQueueGenericCreateStatic+0x88>
 801f788:	2301      	movs	r3, #1
 801f78a:	e000      	b.n	801f78e <xQueueGenericCreateStatic+0x8a>
 801f78c:	2300      	movs	r3, #0
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d10b      	bne.n	801f7aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801f792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f796:	f383 8811 	msr	BASEPRI, r3
 801f79a:	f3bf 8f6f 	isb	sy
 801f79e:	f3bf 8f4f 	dsb	sy
 801f7a2:	61fb      	str	r3, [r7, #28]
}
 801f7a4:	bf00      	nop
 801f7a6:	bf00      	nop
 801f7a8:	e7fd      	b.n	801f7a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801f7aa:	2350      	movs	r3, #80	@ 0x50
 801f7ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801f7ae:	697b      	ldr	r3, [r7, #20]
 801f7b0:	2b50      	cmp	r3, #80	@ 0x50
 801f7b2:	d00b      	beq.n	801f7cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801f7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f7b8:	f383 8811 	msr	BASEPRI, r3
 801f7bc:	f3bf 8f6f 	isb	sy
 801f7c0:	f3bf 8f4f 	dsb	sy
 801f7c4:	61bb      	str	r3, [r7, #24]
}
 801f7c6:	bf00      	nop
 801f7c8:	bf00      	nop
 801f7ca:	e7fd      	b.n	801f7c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801f7cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801f7ce:	683b      	ldr	r3, [r7, #0]
 801f7d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801f7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f7d4:	2b00      	cmp	r3, #0
 801f7d6:	d00d      	beq.n	801f7f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801f7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f7da:	2201      	movs	r2, #1
 801f7dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801f7e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801f7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f7e6:	9300      	str	r3, [sp, #0]
 801f7e8:	4613      	mov	r3, r2
 801f7ea:	687a      	ldr	r2, [r7, #4]
 801f7ec:	68b9      	ldr	r1, [r7, #8]
 801f7ee:	68f8      	ldr	r0, [r7, #12]
 801f7f0:	f000 f840 	bl	801f874 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801f7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801f7f6:	4618      	mov	r0, r3
 801f7f8:	3730      	adds	r7, #48	@ 0x30
 801f7fa:	46bd      	mov	sp, r7
 801f7fc:	bd80      	pop	{r7, pc}

0801f7fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801f7fe:	b580      	push	{r7, lr}
 801f800:	b08a      	sub	sp, #40	@ 0x28
 801f802:	af02      	add	r7, sp, #8
 801f804:	60f8      	str	r0, [r7, #12]
 801f806:	60b9      	str	r1, [r7, #8]
 801f808:	4613      	mov	r3, r2
 801f80a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801f80c:	68fb      	ldr	r3, [r7, #12]
 801f80e:	2b00      	cmp	r3, #0
 801f810:	d10b      	bne.n	801f82a <xQueueGenericCreate+0x2c>
	__asm volatile
 801f812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f816:	f383 8811 	msr	BASEPRI, r3
 801f81a:	f3bf 8f6f 	isb	sy
 801f81e:	f3bf 8f4f 	dsb	sy
 801f822:	613b      	str	r3, [r7, #16]
}
 801f824:	bf00      	nop
 801f826:	bf00      	nop
 801f828:	e7fd      	b.n	801f826 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f82a:	68fb      	ldr	r3, [r7, #12]
 801f82c:	68ba      	ldr	r2, [r7, #8]
 801f82e:	fb02 f303 	mul.w	r3, r2, r3
 801f832:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801f834:	69fb      	ldr	r3, [r7, #28]
 801f836:	3350      	adds	r3, #80	@ 0x50
 801f838:	4618      	mov	r0, r3
 801f83a:	f002 fdef 	bl	802241c <pvPortMalloc>
 801f83e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801f840:	69bb      	ldr	r3, [r7, #24]
 801f842:	2b00      	cmp	r3, #0
 801f844:	d011      	beq.n	801f86a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801f846:	69bb      	ldr	r3, [r7, #24]
 801f848:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801f84a:	697b      	ldr	r3, [r7, #20]
 801f84c:	3350      	adds	r3, #80	@ 0x50
 801f84e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801f850:	69bb      	ldr	r3, [r7, #24]
 801f852:	2200      	movs	r2, #0
 801f854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801f858:	79fa      	ldrb	r2, [r7, #7]
 801f85a:	69bb      	ldr	r3, [r7, #24]
 801f85c:	9300      	str	r3, [sp, #0]
 801f85e:	4613      	mov	r3, r2
 801f860:	697a      	ldr	r2, [r7, #20]
 801f862:	68b9      	ldr	r1, [r7, #8]
 801f864:	68f8      	ldr	r0, [r7, #12]
 801f866:	f000 f805 	bl	801f874 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801f86a:	69bb      	ldr	r3, [r7, #24]
	}
 801f86c:	4618      	mov	r0, r3
 801f86e:	3720      	adds	r7, #32
 801f870:	46bd      	mov	sp, r7
 801f872:	bd80      	pop	{r7, pc}

0801f874 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801f874:	b580      	push	{r7, lr}
 801f876:	b084      	sub	sp, #16
 801f878:	af00      	add	r7, sp, #0
 801f87a:	60f8      	str	r0, [r7, #12]
 801f87c:	60b9      	str	r1, [r7, #8]
 801f87e:	607a      	str	r2, [r7, #4]
 801f880:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801f882:	68bb      	ldr	r3, [r7, #8]
 801f884:	2b00      	cmp	r3, #0
 801f886:	d103      	bne.n	801f890 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801f888:	69bb      	ldr	r3, [r7, #24]
 801f88a:	69ba      	ldr	r2, [r7, #24]
 801f88c:	601a      	str	r2, [r3, #0]
 801f88e:	e002      	b.n	801f896 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801f890:	69bb      	ldr	r3, [r7, #24]
 801f892:	687a      	ldr	r2, [r7, #4]
 801f894:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801f896:	69bb      	ldr	r3, [r7, #24]
 801f898:	68fa      	ldr	r2, [r7, #12]
 801f89a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801f89c:	69bb      	ldr	r3, [r7, #24]
 801f89e:	68ba      	ldr	r2, [r7, #8]
 801f8a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801f8a2:	2101      	movs	r1, #1
 801f8a4:	69b8      	ldr	r0, [r7, #24]
 801f8a6:	f7ff fec3 	bl	801f630 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801f8aa:	69bb      	ldr	r3, [r7, #24]
 801f8ac:	78fa      	ldrb	r2, [r7, #3]
 801f8ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801f8b2:	bf00      	nop
 801f8b4:	3710      	adds	r7, #16
 801f8b6:	46bd      	mov	sp, r7
 801f8b8:	bd80      	pop	{r7, pc}

0801f8ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801f8ba:	b580      	push	{r7, lr}
 801f8bc:	b082      	sub	sp, #8
 801f8be:	af00      	add	r7, sp, #0
 801f8c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801f8c2:	687b      	ldr	r3, [r7, #4]
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	d00e      	beq.n	801f8e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801f8c8:	687b      	ldr	r3, [r7, #4]
 801f8ca:	2200      	movs	r2, #0
 801f8cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	2200      	movs	r2, #0
 801f8d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801f8d4:	687b      	ldr	r3, [r7, #4]
 801f8d6:	2200      	movs	r2, #0
 801f8d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801f8da:	2300      	movs	r3, #0
 801f8dc:	2200      	movs	r2, #0
 801f8de:	2100      	movs	r1, #0
 801f8e0:	6878      	ldr	r0, [r7, #4]
 801f8e2:	f000 f911 	bl	801fb08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801f8e6:	bf00      	nop
 801f8e8:	3708      	adds	r7, #8
 801f8ea:	46bd      	mov	sp, r7
 801f8ec:	bd80      	pop	{r7, pc}

0801f8ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801f8ee:	b580      	push	{r7, lr}
 801f8f0:	b086      	sub	sp, #24
 801f8f2:	af00      	add	r7, sp, #0
 801f8f4:	4603      	mov	r3, r0
 801f8f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801f8f8:	2301      	movs	r3, #1
 801f8fa:	617b      	str	r3, [r7, #20]
 801f8fc:	2300      	movs	r3, #0
 801f8fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801f900:	79fb      	ldrb	r3, [r7, #7]
 801f902:	461a      	mov	r2, r3
 801f904:	6939      	ldr	r1, [r7, #16]
 801f906:	6978      	ldr	r0, [r7, #20]
 801f908:	f7ff ff79 	bl	801f7fe <xQueueGenericCreate>
 801f90c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801f90e:	68f8      	ldr	r0, [r7, #12]
 801f910:	f7ff ffd3 	bl	801f8ba <prvInitialiseMutex>

		return xNewQueue;
 801f914:	68fb      	ldr	r3, [r7, #12]
	}
 801f916:	4618      	mov	r0, r3
 801f918:	3718      	adds	r7, #24
 801f91a:	46bd      	mov	sp, r7
 801f91c:	bd80      	pop	{r7, pc}

0801f91e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801f91e:	b580      	push	{r7, lr}
 801f920:	b088      	sub	sp, #32
 801f922:	af02      	add	r7, sp, #8
 801f924:	4603      	mov	r3, r0
 801f926:	6039      	str	r1, [r7, #0]
 801f928:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801f92a:	2301      	movs	r3, #1
 801f92c:	617b      	str	r3, [r7, #20]
 801f92e:	2300      	movs	r3, #0
 801f930:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801f932:	79fb      	ldrb	r3, [r7, #7]
 801f934:	9300      	str	r3, [sp, #0]
 801f936:	683b      	ldr	r3, [r7, #0]
 801f938:	2200      	movs	r2, #0
 801f93a:	6939      	ldr	r1, [r7, #16]
 801f93c:	6978      	ldr	r0, [r7, #20]
 801f93e:	f7ff fee1 	bl	801f704 <xQueueGenericCreateStatic>
 801f942:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801f944:	68f8      	ldr	r0, [r7, #12]
 801f946:	f7ff ffb8 	bl	801f8ba <prvInitialiseMutex>

		return xNewQueue;
 801f94a:	68fb      	ldr	r3, [r7, #12]
	}
 801f94c:	4618      	mov	r0, r3
 801f94e:	3718      	adds	r7, #24
 801f950:	46bd      	mov	sp, r7
 801f952:	bd80      	pop	{r7, pc}

0801f954 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801f954:	b590      	push	{r4, r7, lr}
 801f956:	b087      	sub	sp, #28
 801f958:	af00      	add	r7, sp, #0
 801f95a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801f960:	693b      	ldr	r3, [r7, #16]
 801f962:	2b00      	cmp	r3, #0
 801f964:	d10b      	bne.n	801f97e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 801f966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f96a:	f383 8811 	msr	BASEPRI, r3
 801f96e:	f3bf 8f6f 	isb	sy
 801f972:	f3bf 8f4f 	dsb	sy
 801f976:	60fb      	str	r3, [r7, #12]
}
 801f978:	bf00      	nop
 801f97a:	bf00      	nop
 801f97c:	e7fd      	b.n	801f97a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801f97e:	693b      	ldr	r3, [r7, #16]
 801f980:	689c      	ldr	r4, [r3, #8]
 801f982:	f001 fd71 	bl	8021468 <xTaskGetCurrentTaskHandle>
 801f986:	4603      	mov	r3, r0
 801f988:	429c      	cmp	r4, r3
 801f98a:	d111      	bne.n	801f9b0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801f98c:	693b      	ldr	r3, [r7, #16]
 801f98e:	68db      	ldr	r3, [r3, #12]
 801f990:	1e5a      	subs	r2, r3, #1
 801f992:	693b      	ldr	r3, [r7, #16]
 801f994:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801f996:	693b      	ldr	r3, [r7, #16]
 801f998:	68db      	ldr	r3, [r3, #12]
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	d105      	bne.n	801f9aa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801f99e:	2300      	movs	r3, #0
 801f9a0:	2200      	movs	r2, #0
 801f9a2:	2100      	movs	r1, #0
 801f9a4:	6938      	ldr	r0, [r7, #16]
 801f9a6:	f000 f8af 	bl	801fb08 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801f9aa:	2301      	movs	r3, #1
 801f9ac:	617b      	str	r3, [r7, #20]
 801f9ae:	e001      	b.n	801f9b4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801f9b0:	2300      	movs	r3, #0
 801f9b2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801f9b4:	697b      	ldr	r3, [r7, #20]
	}
 801f9b6:	4618      	mov	r0, r3
 801f9b8:	371c      	adds	r7, #28
 801f9ba:	46bd      	mov	sp, r7
 801f9bc:	bd90      	pop	{r4, r7, pc}

0801f9be <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801f9be:	b590      	push	{r4, r7, lr}
 801f9c0:	b087      	sub	sp, #28
 801f9c2:	af00      	add	r7, sp, #0
 801f9c4:	6078      	str	r0, [r7, #4]
 801f9c6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801f9cc:	693b      	ldr	r3, [r7, #16]
 801f9ce:	2b00      	cmp	r3, #0
 801f9d0:	d10b      	bne.n	801f9ea <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 801f9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801f9d6:	f383 8811 	msr	BASEPRI, r3
 801f9da:	f3bf 8f6f 	isb	sy
 801f9de:	f3bf 8f4f 	dsb	sy
 801f9e2:	60fb      	str	r3, [r7, #12]
}
 801f9e4:	bf00      	nop
 801f9e6:	bf00      	nop
 801f9e8:	e7fd      	b.n	801f9e6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801f9ea:	693b      	ldr	r3, [r7, #16]
 801f9ec:	689c      	ldr	r4, [r3, #8]
 801f9ee:	f001 fd3b 	bl	8021468 <xTaskGetCurrentTaskHandle>
 801f9f2:	4603      	mov	r3, r0
 801f9f4:	429c      	cmp	r4, r3
 801f9f6:	d107      	bne.n	801fa08 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801f9f8:	693b      	ldr	r3, [r7, #16]
 801f9fa:	68db      	ldr	r3, [r3, #12]
 801f9fc:	1c5a      	adds	r2, r3, #1
 801f9fe:	693b      	ldr	r3, [r7, #16]
 801fa00:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801fa02:	2301      	movs	r3, #1
 801fa04:	617b      	str	r3, [r7, #20]
 801fa06:	e00c      	b.n	801fa22 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801fa08:	6839      	ldr	r1, [r7, #0]
 801fa0a:	6938      	ldr	r0, [r7, #16]
 801fa0c:	f000 fafe 	bl	802000c <xQueueSemaphoreTake>
 801fa10:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801fa12:	697b      	ldr	r3, [r7, #20]
 801fa14:	2b00      	cmp	r3, #0
 801fa16:	d004      	beq.n	801fa22 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801fa18:	693b      	ldr	r3, [r7, #16]
 801fa1a:	68db      	ldr	r3, [r3, #12]
 801fa1c:	1c5a      	adds	r2, r3, #1
 801fa1e:	693b      	ldr	r3, [r7, #16]
 801fa20:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801fa22:	697b      	ldr	r3, [r7, #20]
	}
 801fa24:	4618      	mov	r0, r3
 801fa26:	371c      	adds	r7, #28
 801fa28:	46bd      	mov	sp, r7
 801fa2a:	bd90      	pop	{r4, r7, pc}

0801fa2c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801fa2c:	b580      	push	{r7, lr}
 801fa2e:	b08a      	sub	sp, #40	@ 0x28
 801fa30:	af02      	add	r7, sp, #8
 801fa32:	60f8      	str	r0, [r7, #12]
 801fa34:	60b9      	str	r1, [r7, #8]
 801fa36:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801fa38:	68fb      	ldr	r3, [r7, #12]
 801fa3a:	2b00      	cmp	r3, #0
 801fa3c:	d10b      	bne.n	801fa56 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 801fa3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fa42:	f383 8811 	msr	BASEPRI, r3
 801fa46:	f3bf 8f6f 	isb	sy
 801fa4a:	f3bf 8f4f 	dsb	sy
 801fa4e:	61bb      	str	r3, [r7, #24]
}
 801fa50:	bf00      	nop
 801fa52:	bf00      	nop
 801fa54:	e7fd      	b.n	801fa52 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801fa56:	68ba      	ldr	r2, [r7, #8]
 801fa58:	68fb      	ldr	r3, [r7, #12]
 801fa5a:	429a      	cmp	r2, r3
 801fa5c:	d90b      	bls.n	801fa76 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 801fa5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fa62:	f383 8811 	msr	BASEPRI, r3
 801fa66:	f3bf 8f6f 	isb	sy
 801fa6a:	f3bf 8f4f 	dsb	sy
 801fa6e:	617b      	str	r3, [r7, #20]
}
 801fa70:	bf00      	nop
 801fa72:	bf00      	nop
 801fa74:	e7fd      	b.n	801fa72 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801fa76:	2302      	movs	r3, #2
 801fa78:	9300      	str	r3, [sp, #0]
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	2200      	movs	r2, #0
 801fa7e:	2100      	movs	r1, #0
 801fa80:	68f8      	ldr	r0, [r7, #12]
 801fa82:	f7ff fe3f 	bl	801f704 <xQueueGenericCreateStatic>
 801fa86:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801fa88:	69fb      	ldr	r3, [r7, #28]
 801fa8a:	2b00      	cmp	r3, #0
 801fa8c:	d002      	beq.n	801fa94 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801fa8e:	69fb      	ldr	r3, [r7, #28]
 801fa90:	68ba      	ldr	r2, [r7, #8]
 801fa92:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801fa94:	69fb      	ldr	r3, [r7, #28]
	}
 801fa96:	4618      	mov	r0, r3
 801fa98:	3720      	adds	r7, #32
 801fa9a:	46bd      	mov	sp, r7
 801fa9c:	bd80      	pop	{r7, pc}

0801fa9e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801fa9e:	b580      	push	{r7, lr}
 801faa0:	b086      	sub	sp, #24
 801faa2:	af00      	add	r7, sp, #0
 801faa4:	6078      	str	r0, [r7, #4]
 801faa6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801faa8:	687b      	ldr	r3, [r7, #4]
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d10b      	bne.n	801fac6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 801faae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fab2:	f383 8811 	msr	BASEPRI, r3
 801fab6:	f3bf 8f6f 	isb	sy
 801faba:	f3bf 8f4f 	dsb	sy
 801fabe:	613b      	str	r3, [r7, #16]
}
 801fac0:	bf00      	nop
 801fac2:	bf00      	nop
 801fac4:	e7fd      	b.n	801fac2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801fac6:	683a      	ldr	r2, [r7, #0]
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	429a      	cmp	r2, r3
 801facc:	d90b      	bls.n	801fae6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 801face:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fad2:	f383 8811 	msr	BASEPRI, r3
 801fad6:	f3bf 8f6f 	isb	sy
 801fada:	f3bf 8f4f 	dsb	sy
 801fade:	60fb      	str	r3, [r7, #12]
}
 801fae0:	bf00      	nop
 801fae2:	bf00      	nop
 801fae4:	e7fd      	b.n	801fae2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801fae6:	2202      	movs	r2, #2
 801fae8:	2100      	movs	r1, #0
 801faea:	6878      	ldr	r0, [r7, #4]
 801faec:	f7ff fe87 	bl	801f7fe <xQueueGenericCreate>
 801faf0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801faf2:	697b      	ldr	r3, [r7, #20]
 801faf4:	2b00      	cmp	r3, #0
 801faf6:	d002      	beq.n	801fafe <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801faf8:	697b      	ldr	r3, [r7, #20]
 801fafa:	683a      	ldr	r2, [r7, #0]
 801fafc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801fafe:	697b      	ldr	r3, [r7, #20]
	}
 801fb00:	4618      	mov	r0, r3
 801fb02:	3718      	adds	r7, #24
 801fb04:	46bd      	mov	sp, r7
 801fb06:	bd80      	pop	{r7, pc}

0801fb08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801fb08:	b580      	push	{r7, lr}
 801fb0a:	b08e      	sub	sp, #56	@ 0x38
 801fb0c:	af00      	add	r7, sp, #0
 801fb0e:	60f8      	str	r0, [r7, #12]
 801fb10:	60b9      	str	r1, [r7, #8]
 801fb12:	607a      	str	r2, [r7, #4]
 801fb14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801fb16:	2300      	movs	r3, #0
 801fb18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801fb1a:	68fb      	ldr	r3, [r7, #12]
 801fb1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801fb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	d10b      	bne.n	801fb3c <xQueueGenericSend+0x34>
	__asm volatile
 801fb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fb28:	f383 8811 	msr	BASEPRI, r3
 801fb2c:	f3bf 8f6f 	isb	sy
 801fb30:	f3bf 8f4f 	dsb	sy
 801fb34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801fb36:	bf00      	nop
 801fb38:	bf00      	nop
 801fb3a:	e7fd      	b.n	801fb38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801fb3c:	68bb      	ldr	r3, [r7, #8]
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	d103      	bne.n	801fb4a <xQueueGenericSend+0x42>
 801fb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801fb46:	2b00      	cmp	r3, #0
 801fb48:	d101      	bne.n	801fb4e <xQueueGenericSend+0x46>
 801fb4a:	2301      	movs	r3, #1
 801fb4c:	e000      	b.n	801fb50 <xQueueGenericSend+0x48>
 801fb4e:	2300      	movs	r3, #0
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	d10b      	bne.n	801fb6c <xQueueGenericSend+0x64>
	__asm volatile
 801fb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fb58:	f383 8811 	msr	BASEPRI, r3
 801fb5c:	f3bf 8f6f 	isb	sy
 801fb60:	f3bf 8f4f 	dsb	sy
 801fb64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801fb66:	bf00      	nop
 801fb68:	bf00      	nop
 801fb6a:	e7fd      	b.n	801fb68 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801fb6c:	683b      	ldr	r3, [r7, #0]
 801fb6e:	2b02      	cmp	r3, #2
 801fb70:	d103      	bne.n	801fb7a <xQueueGenericSend+0x72>
 801fb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fb76:	2b01      	cmp	r3, #1
 801fb78:	d101      	bne.n	801fb7e <xQueueGenericSend+0x76>
 801fb7a:	2301      	movs	r3, #1
 801fb7c:	e000      	b.n	801fb80 <xQueueGenericSend+0x78>
 801fb7e:	2300      	movs	r3, #0
 801fb80:	2b00      	cmp	r3, #0
 801fb82:	d10b      	bne.n	801fb9c <xQueueGenericSend+0x94>
	__asm volatile
 801fb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fb88:	f383 8811 	msr	BASEPRI, r3
 801fb8c:	f3bf 8f6f 	isb	sy
 801fb90:	f3bf 8f4f 	dsb	sy
 801fb94:	623b      	str	r3, [r7, #32]
}
 801fb96:	bf00      	nop
 801fb98:	bf00      	nop
 801fb9a:	e7fd      	b.n	801fb98 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801fb9c:	f001 fc74 	bl	8021488 <xTaskGetSchedulerState>
 801fba0:	4603      	mov	r3, r0
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d102      	bne.n	801fbac <xQueueGenericSend+0xa4>
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d101      	bne.n	801fbb0 <xQueueGenericSend+0xa8>
 801fbac:	2301      	movs	r3, #1
 801fbae:	e000      	b.n	801fbb2 <xQueueGenericSend+0xaa>
 801fbb0:	2300      	movs	r3, #0
 801fbb2:	2b00      	cmp	r3, #0
 801fbb4:	d10b      	bne.n	801fbce <xQueueGenericSend+0xc6>
	__asm volatile
 801fbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fbba:	f383 8811 	msr	BASEPRI, r3
 801fbbe:	f3bf 8f6f 	isb	sy
 801fbc2:	f3bf 8f4f 	dsb	sy
 801fbc6:	61fb      	str	r3, [r7, #28]
}
 801fbc8:	bf00      	nop
 801fbca:	bf00      	nop
 801fbcc:	e7fd      	b.n	801fbca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801fbce:	f002 fb03 	bl	80221d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801fbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801fbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fbda:	429a      	cmp	r2, r3
 801fbdc:	d302      	bcc.n	801fbe4 <xQueueGenericSend+0xdc>
 801fbde:	683b      	ldr	r3, [r7, #0]
 801fbe0:	2b02      	cmp	r3, #2
 801fbe2:	d129      	bne.n	801fc38 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801fbe4:	683a      	ldr	r2, [r7, #0]
 801fbe6:	68b9      	ldr	r1, [r7, #8]
 801fbe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fbea:	f000 fb7a 	bl	80202e2 <prvCopyDataToQueue>
 801fbee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801fbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fbf4:	2b00      	cmp	r3, #0
 801fbf6:	d010      	beq.n	801fc1a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801fbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbfa:	3324      	adds	r3, #36	@ 0x24
 801fbfc:	4618      	mov	r0, r3
 801fbfe:	f001 fa09 	bl	8021014 <xTaskRemoveFromEventList>
 801fc02:	4603      	mov	r3, r0
 801fc04:	2b00      	cmp	r3, #0
 801fc06:	d013      	beq.n	801fc30 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801fc08:	4b3f      	ldr	r3, [pc, #252]	@ (801fd08 <xQueueGenericSend+0x200>)
 801fc0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801fc0e:	601a      	str	r2, [r3, #0]
 801fc10:	f3bf 8f4f 	dsb	sy
 801fc14:	f3bf 8f6f 	isb	sy
 801fc18:	e00a      	b.n	801fc30 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801fc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	d007      	beq.n	801fc30 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801fc20:	4b39      	ldr	r3, [pc, #228]	@ (801fd08 <xQueueGenericSend+0x200>)
 801fc22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801fc26:	601a      	str	r2, [r3, #0]
 801fc28:	f3bf 8f4f 	dsb	sy
 801fc2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801fc30:	f002 fb04 	bl	802223c <vPortExitCritical>
				return pdPASS;
 801fc34:	2301      	movs	r3, #1
 801fc36:	e063      	b.n	801fd00 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	d103      	bne.n	801fc46 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801fc3e:	f002 fafd 	bl	802223c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801fc42:	2300      	movs	r3, #0
 801fc44:	e05c      	b.n	801fd00 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801fc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fc48:	2b00      	cmp	r3, #0
 801fc4a:	d106      	bne.n	801fc5a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801fc4c:	f107 0314 	add.w	r3, r7, #20
 801fc50:	4618      	mov	r0, r3
 801fc52:	f001 faa7 	bl	80211a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801fc56:	2301      	movs	r3, #1
 801fc58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801fc5a:	f002 faef 	bl	802223c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801fc5e:	f000 ff41 	bl	8020ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801fc62:	f002 fab9 	bl	80221d8 <vPortEnterCritical>
 801fc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801fc6c:	b25b      	sxtb	r3, r3
 801fc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc72:	d103      	bne.n	801fc7c <xQueueGenericSend+0x174>
 801fc74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc76:	2200      	movs	r2, #0
 801fc78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801fc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801fc82:	b25b      	sxtb	r3, r3
 801fc84:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc88:	d103      	bne.n	801fc92 <xQueueGenericSend+0x18a>
 801fc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc8c:	2200      	movs	r2, #0
 801fc8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801fc92:	f002 fad3 	bl	802223c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801fc96:	1d3a      	adds	r2, r7, #4
 801fc98:	f107 0314 	add.w	r3, r7, #20
 801fc9c:	4611      	mov	r1, r2
 801fc9e:	4618      	mov	r0, r3
 801fca0:	f001 fa96 	bl	80211d0 <xTaskCheckForTimeOut>
 801fca4:	4603      	mov	r3, r0
 801fca6:	2b00      	cmp	r3, #0
 801fca8:	d124      	bne.n	801fcf4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801fcaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fcac:	f000 fc11 	bl	80204d2 <prvIsQueueFull>
 801fcb0:	4603      	mov	r3, r0
 801fcb2:	2b00      	cmp	r3, #0
 801fcb4:	d018      	beq.n	801fce8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801fcb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fcb8:	3310      	adds	r3, #16
 801fcba:	687a      	ldr	r2, [r7, #4]
 801fcbc:	4611      	mov	r1, r2
 801fcbe:	4618      	mov	r0, r3
 801fcc0:	f001 f918 	bl	8020ef4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801fcc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fcc6:	f000 fb9c 	bl	8020402 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801fcca:	f000 ff19 	bl	8020b00 <xTaskResumeAll>
 801fcce:	4603      	mov	r3, r0
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	f47f af7c 	bne.w	801fbce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801fcd6:	4b0c      	ldr	r3, [pc, #48]	@ (801fd08 <xQueueGenericSend+0x200>)
 801fcd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801fcdc:	601a      	str	r2, [r3, #0]
 801fcde:	f3bf 8f4f 	dsb	sy
 801fce2:	f3bf 8f6f 	isb	sy
 801fce6:	e772      	b.n	801fbce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801fce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fcea:	f000 fb8a 	bl	8020402 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801fcee:	f000 ff07 	bl	8020b00 <xTaskResumeAll>
 801fcf2:	e76c      	b.n	801fbce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801fcf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fcf6:	f000 fb84 	bl	8020402 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801fcfa:	f000 ff01 	bl	8020b00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801fcfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801fd00:	4618      	mov	r0, r3
 801fd02:	3738      	adds	r7, #56	@ 0x38
 801fd04:	46bd      	mov	sp, r7
 801fd06:	bd80      	pop	{r7, pc}
 801fd08:	e000ed04 	.word	0xe000ed04

0801fd0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801fd0c:	b580      	push	{r7, lr}
 801fd0e:	b090      	sub	sp, #64	@ 0x40
 801fd10:	af00      	add	r7, sp, #0
 801fd12:	60f8      	str	r0, [r7, #12]
 801fd14:	60b9      	str	r1, [r7, #8]
 801fd16:	607a      	str	r2, [r7, #4]
 801fd18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801fd1a:	68fb      	ldr	r3, [r7, #12]
 801fd1c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801fd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	d10b      	bne.n	801fd3c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 801fd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fd28:	f383 8811 	msr	BASEPRI, r3
 801fd2c:	f3bf 8f6f 	isb	sy
 801fd30:	f3bf 8f4f 	dsb	sy
 801fd34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801fd36:	bf00      	nop
 801fd38:	bf00      	nop
 801fd3a:	e7fd      	b.n	801fd38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801fd3c:	68bb      	ldr	r3, [r7, #8]
 801fd3e:	2b00      	cmp	r3, #0
 801fd40:	d103      	bne.n	801fd4a <xQueueGenericSendFromISR+0x3e>
 801fd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fd44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801fd46:	2b00      	cmp	r3, #0
 801fd48:	d101      	bne.n	801fd4e <xQueueGenericSendFromISR+0x42>
 801fd4a:	2301      	movs	r3, #1
 801fd4c:	e000      	b.n	801fd50 <xQueueGenericSendFromISR+0x44>
 801fd4e:	2300      	movs	r3, #0
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	d10b      	bne.n	801fd6c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801fd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fd58:	f383 8811 	msr	BASEPRI, r3
 801fd5c:	f3bf 8f6f 	isb	sy
 801fd60:	f3bf 8f4f 	dsb	sy
 801fd64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801fd66:	bf00      	nop
 801fd68:	bf00      	nop
 801fd6a:	e7fd      	b.n	801fd68 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801fd6c:	683b      	ldr	r3, [r7, #0]
 801fd6e:	2b02      	cmp	r3, #2
 801fd70:	d103      	bne.n	801fd7a <xQueueGenericSendFromISR+0x6e>
 801fd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fd74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fd76:	2b01      	cmp	r3, #1
 801fd78:	d101      	bne.n	801fd7e <xQueueGenericSendFromISR+0x72>
 801fd7a:	2301      	movs	r3, #1
 801fd7c:	e000      	b.n	801fd80 <xQueueGenericSendFromISR+0x74>
 801fd7e:	2300      	movs	r3, #0
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	d10b      	bne.n	801fd9c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 801fd84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fd88:	f383 8811 	msr	BASEPRI, r3
 801fd8c:	f3bf 8f6f 	isb	sy
 801fd90:	f3bf 8f4f 	dsb	sy
 801fd94:	623b      	str	r3, [r7, #32]
}
 801fd96:	bf00      	nop
 801fd98:	bf00      	nop
 801fd9a:	e7fd      	b.n	801fd98 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801fd9c:	f002 fafc 	bl	8022398 <vPortValidateInterruptPriority>
	__asm volatile
 801fda0:	f3ef 8211 	mrs	r2, BASEPRI
 801fda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fda8:	f383 8811 	msr	BASEPRI, r3
 801fdac:	f3bf 8f6f 	isb	sy
 801fdb0:	f3bf 8f4f 	dsb	sy
 801fdb4:	61fa      	str	r2, [r7, #28]
 801fdb6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801fdb8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801fdba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801fdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fdbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801fdc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fdc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fdc4:	429a      	cmp	r2, r3
 801fdc6:	d302      	bcc.n	801fdce <xQueueGenericSendFromISR+0xc2>
 801fdc8:	683b      	ldr	r3, [r7, #0]
 801fdca:	2b02      	cmp	r3, #2
 801fdcc:	d12f      	bne.n	801fe2e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801fdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fdd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801fdd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801fdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fdda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801fdde:	683a      	ldr	r2, [r7, #0]
 801fde0:	68b9      	ldr	r1, [r7, #8]
 801fde2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801fde4:	f000 fa7d 	bl	80202e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801fde8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801fdec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fdf0:	d112      	bne.n	801fe18 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801fdf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fdf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	d016      	beq.n	801fe28 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801fdfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fdfc:	3324      	adds	r3, #36	@ 0x24
 801fdfe:	4618      	mov	r0, r3
 801fe00:	f001 f908 	bl	8021014 <xTaskRemoveFromEventList>
 801fe04:	4603      	mov	r3, r0
 801fe06:	2b00      	cmp	r3, #0
 801fe08:	d00e      	beq.n	801fe28 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801fe0a:	687b      	ldr	r3, [r7, #4]
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	d00b      	beq.n	801fe28 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	2201      	movs	r2, #1
 801fe14:	601a      	str	r2, [r3, #0]
 801fe16:	e007      	b.n	801fe28 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801fe18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fe1c:	3301      	adds	r3, #1
 801fe1e:	b2db      	uxtb	r3, r3
 801fe20:	b25a      	sxtb	r2, r3
 801fe22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fe24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801fe28:	2301      	movs	r3, #1
 801fe2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 801fe2c:	e001      	b.n	801fe32 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801fe2e:	2300      	movs	r3, #0
 801fe30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801fe32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fe34:	617b      	str	r3, [r7, #20]
	__asm volatile
 801fe36:	697b      	ldr	r3, [r7, #20]
 801fe38:	f383 8811 	msr	BASEPRI, r3
}
 801fe3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801fe3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801fe40:	4618      	mov	r0, r3
 801fe42:	3740      	adds	r7, #64	@ 0x40
 801fe44:	46bd      	mov	sp, r7
 801fe46:	bd80      	pop	{r7, pc}

0801fe48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801fe48:	b580      	push	{r7, lr}
 801fe4a:	b08c      	sub	sp, #48	@ 0x30
 801fe4c:	af00      	add	r7, sp, #0
 801fe4e:	60f8      	str	r0, [r7, #12]
 801fe50:	60b9      	str	r1, [r7, #8]
 801fe52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801fe54:	2300      	movs	r3, #0
 801fe56:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801fe58:	68fb      	ldr	r3, [r7, #12]
 801fe5a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801fe5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	d10b      	bne.n	801fe7a <xQueueReceive+0x32>
	__asm volatile
 801fe62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fe66:	f383 8811 	msr	BASEPRI, r3
 801fe6a:	f3bf 8f6f 	isb	sy
 801fe6e:	f3bf 8f4f 	dsb	sy
 801fe72:	623b      	str	r3, [r7, #32]
}
 801fe74:	bf00      	nop
 801fe76:	bf00      	nop
 801fe78:	e7fd      	b.n	801fe76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801fe7a:	68bb      	ldr	r3, [r7, #8]
 801fe7c:	2b00      	cmp	r3, #0
 801fe7e:	d103      	bne.n	801fe88 <xQueueReceive+0x40>
 801fe80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fe82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801fe84:	2b00      	cmp	r3, #0
 801fe86:	d101      	bne.n	801fe8c <xQueueReceive+0x44>
 801fe88:	2301      	movs	r3, #1
 801fe8a:	e000      	b.n	801fe8e <xQueueReceive+0x46>
 801fe8c:	2300      	movs	r3, #0
 801fe8e:	2b00      	cmp	r3, #0
 801fe90:	d10b      	bne.n	801feaa <xQueueReceive+0x62>
	__asm volatile
 801fe92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fe96:	f383 8811 	msr	BASEPRI, r3
 801fe9a:	f3bf 8f6f 	isb	sy
 801fe9e:	f3bf 8f4f 	dsb	sy
 801fea2:	61fb      	str	r3, [r7, #28]
}
 801fea4:	bf00      	nop
 801fea6:	bf00      	nop
 801fea8:	e7fd      	b.n	801fea6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801feaa:	f001 faed 	bl	8021488 <xTaskGetSchedulerState>
 801feae:	4603      	mov	r3, r0
 801feb0:	2b00      	cmp	r3, #0
 801feb2:	d102      	bne.n	801feba <xQueueReceive+0x72>
 801feb4:	687b      	ldr	r3, [r7, #4]
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	d101      	bne.n	801febe <xQueueReceive+0x76>
 801feba:	2301      	movs	r3, #1
 801febc:	e000      	b.n	801fec0 <xQueueReceive+0x78>
 801febe:	2300      	movs	r3, #0
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d10b      	bne.n	801fedc <xQueueReceive+0x94>
	__asm volatile
 801fec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801fec8:	f383 8811 	msr	BASEPRI, r3
 801fecc:	f3bf 8f6f 	isb	sy
 801fed0:	f3bf 8f4f 	dsb	sy
 801fed4:	61bb      	str	r3, [r7, #24]
}
 801fed6:	bf00      	nop
 801fed8:	bf00      	nop
 801feda:	e7fd      	b.n	801fed8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801fedc:	f002 f97c 	bl	80221d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801fee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fee4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801fee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fee8:	2b00      	cmp	r3, #0
 801feea:	d01f      	beq.n	801ff2c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801feec:	68b9      	ldr	r1, [r7, #8]
 801feee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801fef0:	f000 fa61 	bl	80203b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801fef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fef6:	1e5a      	subs	r2, r3, #1
 801fef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fefa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801fefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fefe:	691b      	ldr	r3, [r3, #16]
 801ff00:	2b00      	cmp	r3, #0
 801ff02:	d00f      	beq.n	801ff24 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ff04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff06:	3310      	adds	r3, #16
 801ff08:	4618      	mov	r0, r3
 801ff0a:	f001 f883 	bl	8021014 <xTaskRemoveFromEventList>
 801ff0e:	4603      	mov	r3, r0
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	d007      	beq.n	801ff24 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801ff14:	4b3c      	ldr	r3, [pc, #240]	@ (8020008 <xQueueReceive+0x1c0>)
 801ff16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ff1a:	601a      	str	r2, [r3, #0]
 801ff1c:	f3bf 8f4f 	dsb	sy
 801ff20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801ff24:	f002 f98a 	bl	802223c <vPortExitCritical>
				return pdPASS;
 801ff28:	2301      	movs	r3, #1
 801ff2a:	e069      	b.n	8020000 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	d103      	bne.n	801ff3a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801ff32:	f002 f983 	bl	802223c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801ff36:	2300      	movs	r3, #0
 801ff38:	e062      	b.n	8020000 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ff3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ff3c:	2b00      	cmp	r3, #0
 801ff3e:	d106      	bne.n	801ff4e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ff40:	f107 0310 	add.w	r3, r7, #16
 801ff44:	4618      	mov	r0, r3
 801ff46:	f001 f92d 	bl	80211a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ff4a:	2301      	movs	r3, #1
 801ff4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ff4e:	f002 f975 	bl	802223c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ff52:	f000 fdc7 	bl	8020ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ff56:	f002 f93f 	bl	80221d8 <vPortEnterCritical>
 801ff5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801ff60:	b25b      	sxtb	r3, r3
 801ff62:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff66:	d103      	bne.n	801ff70 <xQueueReceive+0x128>
 801ff68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff6a:	2200      	movs	r2, #0
 801ff6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801ff70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801ff76:	b25b      	sxtb	r3, r3
 801ff78:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff7c:	d103      	bne.n	801ff86 <xQueueReceive+0x13e>
 801ff7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff80:	2200      	movs	r2, #0
 801ff82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801ff86:	f002 f959 	bl	802223c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801ff8a:	1d3a      	adds	r2, r7, #4
 801ff8c:	f107 0310 	add.w	r3, r7, #16
 801ff90:	4611      	mov	r1, r2
 801ff92:	4618      	mov	r0, r3
 801ff94:	f001 f91c 	bl	80211d0 <xTaskCheckForTimeOut>
 801ff98:	4603      	mov	r3, r0
 801ff9a:	2b00      	cmp	r3, #0
 801ff9c:	d123      	bne.n	801ffe6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ff9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ffa0:	f000 fa81 	bl	80204a6 <prvIsQueueEmpty>
 801ffa4:	4603      	mov	r3, r0
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d017      	beq.n	801ffda <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801ffaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ffac:	3324      	adds	r3, #36	@ 0x24
 801ffae:	687a      	ldr	r2, [r7, #4]
 801ffb0:	4611      	mov	r1, r2
 801ffb2:	4618      	mov	r0, r3
 801ffb4:	f000 ff9e 	bl	8020ef4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801ffb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ffba:	f000 fa22 	bl	8020402 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801ffbe:	f000 fd9f 	bl	8020b00 <xTaskResumeAll>
 801ffc2:	4603      	mov	r3, r0
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	d189      	bne.n	801fedc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801ffc8:	4b0f      	ldr	r3, [pc, #60]	@ (8020008 <xQueueReceive+0x1c0>)
 801ffca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ffce:	601a      	str	r2, [r3, #0]
 801ffd0:	f3bf 8f4f 	dsb	sy
 801ffd4:	f3bf 8f6f 	isb	sy
 801ffd8:	e780      	b.n	801fedc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801ffda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ffdc:	f000 fa11 	bl	8020402 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801ffe0:	f000 fd8e 	bl	8020b00 <xTaskResumeAll>
 801ffe4:	e77a      	b.n	801fedc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801ffe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ffe8:	f000 fa0b 	bl	8020402 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801ffec:	f000 fd88 	bl	8020b00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801fff0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801fff2:	f000 fa58 	bl	80204a6 <prvIsQueueEmpty>
 801fff6:	4603      	mov	r3, r0
 801fff8:	2b00      	cmp	r3, #0
 801fffa:	f43f af6f 	beq.w	801fedc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801fffe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8020000:	4618      	mov	r0, r3
 8020002:	3730      	adds	r7, #48	@ 0x30
 8020004:	46bd      	mov	sp, r7
 8020006:	bd80      	pop	{r7, pc}
 8020008:	e000ed04 	.word	0xe000ed04

0802000c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 802000c:	b580      	push	{r7, lr}
 802000e:	b08e      	sub	sp, #56	@ 0x38
 8020010:	af00      	add	r7, sp, #0
 8020012:	6078      	str	r0, [r7, #4]
 8020014:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8020016:	2300      	movs	r3, #0
 8020018:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802001a:	687b      	ldr	r3, [r7, #4]
 802001c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 802001e:	2300      	movs	r3, #0
 8020020:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020024:	2b00      	cmp	r3, #0
 8020026:	d10b      	bne.n	8020040 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8020028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802002c:	f383 8811 	msr	BASEPRI, r3
 8020030:	f3bf 8f6f 	isb	sy
 8020034:	f3bf 8f4f 	dsb	sy
 8020038:	623b      	str	r3, [r7, #32]
}
 802003a:	bf00      	nop
 802003c:	bf00      	nop
 802003e:	e7fd      	b.n	802003c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8020040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020044:	2b00      	cmp	r3, #0
 8020046:	d00b      	beq.n	8020060 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8020048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802004c:	f383 8811 	msr	BASEPRI, r3
 8020050:	f3bf 8f6f 	isb	sy
 8020054:	f3bf 8f4f 	dsb	sy
 8020058:	61fb      	str	r3, [r7, #28]
}
 802005a:	bf00      	nop
 802005c:	bf00      	nop
 802005e:	e7fd      	b.n	802005c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020060:	f001 fa12 	bl	8021488 <xTaskGetSchedulerState>
 8020064:	4603      	mov	r3, r0
 8020066:	2b00      	cmp	r3, #0
 8020068:	d102      	bne.n	8020070 <xQueueSemaphoreTake+0x64>
 802006a:	683b      	ldr	r3, [r7, #0]
 802006c:	2b00      	cmp	r3, #0
 802006e:	d101      	bne.n	8020074 <xQueueSemaphoreTake+0x68>
 8020070:	2301      	movs	r3, #1
 8020072:	e000      	b.n	8020076 <xQueueSemaphoreTake+0x6a>
 8020074:	2300      	movs	r3, #0
 8020076:	2b00      	cmp	r3, #0
 8020078:	d10b      	bne.n	8020092 <xQueueSemaphoreTake+0x86>
	__asm volatile
 802007a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802007e:	f383 8811 	msr	BASEPRI, r3
 8020082:	f3bf 8f6f 	isb	sy
 8020086:	f3bf 8f4f 	dsb	sy
 802008a:	61bb      	str	r3, [r7, #24]
}
 802008c:	bf00      	nop
 802008e:	bf00      	nop
 8020090:	e7fd      	b.n	802008e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020092:	f002 f8a1 	bl	80221d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8020096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802009a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 802009c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802009e:	2b00      	cmp	r3, #0
 80200a0:	d024      	beq.n	80200ec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80200a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80200a4:	1e5a      	subs	r2, r3, #1
 80200a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200a8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80200aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	2b00      	cmp	r3, #0
 80200b0:	d104      	bne.n	80200bc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80200b2:	f001 fb7b 	bl	80217ac <pvTaskIncrementMutexHeldCount>
 80200b6:	4602      	mov	r2, r0
 80200b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80200bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200be:	691b      	ldr	r3, [r3, #16]
 80200c0:	2b00      	cmp	r3, #0
 80200c2:	d00f      	beq.n	80200e4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80200c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200c6:	3310      	adds	r3, #16
 80200c8:	4618      	mov	r0, r3
 80200ca:	f000 ffa3 	bl	8021014 <xTaskRemoveFromEventList>
 80200ce:	4603      	mov	r3, r0
 80200d0:	2b00      	cmp	r3, #0
 80200d2:	d007      	beq.n	80200e4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80200d4:	4b54      	ldr	r3, [pc, #336]	@ (8020228 <xQueueSemaphoreTake+0x21c>)
 80200d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80200da:	601a      	str	r2, [r3, #0]
 80200dc:	f3bf 8f4f 	dsb	sy
 80200e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80200e4:	f002 f8aa 	bl	802223c <vPortExitCritical>
				return pdPASS;
 80200e8:	2301      	movs	r3, #1
 80200ea:	e098      	b.n	802021e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80200ec:	683b      	ldr	r3, [r7, #0]
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	d112      	bne.n	8020118 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80200f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80200f4:	2b00      	cmp	r3, #0
 80200f6:	d00b      	beq.n	8020110 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80200f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80200fc:	f383 8811 	msr	BASEPRI, r3
 8020100:	f3bf 8f6f 	isb	sy
 8020104:	f3bf 8f4f 	dsb	sy
 8020108:	617b      	str	r3, [r7, #20]
}
 802010a:	bf00      	nop
 802010c:	bf00      	nop
 802010e:	e7fd      	b.n	802010c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8020110:	f002 f894 	bl	802223c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8020114:	2300      	movs	r3, #0
 8020116:	e082      	b.n	802021e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802011a:	2b00      	cmp	r3, #0
 802011c:	d106      	bne.n	802012c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802011e:	f107 030c 	add.w	r3, r7, #12
 8020122:	4618      	mov	r0, r3
 8020124:	f001 f83e 	bl	80211a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020128:	2301      	movs	r3, #1
 802012a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802012c:	f002 f886 	bl	802223c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020130:	f000 fcd8 	bl	8020ae4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020134:	f002 f850 	bl	80221d8 <vPortEnterCritical>
 8020138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802013a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 802013e:	b25b      	sxtb	r3, r3
 8020140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020144:	d103      	bne.n	802014e <xQueueSemaphoreTake+0x142>
 8020146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020148:	2200      	movs	r2, #0
 802014a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 802014e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020150:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8020154:	b25b      	sxtb	r3, r3
 8020156:	f1b3 3fff 	cmp.w	r3, #4294967295
 802015a:	d103      	bne.n	8020164 <xQueueSemaphoreTake+0x158>
 802015c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802015e:	2200      	movs	r2, #0
 8020160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8020164:	f002 f86a 	bl	802223c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020168:	463a      	mov	r2, r7
 802016a:	f107 030c 	add.w	r3, r7, #12
 802016e:	4611      	mov	r1, r2
 8020170:	4618      	mov	r0, r3
 8020172:	f001 f82d 	bl	80211d0 <xTaskCheckForTimeOut>
 8020176:	4603      	mov	r3, r0
 8020178:	2b00      	cmp	r3, #0
 802017a:	d132      	bne.n	80201e2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802017c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 802017e:	f000 f992 	bl	80204a6 <prvIsQueueEmpty>
 8020182:	4603      	mov	r3, r0
 8020184:	2b00      	cmp	r3, #0
 8020186:	d026      	beq.n	80201d6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8020188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802018a:	681b      	ldr	r3, [r3, #0]
 802018c:	2b00      	cmp	r3, #0
 802018e:	d109      	bne.n	80201a4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8020190:	f002 f822 	bl	80221d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8020194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020196:	689b      	ldr	r3, [r3, #8]
 8020198:	4618      	mov	r0, r3
 802019a:	f001 f993 	bl	80214c4 <xTaskPriorityInherit>
 802019e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80201a0:	f002 f84c 	bl	802223c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80201a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80201a6:	3324      	adds	r3, #36	@ 0x24
 80201a8:	683a      	ldr	r2, [r7, #0]
 80201aa:	4611      	mov	r1, r2
 80201ac:	4618      	mov	r0, r3
 80201ae:	f000 fea1 	bl	8020ef4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80201b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80201b4:	f000 f925 	bl	8020402 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80201b8:	f000 fca2 	bl	8020b00 <xTaskResumeAll>
 80201bc:	4603      	mov	r3, r0
 80201be:	2b00      	cmp	r3, #0
 80201c0:	f47f af67 	bne.w	8020092 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80201c4:	4b18      	ldr	r3, [pc, #96]	@ (8020228 <xQueueSemaphoreTake+0x21c>)
 80201c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80201ca:	601a      	str	r2, [r3, #0]
 80201cc:	f3bf 8f4f 	dsb	sy
 80201d0:	f3bf 8f6f 	isb	sy
 80201d4:	e75d      	b.n	8020092 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80201d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80201d8:	f000 f913 	bl	8020402 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80201dc:	f000 fc90 	bl	8020b00 <xTaskResumeAll>
 80201e0:	e757      	b.n	8020092 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80201e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80201e4:	f000 f90d 	bl	8020402 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80201e8:	f000 fc8a 	bl	8020b00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80201ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80201ee:	f000 f95a 	bl	80204a6 <prvIsQueueEmpty>
 80201f2:	4603      	mov	r3, r0
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	f43f af4c 	beq.w	8020092 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80201fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80201fc:	2b00      	cmp	r3, #0
 80201fe:	d00d      	beq.n	802021c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8020200:	f001 ffea 	bl	80221d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8020204:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8020206:	f000 f854 	bl	80202b2 <prvGetDisinheritPriorityAfterTimeout>
 802020a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 802020c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802020e:	689b      	ldr	r3, [r3, #8]
 8020210:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8020212:	4618      	mov	r0, r3
 8020214:	f001 fa2e 	bl	8021674 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8020218:	f002 f810 	bl	802223c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802021c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802021e:	4618      	mov	r0, r3
 8020220:	3738      	adds	r7, #56	@ 0x38
 8020222:	46bd      	mov	sp, r7
 8020224:	bd80      	pop	{r7, pc}
 8020226:	bf00      	nop
 8020228:	e000ed04 	.word	0xe000ed04

0802022c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 802022c:	b580      	push	{r7, lr}
 802022e:	b084      	sub	sp, #16
 8020230:	af00      	add	r7, sp, #0
 8020232:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8020234:	687b      	ldr	r3, [r7, #4]
 8020236:	2b00      	cmp	r3, #0
 8020238:	d10b      	bne.n	8020252 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 802023a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802023e:	f383 8811 	msr	BASEPRI, r3
 8020242:	f3bf 8f6f 	isb	sy
 8020246:	f3bf 8f4f 	dsb	sy
 802024a:	60bb      	str	r3, [r7, #8]
}
 802024c:	bf00      	nop
 802024e:	bf00      	nop
 8020250:	e7fd      	b.n	802024e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8020252:	f001 ffc1 	bl	80221d8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802025a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 802025c:	f001 ffee 	bl	802223c <vPortExitCritical>

	return uxReturn;
 8020260:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8020262:	4618      	mov	r0, r3
 8020264:	3710      	adds	r7, #16
 8020266:	46bd      	mov	sp, r7
 8020268:	bd80      	pop	{r7, pc}

0802026a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 802026a:	b580      	push	{r7, lr}
 802026c:	b084      	sub	sp, #16
 802026e:	af00      	add	r7, sp, #0
 8020270:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8020276:	68fb      	ldr	r3, [r7, #12]
 8020278:	2b00      	cmp	r3, #0
 802027a:	d10b      	bne.n	8020294 <vQueueDelete+0x2a>
	__asm volatile
 802027c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020280:	f383 8811 	msr	BASEPRI, r3
 8020284:	f3bf 8f6f 	isb	sy
 8020288:	f3bf 8f4f 	dsb	sy
 802028c:	60bb      	str	r3, [r7, #8]
}
 802028e:	bf00      	nop
 8020290:	bf00      	nop
 8020292:	e7fd      	b.n	8020290 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8020294:	68f8      	ldr	r0, [r7, #12]
 8020296:	f000 f95f 	bl	8020558 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 802029a:	68fb      	ldr	r3, [r7, #12]
 802029c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	d102      	bne.n	80202aa <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80202a4:	68f8      	ldr	r0, [r7, #12]
 80202a6:	f002 f987 	bl	80225b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80202aa:	bf00      	nop
 80202ac:	3710      	adds	r7, #16
 80202ae:	46bd      	mov	sp, r7
 80202b0:	bd80      	pop	{r7, pc}

080202b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80202b2:	b480      	push	{r7}
 80202b4:	b085      	sub	sp, #20
 80202b6:	af00      	add	r7, sp, #0
 80202b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80202ba:	687b      	ldr	r3, [r7, #4]
 80202bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80202be:	2b00      	cmp	r3, #0
 80202c0:	d006      	beq.n	80202d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80202c2:	687b      	ldr	r3, [r7, #4]
 80202c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80202c6:	681b      	ldr	r3, [r3, #0]
 80202c8:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80202cc:	60fb      	str	r3, [r7, #12]
 80202ce:	e001      	b.n	80202d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80202d0:	2300      	movs	r3, #0
 80202d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80202d4:	68fb      	ldr	r3, [r7, #12]
	}
 80202d6:	4618      	mov	r0, r3
 80202d8:	3714      	adds	r7, #20
 80202da:	46bd      	mov	sp, r7
 80202dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202e0:	4770      	bx	lr

080202e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80202e2:	b580      	push	{r7, lr}
 80202e4:	b086      	sub	sp, #24
 80202e6:	af00      	add	r7, sp, #0
 80202e8:	60f8      	str	r0, [r7, #12]
 80202ea:	60b9      	str	r1, [r7, #8]
 80202ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80202ee:	2300      	movs	r3, #0
 80202f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80202f2:	68fb      	ldr	r3, [r7, #12]
 80202f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80202f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80202f8:	68fb      	ldr	r3, [r7, #12]
 80202fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	d10d      	bne.n	802031c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8020300:	68fb      	ldr	r3, [r7, #12]
 8020302:	681b      	ldr	r3, [r3, #0]
 8020304:	2b00      	cmp	r3, #0
 8020306:	d14d      	bne.n	80203a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8020308:	68fb      	ldr	r3, [r7, #12]
 802030a:	689b      	ldr	r3, [r3, #8]
 802030c:	4618      	mov	r0, r3
 802030e:	f001 f941 	bl	8021594 <xTaskPriorityDisinherit>
 8020312:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8020314:	68fb      	ldr	r3, [r7, #12]
 8020316:	2200      	movs	r2, #0
 8020318:	609a      	str	r2, [r3, #8]
 802031a:	e043      	b.n	80203a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	2b00      	cmp	r3, #0
 8020320:	d119      	bne.n	8020356 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8020322:	68fb      	ldr	r3, [r7, #12]
 8020324:	6858      	ldr	r0, [r3, #4]
 8020326:	68fb      	ldr	r3, [r7, #12]
 8020328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802032a:	461a      	mov	r2, r3
 802032c:	68b9      	ldr	r1, [r7, #8]
 802032e:	f005 f958 	bl	80255e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8020332:	68fb      	ldr	r3, [r7, #12]
 8020334:	685a      	ldr	r2, [r3, #4]
 8020336:	68fb      	ldr	r3, [r7, #12]
 8020338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802033a:	441a      	add	r2, r3
 802033c:	68fb      	ldr	r3, [r7, #12]
 802033e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8020340:	68fb      	ldr	r3, [r7, #12]
 8020342:	685a      	ldr	r2, [r3, #4]
 8020344:	68fb      	ldr	r3, [r7, #12]
 8020346:	689b      	ldr	r3, [r3, #8]
 8020348:	429a      	cmp	r2, r3
 802034a:	d32b      	bcc.n	80203a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802034c:	68fb      	ldr	r3, [r7, #12]
 802034e:	681a      	ldr	r2, [r3, #0]
 8020350:	68fb      	ldr	r3, [r7, #12]
 8020352:	605a      	str	r2, [r3, #4]
 8020354:	e026      	b.n	80203a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8020356:	68fb      	ldr	r3, [r7, #12]
 8020358:	68d8      	ldr	r0, [r3, #12]
 802035a:	68fb      	ldr	r3, [r7, #12]
 802035c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802035e:	461a      	mov	r2, r3
 8020360:	68b9      	ldr	r1, [r7, #8]
 8020362:	f005 f93e 	bl	80255e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8020366:	68fb      	ldr	r3, [r7, #12]
 8020368:	68da      	ldr	r2, [r3, #12]
 802036a:	68fb      	ldr	r3, [r7, #12]
 802036c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802036e:	425b      	negs	r3, r3
 8020370:	441a      	add	r2, r3
 8020372:	68fb      	ldr	r3, [r7, #12]
 8020374:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8020376:	68fb      	ldr	r3, [r7, #12]
 8020378:	68da      	ldr	r2, [r3, #12]
 802037a:	68fb      	ldr	r3, [r7, #12]
 802037c:	681b      	ldr	r3, [r3, #0]
 802037e:	429a      	cmp	r2, r3
 8020380:	d207      	bcs.n	8020392 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8020382:	68fb      	ldr	r3, [r7, #12]
 8020384:	689a      	ldr	r2, [r3, #8]
 8020386:	68fb      	ldr	r3, [r7, #12]
 8020388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802038a:	425b      	negs	r3, r3
 802038c:	441a      	add	r2, r3
 802038e:	68fb      	ldr	r3, [r7, #12]
 8020390:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	2b02      	cmp	r3, #2
 8020396:	d105      	bne.n	80203a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8020398:	693b      	ldr	r3, [r7, #16]
 802039a:	2b00      	cmp	r3, #0
 802039c:	d002      	beq.n	80203a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 802039e:	693b      	ldr	r3, [r7, #16]
 80203a0:	3b01      	subs	r3, #1
 80203a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80203a4:	693b      	ldr	r3, [r7, #16]
 80203a6:	1c5a      	adds	r2, r3, #1
 80203a8:	68fb      	ldr	r3, [r7, #12]
 80203aa:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80203ac:	697b      	ldr	r3, [r7, #20]
}
 80203ae:	4618      	mov	r0, r3
 80203b0:	3718      	adds	r7, #24
 80203b2:	46bd      	mov	sp, r7
 80203b4:	bd80      	pop	{r7, pc}

080203b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80203b6:	b580      	push	{r7, lr}
 80203b8:	b082      	sub	sp, #8
 80203ba:	af00      	add	r7, sp, #0
 80203bc:	6078      	str	r0, [r7, #4]
 80203be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80203c0:	687b      	ldr	r3, [r7, #4]
 80203c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80203c4:	2b00      	cmp	r3, #0
 80203c6:	d018      	beq.n	80203fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80203c8:	687b      	ldr	r3, [r7, #4]
 80203ca:	68da      	ldr	r2, [r3, #12]
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80203d0:	441a      	add	r2, r3
 80203d2:	687b      	ldr	r3, [r7, #4]
 80203d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	68da      	ldr	r2, [r3, #12]
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	689b      	ldr	r3, [r3, #8]
 80203de:	429a      	cmp	r2, r3
 80203e0:	d303      	bcc.n	80203ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80203e2:	687b      	ldr	r3, [r7, #4]
 80203e4:	681a      	ldr	r2, [r3, #0]
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80203ea:	687b      	ldr	r3, [r7, #4]
 80203ec:	68d9      	ldr	r1, [r3, #12]
 80203ee:	687b      	ldr	r3, [r7, #4]
 80203f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80203f2:	461a      	mov	r2, r3
 80203f4:	6838      	ldr	r0, [r7, #0]
 80203f6:	f005 f8f4 	bl	80255e2 <memcpy>
	}
}
 80203fa:	bf00      	nop
 80203fc:	3708      	adds	r7, #8
 80203fe:	46bd      	mov	sp, r7
 8020400:	bd80      	pop	{r7, pc}

08020402 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8020402:	b580      	push	{r7, lr}
 8020404:	b084      	sub	sp, #16
 8020406:	af00      	add	r7, sp, #0
 8020408:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 802040a:	f001 fee5 	bl	80221d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8020414:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8020416:	e011      	b.n	802043c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020418:	687b      	ldr	r3, [r7, #4]
 802041a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802041c:	2b00      	cmp	r3, #0
 802041e:	d012      	beq.n	8020446 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020420:	687b      	ldr	r3, [r7, #4]
 8020422:	3324      	adds	r3, #36	@ 0x24
 8020424:	4618      	mov	r0, r3
 8020426:	f000 fdf5 	bl	8021014 <xTaskRemoveFromEventList>
 802042a:	4603      	mov	r3, r0
 802042c:	2b00      	cmp	r3, #0
 802042e:	d001      	beq.n	8020434 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8020430:	f000 ff32 	bl	8021298 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8020434:	7bfb      	ldrb	r3, [r7, #15]
 8020436:	3b01      	subs	r3, #1
 8020438:	b2db      	uxtb	r3, r3
 802043a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802043c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020440:	2b00      	cmp	r3, #0
 8020442:	dce9      	bgt.n	8020418 <prvUnlockQueue+0x16>
 8020444:	e000      	b.n	8020448 <prvUnlockQueue+0x46>
					break;
 8020446:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8020448:	687b      	ldr	r3, [r7, #4]
 802044a:	22ff      	movs	r2, #255	@ 0xff
 802044c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8020450:	f001 fef4 	bl	802223c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8020454:	f001 fec0 	bl	80221d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 802045e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8020460:	e011      	b.n	8020486 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	691b      	ldr	r3, [r3, #16]
 8020466:	2b00      	cmp	r3, #0
 8020468:	d012      	beq.n	8020490 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	3310      	adds	r3, #16
 802046e:	4618      	mov	r0, r3
 8020470:	f000 fdd0 	bl	8021014 <xTaskRemoveFromEventList>
 8020474:	4603      	mov	r3, r0
 8020476:	2b00      	cmp	r3, #0
 8020478:	d001      	beq.n	802047e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 802047a:	f000 ff0d 	bl	8021298 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 802047e:	7bbb      	ldrb	r3, [r7, #14]
 8020480:	3b01      	subs	r3, #1
 8020482:	b2db      	uxtb	r3, r3
 8020484:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8020486:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802048a:	2b00      	cmp	r3, #0
 802048c:	dce9      	bgt.n	8020462 <prvUnlockQueue+0x60>
 802048e:	e000      	b.n	8020492 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8020490:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8020492:	687b      	ldr	r3, [r7, #4]
 8020494:	22ff      	movs	r2, #255	@ 0xff
 8020496:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 802049a:	f001 fecf 	bl	802223c <vPortExitCritical>
}
 802049e:	bf00      	nop
 80204a0:	3710      	adds	r7, #16
 80204a2:	46bd      	mov	sp, r7
 80204a4:	bd80      	pop	{r7, pc}

080204a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80204a6:	b580      	push	{r7, lr}
 80204a8:	b084      	sub	sp, #16
 80204aa:	af00      	add	r7, sp, #0
 80204ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80204ae:	f001 fe93 	bl	80221d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80204b2:	687b      	ldr	r3, [r7, #4]
 80204b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	d102      	bne.n	80204c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80204ba:	2301      	movs	r3, #1
 80204bc:	60fb      	str	r3, [r7, #12]
 80204be:	e001      	b.n	80204c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80204c0:	2300      	movs	r3, #0
 80204c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80204c4:	f001 feba 	bl	802223c <vPortExitCritical>

	return xReturn;
 80204c8:	68fb      	ldr	r3, [r7, #12]
}
 80204ca:	4618      	mov	r0, r3
 80204cc:	3710      	adds	r7, #16
 80204ce:	46bd      	mov	sp, r7
 80204d0:	bd80      	pop	{r7, pc}

080204d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80204d2:	b580      	push	{r7, lr}
 80204d4:	b084      	sub	sp, #16
 80204d6:	af00      	add	r7, sp, #0
 80204d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80204da:	f001 fe7d 	bl	80221d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80204de:	687b      	ldr	r3, [r7, #4]
 80204e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80204e2:	687b      	ldr	r3, [r7, #4]
 80204e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80204e6:	429a      	cmp	r2, r3
 80204e8:	d102      	bne.n	80204f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80204ea:	2301      	movs	r3, #1
 80204ec:	60fb      	str	r3, [r7, #12]
 80204ee:	e001      	b.n	80204f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80204f0:	2300      	movs	r3, #0
 80204f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80204f4:	f001 fea2 	bl	802223c <vPortExitCritical>

	return xReturn;
 80204f8:	68fb      	ldr	r3, [r7, #12]
}
 80204fa:	4618      	mov	r0, r3
 80204fc:	3710      	adds	r7, #16
 80204fe:	46bd      	mov	sp, r7
 8020500:	bd80      	pop	{r7, pc}
	...

08020504 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8020504:	b480      	push	{r7}
 8020506:	b085      	sub	sp, #20
 8020508:	af00      	add	r7, sp, #0
 802050a:	6078      	str	r0, [r7, #4]
 802050c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802050e:	2300      	movs	r3, #0
 8020510:	60fb      	str	r3, [r7, #12]
 8020512:	e014      	b.n	802053e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8020514:	4a0f      	ldr	r2, [pc, #60]	@ (8020554 <vQueueAddToRegistry+0x50>)
 8020516:	68fb      	ldr	r3, [r7, #12]
 8020518:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802051c:	2b00      	cmp	r3, #0
 802051e:	d10b      	bne.n	8020538 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8020520:	490c      	ldr	r1, [pc, #48]	@ (8020554 <vQueueAddToRegistry+0x50>)
 8020522:	68fb      	ldr	r3, [r7, #12]
 8020524:	683a      	ldr	r2, [r7, #0]
 8020526:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 802052a:	4a0a      	ldr	r2, [pc, #40]	@ (8020554 <vQueueAddToRegistry+0x50>)
 802052c:	68fb      	ldr	r3, [r7, #12]
 802052e:	00db      	lsls	r3, r3, #3
 8020530:	4413      	add	r3, r2
 8020532:	687a      	ldr	r2, [r7, #4]
 8020534:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8020536:	e006      	b.n	8020546 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020538:	68fb      	ldr	r3, [r7, #12]
 802053a:	3301      	adds	r3, #1
 802053c:	60fb      	str	r3, [r7, #12]
 802053e:	68fb      	ldr	r3, [r7, #12]
 8020540:	2b07      	cmp	r3, #7
 8020542:	d9e7      	bls.n	8020514 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8020544:	bf00      	nop
 8020546:	bf00      	nop
 8020548:	3714      	adds	r7, #20
 802054a:	46bd      	mov	sp, r7
 802054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020550:	4770      	bx	lr
 8020552:	bf00      	nop
 8020554:	24018eec 	.word	0x24018eec

08020558 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8020558:	b480      	push	{r7}
 802055a:	b085      	sub	sp, #20
 802055c:	af00      	add	r7, sp, #0
 802055e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8020560:	2300      	movs	r3, #0
 8020562:	60fb      	str	r3, [r7, #12]
 8020564:	e016      	b.n	8020594 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8020566:	4a10      	ldr	r2, [pc, #64]	@ (80205a8 <vQueueUnregisterQueue+0x50>)
 8020568:	68fb      	ldr	r3, [r7, #12]
 802056a:	00db      	lsls	r3, r3, #3
 802056c:	4413      	add	r3, r2
 802056e:	685b      	ldr	r3, [r3, #4]
 8020570:	687a      	ldr	r2, [r7, #4]
 8020572:	429a      	cmp	r2, r3
 8020574:	d10b      	bne.n	802058e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8020576:	4a0c      	ldr	r2, [pc, #48]	@ (80205a8 <vQueueUnregisterQueue+0x50>)
 8020578:	68fb      	ldr	r3, [r7, #12]
 802057a:	2100      	movs	r1, #0
 802057c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8020580:	4a09      	ldr	r2, [pc, #36]	@ (80205a8 <vQueueUnregisterQueue+0x50>)
 8020582:	68fb      	ldr	r3, [r7, #12]
 8020584:	00db      	lsls	r3, r3, #3
 8020586:	4413      	add	r3, r2
 8020588:	2200      	movs	r2, #0
 802058a:	605a      	str	r2, [r3, #4]
				break;
 802058c:	e006      	b.n	802059c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802058e:	68fb      	ldr	r3, [r7, #12]
 8020590:	3301      	adds	r3, #1
 8020592:	60fb      	str	r3, [r7, #12]
 8020594:	68fb      	ldr	r3, [r7, #12]
 8020596:	2b07      	cmp	r3, #7
 8020598:	d9e5      	bls.n	8020566 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 802059a:	bf00      	nop
 802059c:	bf00      	nop
 802059e:	3714      	adds	r7, #20
 80205a0:	46bd      	mov	sp, r7
 80205a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205a6:	4770      	bx	lr
 80205a8:	24018eec 	.word	0x24018eec

080205ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80205ac:	b580      	push	{r7, lr}
 80205ae:	b086      	sub	sp, #24
 80205b0:	af00      	add	r7, sp, #0
 80205b2:	60f8      	str	r0, [r7, #12]
 80205b4:	60b9      	str	r1, [r7, #8]
 80205b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80205b8:	68fb      	ldr	r3, [r7, #12]
 80205ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80205bc:	f001 fe0c 	bl	80221d8 <vPortEnterCritical>
 80205c0:	697b      	ldr	r3, [r7, #20]
 80205c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80205c6:	b25b      	sxtb	r3, r3
 80205c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80205cc:	d103      	bne.n	80205d6 <vQueueWaitForMessageRestricted+0x2a>
 80205ce:	697b      	ldr	r3, [r7, #20]
 80205d0:	2200      	movs	r2, #0
 80205d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80205d6:	697b      	ldr	r3, [r7, #20]
 80205d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80205dc:	b25b      	sxtb	r3, r3
 80205de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80205e2:	d103      	bne.n	80205ec <vQueueWaitForMessageRestricted+0x40>
 80205e4:	697b      	ldr	r3, [r7, #20]
 80205e6:	2200      	movs	r2, #0
 80205e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80205ec:	f001 fe26 	bl	802223c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80205f0:	697b      	ldr	r3, [r7, #20]
 80205f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	d106      	bne.n	8020606 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80205f8:	697b      	ldr	r3, [r7, #20]
 80205fa:	3324      	adds	r3, #36	@ 0x24
 80205fc:	687a      	ldr	r2, [r7, #4]
 80205fe:	68b9      	ldr	r1, [r7, #8]
 8020600:	4618      	mov	r0, r3
 8020602:	f000 fcdb 	bl	8020fbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8020606:	6978      	ldr	r0, [r7, #20]
 8020608:	f7ff fefb 	bl	8020402 <prvUnlockQueue>
	}
 802060c:	bf00      	nop
 802060e:	3718      	adds	r7, #24
 8020610:	46bd      	mov	sp, r7
 8020612:	bd80      	pop	{r7, pc}

08020614 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8020614:	b580      	push	{r7, lr}
 8020616:	b08e      	sub	sp, #56	@ 0x38
 8020618:	af04      	add	r7, sp, #16
 802061a:	60f8      	str	r0, [r7, #12]
 802061c:	60b9      	str	r1, [r7, #8]
 802061e:	607a      	str	r2, [r7, #4]
 8020620:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8020622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020624:	2b00      	cmp	r3, #0
 8020626:	d10b      	bne.n	8020640 <xTaskCreateStatic+0x2c>
	__asm volatile
 8020628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802062c:	f383 8811 	msr	BASEPRI, r3
 8020630:	f3bf 8f6f 	isb	sy
 8020634:	f3bf 8f4f 	dsb	sy
 8020638:	623b      	str	r3, [r7, #32]
}
 802063a:	bf00      	nop
 802063c:	bf00      	nop
 802063e:	e7fd      	b.n	802063c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8020640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020642:	2b00      	cmp	r3, #0
 8020644:	d10b      	bne.n	802065e <xTaskCreateStatic+0x4a>
	__asm volatile
 8020646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802064a:	f383 8811 	msr	BASEPRI, r3
 802064e:	f3bf 8f6f 	isb	sy
 8020652:	f3bf 8f4f 	dsb	sy
 8020656:	61fb      	str	r3, [r7, #28]
}
 8020658:	bf00      	nop
 802065a:	bf00      	nop
 802065c:	e7fd      	b.n	802065a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 802065e:	23ac      	movs	r3, #172	@ 0xac
 8020660:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8020662:	693b      	ldr	r3, [r7, #16]
 8020664:	2bac      	cmp	r3, #172	@ 0xac
 8020666:	d00b      	beq.n	8020680 <xTaskCreateStatic+0x6c>
	__asm volatile
 8020668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802066c:	f383 8811 	msr	BASEPRI, r3
 8020670:	f3bf 8f6f 	isb	sy
 8020674:	f3bf 8f4f 	dsb	sy
 8020678:	61bb      	str	r3, [r7, #24]
}
 802067a:	bf00      	nop
 802067c:	bf00      	nop
 802067e:	e7fd      	b.n	802067c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8020680:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8020682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020684:	2b00      	cmp	r3, #0
 8020686:	d01e      	beq.n	80206c6 <xTaskCreateStatic+0xb2>
 8020688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802068a:	2b00      	cmp	r3, #0
 802068c:	d01b      	beq.n	80206c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802068e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020690:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8020692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8020696:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8020698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802069a:	2202      	movs	r2, #2
 802069c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80206a0:	2300      	movs	r3, #0
 80206a2:	9303      	str	r3, [sp, #12]
 80206a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206a6:	9302      	str	r3, [sp, #8]
 80206a8:	f107 0314 	add.w	r3, r7, #20
 80206ac:	9301      	str	r3, [sp, #4]
 80206ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80206b0:	9300      	str	r3, [sp, #0]
 80206b2:	683b      	ldr	r3, [r7, #0]
 80206b4:	687a      	ldr	r2, [r7, #4]
 80206b6:	68b9      	ldr	r1, [r7, #8]
 80206b8:	68f8      	ldr	r0, [r7, #12]
 80206ba:	f000 f851 	bl	8020760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80206be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80206c0:	f000 f8f8 	bl	80208b4 <prvAddNewTaskToReadyList>
 80206c4:	e001      	b.n	80206ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80206c6:	2300      	movs	r3, #0
 80206c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80206ca:	697b      	ldr	r3, [r7, #20]
	}
 80206cc:	4618      	mov	r0, r3
 80206ce:	3728      	adds	r7, #40	@ 0x28
 80206d0:	46bd      	mov	sp, r7
 80206d2:	bd80      	pop	{r7, pc}

080206d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80206d4:	b580      	push	{r7, lr}
 80206d6:	b08c      	sub	sp, #48	@ 0x30
 80206d8:	af04      	add	r7, sp, #16
 80206da:	60f8      	str	r0, [r7, #12]
 80206dc:	60b9      	str	r1, [r7, #8]
 80206de:	603b      	str	r3, [r7, #0]
 80206e0:	4613      	mov	r3, r2
 80206e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80206e4:	88fb      	ldrh	r3, [r7, #6]
 80206e6:	009b      	lsls	r3, r3, #2
 80206e8:	4618      	mov	r0, r3
 80206ea:	f001 fe97 	bl	802241c <pvPortMalloc>
 80206ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80206f0:	697b      	ldr	r3, [r7, #20]
 80206f2:	2b00      	cmp	r3, #0
 80206f4:	d00e      	beq.n	8020714 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80206f6:	20ac      	movs	r0, #172	@ 0xac
 80206f8:	f001 fe90 	bl	802241c <pvPortMalloc>
 80206fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80206fe:	69fb      	ldr	r3, [r7, #28]
 8020700:	2b00      	cmp	r3, #0
 8020702:	d003      	beq.n	802070c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8020704:	69fb      	ldr	r3, [r7, #28]
 8020706:	697a      	ldr	r2, [r7, #20]
 8020708:	631a      	str	r2, [r3, #48]	@ 0x30
 802070a:	e005      	b.n	8020718 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 802070c:	6978      	ldr	r0, [r7, #20]
 802070e:	f001 ff53 	bl	80225b8 <vPortFree>
 8020712:	e001      	b.n	8020718 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8020714:	2300      	movs	r3, #0
 8020716:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8020718:	69fb      	ldr	r3, [r7, #28]
 802071a:	2b00      	cmp	r3, #0
 802071c:	d017      	beq.n	802074e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 802071e:	69fb      	ldr	r3, [r7, #28]
 8020720:	2200      	movs	r2, #0
 8020722:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8020726:	88fa      	ldrh	r2, [r7, #6]
 8020728:	2300      	movs	r3, #0
 802072a:	9303      	str	r3, [sp, #12]
 802072c:	69fb      	ldr	r3, [r7, #28]
 802072e:	9302      	str	r3, [sp, #8]
 8020730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020732:	9301      	str	r3, [sp, #4]
 8020734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020736:	9300      	str	r3, [sp, #0]
 8020738:	683b      	ldr	r3, [r7, #0]
 802073a:	68b9      	ldr	r1, [r7, #8]
 802073c:	68f8      	ldr	r0, [r7, #12]
 802073e:	f000 f80f 	bl	8020760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8020742:	69f8      	ldr	r0, [r7, #28]
 8020744:	f000 f8b6 	bl	80208b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8020748:	2301      	movs	r3, #1
 802074a:	61bb      	str	r3, [r7, #24]
 802074c:	e002      	b.n	8020754 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 802074e:	f04f 33ff 	mov.w	r3, #4294967295
 8020752:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8020754:	69bb      	ldr	r3, [r7, #24]
	}
 8020756:	4618      	mov	r0, r3
 8020758:	3720      	adds	r7, #32
 802075a:	46bd      	mov	sp, r7
 802075c:	bd80      	pop	{r7, pc}
	...

08020760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8020760:	b580      	push	{r7, lr}
 8020762:	b088      	sub	sp, #32
 8020764:	af00      	add	r7, sp, #0
 8020766:	60f8      	str	r0, [r7, #12]
 8020768:	60b9      	str	r1, [r7, #8]
 802076a:	607a      	str	r2, [r7, #4]
 802076c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 802076e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020770:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	009b      	lsls	r3, r3, #2
 8020776:	461a      	mov	r2, r3
 8020778:	21a5      	movs	r1, #165	@ 0xa5
 802077a:	f004 fe42 	bl	8025402 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 802077e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020780:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8020782:	6879      	ldr	r1, [r7, #4]
 8020784:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8020788:	440b      	add	r3, r1
 802078a:	009b      	lsls	r3, r3, #2
 802078c:	4413      	add	r3, r2
 802078e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8020790:	69bb      	ldr	r3, [r7, #24]
 8020792:	f023 0307 	bic.w	r3, r3, #7
 8020796:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8020798:	69bb      	ldr	r3, [r7, #24]
 802079a:	f003 0307 	and.w	r3, r3, #7
 802079e:	2b00      	cmp	r3, #0
 80207a0:	d00b      	beq.n	80207ba <prvInitialiseNewTask+0x5a>
	__asm volatile
 80207a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80207a6:	f383 8811 	msr	BASEPRI, r3
 80207aa:	f3bf 8f6f 	isb	sy
 80207ae:	f3bf 8f4f 	dsb	sy
 80207b2:	617b      	str	r3, [r7, #20]
}
 80207b4:	bf00      	nop
 80207b6:	bf00      	nop
 80207b8:	e7fd      	b.n	80207b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80207ba:	68bb      	ldr	r3, [r7, #8]
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d01f      	beq.n	8020800 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80207c0:	2300      	movs	r3, #0
 80207c2:	61fb      	str	r3, [r7, #28]
 80207c4:	e012      	b.n	80207ec <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80207c6:	68ba      	ldr	r2, [r7, #8]
 80207c8:	69fb      	ldr	r3, [r7, #28]
 80207ca:	4413      	add	r3, r2
 80207cc:	7819      	ldrb	r1, [r3, #0]
 80207ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80207d0:	69fb      	ldr	r3, [r7, #28]
 80207d2:	4413      	add	r3, r2
 80207d4:	3334      	adds	r3, #52	@ 0x34
 80207d6:	460a      	mov	r2, r1
 80207d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80207da:	68ba      	ldr	r2, [r7, #8]
 80207dc:	69fb      	ldr	r3, [r7, #28]
 80207de:	4413      	add	r3, r2
 80207e0:	781b      	ldrb	r3, [r3, #0]
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d006      	beq.n	80207f4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80207e6:	69fb      	ldr	r3, [r7, #28]
 80207e8:	3301      	adds	r3, #1
 80207ea:	61fb      	str	r3, [r7, #28]
 80207ec:	69fb      	ldr	r3, [r7, #28]
 80207ee:	2b0f      	cmp	r3, #15
 80207f0:	d9e9      	bls.n	80207c6 <prvInitialiseNewTask+0x66>
 80207f2:	e000      	b.n	80207f6 <prvInitialiseNewTask+0x96>
			{
				break;
 80207f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80207f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80207f8:	2200      	movs	r2, #0
 80207fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80207fe:	e003      	b.n	8020808 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8020800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020802:	2200      	movs	r2, #0
 8020804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8020808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802080a:	2b37      	cmp	r3, #55	@ 0x37
 802080c:	d901      	bls.n	8020812 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 802080e:	2337      	movs	r3, #55	@ 0x37
 8020810:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8020812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020816:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8020818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802081a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802081c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 802081e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020820:	2200      	movs	r2, #0
 8020822:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8020824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020826:	3304      	adds	r3, #4
 8020828:	4618      	mov	r0, r3
 802082a:	f7fe fe6d 	bl	801f508 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 802082e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020830:	3318      	adds	r3, #24
 8020832:	4618      	mov	r0, r3
 8020834:	f7fe fe68 	bl	801f508 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8020838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802083a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802083c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802083e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020840:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8020844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020846:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8020848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802084a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802084c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 802084e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020850:	2200      	movs	r2, #0
 8020852:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8020854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020856:	2200      	movs	r2, #0
 8020858:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 802085c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802085e:	2200      	movs	r2, #0
 8020860:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8020864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020866:	3358      	adds	r3, #88	@ 0x58
 8020868:	224c      	movs	r2, #76	@ 0x4c
 802086a:	2100      	movs	r1, #0
 802086c:	4618      	mov	r0, r3
 802086e:	f004 fdc8 	bl	8025402 <memset>
 8020872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020874:	4a0c      	ldr	r2, [pc, #48]	@ (80208a8 <prvInitialiseNewTask+0x148>)
 8020876:	65da      	str	r2, [r3, #92]	@ 0x5c
 8020878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802087a:	4a0c      	ldr	r2, [pc, #48]	@ (80208ac <prvInitialiseNewTask+0x14c>)
 802087c:	661a      	str	r2, [r3, #96]	@ 0x60
 802087e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020880:	4a0b      	ldr	r2, [pc, #44]	@ (80208b0 <prvInitialiseNewTask+0x150>)
 8020882:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8020884:	683a      	ldr	r2, [r7, #0]
 8020886:	68f9      	ldr	r1, [r7, #12]
 8020888:	69b8      	ldr	r0, [r7, #24]
 802088a:	f001 fb71 	bl	8021f70 <pxPortInitialiseStack>
 802088e:	4602      	mov	r2, r0
 8020890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020892:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8020894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020896:	2b00      	cmp	r3, #0
 8020898:	d002      	beq.n	80208a0 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 802089a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802089c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802089e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80208a0:	bf00      	nop
 80208a2:	3720      	adds	r7, #32
 80208a4:	46bd      	mov	sp, r7
 80208a6:	bd80      	pop	{r7, pc}
 80208a8:	2402ab68 	.word	0x2402ab68
 80208ac:	2402abd0 	.word	0x2402abd0
 80208b0:	2402ac38 	.word	0x2402ac38

080208b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80208b4:	b580      	push	{r7, lr}
 80208b6:	b082      	sub	sp, #8
 80208b8:	af00      	add	r7, sp, #0
 80208ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80208bc:	f001 fc8c 	bl	80221d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80208c0:	4b2d      	ldr	r3, [pc, #180]	@ (8020978 <prvAddNewTaskToReadyList+0xc4>)
 80208c2:	681b      	ldr	r3, [r3, #0]
 80208c4:	3301      	adds	r3, #1
 80208c6:	4a2c      	ldr	r2, [pc, #176]	@ (8020978 <prvAddNewTaskToReadyList+0xc4>)
 80208c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80208ca:	4b2c      	ldr	r3, [pc, #176]	@ (802097c <prvAddNewTaskToReadyList+0xc8>)
 80208cc:	681b      	ldr	r3, [r3, #0]
 80208ce:	2b00      	cmp	r3, #0
 80208d0:	d109      	bne.n	80208e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80208d2:	4a2a      	ldr	r2, [pc, #168]	@ (802097c <prvAddNewTaskToReadyList+0xc8>)
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80208d8:	4b27      	ldr	r3, [pc, #156]	@ (8020978 <prvAddNewTaskToReadyList+0xc4>)
 80208da:	681b      	ldr	r3, [r3, #0]
 80208dc:	2b01      	cmp	r3, #1
 80208de:	d110      	bne.n	8020902 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80208e0:	f000 fcfe 	bl	80212e0 <prvInitialiseTaskLists>
 80208e4:	e00d      	b.n	8020902 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80208e6:	4b26      	ldr	r3, [pc, #152]	@ (8020980 <prvAddNewTaskToReadyList+0xcc>)
 80208e8:	681b      	ldr	r3, [r3, #0]
 80208ea:	2b00      	cmp	r3, #0
 80208ec:	d109      	bne.n	8020902 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80208ee:	4b23      	ldr	r3, [pc, #140]	@ (802097c <prvAddNewTaskToReadyList+0xc8>)
 80208f0:	681b      	ldr	r3, [r3, #0]
 80208f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80208f4:	687b      	ldr	r3, [r7, #4]
 80208f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80208f8:	429a      	cmp	r2, r3
 80208fa:	d802      	bhi.n	8020902 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80208fc:	4a1f      	ldr	r2, [pc, #124]	@ (802097c <prvAddNewTaskToReadyList+0xc8>)
 80208fe:	687b      	ldr	r3, [r7, #4]
 8020900:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8020902:	4b20      	ldr	r3, [pc, #128]	@ (8020984 <prvAddNewTaskToReadyList+0xd0>)
 8020904:	681b      	ldr	r3, [r3, #0]
 8020906:	3301      	adds	r3, #1
 8020908:	4a1e      	ldr	r2, [pc, #120]	@ (8020984 <prvAddNewTaskToReadyList+0xd0>)
 802090a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 802090c:	4b1d      	ldr	r3, [pc, #116]	@ (8020984 <prvAddNewTaskToReadyList+0xd0>)
 802090e:	681a      	ldr	r2, [r3, #0]
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020918:	4b1b      	ldr	r3, [pc, #108]	@ (8020988 <prvAddNewTaskToReadyList+0xd4>)
 802091a:	681b      	ldr	r3, [r3, #0]
 802091c:	429a      	cmp	r2, r3
 802091e:	d903      	bls.n	8020928 <prvAddNewTaskToReadyList+0x74>
 8020920:	687b      	ldr	r3, [r7, #4]
 8020922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020924:	4a18      	ldr	r2, [pc, #96]	@ (8020988 <prvAddNewTaskToReadyList+0xd4>)
 8020926:	6013      	str	r3, [r2, #0]
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802092c:	4613      	mov	r3, r2
 802092e:	009b      	lsls	r3, r3, #2
 8020930:	4413      	add	r3, r2
 8020932:	009b      	lsls	r3, r3, #2
 8020934:	4a15      	ldr	r2, [pc, #84]	@ (802098c <prvAddNewTaskToReadyList+0xd8>)
 8020936:	441a      	add	r2, r3
 8020938:	687b      	ldr	r3, [r7, #4]
 802093a:	3304      	adds	r3, #4
 802093c:	4619      	mov	r1, r3
 802093e:	4610      	mov	r0, r2
 8020940:	f7fe fdef 	bl	801f522 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8020944:	f001 fc7a 	bl	802223c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8020948:	4b0d      	ldr	r3, [pc, #52]	@ (8020980 <prvAddNewTaskToReadyList+0xcc>)
 802094a:	681b      	ldr	r3, [r3, #0]
 802094c:	2b00      	cmp	r3, #0
 802094e:	d00e      	beq.n	802096e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8020950:	4b0a      	ldr	r3, [pc, #40]	@ (802097c <prvAddNewTaskToReadyList+0xc8>)
 8020952:	681b      	ldr	r3, [r3, #0]
 8020954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802095a:	429a      	cmp	r2, r3
 802095c:	d207      	bcs.n	802096e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 802095e:	4b0c      	ldr	r3, [pc, #48]	@ (8020990 <prvAddNewTaskToReadyList+0xdc>)
 8020960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8020964:	601a      	str	r2, [r3, #0]
 8020966:	f3bf 8f4f 	dsb	sy
 802096a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802096e:	bf00      	nop
 8020970:	3708      	adds	r7, #8
 8020972:	46bd      	mov	sp, r7
 8020974:	bd80      	pop	{r7, pc}
 8020976:	bf00      	nop
 8020978:	24019400 	.word	0x24019400
 802097c:	24018f2c 	.word	0x24018f2c
 8020980:	2401940c 	.word	0x2401940c
 8020984:	2401941c 	.word	0x2401941c
 8020988:	24019408 	.word	0x24019408
 802098c:	24018f30 	.word	0x24018f30
 8020990:	e000ed04 	.word	0xe000ed04

08020994 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8020994:	b580      	push	{r7, lr}
 8020996:	b084      	sub	sp, #16
 8020998:	af00      	add	r7, sp, #0
 802099a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 802099c:	2300      	movs	r3, #0
 802099e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	2b00      	cmp	r3, #0
 80209a4:	d018      	beq.n	80209d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80209a6:	4b14      	ldr	r3, [pc, #80]	@ (80209f8 <vTaskDelay+0x64>)
 80209a8:	681b      	ldr	r3, [r3, #0]
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	d00b      	beq.n	80209c6 <vTaskDelay+0x32>
	__asm volatile
 80209ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80209b2:	f383 8811 	msr	BASEPRI, r3
 80209b6:	f3bf 8f6f 	isb	sy
 80209ba:	f3bf 8f4f 	dsb	sy
 80209be:	60bb      	str	r3, [r7, #8]
}
 80209c0:	bf00      	nop
 80209c2:	bf00      	nop
 80209c4:	e7fd      	b.n	80209c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80209c6:	f000 f88d 	bl	8020ae4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80209ca:	2100      	movs	r1, #0
 80209cc:	6878      	ldr	r0, [r7, #4]
 80209ce:	f000 ff01 	bl	80217d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80209d2:	f000 f895 	bl	8020b00 <xTaskResumeAll>
 80209d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80209d8:	68fb      	ldr	r3, [r7, #12]
 80209da:	2b00      	cmp	r3, #0
 80209dc:	d107      	bne.n	80209ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80209de:	4b07      	ldr	r3, [pc, #28]	@ (80209fc <vTaskDelay+0x68>)
 80209e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80209e4:	601a      	str	r2, [r3, #0]
 80209e6:	f3bf 8f4f 	dsb	sy
 80209ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80209ee:	bf00      	nop
 80209f0:	3710      	adds	r7, #16
 80209f2:	46bd      	mov	sp, r7
 80209f4:	bd80      	pop	{r7, pc}
 80209f6:	bf00      	nop
 80209f8:	24019428 	.word	0x24019428
 80209fc:	e000ed04 	.word	0xe000ed04

08020a00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8020a00:	b580      	push	{r7, lr}
 8020a02:	b08a      	sub	sp, #40	@ 0x28
 8020a04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8020a06:	2300      	movs	r3, #0
 8020a08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8020a0a:	2300      	movs	r3, #0
 8020a0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8020a0e:	463a      	mov	r2, r7
 8020a10:	1d39      	adds	r1, r7, #4
 8020a12:	f107 0308 	add.w	r3, r7, #8
 8020a16:	4618      	mov	r0, r3
 8020a18:	f7fe faae 	bl	801ef78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8020a1c:	6839      	ldr	r1, [r7, #0]
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	68ba      	ldr	r2, [r7, #8]
 8020a22:	9202      	str	r2, [sp, #8]
 8020a24:	9301      	str	r3, [sp, #4]
 8020a26:	2300      	movs	r3, #0
 8020a28:	9300      	str	r3, [sp, #0]
 8020a2a:	2300      	movs	r3, #0
 8020a2c:	460a      	mov	r2, r1
 8020a2e:	4925      	ldr	r1, [pc, #148]	@ (8020ac4 <vTaskStartScheduler+0xc4>)
 8020a30:	4825      	ldr	r0, [pc, #148]	@ (8020ac8 <vTaskStartScheduler+0xc8>)
 8020a32:	f7ff fdef 	bl	8020614 <xTaskCreateStatic>
 8020a36:	4603      	mov	r3, r0
 8020a38:	4a24      	ldr	r2, [pc, #144]	@ (8020acc <vTaskStartScheduler+0xcc>)
 8020a3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8020a3c:	4b23      	ldr	r3, [pc, #140]	@ (8020acc <vTaskStartScheduler+0xcc>)
 8020a3e:	681b      	ldr	r3, [r3, #0]
 8020a40:	2b00      	cmp	r3, #0
 8020a42:	d002      	beq.n	8020a4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8020a44:	2301      	movs	r3, #1
 8020a46:	617b      	str	r3, [r7, #20]
 8020a48:	e001      	b.n	8020a4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8020a4a:	2300      	movs	r3, #0
 8020a4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8020a4e:	697b      	ldr	r3, [r7, #20]
 8020a50:	2b01      	cmp	r3, #1
 8020a52:	d102      	bne.n	8020a5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8020a54:	f000 ff12 	bl	802187c <xTimerCreateTimerTask>
 8020a58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8020a5a:	697b      	ldr	r3, [r7, #20]
 8020a5c:	2b01      	cmp	r3, #1
 8020a5e:	d11d      	bne.n	8020a9c <vTaskStartScheduler+0x9c>
	__asm volatile
 8020a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020a64:	f383 8811 	msr	BASEPRI, r3
 8020a68:	f3bf 8f6f 	isb	sy
 8020a6c:	f3bf 8f4f 	dsb	sy
 8020a70:	613b      	str	r3, [r7, #16]
}
 8020a72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8020a74:	4b16      	ldr	r3, [pc, #88]	@ (8020ad0 <vTaskStartScheduler+0xd0>)
 8020a76:	681b      	ldr	r3, [r3, #0]
 8020a78:	3358      	adds	r3, #88	@ 0x58
 8020a7a:	4a16      	ldr	r2, [pc, #88]	@ (8020ad4 <vTaskStartScheduler+0xd4>)
 8020a7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8020a7e:	4b16      	ldr	r3, [pc, #88]	@ (8020ad8 <vTaskStartScheduler+0xd8>)
 8020a80:	f04f 32ff 	mov.w	r2, #4294967295
 8020a84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8020a86:	4b15      	ldr	r3, [pc, #84]	@ (8020adc <vTaskStartScheduler+0xdc>)
 8020a88:	2201      	movs	r2, #1
 8020a8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8020a8c:	4b14      	ldr	r3, [pc, #80]	@ (8020ae0 <vTaskStartScheduler+0xe0>)
 8020a8e:	2200      	movs	r2, #0
 8020a90:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8020a92:	f7e8 fe81 	bl	8009798 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8020a96:	f001 fafb 	bl	8022090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8020a9a:	e00f      	b.n	8020abc <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8020a9c:	697b      	ldr	r3, [r7, #20]
 8020a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020aa2:	d10b      	bne.n	8020abc <vTaskStartScheduler+0xbc>
	__asm volatile
 8020aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020aa8:	f383 8811 	msr	BASEPRI, r3
 8020aac:	f3bf 8f6f 	isb	sy
 8020ab0:	f3bf 8f4f 	dsb	sy
 8020ab4:	60fb      	str	r3, [r7, #12]
}
 8020ab6:	bf00      	nop
 8020ab8:	bf00      	nop
 8020aba:	e7fd      	b.n	8020ab8 <vTaskStartScheduler+0xb8>
}
 8020abc:	bf00      	nop
 8020abe:	3718      	adds	r7, #24
 8020ac0:	46bd      	mov	sp, r7
 8020ac2:	bd80      	pop	{r7, pc}
 8020ac4:	0802ade8 	.word	0x0802ade8
 8020ac8:	080212b1 	.word	0x080212b1
 8020acc:	24019424 	.word	0x24019424
 8020ad0:	24018f2c 	.word	0x24018f2c
 8020ad4:	240003a4 	.word	0x240003a4
 8020ad8:	24019420 	.word	0x24019420
 8020adc:	2401940c 	.word	0x2401940c
 8020ae0:	24019404 	.word	0x24019404

08020ae4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8020ae4:	b480      	push	{r7}
 8020ae6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8020ae8:	4b04      	ldr	r3, [pc, #16]	@ (8020afc <vTaskSuspendAll+0x18>)
 8020aea:	681b      	ldr	r3, [r3, #0]
 8020aec:	3301      	adds	r3, #1
 8020aee:	4a03      	ldr	r2, [pc, #12]	@ (8020afc <vTaskSuspendAll+0x18>)
 8020af0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8020af2:	bf00      	nop
 8020af4:	46bd      	mov	sp, r7
 8020af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020afa:	4770      	bx	lr
 8020afc:	24019428 	.word	0x24019428

08020b00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8020b00:	b580      	push	{r7, lr}
 8020b02:	b084      	sub	sp, #16
 8020b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8020b06:	2300      	movs	r3, #0
 8020b08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8020b0a:	2300      	movs	r3, #0
 8020b0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8020b0e:	4b42      	ldr	r3, [pc, #264]	@ (8020c18 <xTaskResumeAll+0x118>)
 8020b10:	681b      	ldr	r3, [r3, #0]
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	d10b      	bne.n	8020b2e <xTaskResumeAll+0x2e>
	__asm volatile
 8020b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020b1a:	f383 8811 	msr	BASEPRI, r3
 8020b1e:	f3bf 8f6f 	isb	sy
 8020b22:	f3bf 8f4f 	dsb	sy
 8020b26:	603b      	str	r3, [r7, #0]
}
 8020b28:	bf00      	nop
 8020b2a:	bf00      	nop
 8020b2c:	e7fd      	b.n	8020b2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8020b2e:	f001 fb53 	bl	80221d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8020b32:	4b39      	ldr	r3, [pc, #228]	@ (8020c18 <xTaskResumeAll+0x118>)
 8020b34:	681b      	ldr	r3, [r3, #0]
 8020b36:	3b01      	subs	r3, #1
 8020b38:	4a37      	ldr	r2, [pc, #220]	@ (8020c18 <xTaskResumeAll+0x118>)
 8020b3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8020b3c:	4b36      	ldr	r3, [pc, #216]	@ (8020c18 <xTaskResumeAll+0x118>)
 8020b3e:	681b      	ldr	r3, [r3, #0]
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	d162      	bne.n	8020c0a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8020b44:	4b35      	ldr	r3, [pc, #212]	@ (8020c1c <xTaskResumeAll+0x11c>)
 8020b46:	681b      	ldr	r3, [r3, #0]
 8020b48:	2b00      	cmp	r3, #0
 8020b4a:	d05e      	beq.n	8020c0a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8020b4c:	e02f      	b.n	8020bae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020b4e:	4b34      	ldr	r3, [pc, #208]	@ (8020c20 <xTaskResumeAll+0x120>)
 8020b50:	68db      	ldr	r3, [r3, #12]
 8020b52:	68db      	ldr	r3, [r3, #12]
 8020b54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8020b56:	68fb      	ldr	r3, [r7, #12]
 8020b58:	3318      	adds	r3, #24
 8020b5a:	4618      	mov	r0, r3
 8020b5c:	f7fe fd3e 	bl	801f5dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8020b60:	68fb      	ldr	r3, [r7, #12]
 8020b62:	3304      	adds	r3, #4
 8020b64:	4618      	mov	r0, r3
 8020b66:	f7fe fd39 	bl	801f5dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8020b6a:	68fb      	ldr	r3, [r7, #12]
 8020b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8020c24 <xTaskResumeAll+0x124>)
 8020b70:	681b      	ldr	r3, [r3, #0]
 8020b72:	429a      	cmp	r2, r3
 8020b74:	d903      	bls.n	8020b7e <xTaskResumeAll+0x7e>
 8020b76:	68fb      	ldr	r3, [r7, #12]
 8020b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8020c24 <xTaskResumeAll+0x124>)
 8020b7c:	6013      	str	r3, [r2, #0]
 8020b7e:	68fb      	ldr	r3, [r7, #12]
 8020b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020b82:	4613      	mov	r3, r2
 8020b84:	009b      	lsls	r3, r3, #2
 8020b86:	4413      	add	r3, r2
 8020b88:	009b      	lsls	r3, r3, #2
 8020b8a:	4a27      	ldr	r2, [pc, #156]	@ (8020c28 <xTaskResumeAll+0x128>)
 8020b8c:	441a      	add	r2, r3
 8020b8e:	68fb      	ldr	r3, [r7, #12]
 8020b90:	3304      	adds	r3, #4
 8020b92:	4619      	mov	r1, r3
 8020b94:	4610      	mov	r0, r2
 8020b96:	f7fe fcc4 	bl	801f522 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8020b9a:	68fb      	ldr	r3, [r7, #12]
 8020b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020b9e:	4b23      	ldr	r3, [pc, #140]	@ (8020c2c <xTaskResumeAll+0x12c>)
 8020ba0:	681b      	ldr	r3, [r3, #0]
 8020ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020ba4:	429a      	cmp	r2, r3
 8020ba6:	d302      	bcc.n	8020bae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8020ba8:	4b21      	ldr	r3, [pc, #132]	@ (8020c30 <xTaskResumeAll+0x130>)
 8020baa:	2201      	movs	r2, #1
 8020bac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8020bae:	4b1c      	ldr	r3, [pc, #112]	@ (8020c20 <xTaskResumeAll+0x120>)
 8020bb0:	681b      	ldr	r3, [r3, #0]
 8020bb2:	2b00      	cmp	r3, #0
 8020bb4:	d1cb      	bne.n	8020b4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8020bb6:	68fb      	ldr	r3, [r7, #12]
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	d001      	beq.n	8020bc0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8020bbc:	f000 fc34 	bl	8021428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8020bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8020c34 <xTaskResumeAll+0x134>)
 8020bc2:	681b      	ldr	r3, [r3, #0]
 8020bc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8020bc6:	687b      	ldr	r3, [r7, #4]
 8020bc8:	2b00      	cmp	r3, #0
 8020bca:	d010      	beq.n	8020bee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8020bcc:	f000 f858 	bl	8020c80 <xTaskIncrementTick>
 8020bd0:	4603      	mov	r3, r0
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	d002      	beq.n	8020bdc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8020bd6:	4b16      	ldr	r3, [pc, #88]	@ (8020c30 <xTaskResumeAll+0x130>)
 8020bd8:	2201      	movs	r2, #1
 8020bda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8020bdc:	687b      	ldr	r3, [r7, #4]
 8020bde:	3b01      	subs	r3, #1
 8020be0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8020be2:	687b      	ldr	r3, [r7, #4]
 8020be4:	2b00      	cmp	r3, #0
 8020be6:	d1f1      	bne.n	8020bcc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8020be8:	4b12      	ldr	r3, [pc, #72]	@ (8020c34 <xTaskResumeAll+0x134>)
 8020bea:	2200      	movs	r2, #0
 8020bec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8020bee:	4b10      	ldr	r3, [pc, #64]	@ (8020c30 <xTaskResumeAll+0x130>)
 8020bf0:	681b      	ldr	r3, [r3, #0]
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	d009      	beq.n	8020c0a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8020bf6:	2301      	movs	r3, #1
 8020bf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8020bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8020c38 <xTaskResumeAll+0x138>)
 8020bfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8020c00:	601a      	str	r2, [r3, #0]
 8020c02:	f3bf 8f4f 	dsb	sy
 8020c06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8020c0a:	f001 fb17 	bl	802223c <vPortExitCritical>

	return xAlreadyYielded;
 8020c0e:	68bb      	ldr	r3, [r7, #8]
}
 8020c10:	4618      	mov	r0, r3
 8020c12:	3710      	adds	r7, #16
 8020c14:	46bd      	mov	sp, r7
 8020c16:	bd80      	pop	{r7, pc}
 8020c18:	24019428 	.word	0x24019428
 8020c1c:	24019400 	.word	0x24019400
 8020c20:	240193c0 	.word	0x240193c0
 8020c24:	24019408 	.word	0x24019408
 8020c28:	24018f30 	.word	0x24018f30
 8020c2c:	24018f2c 	.word	0x24018f2c
 8020c30:	24019414 	.word	0x24019414
 8020c34:	24019410 	.word	0x24019410
 8020c38:	e000ed04 	.word	0xe000ed04

08020c3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8020c3c:	b480      	push	{r7}
 8020c3e:	b083      	sub	sp, #12
 8020c40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8020c42:	4b05      	ldr	r3, [pc, #20]	@ (8020c58 <xTaskGetTickCount+0x1c>)
 8020c44:	681b      	ldr	r3, [r3, #0]
 8020c46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8020c48:	687b      	ldr	r3, [r7, #4]
}
 8020c4a:	4618      	mov	r0, r3
 8020c4c:	370c      	adds	r7, #12
 8020c4e:	46bd      	mov	sp, r7
 8020c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c54:	4770      	bx	lr
 8020c56:	bf00      	nop
 8020c58:	24019404 	.word	0x24019404

08020c5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8020c5c:	b580      	push	{r7, lr}
 8020c5e:	b082      	sub	sp, #8
 8020c60:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8020c62:	f001 fb99 	bl	8022398 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8020c66:	2300      	movs	r3, #0
 8020c68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8020c6a:	4b04      	ldr	r3, [pc, #16]	@ (8020c7c <xTaskGetTickCountFromISR+0x20>)
 8020c6c:	681b      	ldr	r3, [r3, #0]
 8020c6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020c70:	683b      	ldr	r3, [r7, #0]
}
 8020c72:	4618      	mov	r0, r3
 8020c74:	3708      	adds	r7, #8
 8020c76:	46bd      	mov	sp, r7
 8020c78:	bd80      	pop	{r7, pc}
 8020c7a:	bf00      	nop
 8020c7c:	24019404 	.word	0x24019404

08020c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8020c80:	b580      	push	{r7, lr}
 8020c82:	b086      	sub	sp, #24
 8020c84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8020c86:	2300      	movs	r3, #0
 8020c88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8020c8a:	4b4f      	ldr	r3, [pc, #316]	@ (8020dc8 <xTaskIncrementTick+0x148>)
 8020c8c:	681b      	ldr	r3, [r3, #0]
 8020c8e:	2b00      	cmp	r3, #0
 8020c90:	f040 8090 	bne.w	8020db4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8020c94:	4b4d      	ldr	r3, [pc, #308]	@ (8020dcc <xTaskIncrementTick+0x14c>)
 8020c96:	681b      	ldr	r3, [r3, #0]
 8020c98:	3301      	adds	r3, #1
 8020c9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8020c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8020dcc <xTaskIncrementTick+0x14c>)
 8020c9e:	693b      	ldr	r3, [r7, #16]
 8020ca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8020ca2:	693b      	ldr	r3, [r7, #16]
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	d121      	bne.n	8020cec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8020ca8:	4b49      	ldr	r3, [pc, #292]	@ (8020dd0 <xTaskIncrementTick+0x150>)
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	681b      	ldr	r3, [r3, #0]
 8020cae:	2b00      	cmp	r3, #0
 8020cb0:	d00b      	beq.n	8020cca <xTaskIncrementTick+0x4a>
	__asm volatile
 8020cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020cb6:	f383 8811 	msr	BASEPRI, r3
 8020cba:	f3bf 8f6f 	isb	sy
 8020cbe:	f3bf 8f4f 	dsb	sy
 8020cc2:	603b      	str	r3, [r7, #0]
}
 8020cc4:	bf00      	nop
 8020cc6:	bf00      	nop
 8020cc8:	e7fd      	b.n	8020cc6 <xTaskIncrementTick+0x46>
 8020cca:	4b41      	ldr	r3, [pc, #260]	@ (8020dd0 <xTaskIncrementTick+0x150>)
 8020ccc:	681b      	ldr	r3, [r3, #0]
 8020cce:	60fb      	str	r3, [r7, #12]
 8020cd0:	4b40      	ldr	r3, [pc, #256]	@ (8020dd4 <xTaskIncrementTick+0x154>)
 8020cd2:	681b      	ldr	r3, [r3, #0]
 8020cd4:	4a3e      	ldr	r2, [pc, #248]	@ (8020dd0 <xTaskIncrementTick+0x150>)
 8020cd6:	6013      	str	r3, [r2, #0]
 8020cd8:	4a3e      	ldr	r2, [pc, #248]	@ (8020dd4 <xTaskIncrementTick+0x154>)
 8020cda:	68fb      	ldr	r3, [r7, #12]
 8020cdc:	6013      	str	r3, [r2, #0]
 8020cde:	4b3e      	ldr	r3, [pc, #248]	@ (8020dd8 <xTaskIncrementTick+0x158>)
 8020ce0:	681b      	ldr	r3, [r3, #0]
 8020ce2:	3301      	adds	r3, #1
 8020ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8020dd8 <xTaskIncrementTick+0x158>)
 8020ce6:	6013      	str	r3, [r2, #0]
 8020ce8:	f000 fb9e 	bl	8021428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8020cec:	4b3b      	ldr	r3, [pc, #236]	@ (8020ddc <xTaskIncrementTick+0x15c>)
 8020cee:	681b      	ldr	r3, [r3, #0]
 8020cf0:	693a      	ldr	r2, [r7, #16]
 8020cf2:	429a      	cmp	r2, r3
 8020cf4:	d349      	bcc.n	8020d8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8020cf6:	4b36      	ldr	r3, [pc, #216]	@ (8020dd0 <xTaskIncrementTick+0x150>)
 8020cf8:	681b      	ldr	r3, [r3, #0]
 8020cfa:	681b      	ldr	r3, [r3, #0]
 8020cfc:	2b00      	cmp	r3, #0
 8020cfe:	d104      	bne.n	8020d0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020d00:	4b36      	ldr	r3, [pc, #216]	@ (8020ddc <xTaskIncrementTick+0x15c>)
 8020d02:	f04f 32ff 	mov.w	r2, #4294967295
 8020d06:	601a      	str	r2, [r3, #0]
					break;
 8020d08:	e03f      	b.n	8020d8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020d0a:	4b31      	ldr	r3, [pc, #196]	@ (8020dd0 <xTaskIncrementTick+0x150>)
 8020d0c:	681b      	ldr	r3, [r3, #0]
 8020d0e:	68db      	ldr	r3, [r3, #12]
 8020d10:	68db      	ldr	r3, [r3, #12]
 8020d12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8020d14:	68bb      	ldr	r3, [r7, #8]
 8020d16:	685b      	ldr	r3, [r3, #4]
 8020d18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8020d1a:	693a      	ldr	r2, [r7, #16]
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	429a      	cmp	r2, r3
 8020d20:	d203      	bcs.n	8020d2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8020d22:	4a2e      	ldr	r2, [pc, #184]	@ (8020ddc <xTaskIncrementTick+0x15c>)
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8020d28:	e02f      	b.n	8020d8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8020d2a:	68bb      	ldr	r3, [r7, #8]
 8020d2c:	3304      	adds	r3, #4
 8020d2e:	4618      	mov	r0, r3
 8020d30:	f7fe fc54 	bl	801f5dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8020d34:	68bb      	ldr	r3, [r7, #8]
 8020d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	d004      	beq.n	8020d46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8020d3c:	68bb      	ldr	r3, [r7, #8]
 8020d3e:	3318      	adds	r3, #24
 8020d40:	4618      	mov	r0, r3
 8020d42:	f7fe fc4b 	bl	801f5dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8020d46:	68bb      	ldr	r3, [r7, #8]
 8020d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020d4a:	4b25      	ldr	r3, [pc, #148]	@ (8020de0 <xTaskIncrementTick+0x160>)
 8020d4c:	681b      	ldr	r3, [r3, #0]
 8020d4e:	429a      	cmp	r2, r3
 8020d50:	d903      	bls.n	8020d5a <xTaskIncrementTick+0xda>
 8020d52:	68bb      	ldr	r3, [r7, #8]
 8020d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020d56:	4a22      	ldr	r2, [pc, #136]	@ (8020de0 <xTaskIncrementTick+0x160>)
 8020d58:	6013      	str	r3, [r2, #0]
 8020d5a:	68bb      	ldr	r3, [r7, #8]
 8020d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020d5e:	4613      	mov	r3, r2
 8020d60:	009b      	lsls	r3, r3, #2
 8020d62:	4413      	add	r3, r2
 8020d64:	009b      	lsls	r3, r3, #2
 8020d66:	4a1f      	ldr	r2, [pc, #124]	@ (8020de4 <xTaskIncrementTick+0x164>)
 8020d68:	441a      	add	r2, r3
 8020d6a:	68bb      	ldr	r3, [r7, #8]
 8020d6c:	3304      	adds	r3, #4
 8020d6e:	4619      	mov	r1, r3
 8020d70:	4610      	mov	r0, r2
 8020d72:	f7fe fbd6 	bl	801f522 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8020d76:	68bb      	ldr	r3, [r7, #8]
 8020d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8020de8 <xTaskIncrementTick+0x168>)
 8020d7c:	681b      	ldr	r3, [r3, #0]
 8020d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020d80:	429a      	cmp	r2, r3
 8020d82:	d3b8      	bcc.n	8020cf6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8020d84:	2301      	movs	r3, #1
 8020d86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8020d88:	e7b5      	b.n	8020cf6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8020d8a:	4b17      	ldr	r3, [pc, #92]	@ (8020de8 <xTaskIncrementTick+0x168>)
 8020d8c:	681b      	ldr	r3, [r3, #0]
 8020d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020d90:	4914      	ldr	r1, [pc, #80]	@ (8020de4 <xTaskIncrementTick+0x164>)
 8020d92:	4613      	mov	r3, r2
 8020d94:	009b      	lsls	r3, r3, #2
 8020d96:	4413      	add	r3, r2
 8020d98:	009b      	lsls	r3, r3, #2
 8020d9a:	440b      	add	r3, r1
 8020d9c:	681b      	ldr	r3, [r3, #0]
 8020d9e:	2b01      	cmp	r3, #1
 8020da0:	d901      	bls.n	8020da6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8020da2:	2301      	movs	r3, #1
 8020da4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8020da6:	4b11      	ldr	r3, [pc, #68]	@ (8020dec <xTaskIncrementTick+0x16c>)
 8020da8:	681b      	ldr	r3, [r3, #0]
 8020daa:	2b00      	cmp	r3, #0
 8020dac:	d007      	beq.n	8020dbe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8020dae:	2301      	movs	r3, #1
 8020db0:	617b      	str	r3, [r7, #20]
 8020db2:	e004      	b.n	8020dbe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8020db4:	4b0e      	ldr	r3, [pc, #56]	@ (8020df0 <xTaskIncrementTick+0x170>)
 8020db6:	681b      	ldr	r3, [r3, #0]
 8020db8:	3301      	adds	r3, #1
 8020dba:	4a0d      	ldr	r2, [pc, #52]	@ (8020df0 <xTaskIncrementTick+0x170>)
 8020dbc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8020dbe:	697b      	ldr	r3, [r7, #20]
}
 8020dc0:	4618      	mov	r0, r3
 8020dc2:	3718      	adds	r7, #24
 8020dc4:	46bd      	mov	sp, r7
 8020dc6:	bd80      	pop	{r7, pc}
 8020dc8:	24019428 	.word	0x24019428
 8020dcc:	24019404 	.word	0x24019404
 8020dd0:	240193b8 	.word	0x240193b8
 8020dd4:	240193bc 	.word	0x240193bc
 8020dd8:	24019418 	.word	0x24019418
 8020ddc:	24019420 	.word	0x24019420
 8020de0:	24019408 	.word	0x24019408
 8020de4:	24018f30 	.word	0x24018f30
 8020de8:	24018f2c 	.word	0x24018f2c
 8020dec:	24019414 	.word	0x24019414
 8020df0:	24019410 	.word	0x24019410

08020df4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8020df4:	b580      	push	{r7, lr}
 8020df6:	b084      	sub	sp, #16
 8020df8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8020dfa:	4b36      	ldr	r3, [pc, #216]	@ (8020ed4 <vTaskSwitchContext+0xe0>)
 8020dfc:	681b      	ldr	r3, [r3, #0]
 8020dfe:	2b00      	cmp	r3, #0
 8020e00:	d003      	beq.n	8020e0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8020e02:	4b35      	ldr	r3, [pc, #212]	@ (8020ed8 <vTaskSwitchContext+0xe4>)
 8020e04:	2201      	movs	r2, #1
 8020e06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8020e08:	e060      	b.n	8020ecc <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8020e0a:	4b33      	ldr	r3, [pc, #204]	@ (8020ed8 <vTaskSwitchContext+0xe4>)
 8020e0c:	2200      	movs	r2, #0
 8020e0e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8020e10:	f7e8 fcc9 	bl	80097a6 <getRunTimeCounterValue>
 8020e14:	4603      	mov	r3, r0
 8020e16:	4a31      	ldr	r2, [pc, #196]	@ (8020edc <vTaskSwitchContext+0xe8>)
 8020e18:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8020e1a:	4b30      	ldr	r3, [pc, #192]	@ (8020edc <vTaskSwitchContext+0xe8>)
 8020e1c:	681a      	ldr	r2, [r3, #0]
 8020e1e:	4b30      	ldr	r3, [pc, #192]	@ (8020ee0 <vTaskSwitchContext+0xec>)
 8020e20:	681b      	ldr	r3, [r3, #0]
 8020e22:	429a      	cmp	r2, r3
 8020e24:	d909      	bls.n	8020e3a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8020e26:	4b2f      	ldr	r3, [pc, #188]	@ (8020ee4 <vTaskSwitchContext+0xf0>)
 8020e28:	681b      	ldr	r3, [r3, #0]
 8020e2a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8020e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8020edc <vTaskSwitchContext+0xe8>)
 8020e2e:	6810      	ldr	r0, [r2, #0]
 8020e30:	4a2b      	ldr	r2, [pc, #172]	@ (8020ee0 <vTaskSwitchContext+0xec>)
 8020e32:	6812      	ldr	r2, [r2, #0]
 8020e34:	1a82      	subs	r2, r0, r2
 8020e36:	440a      	add	r2, r1
 8020e38:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8020e3a:	4b28      	ldr	r3, [pc, #160]	@ (8020edc <vTaskSwitchContext+0xe8>)
 8020e3c:	681b      	ldr	r3, [r3, #0]
 8020e3e:	4a28      	ldr	r2, [pc, #160]	@ (8020ee0 <vTaskSwitchContext+0xec>)
 8020e40:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020e42:	4b29      	ldr	r3, [pc, #164]	@ (8020ee8 <vTaskSwitchContext+0xf4>)
 8020e44:	681b      	ldr	r3, [r3, #0]
 8020e46:	60fb      	str	r3, [r7, #12]
 8020e48:	e011      	b.n	8020e6e <vTaskSwitchContext+0x7a>
 8020e4a:	68fb      	ldr	r3, [r7, #12]
 8020e4c:	2b00      	cmp	r3, #0
 8020e4e:	d10b      	bne.n	8020e68 <vTaskSwitchContext+0x74>
	__asm volatile
 8020e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020e54:	f383 8811 	msr	BASEPRI, r3
 8020e58:	f3bf 8f6f 	isb	sy
 8020e5c:	f3bf 8f4f 	dsb	sy
 8020e60:	607b      	str	r3, [r7, #4]
}
 8020e62:	bf00      	nop
 8020e64:	bf00      	nop
 8020e66:	e7fd      	b.n	8020e64 <vTaskSwitchContext+0x70>
 8020e68:	68fb      	ldr	r3, [r7, #12]
 8020e6a:	3b01      	subs	r3, #1
 8020e6c:	60fb      	str	r3, [r7, #12]
 8020e6e:	491f      	ldr	r1, [pc, #124]	@ (8020eec <vTaskSwitchContext+0xf8>)
 8020e70:	68fa      	ldr	r2, [r7, #12]
 8020e72:	4613      	mov	r3, r2
 8020e74:	009b      	lsls	r3, r3, #2
 8020e76:	4413      	add	r3, r2
 8020e78:	009b      	lsls	r3, r3, #2
 8020e7a:	440b      	add	r3, r1
 8020e7c:	681b      	ldr	r3, [r3, #0]
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	d0e3      	beq.n	8020e4a <vTaskSwitchContext+0x56>
 8020e82:	68fa      	ldr	r2, [r7, #12]
 8020e84:	4613      	mov	r3, r2
 8020e86:	009b      	lsls	r3, r3, #2
 8020e88:	4413      	add	r3, r2
 8020e8a:	009b      	lsls	r3, r3, #2
 8020e8c:	4a17      	ldr	r2, [pc, #92]	@ (8020eec <vTaskSwitchContext+0xf8>)
 8020e8e:	4413      	add	r3, r2
 8020e90:	60bb      	str	r3, [r7, #8]
 8020e92:	68bb      	ldr	r3, [r7, #8]
 8020e94:	685b      	ldr	r3, [r3, #4]
 8020e96:	685a      	ldr	r2, [r3, #4]
 8020e98:	68bb      	ldr	r3, [r7, #8]
 8020e9a:	605a      	str	r2, [r3, #4]
 8020e9c:	68bb      	ldr	r3, [r7, #8]
 8020e9e:	685a      	ldr	r2, [r3, #4]
 8020ea0:	68bb      	ldr	r3, [r7, #8]
 8020ea2:	3308      	adds	r3, #8
 8020ea4:	429a      	cmp	r2, r3
 8020ea6:	d104      	bne.n	8020eb2 <vTaskSwitchContext+0xbe>
 8020ea8:	68bb      	ldr	r3, [r7, #8]
 8020eaa:	685b      	ldr	r3, [r3, #4]
 8020eac:	685a      	ldr	r2, [r3, #4]
 8020eae:	68bb      	ldr	r3, [r7, #8]
 8020eb0:	605a      	str	r2, [r3, #4]
 8020eb2:	68bb      	ldr	r3, [r7, #8]
 8020eb4:	685b      	ldr	r3, [r3, #4]
 8020eb6:	68db      	ldr	r3, [r3, #12]
 8020eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8020ee4 <vTaskSwitchContext+0xf0>)
 8020eba:	6013      	str	r3, [r2, #0]
 8020ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8020ee8 <vTaskSwitchContext+0xf4>)
 8020ebe:	68fb      	ldr	r3, [r7, #12]
 8020ec0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8020ec2:	4b08      	ldr	r3, [pc, #32]	@ (8020ee4 <vTaskSwitchContext+0xf0>)
 8020ec4:	681b      	ldr	r3, [r3, #0]
 8020ec6:	3358      	adds	r3, #88	@ 0x58
 8020ec8:	4a09      	ldr	r2, [pc, #36]	@ (8020ef0 <vTaskSwitchContext+0xfc>)
 8020eca:	6013      	str	r3, [r2, #0]
}
 8020ecc:	bf00      	nop
 8020ece:	3710      	adds	r7, #16
 8020ed0:	46bd      	mov	sp, r7
 8020ed2:	bd80      	pop	{r7, pc}
 8020ed4:	24019428 	.word	0x24019428
 8020ed8:	24019414 	.word	0x24019414
 8020edc:	24019430 	.word	0x24019430
 8020ee0:	2401942c 	.word	0x2401942c
 8020ee4:	24018f2c 	.word	0x24018f2c
 8020ee8:	24019408 	.word	0x24019408
 8020eec:	24018f30 	.word	0x24018f30
 8020ef0:	240003a4 	.word	0x240003a4

08020ef4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8020ef4:	b580      	push	{r7, lr}
 8020ef6:	b084      	sub	sp, #16
 8020ef8:	af00      	add	r7, sp, #0
 8020efa:	6078      	str	r0, [r7, #4]
 8020efc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	d10b      	bne.n	8020f1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8020f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020f08:	f383 8811 	msr	BASEPRI, r3
 8020f0c:	f3bf 8f6f 	isb	sy
 8020f10:	f3bf 8f4f 	dsb	sy
 8020f14:	60fb      	str	r3, [r7, #12]
}
 8020f16:	bf00      	nop
 8020f18:	bf00      	nop
 8020f1a:	e7fd      	b.n	8020f18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8020f1c:	4b07      	ldr	r3, [pc, #28]	@ (8020f3c <vTaskPlaceOnEventList+0x48>)
 8020f1e:	681b      	ldr	r3, [r3, #0]
 8020f20:	3318      	adds	r3, #24
 8020f22:	4619      	mov	r1, r3
 8020f24:	6878      	ldr	r0, [r7, #4]
 8020f26:	f7fe fb20 	bl	801f56a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8020f2a:	2101      	movs	r1, #1
 8020f2c:	6838      	ldr	r0, [r7, #0]
 8020f2e:	f000 fc51 	bl	80217d4 <prvAddCurrentTaskToDelayedList>
}
 8020f32:	bf00      	nop
 8020f34:	3710      	adds	r7, #16
 8020f36:	46bd      	mov	sp, r7
 8020f38:	bd80      	pop	{r7, pc}
 8020f3a:	bf00      	nop
 8020f3c:	24018f2c 	.word	0x24018f2c

08020f40 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8020f40:	b580      	push	{r7, lr}
 8020f42:	b086      	sub	sp, #24
 8020f44:	af00      	add	r7, sp, #0
 8020f46:	60f8      	str	r0, [r7, #12]
 8020f48:	60b9      	str	r1, [r7, #8]
 8020f4a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8020f4c:	68fb      	ldr	r3, [r7, #12]
 8020f4e:	2b00      	cmp	r3, #0
 8020f50:	d10b      	bne.n	8020f6a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8020f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020f56:	f383 8811 	msr	BASEPRI, r3
 8020f5a:	f3bf 8f6f 	isb	sy
 8020f5e:	f3bf 8f4f 	dsb	sy
 8020f62:	617b      	str	r3, [r7, #20]
}
 8020f64:	bf00      	nop
 8020f66:	bf00      	nop
 8020f68:	e7fd      	b.n	8020f66 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8020f6a:	4b12      	ldr	r3, [pc, #72]	@ (8020fb4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8020f6c:	681b      	ldr	r3, [r3, #0]
 8020f6e:	2b00      	cmp	r3, #0
 8020f70:	d10b      	bne.n	8020f8a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8020f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020f76:	f383 8811 	msr	BASEPRI, r3
 8020f7a:	f3bf 8f6f 	isb	sy
 8020f7e:	f3bf 8f4f 	dsb	sy
 8020f82:	613b      	str	r3, [r7, #16]
}
 8020f84:	bf00      	nop
 8020f86:	bf00      	nop
 8020f88:	e7fd      	b.n	8020f86 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8020f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8020fb8 <vTaskPlaceOnUnorderedEventList+0x78>)
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	68ba      	ldr	r2, [r7, #8]
 8020f90:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8020f94:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8020f96:	4b08      	ldr	r3, [pc, #32]	@ (8020fb8 <vTaskPlaceOnUnorderedEventList+0x78>)
 8020f98:	681b      	ldr	r3, [r3, #0]
 8020f9a:	3318      	adds	r3, #24
 8020f9c:	4619      	mov	r1, r3
 8020f9e:	68f8      	ldr	r0, [r7, #12]
 8020fa0:	f7fe fabf 	bl	801f522 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8020fa4:	2101      	movs	r1, #1
 8020fa6:	6878      	ldr	r0, [r7, #4]
 8020fa8:	f000 fc14 	bl	80217d4 <prvAddCurrentTaskToDelayedList>
}
 8020fac:	bf00      	nop
 8020fae:	3718      	adds	r7, #24
 8020fb0:	46bd      	mov	sp, r7
 8020fb2:	bd80      	pop	{r7, pc}
 8020fb4:	24019428 	.word	0x24019428
 8020fb8:	24018f2c 	.word	0x24018f2c

08020fbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8020fbc:	b580      	push	{r7, lr}
 8020fbe:	b086      	sub	sp, #24
 8020fc0:	af00      	add	r7, sp, #0
 8020fc2:	60f8      	str	r0, [r7, #12]
 8020fc4:	60b9      	str	r1, [r7, #8]
 8020fc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8020fc8:	68fb      	ldr	r3, [r7, #12]
 8020fca:	2b00      	cmp	r3, #0
 8020fcc:	d10b      	bne.n	8020fe6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8020fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020fd2:	f383 8811 	msr	BASEPRI, r3
 8020fd6:	f3bf 8f6f 	isb	sy
 8020fda:	f3bf 8f4f 	dsb	sy
 8020fde:	617b      	str	r3, [r7, #20]
}
 8020fe0:	bf00      	nop
 8020fe2:	bf00      	nop
 8020fe4:	e7fd      	b.n	8020fe2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8020fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8021010 <vTaskPlaceOnEventListRestricted+0x54>)
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	3318      	adds	r3, #24
 8020fec:	4619      	mov	r1, r3
 8020fee:	68f8      	ldr	r0, [r7, #12]
 8020ff0:	f7fe fa97 	bl	801f522 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	d002      	beq.n	8021000 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8020ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8020ffe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8021000:	6879      	ldr	r1, [r7, #4]
 8021002:	68b8      	ldr	r0, [r7, #8]
 8021004:	f000 fbe6 	bl	80217d4 <prvAddCurrentTaskToDelayedList>
	}
 8021008:	bf00      	nop
 802100a:	3718      	adds	r7, #24
 802100c:	46bd      	mov	sp, r7
 802100e:	bd80      	pop	{r7, pc}
 8021010:	24018f2c 	.word	0x24018f2c

08021014 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8021014:	b580      	push	{r7, lr}
 8021016:	b086      	sub	sp, #24
 8021018:	af00      	add	r7, sp, #0
 802101a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802101c:	687b      	ldr	r3, [r7, #4]
 802101e:	68db      	ldr	r3, [r3, #12]
 8021020:	68db      	ldr	r3, [r3, #12]
 8021022:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8021024:	693b      	ldr	r3, [r7, #16]
 8021026:	2b00      	cmp	r3, #0
 8021028:	d10b      	bne.n	8021042 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 802102a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802102e:	f383 8811 	msr	BASEPRI, r3
 8021032:	f3bf 8f6f 	isb	sy
 8021036:	f3bf 8f4f 	dsb	sy
 802103a:	60fb      	str	r3, [r7, #12]
}
 802103c:	bf00      	nop
 802103e:	bf00      	nop
 8021040:	e7fd      	b.n	802103e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8021042:	693b      	ldr	r3, [r7, #16]
 8021044:	3318      	adds	r3, #24
 8021046:	4618      	mov	r0, r3
 8021048:	f7fe fac8 	bl	801f5dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802104c:	4b1d      	ldr	r3, [pc, #116]	@ (80210c4 <xTaskRemoveFromEventList+0xb0>)
 802104e:	681b      	ldr	r3, [r3, #0]
 8021050:	2b00      	cmp	r3, #0
 8021052:	d11d      	bne.n	8021090 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8021054:	693b      	ldr	r3, [r7, #16]
 8021056:	3304      	adds	r3, #4
 8021058:	4618      	mov	r0, r3
 802105a:	f7fe fabf 	bl	801f5dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 802105e:	693b      	ldr	r3, [r7, #16]
 8021060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021062:	4b19      	ldr	r3, [pc, #100]	@ (80210c8 <xTaskRemoveFromEventList+0xb4>)
 8021064:	681b      	ldr	r3, [r3, #0]
 8021066:	429a      	cmp	r2, r3
 8021068:	d903      	bls.n	8021072 <xTaskRemoveFromEventList+0x5e>
 802106a:	693b      	ldr	r3, [r7, #16]
 802106c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802106e:	4a16      	ldr	r2, [pc, #88]	@ (80210c8 <xTaskRemoveFromEventList+0xb4>)
 8021070:	6013      	str	r3, [r2, #0]
 8021072:	693b      	ldr	r3, [r7, #16]
 8021074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021076:	4613      	mov	r3, r2
 8021078:	009b      	lsls	r3, r3, #2
 802107a:	4413      	add	r3, r2
 802107c:	009b      	lsls	r3, r3, #2
 802107e:	4a13      	ldr	r2, [pc, #76]	@ (80210cc <xTaskRemoveFromEventList+0xb8>)
 8021080:	441a      	add	r2, r3
 8021082:	693b      	ldr	r3, [r7, #16]
 8021084:	3304      	adds	r3, #4
 8021086:	4619      	mov	r1, r3
 8021088:	4610      	mov	r0, r2
 802108a:	f7fe fa4a 	bl	801f522 <vListInsertEnd>
 802108e:	e005      	b.n	802109c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8021090:	693b      	ldr	r3, [r7, #16]
 8021092:	3318      	adds	r3, #24
 8021094:	4619      	mov	r1, r3
 8021096:	480e      	ldr	r0, [pc, #56]	@ (80210d0 <xTaskRemoveFromEventList+0xbc>)
 8021098:	f7fe fa43 	bl	801f522 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 802109c:	693b      	ldr	r3, [r7, #16]
 802109e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80210a0:	4b0c      	ldr	r3, [pc, #48]	@ (80210d4 <xTaskRemoveFromEventList+0xc0>)
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80210a6:	429a      	cmp	r2, r3
 80210a8:	d905      	bls.n	80210b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80210aa:	2301      	movs	r3, #1
 80210ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80210ae:	4b0a      	ldr	r3, [pc, #40]	@ (80210d8 <xTaskRemoveFromEventList+0xc4>)
 80210b0:	2201      	movs	r2, #1
 80210b2:	601a      	str	r2, [r3, #0]
 80210b4:	e001      	b.n	80210ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80210b6:	2300      	movs	r3, #0
 80210b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80210ba:	697b      	ldr	r3, [r7, #20]
}
 80210bc:	4618      	mov	r0, r3
 80210be:	3718      	adds	r7, #24
 80210c0:	46bd      	mov	sp, r7
 80210c2:	bd80      	pop	{r7, pc}
 80210c4:	24019428 	.word	0x24019428
 80210c8:	24019408 	.word	0x24019408
 80210cc:	24018f30 	.word	0x24018f30
 80210d0:	240193c0 	.word	0x240193c0
 80210d4:	24018f2c 	.word	0x24018f2c
 80210d8:	24019414 	.word	0x24019414

080210dc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80210dc:	b580      	push	{r7, lr}
 80210de:	b086      	sub	sp, #24
 80210e0:	af00      	add	r7, sp, #0
 80210e2:	6078      	str	r0, [r7, #4]
 80210e4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80210e6:	4b2a      	ldr	r3, [pc, #168]	@ (8021190 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80210e8:	681b      	ldr	r3, [r3, #0]
 80210ea:	2b00      	cmp	r3, #0
 80210ec:	d10b      	bne.n	8021106 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80210ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80210f2:	f383 8811 	msr	BASEPRI, r3
 80210f6:	f3bf 8f6f 	isb	sy
 80210fa:	f3bf 8f4f 	dsb	sy
 80210fe:	613b      	str	r3, [r7, #16]
}
 8021100:	bf00      	nop
 8021102:	bf00      	nop
 8021104:	e7fd      	b.n	8021102 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8021106:	683b      	ldr	r3, [r7, #0]
 8021108:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 802110c:	687b      	ldr	r3, [r7, #4]
 802110e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021110:	687b      	ldr	r3, [r7, #4]
 8021112:	68db      	ldr	r3, [r3, #12]
 8021114:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8021116:	697b      	ldr	r3, [r7, #20]
 8021118:	2b00      	cmp	r3, #0
 802111a:	d10b      	bne.n	8021134 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 802111c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021120:	f383 8811 	msr	BASEPRI, r3
 8021124:	f3bf 8f6f 	isb	sy
 8021128:	f3bf 8f4f 	dsb	sy
 802112c:	60fb      	str	r3, [r7, #12]
}
 802112e:	bf00      	nop
 8021130:	bf00      	nop
 8021132:	e7fd      	b.n	8021130 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8021134:	6878      	ldr	r0, [r7, #4]
 8021136:	f7fe fa51 	bl	801f5dc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802113a:	697b      	ldr	r3, [r7, #20]
 802113c:	3304      	adds	r3, #4
 802113e:	4618      	mov	r0, r3
 8021140:	f7fe fa4c 	bl	801f5dc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8021144:	697b      	ldr	r3, [r7, #20]
 8021146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021148:	4b12      	ldr	r3, [pc, #72]	@ (8021194 <vTaskRemoveFromUnorderedEventList+0xb8>)
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	429a      	cmp	r2, r3
 802114e:	d903      	bls.n	8021158 <vTaskRemoveFromUnorderedEventList+0x7c>
 8021150:	697b      	ldr	r3, [r7, #20]
 8021152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021154:	4a0f      	ldr	r2, [pc, #60]	@ (8021194 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8021156:	6013      	str	r3, [r2, #0]
 8021158:	697b      	ldr	r3, [r7, #20]
 802115a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802115c:	4613      	mov	r3, r2
 802115e:	009b      	lsls	r3, r3, #2
 8021160:	4413      	add	r3, r2
 8021162:	009b      	lsls	r3, r3, #2
 8021164:	4a0c      	ldr	r2, [pc, #48]	@ (8021198 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8021166:	441a      	add	r2, r3
 8021168:	697b      	ldr	r3, [r7, #20]
 802116a:	3304      	adds	r3, #4
 802116c:	4619      	mov	r1, r3
 802116e:	4610      	mov	r0, r2
 8021170:	f7fe f9d7 	bl	801f522 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8021174:	697b      	ldr	r3, [r7, #20]
 8021176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021178:	4b08      	ldr	r3, [pc, #32]	@ (802119c <vTaskRemoveFromUnorderedEventList+0xc0>)
 802117a:	681b      	ldr	r3, [r3, #0]
 802117c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802117e:	429a      	cmp	r2, r3
 8021180:	d902      	bls.n	8021188 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8021182:	4b07      	ldr	r3, [pc, #28]	@ (80211a0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8021184:	2201      	movs	r2, #1
 8021186:	601a      	str	r2, [r3, #0]
	}
}
 8021188:	bf00      	nop
 802118a:	3718      	adds	r7, #24
 802118c:	46bd      	mov	sp, r7
 802118e:	bd80      	pop	{r7, pc}
 8021190:	24019428 	.word	0x24019428
 8021194:	24019408 	.word	0x24019408
 8021198:	24018f30 	.word	0x24018f30
 802119c:	24018f2c 	.word	0x24018f2c
 80211a0:	24019414 	.word	0x24019414

080211a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80211a4:	b480      	push	{r7}
 80211a6:	b083      	sub	sp, #12
 80211a8:	af00      	add	r7, sp, #0
 80211aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80211ac:	4b06      	ldr	r3, [pc, #24]	@ (80211c8 <vTaskInternalSetTimeOutState+0x24>)
 80211ae:	681a      	ldr	r2, [r3, #0]
 80211b0:	687b      	ldr	r3, [r7, #4]
 80211b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80211b4:	4b05      	ldr	r3, [pc, #20]	@ (80211cc <vTaskInternalSetTimeOutState+0x28>)
 80211b6:	681a      	ldr	r2, [r3, #0]
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	605a      	str	r2, [r3, #4]
}
 80211bc:	bf00      	nop
 80211be:	370c      	adds	r7, #12
 80211c0:	46bd      	mov	sp, r7
 80211c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211c6:	4770      	bx	lr
 80211c8:	24019418 	.word	0x24019418
 80211cc:	24019404 	.word	0x24019404

080211d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80211d0:	b580      	push	{r7, lr}
 80211d2:	b088      	sub	sp, #32
 80211d4:	af00      	add	r7, sp, #0
 80211d6:	6078      	str	r0, [r7, #4]
 80211d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	2b00      	cmp	r3, #0
 80211de:	d10b      	bne.n	80211f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80211e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80211e4:	f383 8811 	msr	BASEPRI, r3
 80211e8:	f3bf 8f6f 	isb	sy
 80211ec:	f3bf 8f4f 	dsb	sy
 80211f0:	613b      	str	r3, [r7, #16]
}
 80211f2:	bf00      	nop
 80211f4:	bf00      	nop
 80211f6:	e7fd      	b.n	80211f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80211f8:	683b      	ldr	r3, [r7, #0]
 80211fa:	2b00      	cmp	r3, #0
 80211fc:	d10b      	bne.n	8021216 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80211fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021202:	f383 8811 	msr	BASEPRI, r3
 8021206:	f3bf 8f6f 	isb	sy
 802120a:	f3bf 8f4f 	dsb	sy
 802120e:	60fb      	str	r3, [r7, #12]
}
 8021210:	bf00      	nop
 8021212:	bf00      	nop
 8021214:	e7fd      	b.n	8021212 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8021216:	f000 ffdf 	bl	80221d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802121a:	4b1d      	ldr	r3, [pc, #116]	@ (8021290 <xTaskCheckForTimeOut+0xc0>)
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8021220:	687b      	ldr	r3, [r7, #4]
 8021222:	685b      	ldr	r3, [r3, #4]
 8021224:	69ba      	ldr	r2, [r7, #24]
 8021226:	1ad3      	subs	r3, r2, r3
 8021228:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802122a:	683b      	ldr	r3, [r7, #0]
 802122c:	681b      	ldr	r3, [r3, #0]
 802122e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021232:	d102      	bne.n	802123a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8021234:	2300      	movs	r3, #0
 8021236:	61fb      	str	r3, [r7, #28]
 8021238:	e023      	b.n	8021282 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	681a      	ldr	r2, [r3, #0]
 802123e:	4b15      	ldr	r3, [pc, #84]	@ (8021294 <xTaskCheckForTimeOut+0xc4>)
 8021240:	681b      	ldr	r3, [r3, #0]
 8021242:	429a      	cmp	r2, r3
 8021244:	d007      	beq.n	8021256 <xTaskCheckForTimeOut+0x86>
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	685b      	ldr	r3, [r3, #4]
 802124a:	69ba      	ldr	r2, [r7, #24]
 802124c:	429a      	cmp	r2, r3
 802124e:	d302      	bcc.n	8021256 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8021250:	2301      	movs	r3, #1
 8021252:	61fb      	str	r3, [r7, #28]
 8021254:	e015      	b.n	8021282 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8021256:	683b      	ldr	r3, [r7, #0]
 8021258:	681b      	ldr	r3, [r3, #0]
 802125a:	697a      	ldr	r2, [r7, #20]
 802125c:	429a      	cmp	r2, r3
 802125e:	d20b      	bcs.n	8021278 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8021260:	683b      	ldr	r3, [r7, #0]
 8021262:	681a      	ldr	r2, [r3, #0]
 8021264:	697b      	ldr	r3, [r7, #20]
 8021266:	1ad2      	subs	r2, r2, r3
 8021268:	683b      	ldr	r3, [r7, #0]
 802126a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 802126c:	6878      	ldr	r0, [r7, #4]
 802126e:	f7ff ff99 	bl	80211a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8021272:	2300      	movs	r3, #0
 8021274:	61fb      	str	r3, [r7, #28]
 8021276:	e004      	b.n	8021282 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8021278:	683b      	ldr	r3, [r7, #0]
 802127a:	2200      	movs	r2, #0
 802127c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802127e:	2301      	movs	r3, #1
 8021280:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8021282:	f000 ffdb 	bl	802223c <vPortExitCritical>

	return xReturn;
 8021286:	69fb      	ldr	r3, [r7, #28]
}
 8021288:	4618      	mov	r0, r3
 802128a:	3720      	adds	r7, #32
 802128c:	46bd      	mov	sp, r7
 802128e:	bd80      	pop	{r7, pc}
 8021290:	24019404 	.word	0x24019404
 8021294:	24019418 	.word	0x24019418

08021298 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8021298:	b480      	push	{r7}
 802129a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 802129c:	4b03      	ldr	r3, [pc, #12]	@ (80212ac <vTaskMissedYield+0x14>)
 802129e:	2201      	movs	r2, #1
 80212a0:	601a      	str	r2, [r3, #0]
}
 80212a2:	bf00      	nop
 80212a4:	46bd      	mov	sp, r7
 80212a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212aa:	4770      	bx	lr
 80212ac:	24019414 	.word	0x24019414

080212b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80212b0:	b580      	push	{r7, lr}
 80212b2:	b082      	sub	sp, #8
 80212b4:	af00      	add	r7, sp, #0
 80212b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80212b8:	f000 f852 	bl	8021360 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80212bc:	4b06      	ldr	r3, [pc, #24]	@ (80212d8 <prvIdleTask+0x28>)
 80212be:	681b      	ldr	r3, [r3, #0]
 80212c0:	2b01      	cmp	r3, #1
 80212c2:	d9f9      	bls.n	80212b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80212c4:	4b05      	ldr	r3, [pc, #20]	@ (80212dc <prvIdleTask+0x2c>)
 80212c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80212ca:	601a      	str	r2, [r3, #0]
 80212cc:	f3bf 8f4f 	dsb	sy
 80212d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80212d4:	e7f0      	b.n	80212b8 <prvIdleTask+0x8>
 80212d6:	bf00      	nop
 80212d8:	24018f30 	.word	0x24018f30
 80212dc:	e000ed04 	.word	0xe000ed04

080212e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80212e0:	b580      	push	{r7, lr}
 80212e2:	b082      	sub	sp, #8
 80212e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80212e6:	2300      	movs	r3, #0
 80212e8:	607b      	str	r3, [r7, #4]
 80212ea:	e00c      	b.n	8021306 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80212ec:	687a      	ldr	r2, [r7, #4]
 80212ee:	4613      	mov	r3, r2
 80212f0:	009b      	lsls	r3, r3, #2
 80212f2:	4413      	add	r3, r2
 80212f4:	009b      	lsls	r3, r3, #2
 80212f6:	4a12      	ldr	r2, [pc, #72]	@ (8021340 <prvInitialiseTaskLists+0x60>)
 80212f8:	4413      	add	r3, r2
 80212fa:	4618      	mov	r0, r3
 80212fc:	f7fe f8e4 	bl	801f4c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8021300:	687b      	ldr	r3, [r7, #4]
 8021302:	3301      	adds	r3, #1
 8021304:	607b      	str	r3, [r7, #4]
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	2b37      	cmp	r3, #55	@ 0x37
 802130a:	d9ef      	bls.n	80212ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 802130c:	480d      	ldr	r0, [pc, #52]	@ (8021344 <prvInitialiseTaskLists+0x64>)
 802130e:	f7fe f8db 	bl	801f4c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8021312:	480d      	ldr	r0, [pc, #52]	@ (8021348 <prvInitialiseTaskLists+0x68>)
 8021314:	f7fe f8d8 	bl	801f4c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8021318:	480c      	ldr	r0, [pc, #48]	@ (802134c <prvInitialiseTaskLists+0x6c>)
 802131a:	f7fe f8d5 	bl	801f4c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802131e:	480c      	ldr	r0, [pc, #48]	@ (8021350 <prvInitialiseTaskLists+0x70>)
 8021320:	f7fe f8d2 	bl	801f4c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8021324:	480b      	ldr	r0, [pc, #44]	@ (8021354 <prvInitialiseTaskLists+0x74>)
 8021326:	f7fe f8cf 	bl	801f4c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802132a:	4b0b      	ldr	r3, [pc, #44]	@ (8021358 <prvInitialiseTaskLists+0x78>)
 802132c:	4a05      	ldr	r2, [pc, #20]	@ (8021344 <prvInitialiseTaskLists+0x64>)
 802132e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8021330:	4b0a      	ldr	r3, [pc, #40]	@ (802135c <prvInitialiseTaskLists+0x7c>)
 8021332:	4a05      	ldr	r2, [pc, #20]	@ (8021348 <prvInitialiseTaskLists+0x68>)
 8021334:	601a      	str	r2, [r3, #0]
}
 8021336:	bf00      	nop
 8021338:	3708      	adds	r7, #8
 802133a:	46bd      	mov	sp, r7
 802133c:	bd80      	pop	{r7, pc}
 802133e:	bf00      	nop
 8021340:	24018f30 	.word	0x24018f30
 8021344:	24019390 	.word	0x24019390
 8021348:	240193a4 	.word	0x240193a4
 802134c:	240193c0 	.word	0x240193c0
 8021350:	240193d4 	.word	0x240193d4
 8021354:	240193ec 	.word	0x240193ec
 8021358:	240193b8 	.word	0x240193b8
 802135c:	240193bc 	.word	0x240193bc

08021360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8021360:	b580      	push	{r7, lr}
 8021362:	b082      	sub	sp, #8
 8021364:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8021366:	e019      	b.n	802139c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8021368:	f000 ff36 	bl	80221d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802136c:	4b10      	ldr	r3, [pc, #64]	@ (80213b0 <prvCheckTasksWaitingTermination+0x50>)
 802136e:	68db      	ldr	r3, [r3, #12]
 8021370:	68db      	ldr	r3, [r3, #12]
 8021372:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021374:	687b      	ldr	r3, [r7, #4]
 8021376:	3304      	adds	r3, #4
 8021378:	4618      	mov	r0, r3
 802137a:	f7fe f92f 	bl	801f5dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 802137e:	4b0d      	ldr	r3, [pc, #52]	@ (80213b4 <prvCheckTasksWaitingTermination+0x54>)
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	3b01      	subs	r3, #1
 8021384:	4a0b      	ldr	r2, [pc, #44]	@ (80213b4 <prvCheckTasksWaitingTermination+0x54>)
 8021386:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8021388:	4b0b      	ldr	r3, [pc, #44]	@ (80213b8 <prvCheckTasksWaitingTermination+0x58>)
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	3b01      	subs	r3, #1
 802138e:	4a0a      	ldr	r2, [pc, #40]	@ (80213b8 <prvCheckTasksWaitingTermination+0x58>)
 8021390:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8021392:	f000 ff53 	bl	802223c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8021396:	6878      	ldr	r0, [r7, #4]
 8021398:	f000 f810 	bl	80213bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802139c:	4b06      	ldr	r3, [pc, #24]	@ (80213b8 <prvCheckTasksWaitingTermination+0x58>)
 802139e:	681b      	ldr	r3, [r3, #0]
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	d1e1      	bne.n	8021368 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80213a4:	bf00      	nop
 80213a6:	bf00      	nop
 80213a8:	3708      	adds	r7, #8
 80213aa:	46bd      	mov	sp, r7
 80213ac:	bd80      	pop	{r7, pc}
 80213ae:	bf00      	nop
 80213b0:	240193d4 	.word	0x240193d4
 80213b4:	24019400 	.word	0x24019400
 80213b8:	240193e8 	.word	0x240193e8

080213bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80213bc:	b580      	push	{r7, lr}
 80213be:	b084      	sub	sp, #16
 80213c0:	af00      	add	r7, sp, #0
 80213c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	3358      	adds	r3, #88	@ 0x58
 80213c8:	4618      	mov	r0, r3
 80213ca:	f004 f849 	bl	8025460 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80213ce:	687b      	ldr	r3, [r7, #4]
 80213d0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	d108      	bne.n	80213ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80213d8:	687b      	ldr	r3, [r7, #4]
 80213da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80213dc:	4618      	mov	r0, r3
 80213de:	f001 f8eb 	bl	80225b8 <vPortFree>
				vPortFree( pxTCB );
 80213e2:	6878      	ldr	r0, [r7, #4]
 80213e4:	f001 f8e8 	bl	80225b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80213e8:	e019      	b.n	802141e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80213ea:	687b      	ldr	r3, [r7, #4]
 80213ec:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80213f0:	2b01      	cmp	r3, #1
 80213f2:	d103      	bne.n	80213fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80213f4:	6878      	ldr	r0, [r7, #4]
 80213f6:	f001 f8df 	bl	80225b8 <vPortFree>
	}
 80213fa:	e010      	b.n	802141e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80213fc:	687b      	ldr	r3, [r7, #4]
 80213fe:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8021402:	2b02      	cmp	r3, #2
 8021404:	d00b      	beq.n	802141e <prvDeleteTCB+0x62>
	__asm volatile
 8021406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802140a:	f383 8811 	msr	BASEPRI, r3
 802140e:	f3bf 8f6f 	isb	sy
 8021412:	f3bf 8f4f 	dsb	sy
 8021416:	60fb      	str	r3, [r7, #12]
}
 8021418:	bf00      	nop
 802141a:	bf00      	nop
 802141c:	e7fd      	b.n	802141a <prvDeleteTCB+0x5e>
	}
 802141e:	bf00      	nop
 8021420:	3710      	adds	r7, #16
 8021422:	46bd      	mov	sp, r7
 8021424:	bd80      	pop	{r7, pc}
	...

08021428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8021428:	b480      	push	{r7}
 802142a:	b083      	sub	sp, #12
 802142c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802142e:	4b0c      	ldr	r3, [pc, #48]	@ (8021460 <prvResetNextTaskUnblockTime+0x38>)
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	681b      	ldr	r3, [r3, #0]
 8021434:	2b00      	cmp	r3, #0
 8021436:	d104      	bne.n	8021442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8021438:	4b0a      	ldr	r3, [pc, #40]	@ (8021464 <prvResetNextTaskUnblockTime+0x3c>)
 802143a:	f04f 32ff 	mov.w	r2, #4294967295
 802143e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8021440:	e008      	b.n	8021454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021442:	4b07      	ldr	r3, [pc, #28]	@ (8021460 <prvResetNextTaskUnblockTime+0x38>)
 8021444:	681b      	ldr	r3, [r3, #0]
 8021446:	68db      	ldr	r3, [r3, #12]
 8021448:	68db      	ldr	r3, [r3, #12]
 802144a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	685b      	ldr	r3, [r3, #4]
 8021450:	4a04      	ldr	r2, [pc, #16]	@ (8021464 <prvResetNextTaskUnblockTime+0x3c>)
 8021452:	6013      	str	r3, [r2, #0]
}
 8021454:	bf00      	nop
 8021456:	370c      	adds	r7, #12
 8021458:	46bd      	mov	sp, r7
 802145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802145e:	4770      	bx	lr
 8021460:	240193b8 	.word	0x240193b8
 8021464:	24019420 	.word	0x24019420

08021468 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8021468:	b480      	push	{r7}
 802146a:	b083      	sub	sp, #12
 802146c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 802146e:	4b05      	ldr	r3, [pc, #20]	@ (8021484 <xTaskGetCurrentTaskHandle+0x1c>)
 8021470:	681b      	ldr	r3, [r3, #0]
 8021472:	607b      	str	r3, [r7, #4]

		return xReturn;
 8021474:	687b      	ldr	r3, [r7, #4]
	}
 8021476:	4618      	mov	r0, r3
 8021478:	370c      	adds	r7, #12
 802147a:	46bd      	mov	sp, r7
 802147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021480:	4770      	bx	lr
 8021482:	bf00      	nop
 8021484:	24018f2c 	.word	0x24018f2c

08021488 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8021488:	b480      	push	{r7}
 802148a:	b083      	sub	sp, #12
 802148c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802148e:	4b0b      	ldr	r3, [pc, #44]	@ (80214bc <xTaskGetSchedulerState+0x34>)
 8021490:	681b      	ldr	r3, [r3, #0]
 8021492:	2b00      	cmp	r3, #0
 8021494:	d102      	bne.n	802149c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8021496:	2301      	movs	r3, #1
 8021498:	607b      	str	r3, [r7, #4]
 802149a:	e008      	b.n	80214ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802149c:	4b08      	ldr	r3, [pc, #32]	@ (80214c0 <xTaskGetSchedulerState+0x38>)
 802149e:	681b      	ldr	r3, [r3, #0]
 80214a0:	2b00      	cmp	r3, #0
 80214a2:	d102      	bne.n	80214aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80214a4:	2302      	movs	r3, #2
 80214a6:	607b      	str	r3, [r7, #4]
 80214a8:	e001      	b.n	80214ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80214aa:	2300      	movs	r3, #0
 80214ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80214ae:	687b      	ldr	r3, [r7, #4]
	}
 80214b0:	4618      	mov	r0, r3
 80214b2:	370c      	adds	r7, #12
 80214b4:	46bd      	mov	sp, r7
 80214b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ba:	4770      	bx	lr
 80214bc:	2401940c 	.word	0x2401940c
 80214c0:	24019428 	.word	0x24019428

080214c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80214c4:	b580      	push	{r7, lr}
 80214c6:	b084      	sub	sp, #16
 80214c8:	af00      	add	r7, sp, #0
 80214ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80214d0:	2300      	movs	r3, #0
 80214d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	2b00      	cmp	r3, #0
 80214d8:	d051      	beq.n	802157e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80214da:	68bb      	ldr	r3, [r7, #8]
 80214dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80214de:	4b2a      	ldr	r3, [pc, #168]	@ (8021588 <xTaskPriorityInherit+0xc4>)
 80214e0:	681b      	ldr	r3, [r3, #0]
 80214e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80214e4:	429a      	cmp	r2, r3
 80214e6:	d241      	bcs.n	802156c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80214e8:	68bb      	ldr	r3, [r7, #8]
 80214ea:	699b      	ldr	r3, [r3, #24]
 80214ec:	2b00      	cmp	r3, #0
 80214ee:	db06      	blt.n	80214fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80214f0:	4b25      	ldr	r3, [pc, #148]	@ (8021588 <xTaskPriorityInherit+0xc4>)
 80214f2:	681b      	ldr	r3, [r3, #0]
 80214f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80214f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80214fa:	68bb      	ldr	r3, [r7, #8]
 80214fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80214fe:	68bb      	ldr	r3, [r7, #8]
 8021500:	6959      	ldr	r1, [r3, #20]
 8021502:	68bb      	ldr	r3, [r7, #8]
 8021504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021506:	4613      	mov	r3, r2
 8021508:	009b      	lsls	r3, r3, #2
 802150a:	4413      	add	r3, r2
 802150c:	009b      	lsls	r3, r3, #2
 802150e:	4a1f      	ldr	r2, [pc, #124]	@ (802158c <xTaskPriorityInherit+0xc8>)
 8021510:	4413      	add	r3, r2
 8021512:	4299      	cmp	r1, r3
 8021514:	d122      	bne.n	802155c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8021516:	68bb      	ldr	r3, [r7, #8]
 8021518:	3304      	adds	r3, #4
 802151a:	4618      	mov	r0, r3
 802151c:	f7fe f85e 	bl	801f5dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8021520:	4b19      	ldr	r3, [pc, #100]	@ (8021588 <xTaskPriorityInherit+0xc4>)
 8021522:	681b      	ldr	r3, [r3, #0]
 8021524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021526:	68bb      	ldr	r3, [r7, #8]
 8021528:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 802152a:	68bb      	ldr	r3, [r7, #8]
 802152c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802152e:	4b18      	ldr	r3, [pc, #96]	@ (8021590 <xTaskPriorityInherit+0xcc>)
 8021530:	681b      	ldr	r3, [r3, #0]
 8021532:	429a      	cmp	r2, r3
 8021534:	d903      	bls.n	802153e <xTaskPriorityInherit+0x7a>
 8021536:	68bb      	ldr	r3, [r7, #8]
 8021538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802153a:	4a15      	ldr	r2, [pc, #84]	@ (8021590 <xTaskPriorityInherit+0xcc>)
 802153c:	6013      	str	r3, [r2, #0]
 802153e:	68bb      	ldr	r3, [r7, #8]
 8021540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021542:	4613      	mov	r3, r2
 8021544:	009b      	lsls	r3, r3, #2
 8021546:	4413      	add	r3, r2
 8021548:	009b      	lsls	r3, r3, #2
 802154a:	4a10      	ldr	r2, [pc, #64]	@ (802158c <xTaskPriorityInherit+0xc8>)
 802154c:	441a      	add	r2, r3
 802154e:	68bb      	ldr	r3, [r7, #8]
 8021550:	3304      	adds	r3, #4
 8021552:	4619      	mov	r1, r3
 8021554:	4610      	mov	r0, r2
 8021556:	f7fd ffe4 	bl	801f522 <vListInsertEnd>
 802155a:	e004      	b.n	8021566 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 802155c:	4b0a      	ldr	r3, [pc, #40]	@ (8021588 <xTaskPriorityInherit+0xc4>)
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021562:	68bb      	ldr	r3, [r7, #8]
 8021564:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8021566:	2301      	movs	r3, #1
 8021568:	60fb      	str	r3, [r7, #12]
 802156a:	e008      	b.n	802157e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 802156c:	68bb      	ldr	r3, [r7, #8]
 802156e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8021570:	4b05      	ldr	r3, [pc, #20]	@ (8021588 <xTaskPriorityInherit+0xc4>)
 8021572:	681b      	ldr	r3, [r3, #0]
 8021574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021576:	429a      	cmp	r2, r3
 8021578:	d201      	bcs.n	802157e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 802157a:	2301      	movs	r3, #1
 802157c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802157e:	68fb      	ldr	r3, [r7, #12]
	}
 8021580:	4618      	mov	r0, r3
 8021582:	3710      	adds	r7, #16
 8021584:	46bd      	mov	sp, r7
 8021586:	bd80      	pop	{r7, pc}
 8021588:	24018f2c 	.word	0x24018f2c
 802158c:	24018f30 	.word	0x24018f30
 8021590:	24019408 	.word	0x24019408

08021594 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8021594:	b580      	push	{r7, lr}
 8021596:	b086      	sub	sp, #24
 8021598:	af00      	add	r7, sp, #0
 802159a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80215a0:	2300      	movs	r3, #0
 80215a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80215a4:	687b      	ldr	r3, [r7, #4]
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	d058      	beq.n	802165c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80215aa:	4b2f      	ldr	r3, [pc, #188]	@ (8021668 <xTaskPriorityDisinherit+0xd4>)
 80215ac:	681b      	ldr	r3, [r3, #0]
 80215ae:	693a      	ldr	r2, [r7, #16]
 80215b0:	429a      	cmp	r2, r3
 80215b2:	d00b      	beq.n	80215cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80215b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80215b8:	f383 8811 	msr	BASEPRI, r3
 80215bc:	f3bf 8f6f 	isb	sy
 80215c0:	f3bf 8f4f 	dsb	sy
 80215c4:	60fb      	str	r3, [r7, #12]
}
 80215c6:	bf00      	nop
 80215c8:	bf00      	nop
 80215ca:	e7fd      	b.n	80215c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80215cc:	693b      	ldr	r3, [r7, #16]
 80215ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d10b      	bne.n	80215ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80215d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80215d8:	f383 8811 	msr	BASEPRI, r3
 80215dc:	f3bf 8f6f 	isb	sy
 80215e0:	f3bf 8f4f 	dsb	sy
 80215e4:	60bb      	str	r3, [r7, #8]
}
 80215e6:	bf00      	nop
 80215e8:	bf00      	nop
 80215ea:	e7fd      	b.n	80215e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80215ec:	693b      	ldr	r3, [r7, #16]
 80215ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80215f0:	1e5a      	subs	r2, r3, #1
 80215f2:	693b      	ldr	r3, [r7, #16]
 80215f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80215f6:	693b      	ldr	r3, [r7, #16]
 80215f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80215fa:	693b      	ldr	r3, [r7, #16]
 80215fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80215fe:	429a      	cmp	r2, r3
 8021600:	d02c      	beq.n	802165c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8021602:	693b      	ldr	r3, [r7, #16]
 8021604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021606:	2b00      	cmp	r3, #0
 8021608:	d128      	bne.n	802165c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802160a:	693b      	ldr	r3, [r7, #16]
 802160c:	3304      	adds	r3, #4
 802160e:	4618      	mov	r0, r3
 8021610:	f7fd ffe4 	bl	801f5dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8021614:	693b      	ldr	r3, [r7, #16]
 8021616:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8021618:	693b      	ldr	r3, [r7, #16]
 802161a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802161c:	693b      	ldr	r3, [r7, #16]
 802161e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021620:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8021624:	693b      	ldr	r3, [r7, #16]
 8021626:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8021628:	693b      	ldr	r3, [r7, #16]
 802162a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802162c:	4b0f      	ldr	r3, [pc, #60]	@ (802166c <xTaskPriorityDisinherit+0xd8>)
 802162e:	681b      	ldr	r3, [r3, #0]
 8021630:	429a      	cmp	r2, r3
 8021632:	d903      	bls.n	802163c <xTaskPriorityDisinherit+0xa8>
 8021634:	693b      	ldr	r3, [r7, #16]
 8021636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021638:	4a0c      	ldr	r2, [pc, #48]	@ (802166c <xTaskPriorityDisinherit+0xd8>)
 802163a:	6013      	str	r3, [r2, #0]
 802163c:	693b      	ldr	r3, [r7, #16]
 802163e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021640:	4613      	mov	r3, r2
 8021642:	009b      	lsls	r3, r3, #2
 8021644:	4413      	add	r3, r2
 8021646:	009b      	lsls	r3, r3, #2
 8021648:	4a09      	ldr	r2, [pc, #36]	@ (8021670 <xTaskPriorityDisinherit+0xdc>)
 802164a:	441a      	add	r2, r3
 802164c:	693b      	ldr	r3, [r7, #16]
 802164e:	3304      	adds	r3, #4
 8021650:	4619      	mov	r1, r3
 8021652:	4610      	mov	r0, r2
 8021654:	f7fd ff65 	bl	801f522 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8021658:	2301      	movs	r3, #1
 802165a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802165c:	697b      	ldr	r3, [r7, #20]
	}
 802165e:	4618      	mov	r0, r3
 8021660:	3718      	adds	r7, #24
 8021662:	46bd      	mov	sp, r7
 8021664:	bd80      	pop	{r7, pc}
 8021666:	bf00      	nop
 8021668:	24018f2c 	.word	0x24018f2c
 802166c:	24019408 	.word	0x24019408
 8021670:	24018f30 	.word	0x24018f30

08021674 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8021674:	b580      	push	{r7, lr}
 8021676:	b088      	sub	sp, #32
 8021678:	af00      	add	r7, sp, #0
 802167a:	6078      	str	r0, [r7, #4]
 802167c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 802167e:	687b      	ldr	r3, [r7, #4]
 8021680:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8021682:	2301      	movs	r3, #1
 8021684:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	2b00      	cmp	r3, #0
 802168a:	d06c      	beq.n	8021766 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 802168c:	69bb      	ldr	r3, [r7, #24]
 802168e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021690:	2b00      	cmp	r3, #0
 8021692:	d10b      	bne.n	80216ac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8021694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021698:	f383 8811 	msr	BASEPRI, r3
 802169c:	f3bf 8f6f 	isb	sy
 80216a0:	f3bf 8f4f 	dsb	sy
 80216a4:	60fb      	str	r3, [r7, #12]
}
 80216a6:	bf00      	nop
 80216a8:	bf00      	nop
 80216aa:	e7fd      	b.n	80216a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80216ac:	69bb      	ldr	r3, [r7, #24]
 80216ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80216b0:	683a      	ldr	r2, [r7, #0]
 80216b2:	429a      	cmp	r2, r3
 80216b4:	d902      	bls.n	80216bc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80216b6:	683b      	ldr	r3, [r7, #0]
 80216b8:	61fb      	str	r3, [r7, #28]
 80216ba:	e002      	b.n	80216c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80216bc:	69bb      	ldr	r3, [r7, #24]
 80216be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80216c0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80216c2:	69bb      	ldr	r3, [r7, #24]
 80216c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80216c6:	69fa      	ldr	r2, [r7, #28]
 80216c8:	429a      	cmp	r2, r3
 80216ca:	d04c      	beq.n	8021766 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80216cc:	69bb      	ldr	r3, [r7, #24]
 80216ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80216d0:	697a      	ldr	r2, [r7, #20]
 80216d2:	429a      	cmp	r2, r3
 80216d4:	d147      	bne.n	8021766 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80216d6:	4b26      	ldr	r3, [pc, #152]	@ (8021770 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80216d8:	681b      	ldr	r3, [r3, #0]
 80216da:	69ba      	ldr	r2, [r7, #24]
 80216dc:	429a      	cmp	r2, r3
 80216de:	d10b      	bne.n	80216f8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80216e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80216e4:	f383 8811 	msr	BASEPRI, r3
 80216e8:	f3bf 8f6f 	isb	sy
 80216ec:	f3bf 8f4f 	dsb	sy
 80216f0:	60bb      	str	r3, [r7, #8]
}
 80216f2:	bf00      	nop
 80216f4:	bf00      	nop
 80216f6:	e7fd      	b.n	80216f4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80216f8:	69bb      	ldr	r3, [r7, #24]
 80216fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80216fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80216fe:	69bb      	ldr	r3, [r7, #24]
 8021700:	69fa      	ldr	r2, [r7, #28]
 8021702:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8021704:	69bb      	ldr	r3, [r7, #24]
 8021706:	699b      	ldr	r3, [r3, #24]
 8021708:	2b00      	cmp	r3, #0
 802170a:	db04      	blt.n	8021716 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802170c:	69fb      	ldr	r3, [r7, #28]
 802170e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8021712:	69bb      	ldr	r3, [r7, #24]
 8021714:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8021716:	69bb      	ldr	r3, [r7, #24]
 8021718:	6959      	ldr	r1, [r3, #20]
 802171a:	693a      	ldr	r2, [r7, #16]
 802171c:	4613      	mov	r3, r2
 802171e:	009b      	lsls	r3, r3, #2
 8021720:	4413      	add	r3, r2
 8021722:	009b      	lsls	r3, r3, #2
 8021724:	4a13      	ldr	r2, [pc, #76]	@ (8021774 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8021726:	4413      	add	r3, r2
 8021728:	4299      	cmp	r1, r3
 802172a:	d11c      	bne.n	8021766 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802172c:	69bb      	ldr	r3, [r7, #24]
 802172e:	3304      	adds	r3, #4
 8021730:	4618      	mov	r0, r3
 8021732:	f7fd ff53 	bl	801f5dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8021736:	69bb      	ldr	r3, [r7, #24]
 8021738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802173a:	4b0f      	ldr	r3, [pc, #60]	@ (8021778 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 802173c:	681b      	ldr	r3, [r3, #0]
 802173e:	429a      	cmp	r2, r3
 8021740:	d903      	bls.n	802174a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8021742:	69bb      	ldr	r3, [r7, #24]
 8021744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021746:	4a0c      	ldr	r2, [pc, #48]	@ (8021778 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8021748:	6013      	str	r3, [r2, #0]
 802174a:	69bb      	ldr	r3, [r7, #24]
 802174c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802174e:	4613      	mov	r3, r2
 8021750:	009b      	lsls	r3, r3, #2
 8021752:	4413      	add	r3, r2
 8021754:	009b      	lsls	r3, r3, #2
 8021756:	4a07      	ldr	r2, [pc, #28]	@ (8021774 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8021758:	441a      	add	r2, r3
 802175a:	69bb      	ldr	r3, [r7, #24]
 802175c:	3304      	adds	r3, #4
 802175e:	4619      	mov	r1, r3
 8021760:	4610      	mov	r0, r2
 8021762:	f7fd fede 	bl	801f522 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021766:	bf00      	nop
 8021768:	3720      	adds	r7, #32
 802176a:	46bd      	mov	sp, r7
 802176c:	bd80      	pop	{r7, pc}
 802176e:	bf00      	nop
 8021770:	24018f2c 	.word	0x24018f2c
 8021774:	24018f30 	.word	0x24018f30
 8021778:	24019408 	.word	0x24019408

0802177c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 802177c:	b480      	push	{r7}
 802177e:	b083      	sub	sp, #12
 8021780:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8021782:	4b09      	ldr	r3, [pc, #36]	@ (80217a8 <uxTaskResetEventItemValue+0x2c>)
 8021784:	681b      	ldr	r3, [r3, #0]
 8021786:	699b      	ldr	r3, [r3, #24]
 8021788:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802178a:	4b07      	ldr	r3, [pc, #28]	@ (80217a8 <uxTaskResetEventItemValue+0x2c>)
 802178c:	681b      	ldr	r3, [r3, #0]
 802178e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021790:	4b05      	ldr	r3, [pc, #20]	@ (80217a8 <uxTaskResetEventItemValue+0x2c>)
 8021792:	681b      	ldr	r3, [r3, #0]
 8021794:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8021798:	619a      	str	r2, [r3, #24]

	return uxReturn;
 802179a:	687b      	ldr	r3, [r7, #4]
}
 802179c:	4618      	mov	r0, r3
 802179e:	370c      	adds	r7, #12
 80217a0:	46bd      	mov	sp, r7
 80217a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217a6:	4770      	bx	lr
 80217a8:	24018f2c 	.word	0x24018f2c

080217ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80217ac:	b480      	push	{r7}
 80217ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80217b0:	4b07      	ldr	r3, [pc, #28]	@ (80217d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80217b2:	681b      	ldr	r3, [r3, #0]
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	d004      	beq.n	80217c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80217b8:	4b05      	ldr	r3, [pc, #20]	@ (80217d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80217ba:	681b      	ldr	r3, [r3, #0]
 80217bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80217be:	3201      	adds	r2, #1
 80217c0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80217c2:	4b03      	ldr	r3, [pc, #12]	@ (80217d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80217c4:	681b      	ldr	r3, [r3, #0]
	}
 80217c6:	4618      	mov	r0, r3
 80217c8:	46bd      	mov	sp, r7
 80217ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217ce:	4770      	bx	lr
 80217d0:	24018f2c 	.word	0x24018f2c

080217d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80217d4:	b580      	push	{r7, lr}
 80217d6:	b084      	sub	sp, #16
 80217d8:	af00      	add	r7, sp, #0
 80217da:	6078      	str	r0, [r7, #4]
 80217dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80217de:	4b21      	ldr	r3, [pc, #132]	@ (8021864 <prvAddCurrentTaskToDelayedList+0x90>)
 80217e0:	681b      	ldr	r3, [r3, #0]
 80217e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80217e4:	4b20      	ldr	r3, [pc, #128]	@ (8021868 <prvAddCurrentTaskToDelayedList+0x94>)
 80217e6:	681b      	ldr	r3, [r3, #0]
 80217e8:	3304      	adds	r3, #4
 80217ea:	4618      	mov	r0, r3
 80217ec:	f7fd fef6 	bl	801f5dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80217f6:	d10a      	bne.n	802180e <prvAddCurrentTaskToDelayedList+0x3a>
 80217f8:	683b      	ldr	r3, [r7, #0]
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	d007      	beq.n	802180e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80217fe:	4b1a      	ldr	r3, [pc, #104]	@ (8021868 <prvAddCurrentTaskToDelayedList+0x94>)
 8021800:	681b      	ldr	r3, [r3, #0]
 8021802:	3304      	adds	r3, #4
 8021804:	4619      	mov	r1, r3
 8021806:	4819      	ldr	r0, [pc, #100]	@ (802186c <prvAddCurrentTaskToDelayedList+0x98>)
 8021808:	f7fd fe8b 	bl	801f522 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 802180c:	e026      	b.n	802185c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 802180e:	68fa      	ldr	r2, [r7, #12]
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	4413      	add	r3, r2
 8021814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8021816:	4b14      	ldr	r3, [pc, #80]	@ (8021868 <prvAddCurrentTaskToDelayedList+0x94>)
 8021818:	681b      	ldr	r3, [r3, #0]
 802181a:	68ba      	ldr	r2, [r7, #8]
 802181c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 802181e:	68ba      	ldr	r2, [r7, #8]
 8021820:	68fb      	ldr	r3, [r7, #12]
 8021822:	429a      	cmp	r2, r3
 8021824:	d209      	bcs.n	802183a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8021826:	4b12      	ldr	r3, [pc, #72]	@ (8021870 <prvAddCurrentTaskToDelayedList+0x9c>)
 8021828:	681a      	ldr	r2, [r3, #0]
 802182a:	4b0f      	ldr	r3, [pc, #60]	@ (8021868 <prvAddCurrentTaskToDelayedList+0x94>)
 802182c:	681b      	ldr	r3, [r3, #0]
 802182e:	3304      	adds	r3, #4
 8021830:	4619      	mov	r1, r3
 8021832:	4610      	mov	r0, r2
 8021834:	f7fd fe99 	bl	801f56a <vListInsert>
}
 8021838:	e010      	b.n	802185c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802183a:	4b0e      	ldr	r3, [pc, #56]	@ (8021874 <prvAddCurrentTaskToDelayedList+0xa0>)
 802183c:	681a      	ldr	r2, [r3, #0]
 802183e:	4b0a      	ldr	r3, [pc, #40]	@ (8021868 <prvAddCurrentTaskToDelayedList+0x94>)
 8021840:	681b      	ldr	r3, [r3, #0]
 8021842:	3304      	adds	r3, #4
 8021844:	4619      	mov	r1, r3
 8021846:	4610      	mov	r0, r2
 8021848:	f7fd fe8f 	bl	801f56a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 802184c:	4b0a      	ldr	r3, [pc, #40]	@ (8021878 <prvAddCurrentTaskToDelayedList+0xa4>)
 802184e:	681b      	ldr	r3, [r3, #0]
 8021850:	68ba      	ldr	r2, [r7, #8]
 8021852:	429a      	cmp	r2, r3
 8021854:	d202      	bcs.n	802185c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8021856:	4a08      	ldr	r2, [pc, #32]	@ (8021878 <prvAddCurrentTaskToDelayedList+0xa4>)
 8021858:	68bb      	ldr	r3, [r7, #8]
 802185a:	6013      	str	r3, [r2, #0]
}
 802185c:	bf00      	nop
 802185e:	3710      	adds	r7, #16
 8021860:	46bd      	mov	sp, r7
 8021862:	bd80      	pop	{r7, pc}
 8021864:	24019404 	.word	0x24019404
 8021868:	24018f2c 	.word	0x24018f2c
 802186c:	240193ec 	.word	0x240193ec
 8021870:	240193bc 	.word	0x240193bc
 8021874:	240193b8 	.word	0x240193b8
 8021878:	24019420 	.word	0x24019420

0802187c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 802187c:	b580      	push	{r7, lr}
 802187e:	b08a      	sub	sp, #40	@ 0x28
 8021880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8021882:	2300      	movs	r3, #0
 8021884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8021886:	f000 fb13 	bl	8021eb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 802188a:	4b1d      	ldr	r3, [pc, #116]	@ (8021900 <xTimerCreateTimerTask+0x84>)
 802188c:	681b      	ldr	r3, [r3, #0]
 802188e:	2b00      	cmp	r3, #0
 8021890:	d021      	beq.n	80218d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8021892:	2300      	movs	r3, #0
 8021894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8021896:	2300      	movs	r3, #0
 8021898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802189a:	1d3a      	adds	r2, r7, #4
 802189c:	f107 0108 	add.w	r1, r7, #8
 80218a0:	f107 030c 	add.w	r3, r7, #12
 80218a4:	4618      	mov	r0, r3
 80218a6:	f7fd fb81 	bl	801efac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80218aa:	6879      	ldr	r1, [r7, #4]
 80218ac:	68bb      	ldr	r3, [r7, #8]
 80218ae:	68fa      	ldr	r2, [r7, #12]
 80218b0:	9202      	str	r2, [sp, #8]
 80218b2:	9301      	str	r3, [sp, #4]
 80218b4:	2302      	movs	r3, #2
 80218b6:	9300      	str	r3, [sp, #0]
 80218b8:	2300      	movs	r3, #0
 80218ba:	460a      	mov	r2, r1
 80218bc:	4911      	ldr	r1, [pc, #68]	@ (8021904 <xTimerCreateTimerTask+0x88>)
 80218be:	4812      	ldr	r0, [pc, #72]	@ (8021908 <xTimerCreateTimerTask+0x8c>)
 80218c0:	f7fe fea8 	bl	8020614 <xTaskCreateStatic>
 80218c4:	4603      	mov	r3, r0
 80218c6:	4a11      	ldr	r2, [pc, #68]	@ (802190c <xTimerCreateTimerTask+0x90>)
 80218c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80218ca:	4b10      	ldr	r3, [pc, #64]	@ (802190c <xTimerCreateTimerTask+0x90>)
 80218cc:	681b      	ldr	r3, [r3, #0]
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	d001      	beq.n	80218d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80218d2:	2301      	movs	r3, #1
 80218d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80218d6:	697b      	ldr	r3, [r7, #20]
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d10b      	bne.n	80218f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80218dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80218e0:	f383 8811 	msr	BASEPRI, r3
 80218e4:	f3bf 8f6f 	isb	sy
 80218e8:	f3bf 8f4f 	dsb	sy
 80218ec:	613b      	str	r3, [r7, #16]
}
 80218ee:	bf00      	nop
 80218f0:	bf00      	nop
 80218f2:	e7fd      	b.n	80218f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80218f4:	697b      	ldr	r3, [r7, #20]
}
 80218f6:	4618      	mov	r0, r3
 80218f8:	3718      	adds	r7, #24
 80218fa:	46bd      	mov	sp, r7
 80218fc:	bd80      	pop	{r7, pc}
 80218fe:	bf00      	nop
 8021900:	24019464 	.word	0x24019464
 8021904:	0802adf0 	.word	0x0802adf0
 8021908:	08021a49 	.word	0x08021a49
 802190c:	24019468 	.word	0x24019468

08021910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8021910:	b580      	push	{r7, lr}
 8021912:	b08a      	sub	sp, #40	@ 0x28
 8021914:	af00      	add	r7, sp, #0
 8021916:	60f8      	str	r0, [r7, #12]
 8021918:	60b9      	str	r1, [r7, #8]
 802191a:	607a      	str	r2, [r7, #4]
 802191c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802191e:	2300      	movs	r3, #0
 8021920:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8021922:	68fb      	ldr	r3, [r7, #12]
 8021924:	2b00      	cmp	r3, #0
 8021926:	d10b      	bne.n	8021940 <xTimerGenericCommand+0x30>
	__asm volatile
 8021928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802192c:	f383 8811 	msr	BASEPRI, r3
 8021930:	f3bf 8f6f 	isb	sy
 8021934:	f3bf 8f4f 	dsb	sy
 8021938:	623b      	str	r3, [r7, #32]
}
 802193a:	bf00      	nop
 802193c:	bf00      	nop
 802193e:	e7fd      	b.n	802193c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8021940:	4b19      	ldr	r3, [pc, #100]	@ (80219a8 <xTimerGenericCommand+0x98>)
 8021942:	681b      	ldr	r3, [r3, #0]
 8021944:	2b00      	cmp	r3, #0
 8021946:	d02a      	beq.n	802199e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8021948:	68bb      	ldr	r3, [r7, #8]
 802194a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 802194c:	687b      	ldr	r3, [r7, #4]
 802194e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8021950:	68fb      	ldr	r3, [r7, #12]
 8021952:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8021954:	68bb      	ldr	r3, [r7, #8]
 8021956:	2b05      	cmp	r3, #5
 8021958:	dc18      	bgt.n	802198c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802195a:	f7ff fd95 	bl	8021488 <xTaskGetSchedulerState>
 802195e:	4603      	mov	r3, r0
 8021960:	2b02      	cmp	r3, #2
 8021962:	d109      	bne.n	8021978 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8021964:	4b10      	ldr	r3, [pc, #64]	@ (80219a8 <xTimerGenericCommand+0x98>)
 8021966:	6818      	ldr	r0, [r3, #0]
 8021968:	f107 0110 	add.w	r1, r7, #16
 802196c:	2300      	movs	r3, #0
 802196e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021970:	f7fe f8ca 	bl	801fb08 <xQueueGenericSend>
 8021974:	6278      	str	r0, [r7, #36]	@ 0x24
 8021976:	e012      	b.n	802199e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8021978:	4b0b      	ldr	r3, [pc, #44]	@ (80219a8 <xTimerGenericCommand+0x98>)
 802197a:	6818      	ldr	r0, [r3, #0]
 802197c:	f107 0110 	add.w	r1, r7, #16
 8021980:	2300      	movs	r3, #0
 8021982:	2200      	movs	r2, #0
 8021984:	f7fe f8c0 	bl	801fb08 <xQueueGenericSend>
 8021988:	6278      	str	r0, [r7, #36]	@ 0x24
 802198a:	e008      	b.n	802199e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 802198c:	4b06      	ldr	r3, [pc, #24]	@ (80219a8 <xTimerGenericCommand+0x98>)
 802198e:	6818      	ldr	r0, [r3, #0]
 8021990:	f107 0110 	add.w	r1, r7, #16
 8021994:	2300      	movs	r3, #0
 8021996:	683a      	ldr	r2, [r7, #0]
 8021998:	f7fe f9b8 	bl	801fd0c <xQueueGenericSendFromISR>
 802199c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 802199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80219a0:	4618      	mov	r0, r3
 80219a2:	3728      	adds	r7, #40	@ 0x28
 80219a4:	46bd      	mov	sp, r7
 80219a6:	bd80      	pop	{r7, pc}
 80219a8:	24019464 	.word	0x24019464

080219ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80219ac:	b580      	push	{r7, lr}
 80219ae:	b088      	sub	sp, #32
 80219b0:	af02      	add	r7, sp, #8
 80219b2:	6078      	str	r0, [r7, #4]
 80219b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80219b6:	4b23      	ldr	r3, [pc, #140]	@ (8021a44 <prvProcessExpiredTimer+0x98>)
 80219b8:	681b      	ldr	r3, [r3, #0]
 80219ba:	68db      	ldr	r3, [r3, #12]
 80219bc:	68db      	ldr	r3, [r3, #12]
 80219be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80219c0:	697b      	ldr	r3, [r7, #20]
 80219c2:	3304      	adds	r3, #4
 80219c4:	4618      	mov	r0, r3
 80219c6:	f7fd fe09 	bl	801f5dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80219ca:	697b      	ldr	r3, [r7, #20]
 80219cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80219d0:	f003 0304 	and.w	r3, r3, #4
 80219d4:	2b00      	cmp	r3, #0
 80219d6:	d023      	beq.n	8021a20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80219d8:	697b      	ldr	r3, [r7, #20]
 80219da:	699a      	ldr	r2, [r3, #24]
 80219dc:	687b      	ldr	r3, [r7, #4]
 80219de:	18d1      	adds	r1, r2, r3
 80219e0:	687b      	ldr	r3, [r7, #4]
 80219e2:	683a      	ldr	r2, [r7, #0]
 80219e4:	6978      	ldr	r0, [r7, #20]
 80219e6:	f000 f8d5 	bl	8021b94 <prvInsertTimerInActiveList>
 80219ea:	4603      	mov	r3, r0
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	d020      	beq.n	8021a32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80219f0:	2300      	movs	r3, #0
 80219f2:	9300      	str	r3, [sp, #0]
 80219f4:	2300      	movs	r3, #0
 80219f6:	687a      	ldr	r2, [r7, #4]
 80219f8:	2100      	movs	r1, #0
 80219fa:	6978      	ldr	r0, [r7, #20]
 80219fc:	f7ff ff88 	bl	8021910 <xTimerGenericCommand>
 8021a00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8021a02:	693b      	ldr	r3, [r7, #16]
 8021a04:	2b00      	cmp	r3, #0
 8021a06:	d114      	bne.n	8021a32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8021a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021a0c:	f383 8811 	msr	BASEPRI, r3
 8021a10:	f3bf 8f6f 	isb	sy
 8021a14:	f3bf 8f4f 	dsb	sy
 8021a18:	60fb      	str	r3, [r7, #12]
}
 8021a1a:	bf00      	nop
 8021a1c:	bf00      	nop
 8021a1e:	e7fd      	b.n	8021a1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8021a20:	697b      	ldr	r3, [r7, #20]
 8021a22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021a26:	f023 0301 	bic.w	r3, r3, #1
 8021a2a:	b2da      	uxtb	r2, r3
 8021a2c:	697b      	ldr	r3, [r7, #20]
 8021a2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8021a32:	697b      	ldr	r3, [r7, #20]
 8021a34:	6a1b      	ldr	r3, [r3, #32]
 8021a36:	6978      	ldr	r0, [r7, #20]
 8021a38:	4798      	blx	r3
}
 8021a3a:	bf00      	nop
 8021a3c:	3718      	adds	r7, #24
 8021a3e:	46bd      	mov	sp, r7
 8021a40:	bd80      	pop	{r7, pc}
 8021a42:	bf00      	nop
 8021a44:	2401945c 	.word	0x2401945c

08021a48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8021a48:	b580      	push	{r7, lr}
 8021a4a:	b084      	sub	sp, #16
 8021a4c:	af00      	add	r7, sp, #0
 8021a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8021a50:	f107 0308 	add.w	r3, r7, #8
 8021a54:	4618      	mov	r0, r3
 8021a56:	f000 f859 	bl	8021b0c <prvGetNextExpireTime>
 8021a5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8021a5c:	68bb      	ldr	r3, [r7, #8]
 8021a5e:	4619      	mov	r1, r3
 8021a60:	68f8      	ldr	r0, [r7, #12]
 8021a62:	f000 f805 	bl	8021a70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8021a66:	f000 f8d7 	bl	8021c18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8021a6a:	bf00      	nop
 8021a6c:	e7f0      	b.n	8021a50 <prvTimerTask+0x8>
	...

08021a70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8021a70:	b580      	push	{r7, lr}
 8021a72:	b084      	sub	sp, #16
 8021a74:	af00      	add	r7, sp, #0
 8021a76:	6078      	str	r0, [r7, #4]
 8021a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8021a7a:	f7ff f833 	bl	8020ae4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8021a7e:	f107 0308 	add.w	r3, r7, #8
 8021a82:	4618      	mov	r0, r3
 8021a84:	f000 f866 	bl	8021b54 <prvSampleTimeNow>
 8021a88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8021a8a:	68bb      	ldr	r3, [r7, #8]
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	d130      	bne.n	8021af2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8021a90:	683b      	ldr	r3, [r7, #0]
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	d10a      	bne.n	8021aac <prvProcessTimerOrBlockTask+0x3c>
 8021a96:	687a      	ldr	r2, [r7, #4]
 8021a98:	68fb      	ldr	r3, [r7, #12]
 8021a9a:	429a      	cmp	r2, r3
 8021a9c:	d806      	bhi.n	8021aac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8021a9e:	f7ff f82f 	bl	8020b00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8021aa2:	68f9      	ldr	r1, [r7, #12]
 8021aa4:	6878      	ldr	r0, [r7, #4]
 8021aa6:	f7ff ff81 	bl	80219ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8021aaa:	e024      	b.n	8021af6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8021aac:	683b      	ldr	r3, [r7, #0]
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	d008      	beq.n	8021ac4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8021ab2:	4b13      	ldr	r3, [pc, #76]	@ (8021b00 <prvProcessTimerOrBlockTask+0x90>)
 8021ab4:	681b      	ldr	r3, [r3, #0]
 8021ab6:	681b      	ldr	r3, [r3, #0]
 8021ab8:	2b00      	cmp	r3, #0
 8021aba:	d101      	bne.n	8021ac0 <prvProcessTimerOrBlockTask+0x50>
 8021abc:	2301      	movs	r3, #1
 8021abe:	e000      	b.n	8021ac2 <prvProcessTimerOrBlockTask+0x52>
 8021ac0:	2300      	movs	r3, #0
 8021ac2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8021ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8021b04 <prvProcessTimerOrBlockTask+0x94>)
 8021ac6:	6818      	ldr	r0, [r3, #0]
 8021ac8:	687a      	ldr	r2, [r7, #4]
 8021aca:	68fb      	ldr	r3, [r7, #12]
 8021acc:	1ad3      	subs	r3, r2, r3
 8021ace:	683a      	ldr	r2, [r7, #0]
 8021ad0:	4619      	mov	r1, r3
 8021ad2:	f7fe fd6b 	bl	80205ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8021ad6:	f7ff f813 	bl	8020b00 <xTaskResumeAll>
 8021ada:	4603      	mov	r3, r0
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d10a      	bne.n	8021af6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8021ae0:	4b09      	ldr	r3, [pc, #36]	@ (8021b08 <prvProcessTimerOrBlockTask+0x98>)
 8021ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021ae6:	601a      	str	r2, [r3, #0]
 8021ae8:	f3bf 8f4f 	dsb	sy
 8021aec:	f3bf 8f6f 	isb	sy
}
 8021af0:	e001      	b.n	8021af6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8021af2:	f7ff f805 	bl	8020b00 <xTaskResumeAll>
}
 8021af6:	bf00      	nop
 8021af8:	3710      	adds	r7, #16
 8021afa:	46bd      	mov	sp, r7
 8021afc:	bd80      	pop	{r7, pc}
 8021afe:	bf00      	nop
 8021b00:	24019460 	.word	0x24019460
 8021b04:	24019464 	.word	0x24019464
 8021b08:	e000ed04 	.word	0xe000ed04

08021b0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8021b0c:	b480      	push	{r7}
 8021b0e:	b085      	sub	sp, #20
 8021b10:	af00      	add	r7, sp, #0
 8021b12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8021b14:	4b0e      	ldr	r3, [pc, #56]	@ (8021b50 <prvGetNextExpireTime+0x44>)
 8021b16:	681b      	ldr	r3, [r3, #0]
 8021b18:	681b      	ldr	r3, [r3, #0]
 8021b1a:	2b00      	cmp	r3, #0
 8021b1c:	d101      	bne.n	8021b22 <prvGetNextExpireTime+0x16>
 8021b1e:	2201      	movs	r2, #1
 8021b20:	e000      	b.n	8021b24 <prvGetNextExpireTime+0x18>
 8021b22:	2200      	movs	r2, #0
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8021b28:	687b      	ldr	r3, [r7, #4]
 8021b2a:	681b      	ldr	r3, [r3, #0]
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	d105      	bne.n	8021b3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8021b30:	4b07      	ldr	r3, [pc, #28]	@ (8021b50 <prvGetNextExpireTime+0x44>)
 8021b32:	681b      	ldr	r3, [r3, #0]
 8021b34:	68db      	ldr	r3, [r3, #12]
 8021b36:	681b      	ldr	r3, [r3, #0]
 8021b38:	60fb      	str	r3, [r7, #12]
 8021b3a:	e001      	b.n	8021b40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8021b3c:	2300      	movs	r3, #0
 8021b3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8021b40:	68fb      	ldr	r3, [r7, #12]
}
 8021b42:	4618      	mov	r0, r3
 8021b44:	3714      	adds	r7, #20
 8021b46:	46bd      	mov	sp, r7
 8021b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b4c:	4770      	bx	lr
 8021b4e:	bf00      	nop
 8021b50:	2401945c 	.word	0x2401945c

08021b54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8021b54:	b580      	push	{r7, lr}
 8021b56:	b084      	sub	sp, #16
 8021b58:	af00      	add	r7, sp, #0
 8021b5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8021b5c:	f7ff f86e 	bl	8020c3c <xTaskGetTickCount>
 8021b60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8021b62:	4b0b      	ldr	r3, [pc, #44]	@ (8021b90 <prvSampleTimeNow+0x3c>)
 8021b64:	681b      	ldr	r3, [r3, #0]
 8021b66:	68fa      	ldr	r2, [r7, #12]
 8021b68:	429a      	cmp	r2, r3
 8021b6a:	d205      	bcs.n	8021b78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8021b6c:	f000 f93a 	bl	8021de4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	2201      	movs	r2, #1
 8021b74:	601a      	str	r2, [r3, #0]
 8021b76:	e002      	b.n	8021b7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	2200      	movs	r2, #0
 8021b7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8021b7e:	4a04      	ldr	r2, [pc, #16]	@ (8021b90 <prvSampleTimeNow+0x3c>)
 8021b80:	68fb      	ldr	r3, [r7, #12]
 8021b82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8021b84:	68fb      	ldr	r3, [r7, #12]
}
 8021b86:	4618      	mov	r0, r3
 8021b88:	3710      	adds	r7, #16
 8021b8a:	46bd      	mov	sp, r7
 8021b8c:	bd80      	pop	{r7, pc}
 8021b8e:	bf00      	nop
 8021b90:	2401946c 	.word	0x2401946c

08021b94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8021b94:	b580      	push	{r7, lr}
 8021b96:	b086      	sub	sp, #24
 8021b98:	af00      	add	r7, sp, #0
 8021b9a:	60f8      	str	r0, [r7, #12]
 8021b9c:	60b9      	str	r1, [r7, #8]
 8021b9e:	607a      	str	r2, [r7, #4]
 8021ba0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8021ba2:	2300      	movs	r3, #0
 8021ba4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8021ba6:	68fb      	ldr	r3, [r7, #12]
 8021ba8:	68ba      	ldr	r2, [r7, #8]
 8021baa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8021bac:	68fb      	ldr	r3, [r7, #12]
 8021bae:	68fa      	ldr	r2, [r7, #12]
 8021bb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8021bb2:	68ba      	ldr	r2, [r7, #8]
 8021bb4:	687b      	ldr	r3, [r7, #4]
 8021bb6:	429a      	cmp	r2, r3
 8021bb8:	d812      	bhi.n	8021be0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021bba:	687a      	ldr	r2, [r7, #4]
 8021bbc:	683b      	ldr	r3, [r7, #0]
 8021bbe:	1ad2      	subs	r2, r2, r3
 8021bc0:	68fb      	ldr	r3, [r7, #12]
 8021bc2:	699b      	ldr	r3, [r3, #24]
 8021bc4:	429a      	cmp	r2, r3
 8021bc6:	d302      	bcc.n	8021bce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8021bc8:	2301      	movs	r3, #1
 8021bca:	617b      	str	r3, [r7, #20]
 8021bcc:	e01b      	b.n	8021c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8021bce:	4b10      	ldr	r3, [pc, #64]	@ (8021c10 <prvInsertTimerInActiveList+0x7c>)
 8021bd0:	681a      	ldr	r2, [r3, #0]
 8021bd2:	68fb      	ldr	r3, [r7, #12]
 8021bd4:	3304      	adds	r3, #4
 8021bd6:	4619      	mov	r1, r3
 8021bd8:	4610      	mov	r0, r2
 8021bda:	f7fd fcc6 	bl	801f56a <vListInsert>
 8021bde:	e012      	b.n	8021c06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8021be0:	687a      	ldr	r2, [r7, #4]
 8021be2:	683b      	ldr	r3, [r7, #0]
 8021be4:	429a      	cmp	r2, r3
 8021be6:	d206      	bcs.n	8021bf6 <prvInsertTimerInActiveList+0x62>
 8021be8:	68ba      	ldr	r2, [r7, #8]
 8021bea:	683b      	ldr	r3, [r7, #0]
 8021bec:	429a      	cmp	r2, r3
 8021bee:	d302      	bcc.n	8021bf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8021bf0:	2301      	movs	r3, #1
 8021bf2:	617b      	str	r3, [r7, #20]
 8021bf4:	e007      	b.n	8021c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8021bf6:	4b07      	ldr	r3, [pc, #28]	@ (8021c14 <prvInsertTimerInActiveList+0x80>)
 8021bf8:	681a      	ldr	r2, [r3, #0]
 8021bfa:	68fb      	ldr	r3, [r7, #12]
 8021bfc:	3304      	adds	r3, #4
 8021bfe:	4619      	mov	r1, r3
 8021c00:	4610      	mov	r0, r2
 8021c02:	f7fd fcb2 	bl	801f56a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8021c06:	697b      	ldr	r3, [r7, #20]
}
 8021c08:	4618      	mov	r0, r3
 8021c0a:	3718      	adds	r7, #24
 8021c0c:	46bd      	mov	sp, r7
 8021c0e:	bd80      	pop	{r7, pc}
 8021c10:	24019460 	.word	0x24019460
 8021c14:	2401945c 	.word	0x2401945c

08021c18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8021c18:	b580      	push	{r7, lr}
 8021c1a:	b08e      	sub	sp, #56	@ 0x38
 8021c1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8021c1e:	e0ce      	b.n	8021dbe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	2b00      	cmp	r3, #0
 8021c24:	da19      	bge.n	8021c5a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8021c26:	1d3b      	adds	r3, r7, #4
 8021c28:	3304      	adds	r3, #4
 8021c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8021c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021c2e:	2b00      	cmp	r3, #0
 8021c30:	d10b      	bne.n	8021c4a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8021c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021c36:	f383 8811 	msr	BASEPRI, r3
 8021c3a:	f3bf 8f6f 	isb	sy
 8021c3e:	f3bf 8f4f 	dsb	sy
 8021c42:	61fb      	str	r3, [r7, #28]
}
 8021c44:	bf00      	nop
 8021c46:	bf00      	nop
 8021c48:	e7fd      	b.n	8021c46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8021c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021c4c:	681b      	ldr	r3, [r3, #0]
 8021c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021c50:	6850      	ldr	r0, [r2, #4]
 8021c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021c54:	6892      	ldr	r2, [r2, #8]
 8021c56:	4611      	mov	r1, r2
 8021c58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	2b00      	cmp	r3, #0
 8021c5e:	f2c0 80ae 	blt.w	8021dbe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8021c62:	68fb      	ldr	r3, [r7, #12]
 8021c64:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8021c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c68:	695b      	ldr	r3, [r3, #20]
 8021c6a:	2b00      	cmp	r3, #0
 8021c6c:	d004      	beq.n	8021c78 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8021c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c70:	3304      	adds	r3, #4
 8021c72:	4618      	mov	r0, r3
 8021c74:	f7fd fcb2 	bl	801f5dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8021c78:	463b      	mov	r3, r7
 8021c7a:	4618      	mov	r0, r3
 8021c7c:	f7ff ff6a 	bl	8021b54 <prvSampleTimeNow>
 8021c80:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8021c82:	687b      	ldr	r3, [r7, #4]
 8021c84:	2b09      	cmp	r3, #9
 8021c86:	f200 8097 	bhi.w	8021db8 <prvProcessReceivedCommands+0x1a0>
 8021c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8021c90 <prvProcessReceivedCommands+0x78>)
 8021c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c90:	08021cb9 	.word	0x08021cb9
 8021c94:	08021cb9 	.word	0x08021cb9
 8021c98:	08021cb9 	.word	0x08021cb9
 8021c9c:	08021d2f 	.word	0x08021d2f
 8021ca0:	08021d43 	.word	0x08021d43
 8021ca4:	08021d8f 	.word	0x08021d8f
 8021ca8:	08021cb9 	.word	0x08021cb9
 8021cac:	08021cb9 	.word	0x08021cb9
 8021cb0:	08021d2f 	.word	0x08021d2f
 8021cb4:	08021d43 	.word	0x08021d43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8021cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021cba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021cbe:	f043 0301 	orr.w	r3, r3, #1
 8021cc2:	b2da      	uxtb	r2, r3
 8021cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021cc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8021cca:	68ba      	ldr	r2, [r7, #8]
 8021ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021cce:	699b      	ldr	r3, [r3, #24]
 8021cd0:	18d1      	adds	r1, r2, r3
 8021cd2:	68bb      	ldr	r3, [r7, #8]
 8021cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021cd8:	f7ff ff5c 	bl	8021b94 <prvInsertTimerInActiveList>
 8021cdc:	4603      	mov	r3, r0
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	d06c      	beq.n	8021dbc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8021ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ce4:	6a1b      	ldr	r3, [r3, #32]
 8021ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021ce8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8021cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021cec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021cf0:	f003 0304 	and.w	r3, r3, #4
 8021cf4:	2b00      	cmp	r3, #0
 8021cf6:	d061      	beq.n	8021dbc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8021cf8:	68ba      	ldr	r2, [r7, #8]
 8021cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021cfc:	699b      	ldr	r3, [r3, #24]
 8021cfe:	441a      	add	r2, r3
 8021d00:	2300      	movs	r3, #0
 8021d02:	9300      	str	r3, [sp, #0]
 8021d04:	2300      	movs	r3, #0
 8021d06:	2100      	movs	r1, #0
 8021d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021d0a:	f7ff fe01 	bl	8021910 <xTimerGenericCommand>
 8021d0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8021d10:	6a3b      	ldr	r3, [r7, #32]
 8021d12:	2b00      	cmp	r3, #0
 8021d14:	d152      	bne.n	8021dbc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8021d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021d1a:	f383 8811 	msr	BASEPRI, r3
 8021d1e:	f3bf 8f6f 	isb	sy
 8021d22:	f3bf 8f4f 	dsb	sy
 8021d26:	61bb      	str	r3, [r7, #24]
}
 8021d28:	bf00      	nop
 8021d2a:	bf00      	nop
 8021d2c:	e7fd      	b.n	8021d2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8021d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021d34:	f023 0301 	bic.w	r3, r3, #1
 8021d38:	b2da      	uxtb	r2, r3
 8021d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8021d40:	e03d      	b.n	8021dbe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8021d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021d48:	f043 0301 	orr.w	r3, r3, #1
 8021d4c:	b2da      	uxtb	r2, r3
 8021d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8021d54:	68ba      	ldr	r2, [r7, #8]
 8021d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8021d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d5c:	699b      	ldr	r3, [r3, #24]
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	d10b      	bne.n	8021d7a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8021d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021d66:	f383 8811 	msr	BASEPRI, r3
 8021d6a:	f3bf 8f6f 	isb	sy
 8021d6e:	f3bf 8f4f 	dsb	sy
 8021d72:	617b      	str	r3, [r7, #20]
}
 8021d74:	bf00      	nop
 8021d76:	bf00      	nop
 8021d78:	e7fd      	b.n	8021d76 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8021d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d7c:	699a      	ldr	r2, [r3, #24]
 8021d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d80:	18d1      	adds	r1, r2, r3
 8021d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021d88:	f7ff ff04 	bl	8021b94 <prvInsertTimerInActiveList>
					break;
 8021d8c:	e017      	b.n	8021dbe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8021d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021d94:	f003 0302 	and.w	r3, r3, #2
 8021d98:	2b00      	cmp	r3, #0
 8021d9a:	d103      	bne.n	8021da4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8021d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021d9e:	f000 fc0b 	bl	80225b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8021da2:	e00c      	b.n	8021dbe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8021da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021da6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021daa:	f023 0301 	bic.w	r3, r3, #1
 8021dae:	b2da      	uxtb	r2, r3
 8021db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021db2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8021db6:	e002      	b.n	8021dbe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8021db8:	bf00      	nop
 8021dba:	e000      	b.n	8021dbe <prvProcessReceivedCommands+0x1a6>
					break;
 8021dbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8021dbe:	4b08      	ldr	r3, [pc, #32]	@ (8021de0 <prvProcessReceivedCommands+0x1c8>)
 8021dc0:	681b      	ldr	r3, [r3, #0]
 8021dc2:	1d39      	adds	r1, r7, #4
 8021dc4:	2200      	movs	r2, #0
 8021dc6:	4618      	mov	r0, r3
 8021dc8:	f7fe f83e 	bl	801fe48 <xQueueReceive>
 8021dcc:	4603      	mov	r3, r0
 8021dce:	2b00      	cmp	r3, #0
 8021dd0:	f47f af26 	bne.w	8021c20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8021dd4:	bf00      	nop
 8021dd6:	bf00      	nop
 8021dd8:	3730      	adds	r7, #48	@ 0x30
 8021dda:	46bd      	mov	sp, r7
 8021ddc:	bd80      	pop	{r7, pc}
 8021dde:	bf00      	nop
 8021de0:	24019464 	.word	0x24019464

08021de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8021de4:	b580      	push	{r7, lr}
 8021de6:	b088      	sub	sp, #32
 8021de8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8021dea:	e049      	b.n	8021e80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8021dec:	4b2e      	ldr	r3, [pc, #184]	@ (8021ea8 <prvSwitchTimerLists+0xc4>)
 8021dee:	681b      	ldr	r3, [r3, #0]
 8021df0:	68db      	ldr	r3, [r3, #12]
 8021df2:	681b      	ldr	r3, [r3, #0]
 8021df4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021df6:	4b2c      	ldr	r3, [pc, #176]	@ (8021ea8 <prvSwitchTimerLists+0xc4>)
 8021df8:	681b      	ldr	r3, [r3, #0]
 8021dfa:	68db      	ldr	r3, [r3, #12]
 8021dfc:	68db      	ldr	r3, [r3, #12]
 8021dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8021e00:	68fb      	ldr	r3, [r7, #12]
 8021e02:	3304      	adds	r3, #4
 8021e04:	4618      	mov	r0, r3
 8021e06:	f7fd fbe9 	bl	801f5dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8021e0a:	68fb      	ldr	r3, [r7, #12]
 8021e0c:	6a1b      	ldr	r3, [r3, #32]
 8021e0e:	68f8      	ldr	r0, [r7, #12]
 8021e10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8021e12:	68fb      	ldr	r3, [r7, #12]
 8021e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8021e18:	f003 0304 	and.w	r3, r3, #4
 8021e1c:	2b00      	cmp	r3, #0
 8021e1e:	d02f      	beq.n	8021e80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8021e20:	68fb      	ldr	r3, [r7, #12]
 8021e22:	699b      	ldr	r3, [r3, #24]
 8021e24:	693a      	ldr	r2, [r7, #16]
 8021e26:	4413      	add	r3, r2
 8021e28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8021e2a:	68ba      	ldr	r2, [r7, #8]
 8021e2c:	693b      	ldr	r3, [r7, #16]
 8021e2e:	429a      	cmp	r2, r3
 8021e30:	d90e      	bls.n	8021e50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8021e32:	68fb      	ldr	r3, [r7, #12]
 8021e34:	68ba      	ldr	r2, [r7, #8]
 8021e36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8021e38:	68fb      	ldr	r3, [r7, #12]
 8021e3a:	68fa      	ldr	r2, [r7, #12]
 8021e3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8021e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8021ea8 <prvSwitchTimerLists+0xc4>)
 8021e40:	681a      	ldr	r2, [r3, #0]
 8021e42:	68fb      	ldr	r3, [r7, #12]
 8021e44:	3304      	adds	r3, #4
 8021e46:	4619      	mov	r1, r3
 8021e48:	4610      	mov	r0, r2
 8021e4a:	f7fd fb8e 	bl	801f56a <vListInsert>
 8021e4e:	e017      	b.n	8021e80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8021e50:	2300      	movs	r3, #0
 8021e52:	9300      	str	r3, [sp, #0]
 8021e54:	2300      	movs	r3, #0
 8021e56:	693a      	ldr	r2, [r7, #16]
 8021e58:	2100      	movs	r1, #0
 8021e5a:	68f8      	ldr	r0, [r7, #12]
 8021e5c:	f7ff fd58 	bl	8021910 <xTimerGenericCommand>
 8021e60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8021e62:	687b      	ldr	r3, [r7, #4]
 8021e64:	2b00      	cmp	r3, #0
 8021e66:	d10b      	bne.n	8021e80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8021e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021e6c:	f383 8811 	msr	BASEPRI, r3
 8021e70:	f3bf 8f6f 	isb	sy
 8021e74:	f3bf 8f4f 	dsb	sy
 8021e78:	603b      	str	r3, [r7, #0]
}
 8021e7a:	bf00      	nop
 8021e7c:	bf00      	nop
 8021e7e:	e7fd      	b.n	8021e7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8021e80:	4b09      	ldr	r3, [pc, #36]	@ (8021ea8 <prvSwitchTimerLists+0xc4>)
 8021e82:	681b      	ldr	r3, [r3, #0]
 8021e84:	681b      	ldr	r3, [r3, #0]
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	d1b0      	bne.n	8021dec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8021e8a:	4b07      	ldr	r3, [pc, #28]	@ (8021ea8 <prvSwitchTimerLists+0xc4>)
 8021e8c:	681b      	ldr	r3, [r3, #0]
 8021e8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8021e90:	4b06      	ldr	r3, [pc, #24]	@ (8021eac <prvSwitchTimerLists+0xc8>)
 8021e92:	681b      	ldr	r3, [r3, #0]
 8021e94:	4a04      	ldr	r2, [pc, #16]	@ (8021ea8 <prvSwitchTimerLists+0xc4>)
 8021e96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8021e98:	4a04      	ldr	r2, [pc, #16]	@ (8021eac <prvSwitchTimerLists+0xc8>)
 8021e9a:	697b      	ldr	r3, [r7, #20]
 8021e9c:	6013      	str	r3, [r2, #0]
}
 8021e9e:	bf00      	nop
 8021ea0:	3718      	adds	r7, #24
 8021ea2:	46bd      	mov	sp, r7
 8021ea4:	bd80      	pop	{r7, pc}
 8021ea6:	bf00      	nop
 8021ea8:	2401945c 	.word	0x2401945c
 8021eac:	24019460 	.word	0x24019460

08021eb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8021eb0:	b580      	push	{r7, lr}
 8021eb2:	b082      	sub	sp, #8
 8021eb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8021eb6:	f000 f98f 	bl	80221d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8021eba:	4b15      	ldr	r3, [pc, #84]	@ (8021f10 <prvCheckForValidListAndQueue+0x60>)
 8021ebc:	681b      	ldr	r3, [r3, #0]
 8021ebe:	2b00      	cmp	r3, #0
 8021ec0:	d120      	bne.n	8021f04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8021ec2:	4814      	ldr	r0, [pc, #80]	@ (8021f14 <prvCheckForValidListAndQueue+0x64>)
 8021ec4:	f7fd fb00 	bl	801f4c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8021ec8:	4813      	ldr	r0, [pc, #76]	@ (8021f18 <prvCheckForValidListAndQueue+0x68>)
 8021eca:	f7fd fafd 	bl	801f4c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8021ece:	4b13      	ldr	r3, [pc, #76]	@ (8021f1c <prvCheckForValidListAndQueue+0x6c>)
 8021ed0:	4a10      	ldr	r2, [pc, #64]	@ (8021f14 <prvCheckForValidListAndQueue+0x64>)
 8021ed2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8021ed4:	4b12      	ldr	r3, [pc, #72]	@ (8021f20 <prvCheckForValidListAndQueue+0x70>)
 8021ed6:	4a10      	ldr	r2, [pc, #64]	@ (8021f18 <prvCheckForValidListAndQueue+0x68>)
 8021ed8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8021eda:	2300      	movs	r3, #0
 8021edc:	9300      	str	r3, [sp, #0]
 8021ede:	4b11      	ldr	r3, [pc, #68]	@ (8021f24 <prvCheckForValidListAndQueue+0x74>)
 8021ee0:	4a11      	ldr	r2, [pc, #68]	@ (8021f28 <prvCheckForValidListAndQueue+0x78>)
 8021ee2:	2110      	movs	r1, #16
 8021ee4:	200a      	movs	r0, #10
 8021ee6:	f7fd fc0d 	bl	801f704 <xQueueGenericCreateStatic>
 8021eea:	4603      	mov	r3, r0
 8021eec:	4a08      	ldr	r2, [pc, #32]	@ (8021f10 <prvCheckForValidListAndQueue+0x60>)
 8021eee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8021ef0:	4b07      	ldr	r3, [pc, #28]	@ (8021f10 <prvCheckForValidListAndQueue+0x60>)
 8021ef2:	681b      	ldr	r3, [r3, #0]
 8021ef4:	2b00      	cmp	r3, #0
 8021ef6:	d005      	beq.n	8021f04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8021ef8:	4b05      	ldr	r3, [pc, #20]	@ (8021f10 <prvCheckForValidListAndQueue+0x60>)
 8021efa:	681b      	ldr	r3, [r3, #0]
 8021efc:	490b      	ldr	r1, [pc, #44]	@ (8021f2c <prvCheckForValidListAndQueue+0x7c>)
 8021efe:	4618      	mov	r0, r3
 8021f00:	f7fe fb00 	bl	8020504 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8021f04:	f000 f99a 	bl	802223c <vPortExitCritical>
}
 8021f08:	bf00      	nop
 8021f0a:	46bd      	mov	sp, r7
 8021f0c:	bd80      	pop	{r7, pc}
 8021f0e:	bf00      	nop
 8021f10:	24019464 	.word	0x24019464
 8021f14:	24019434 	.word	0x24019434
 8021f18:	24019448 	.word	0x24019448
 8021f1c:	2401945c 	.word	0x2401945c
 8021f20:	24019460 	.word	0x24019460
 8021f24:	24019510 	.word	0x24019510
 8021f28:	24019470 	.word	0x24019470
 8021f2c:	0802adf8 	.word	0x0802adf8

08021f30 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8021f30:	b580      	push	{r7, lr}
 8021f32:	b08a      	sub	sp, #40	@ 0x28
 8021f34:	af00      	add	r7, sp, #0
 8021f36:	60f8      	str	r0, [r7, #12]
 8021f38:	60b9      	str	r1, [r7, #8]
 8021f3a:	607a      	str	r2, [r7, #4]
 8021f3c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8021f3e:	f06f 0301 	mvn.w	r3, #1
 8021f42:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8021f44:	68fb      	ldr	r3, [r7, #12]
 8021f46:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8021f48:	68bb      	ldr	r3, [r7, #8]
 8021f4a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8021f50:	4b06      	ldr	r3, [pc, #24]	@ (8021f6c <xTimerPendFunctionCallFromISR+0x3c>)
 8021f52:	6818      	ldr	r0, [r3, #0]
 8021f54:	f107 0114 	add.w	r1, r7, #20
 8021f58:	2300      	movs	r3, #0
 8021f5a:	683a      	ldr	r2, [r7, #0]
 8021f5c:	f7fd fed6 	bl	801fd0c <xQueueGenericSendFromISR>
 8021f60:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8021f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8021f64:	4618      	mov	r0, r3
 8021f66:	3728      	adds	r7, #40	@ 0x28
 8021f68:	46bd      	mov	sp, r7
 8021f6a:	bd80      	pop	{r7, pc}
 8021f6c:	24019464 	.word	0x24019464

08021f70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8021f70:	b480      	push	{r7}
 8021f72:	b085      	sub	sp, #20
 8021f74:	af00      	add	r7, sp, #0
 8021f76:	60f8      	str	r0, [r7, #12]
 8021f78:	60b9      	str	r1, [r7, #8]
 8021f7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8021f7c:	68fb      	ldr	r3, [r7, #12]
 8021f7e:	3b04      	subs	r3, #4
 8021f80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8021f82:	68fb      	ldr	r3, [r7, #12]
 8021f84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8021f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8021f8a:	68fb      	ldr	r3, [r7, #12]
 8021f8c:	3b04      	subs	r3, #4
 8021f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8021f90:	68bb      	ldr	r3, [r7, #8]
 8021f92:	f023 0201 	bic.w	r2, r3, #1
 8021f96:	68fb      	ldr	r3, [r7, #12]
 8021f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8021f9a:	68fb      	ldr	r3, [r7, #12]
 8021f9c:	3b04      	subs	r3, #4
 8021f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8021fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8021fd4 <pxPortInitialiseStack+0x64>)
 8021fa2:	68fb      	ldr	r3, [r7, #12]
 8021fa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8021fa6:	68fb      	ldr	r3, [r7, #12]
 8021fa8:	3b14      	subs	r3, #20
 8021faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8021fac:	687a      	ldr	r2, [r7, #4]
 8021fae:	68fb      	ldr	r3, [r7, #12]
 8021fb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8021fb2:	68fb      	ldr	r3, [r7, #12]
 8021fb4:	3b04      	subs	r3, #4
 8021fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8021fb8:	68fb      	ldr	r3, [r7, #12]
 8021fba:	f06f 0202 	mvn.w	r2, #2
 8021fbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8021fc0:	68fb      	ldr	r3, [r7, #12]
 8021fc2:	3b20      	subs	r3, #32
 8021fc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8021fc6:	68fb      	ldr	r3, [r7, #12]
}
 8021fc8:	4618      	mov	r0, r3
 8021fca:	3714      	adds	r7, #20
 8021fcc:	46bd      	mov	sp, r7
 8021fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fd2:	4770      	bx	lr
 8021fd4:	08021fd9 	.word	0x08021fd9

08021fd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8021fd8:	b480      	push	{r7}
 8021fda:	b085      	sub	sp, #20
 8021fdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8021fde:	2300      	movs	r3, #0
 8021fe0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8021fe2:	4b13      	ldr	r3, [pc, #76]	@ (8022030 <prvTaskExitError+0x58>)
 8021fe4:	681b      	ldr	r3, [r3, #0]
 8021fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021fea:	d00b      	beq.n	8022004 <prvTaskExitError+0x2c>
	__asm volatile
 8021fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021ff0:	f383 8811 	msr	BASEPRI, r3
 8021ff4:	f3bf 8f6f 	isb	sy
 8021ff8:	f3bf 8f4f 	dsb	sy
 8021ffc:	60fb      	str	r3, [r7, #12]
}
 8021ffe:	bf00      	nop
 8022000:	bf00      	nop
 8022002:	e7fd      	b.n	8022000 <prvTaskExitError+0x28>
	__asm volatile
 8022004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022008:	f383 8811 	msr	BASEPRI, r3
 802200c:	f3bf 8f6f 	isb	sy
 8022010:	f3bf 8f4f 	dsb	sy
 8022014:	60bb      	str	r3, [r7, #8]
}
 8022016:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8022018:	bf00      	nop
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	2b00      	cmp	r3, #0
 802201e:	d0fc      	beq.n	802201a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8022020:	bf00      	nop
 8022022:	bf00      	nop
 8022024:	3714      	adds	r7, #20
 8022026:	46bd      	mov	sp, r7
 8022028:	f85d 7b04 	ldr.w	r7, [sp], #4
 802202c:	4770      	bx	lr
 802202e:	bf00      	nop
 8022030:	2400032c 	.word	0x2400032c
	...

08022040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8022040:	4b07      	ldr	r3, [pc, #28]	@ (8022060 <pxCurrentTCBConst2>)
 8022042:	6819      	ldr	r1, [r3, #0]
 8022044:	6808      	ldr	r0, [r1, #0]
 8022046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802204a:	f380 8809 	msr	PSP, r0
 802204e:	f3bf 8f6f 	isb	sy
 8022052:	f04f 0000 	mov.w	r0, #0
 8022056:	f380 8811 	msr	BASEPRI, r0
 802205a:	4770      	bx	lr
 802205c:	f3af 8000 	nop.w

08022060 <pxCurrentTCBConst2>:
 8022060:	24018f2c 	.word	0x24018f2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8022064:	bf00      	nop
 8022066:	bf00      	nop

08022068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8022068:	4808      	ldr	r0, [pc, #32]	@ (802208c <prvPortStartFirstTask+0x24>)
 802206a:	6800      	ldr	r0, [r0, #0]
 802206c:	6800      	ldr	r0, [r0, #0]
 802206e:	f380 8808 	msr	MSP, r0
 8022072:	f04f 0000 	mov.w	r0, #0
 8022076:	f380 8814 	msr	CONTROL, r0
 802207a:	b662      	cpsie	i
 802207c:	b661      	cpsie	f
 802207e:	f3bf 8f4f 	dsb	sy
 8022082:	f3bf 8f6f 	isb	sy
 8022086:	df00      	svc	0
 8022088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802208a:	bf00      	nop
 802208c:	e000ed08 	.word	0xe000ed08

08022090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8022090:	b580      	push	{r7, lr}
 8022092:	b086      	sub	sp, #24
 8022094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8022096:	4b47      	ldr	r3, [pc, #284]	@ (80221b4 <xPortStartScheduler+0x124>)
 8022098:	681b      	ldr	r3, [r3, #0]
 802209a:	4a47      	ldr	r2, [pc, #284]	@ (80221b8 <xPortStartScheduler+0x128>)
 802209c:	4293      	cmp	r3, r2
 802209e:	d10b      	bne.n	80220b8 <xPortStartScheduler+0x28>
	__asm volatile
 80220a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80220a4:	f383 8811 	msr	BASEPRI, r3
 80220a8:	f3bf 8f6f 	isb	sy
 80220ac:	f3bf 8f4f 	dsb	sy
 80220b0:	60fb      	str	r3, [r7, #12]
}
 80220b2:	bf00      	nop
 80220b4:	bf00      	nop
 80220b6:	e7fd      	b.n	80220b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80220b8:	4b3e      	ldr	r3, [pc, #248]	@ (80221b4 <xPortStartScheduler+0x124>)
 80220ba:	681b      	ldr	r3, [r3, #0]
 80220bc:	4a3f      	ldr	r2, [pc, #252]	@ (80221bc <xPortStartScheduler+0x12c>)
 80220be:	4293      	cmp	r3, r2
 80220c0:	d10b      	bne.n	80220da <xPortStartScheduler+0x4a>
	__asm volatile
 80220c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80220c6:	f383 8811 	msr	BASEPRI, r3
 80220ca:	f3bf 8f6f 	isb	sy
 80220ce:	f3bf 8f4f 	dsb	sy
 80220d2:	613b      	str	r3, [r7, #16]
}
 80220d4:	bf00      	nop
 80220d6:	bf00      	nop
 80220d8:	e7fd      	b.n	80220d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80220da:	4b39      	ldr	r3, [pc, #228]	@ (80221c0 <xPortStartScheduler+0x130>)
 80220dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80220de:	697b      	ldr	r3, [r7, #20]
 80220e0:	781b      	ldrb	r3, [r3, #0]
 80220e2:	b2db      	uxtb	r3, r3
 80220e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80220e6:	697b      	ldr	r3, [r7, #20]
 80220e8:	22ff      	movs	r2, #255	@ 0xff
 80220ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80220ec:	697b      	ldr	r3, [r7, #20]
 80220ee:	781b      	ldrb	r3, [r3, #0]
 80220f0:	b2db      	uxtb	r3, r3
 80220f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80220f4:	78fb      	ldrb	r3, [r7, #3]
 80220f6:	b2db      	uxtb	r3, r3
 80220f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80220fc:	b2da      	uxtb	r2, r3
 80220fe:	4b31      	ldr	r3, [pc, #196]	@ (80221c4 <xPortStartScheduler+0x134>)
 8022100:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8022102:	4b31      	ldr	r3, [pc, #196]	@ (80221c8 <xPortStartScheduler+0x138>)
 8022104:	2207      	movs	r2, #7
 8022106:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8022108:	e009      	b.n	802211e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 802210a:	4b2f      	ldr	r3, [pc, #188]	@ (80221c8 <xPortStartScheduler+0x138>)
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	3b01      	subs	r3, #1
 8022110:	4a2d      	ldr	r2, [pc, #180]	@ (80221c8 <xPortStartScheduler+0x138>)
 8022112:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8022114:	78fb      	ldrb	r3, [r7, #3]
 8022116:	b2db      	uxtb	r3, r3
 8022118:	005b      	lsls	r3, r3, #1
 802211a:	b2db      	uxtb	r3, r3
 802211c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802211e:	78fb      	ldrb	r3, [r7, #3]
 8022120:	b2db      	uxtb	r3, r3
 8022122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022126:	2b80      	cmp	r3, #128	@ 0x80
 8022128:	d0ef      	beq.n	802210a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 802212a:	4b27      	ldr	r3, [pc, #156]	@ (80221c8 <xPortStartScheduler+0x138>)
 802212c:	681b      	ldr	r3, [r3, #0]
 802212e:	f1c3 0307 	rsb	r3, r3, #7
 8022132:	2b04      	cmp	r3, #4
 8022134:	d00b      	beq.n	802214e <xPortStartScheduler+0xbe>
	__asm volatile
 8022136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802213a:	f383 8811 	msr	BASEPRI, r3
 802213e:	f3bf 8f6f 	isb	sy
 8022142:	f3bf 8f4f 	dsb	sy
 8022146:	60bb      	str	r3, [r7, #8]
}
 8022148:	bf00      	nop
 802214a:	bf00      	nop
 802214c:	e7fd      	b.n	802214a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 802214e:	4b1e      	ldr	r3, [pc, #120]	@ (80221c8 <xPortStartScheduler+0x138>)
 8022150:	681b      	ldr	r3, [r3, #0]
 8022152:	021b      	lsls	r3, r3, #8
 8022154:	4a1c      	ldr	r2, [pc, #112]	@ (80221c8 <xPortStartScheduler+0x138>)
 8022156:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8022158:	4b1b      	ldr	r3, [pc, #108]	@ (80221c8 <xPortStartScheduler+0x138>)
 802215a:	681b      	ldr	r3, [r3, #0]
 802215c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8022160:	4a19      	ldr	r2, [pc, #100]	@ (80221c8 <xPortStartScheduler+0x138>)
 8022162:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	b2da      	uxtb	r2, r3
 8022168:	697b      	ldr	r3, [r7, #20]
 802216a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 802216c:	4b17      	ldr	r3, [pc, #92]	@ (80221cc <xPortStartScheduler+0x13c>)
 802216e:	681b      	ldr	r3, [r3, #0]
 8022170:	4a16      	ldr	r2, [pc, #88]	@ (80221cc <xPortStartScheduler+0x13c>)
 8022172:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8022176:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8022178:	4b14      	ldr	r3, [pc, #80]	@ (80221cc <xPortStartScheduler+0x13c>)
 802217a:	681b      	ldr	r3, [r3, #0]
 802217c:	4a13      	ldr	r2, [pc, #76]	@ (80221cc <xPortStartScheduler+0x13c>)
 802217e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8022182:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8022184:	f000 f8da 	bl	802233c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8022188:	4b11      	ldr	r3, [pc, #68]	@ (80221d0 <xPortStartScheduler+0x140>)
 802218a:	2200      	movs	r2, #0
 802218c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 802218e:	f000 f8f9 	bl	8022384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8022192:	4b10      	ldr	r3, [pc, #64]	@ (80221d4 <xPortStartScheduler+0x144>)
 8022194:	681b      	ldr	r3, [r3, #0]
 8022196:	4a0f      	ldr	r2, [pc, #60]	@ (80221d4 <xPortStartScheduler+0x144>)
 8022198:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 802219c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 802219e:	f7ff ff63 	bl	8022068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80221a2:	f7fe fe27 	bl	8020df4 <vTaskSwitchContext>
	prvTaskExitError();
 80221a6:	f7ff ff17 	bl	8021fd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80221aa:	2300      	movs	r3, #0
}
 80221ac:	4618      	mov	r0, r3
 80221ae:	3718      	adds	r7, #24
 80221b0:	46bd      	mov	sp, r7
 80221b2:	bd80      	pop	{r7, pc}
 80221b4:	e000ed00 	.word	0xe000ed00
 80221b8:	410fc271 	.word	0x410fc271
 80221bc:	410fc270 	.word	0x410fc270
 80221c0:	e000e400 	.word	0xe000e400
 80221c4:	24019560 	.word	0x24019560
 80221c8:	24019564 	.word	0x24019564
 80221cc:	e000ed20 	.word	0xe000ed20
 80221d0:	2400032c 	.word	0x2400032c
 80221d4:	e000ef34 	.word	0xe000ef34

080221d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80221d8:	b480      	push	{r7}
 80221da:	b083      	sub	sp, #12
 80221dc:	af00      	add	r7, sp, #0
	__asm volatile
 80221de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80221e2:	f383 8811 	msr	BASEPRI, r3
 80221e6:	f3bf 8f6f 	isb	sy
 80221ea:	f3bf 8f4f 	dsb	sy
 80221ee:	607b      	str	r3, [r7, #4]
}
 80221f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80221f2:	4b10      	ldr	r3, [pc, #64]	@ (8022234 <vPortEnterCritical+0x5c>)
 80221f4:	681b      	ldr	r3, [r3, #0]
 80221f6:	3301      	adds	r3, #1
 80221f8:	4a0e      	ldr	r2, [pc, #56]	@ (8022234 <vPortEnterCritical+0x5c>)
 80221fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80221fc:	4b0d      	ldr	r3, [pc, #52]	@ (8022234 <vPortEnterCritical+0x5c>)
 80221fe:	681b      	ldr	r3, [r3, #0]
 8022200:	2b01      	cmp	r3, #1
 8022202:	d110      	bne.n	8022226 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8022204:	4b0c      	ldr	r3, [pc, #48]	@ (8022238 <vPortEnterCritical+0x60>)
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	b2db      	uxtb	r3, r3
 802220a:	2b00      	cmp	r3, #0
 802220c:	d00b      	beq.n	8022226 <vPortEnterCritical+0x4e>
	__asm volatile
 802220e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022212:	f383 8811 	msr	BASEPRI, r3
 8022216:	f3bf 8f6f 	isb	sy
 802221a:	f3bf 8f4f 	dsb	sy
 802221e:	603b      	str	r3, [r7, #0]
}
 8022220:	bf00      	nop
 8022222:	bf00      	nop
 8022224:	e7fd      	b.n	8022222 <vPortEnterCritical+0x4a>
	}
}
 8022226:	bf00      	nop
 8022228:	370c      	adds	r7, #12
 802222a:	46bd      	mov	sp, r7
 802222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022230:	4770      	bx	lr
 8022232:	bf00      	nop
 8022234:	2400032c 	.word	0x2400032c
 8022238:	e000ed04 	.word	0xe000ed04

0802223c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 802223c:	b480      	push	{r7}
 802223e:	b083      	sub	sp, #12
 8022240:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8022242:	4b12      	ldr	r3, [pc, #72]	@ (802228c <vPortExitCritical+0x50>)
 8022244:	681b      	ldr	r3, [r3, #0]
 8022246:	2b00      	cmp	r3, #0
 8022248:	d10b      	bne.n	8022262 <vPortExitCritical+0x26>
	__asm volatile
 802224a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802224e:	f383 8811 	msr	BASEPRI, r3
 8022252:	f3bf 8f6f 	isb	sy
 8022256:	f3bf 8f4f 	dsb	sy
 802225a:	607b      	str	r3, [r7, #4]
}
 802225c:	bf00      	nop
 802225e:	bf00      	nop
 8022260:	e7fd      	b.n	802225e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8022262:	4b0a      	ldr	r3, [pc, #40]	@ (802228c <vPortExitCritical+0x50>)
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	3b01      	subs	r3, #1
 8022268:	4a08      	ldr	r2, [pc, #32]	@ (802228c <vPortExitCritical+0x50>)
 802226a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 802226c:	4b07      	ldr	r3, [pc, #28]	@ (802228c <vPortExitCritical+0x50>)
 802226e:	681b      	ldr	r3, [r3, #0]
 8022270:	2b00      	cmp	r3, #0
 8022272:	d105      	bne.n	8022280 <vPortExitCritical+0x44>
 8022274:	2300      	movs	r3, #0
 8022276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8022278:	683b      	ldr	r3, [r7, #0]
 802227a:	f383 8811 	msr	BASEPRI, r3
}
 802227e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8022280:	bf00      	nop
 8022282:	370c      	adds	r7, #12
 8022284:	46bd      	mov	sp, r7
 8022286:	f85d 7b04 	ldr.w	r7, [sp], #4
 802228a:	4770      	bx	lr
 802228c:	2400032c 	.word	0x2400032c

08022290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8022290:	f3ef 8009 	mrs	r0, PSP
 8022294:	f3bf 8f6f 	isb	sy
 8022298:	4b15      	ldr	r3, [pc, #84]	@ (80222f0 <pxCurrentTCBConst>)
 802229a:	681a      	ldr	r2, [r3, #0]
 802229c:	f01e 0f10 	tst.w	lr, #16
 80222a0:	bf08      	it	eq
 80222a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80222a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222aa:	6010      	str	r0, [r2, #0]
 80222ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80222b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80222b4:	f380 8811 	msr	BASEPRI, r0
 80222b8:	f3bf 8f4f 	dsb	sy
 80222bc:	f3bf 8f6f 	isb	sy
 80222c0:	f7fe fd98 	bl	8020df4 <vTaskSwitchContext>
 80222c4:	f04f 0000 	mov.w	r0, #0
 80222c8:	f380 8811 	msr	BASEPRI, r0
 80222cc:	bc09      	pop	{r0, r3}
 80222ce:	6819      	ldr	r1, [r3, #0]
 80222d0:	6808      	ldr	r0, [r1, #0]
 80222d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222d6:	f01e 0f10 	tst.w	lr, #16
 80222da:	bf08      	it	eq
 80222dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80222e0:	f380 8809 	msr	PSP, r0
 80222e4:	f3bf 8f6f 	isb	sy
 80222e8:	4770      	bx	lr
 80222ea:	bf00      	nop
 80222ec:	f3af 8000 	nop.w

080222f0 <pxCurrentTCBConst>:
 80222f0:	24018f2c 	.word	0x24018f2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80222f4:	bf00      	nop
 80222f6:	bf00      	nop

080222f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80222f8:	b580      	push	{r7, lr}
 80222fa:	b082      	sub	sp, #8
 80222fc:	af00      	add	r7, sp, #0
	__asm volatile
 80222fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022302:	f383 8811 	msr	BASEPRI, r3
 8022306:	f3bf 8f6f 	isb	sy
 802230a:	f3bf 8f4f 	dsb	sy
 802230e:	607b      	str	r3, [r7, #4]
}
 8022310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8022312:	f7fe fcb5 	bl	8020c80 <xTaskIncrementTick>
 8022316:	4603      	mov	r3, r0
 8022318:	2b00      	cmp	r3, #0
 802231a:	d003      	beq.n	8022324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802231c:	4b06      	ldr	r3, [pc, #24]	@ (8022338 <xPortSysTickHandler+0x40>)
 802231e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022322:	601a      	str	r2, [r3, #0]
 8022324:	2300      	movs	r3, #0
 8022326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8022328:	683b      	ldr	r3, [r7, #0]
 802232a:	f383 8811 	msr	BASEPRI, r3
}
 802232e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8022330:	bf00      	nop
 8022332:	3708      	adds	r7, #8
 8022334:	46bd      	mov	sp, r7
 8022336:	bd80      	pop	{r7, pc}
 8022338:	e000ed04 	.word	0xe000ed04

0802233c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802233c:	b480      	push	{r7}
 802233e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8022340:	4b0b      	ldr	r3, [pc, #44]	@ (8022370 <vPortSetupTimerInterrupt+0x34>)
 8022342:	2200      	movs	r2, #0
 8022344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8022346:	4b0b      	ldr	r3, [pc, #44]	@ (8022374 <vPortSetupTimerInterrupt+0x38>)
 8022348:	2200      	movs	r2, #0
 802234a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802234c:	4b0a      	ldr	r3, [pc, #40]	@ (8022378 <vPortSetupTimerInterrupt+0x3c>)
 802234e:	681b      	ldr	r3, [r3, #0]
 8022350:	4a0a      	ldr	r2, [pc, #40]	@ (802237c <vPortSetupTimerInterrupt+0x40>)
 8022352:	fba2 2303 	umull	r2, r3, r2, r3
 8022356:	099b      	lsrs	r3, r3, #6
 8022358:	4a09      	ldr	r2, [pc, #36]	@ (8022380 <vPortSetupTimerInterrupt+0x44>)
 802235a:	3b01      	subs	r3, #1
 802235c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802235e:	4b04      	ldr	r3, [pc, #16]	@ (8022370 <vPortSetupTimerInterrupt+0x34>)
 8022360:	2207      	movs	r2, #7
 8022362:	601a      	str	r2, [r3, #0]
}
 8022364:	bf00      	nop
 8022366:	46bd      	mov	sp, r7
 8022368:	f85d 7b04 	ldr.w	r7, [sp], #4
 802236c:	4770      	bx	lr
 802236e:	bf00      	nop
 8022370:	e000e010 	.word	0xe000e010
 8022374:	e000e018 	.word	0xe000e018
 8022378:	24000290 	.word	0x24000290
 802237c:	10624dd3 	.word	0x10624dd3
 8022380:	e000e014 	.word	0xe000e014

08022384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8022384:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8022394 <vPortEnableVFP+0x10>
 8022388:	6801      	ldr	r1, [r0, #0]
 802238a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 802238e:	6001      	str	r1, [r0, #0]
 8022390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8022392:	bf00      	nop
 8022394:	e000ed88 	.word	0xe000ed88

08022398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8022398:	b480      	push	{r7}
 802239a:	b085      	sub	sp, #20
 802239c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802239e:	f3ef 8305 	mrs	r3, IPSR
 80223a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80223a4:	68fb      	ldr	r3, [r7, #12]
 80223a6:	2b0f      	cmp	r3, #15
 80223a8:	d915      	bls.n	80223d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80223aa:	4a18      	ldr	r2, [pc, #96]	@ (802240c <vPortValidateInterruptPriority+0x74>)
 80223ac:	68fb      	ldr	r3, [r7, #12]
 80223ae:	4413      	add	r3, r2
 80223b0:	781b      	ldrb	r3, [r3, #0]
 80223b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80223b4:	4b16      	ldr	r3, [pc, #88]	@ (8022410 <vPortValidateInterruptPriority+0x78>)
 80223b6:	781b      	ldrb	r3, [r3, #0]
 80223b8:	7afa      	ldrb	r2, [r7, #11]
 80223ba:	429a      	cmp	r2, r3
 80223bc:	d20b      	bcs.n	80223d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80223be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80223c2:	f383 8811 	msr	BASEPRI, r3
 80223c6:	f3bf 8f6f 	isb	sy
 80223ca:	f3bf 8f4f 	dsb	sy
 80223ce:	607b      	str	r3, [r7, #4]
}
 80223d0:	bf00      	nop
 80223d2:	bf00      	nop
 80223d4:	e7fd      	b.n	80223d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80223d6:	4b0f      	ldr	r3, [pc, #60]	@ (8022414 <vPortValidateInterruptPriority+0x7c>)
 80223d8:	681b      	ldr	r3, [r3, #0]
 80223da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80223de:	4b0e      	ldr	r3, [pc, #56]	@ (8022418 <vPortValidateInterruptPriority+0x80>)
 80223e0:	681b      	ldr	r3, [r3, #0]
 80223e2:	429a      	cmp	r2, r3
 80223e4:	d90b      	bls.n	80223fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80223e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80223ea:	f383 8811 	msr	BASEPRI, r3
 80223ee:	f3bf 8f6f 	isb	sy
 80223f2:	f3bf 8f4f 	dsb	sy
 80223f6:	603b      	str	r3, [r7, #0]
}
 80223f8:	bf00      	nop
 80223fa:	bf00      	nop
 80223fc:	e7fd      	b.n	80223fa <vPortValidateInterruptPriority+0x62>
	}
 80223fe:	bf00      	nop
 8022400:	3714      	adds	r7, #20
 8022402:	46bd      	mov	sp, r7
 8022404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022408:	4770      	bx	lr
 802240a:	bf00      	nop
 802240c:	e000e3f0 	.word	0xe000e3f0
 8022410:	24019560 	.word	0x24019560
 8022414:	e000ed0c 	.word	0xe000ed0c
 8022418:	24019564 	.word	0x24019564

0802241c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 802241c:	b580      	push	{r7, lr}
 802241e:	b08a      	sub	sp, #40	@ 0x28
 8022420:	af00      	add	r7, sp, #0
 8022422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8022424:	2300      	movs	r3, #0
 8022426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8022428:	f7fe fb5c 	bl	8020ae4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 802242c:	4b5c      	ldr	r3, [pc, #368]	@ (80225a0 <pvPortMalloc+0x184>)
 802242e:	681b      	ldr	r3, [r3, #0]
 8022430:	2b00      	cmp	r3, #0
 8022432:	d101      	bne.n	8022438 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8022434:	f000 f924 	bl	8022680 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8022438:	4b5a      	ldr	r3, [pc, #360]	@ (80225a4 <pvPortMalloc+0x188>)
 802243a:	681a      	ldr	r2, [r3, #0]
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	4013      	ands	r3, r2
 8022440:	2b00      	cmp	r3, #0
 8022442:	f040 8095 	bne.w	8022570 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8022446:	687b      	ldr	r3, [r7, #4]
 8022448:	2b00      	cmp	r3, #0
 802244a:	d01e      	beq.n	802248a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 802244c:	2208      	movs	r2, #8
 802244e:	687b      	ldr	r3, [r7, #4]
 8022450:	4413      	add	r3, r2
 8022452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8022454:	687b      	ldr	r3, [r7, #4]
 8022456:	f003 0307 	and.w	r3, r3, #7
 802245a:	2b00      	cmp	r3, #0
 802245c:	d015      	beq.n	802248a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802245e:	687b      	ldr	r3, [r7, #4]
 8022460:	f023 0307 	bic.w	r3, r3, #7
 8022464:	3308      	adds	r3, #8
 8022466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	f003 0307 	and.w	r3, r3, #7
 802246e:	2b00      	cmp	r3, #0
 8022470:	d00b      	beq.n	802248a <pvPortMalloc+0x6e>
	__asm volatile
 8022472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022476:	f383 8811 	msr	BASEPRI, r3
 802247a:	f3bf 8f6f 	isb	sy
 802247e:	f3bf 8f4f 	dsb	sy
 8022482:	617b      	str	r3, [r7, #20]
}
 8022484:	bf00      	nop
 8022486:	bf00      	nop
 8022488:	e7fd      	b.n	8022486 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	2b00      	cmp	r3, #0
 802248e:	d06f      	beq.n	8022570 <pvPortMalloc+0x154>
 8022490:	4b45      	ldr	r3, [pc, #276]	@ (80225a8 <pvPortMalloc+0x18c>)
 8022492:	681b      	ldr	r3, [r3, #0]
 8022494:	687a      	ldr	r2, [r7, #4]
 8022496:	429a      	cmp	r2, r3
 8022498:	d86a      	bhi.n	8022570 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 802249a:	4b44      	ldr	r3, [pc, #272]	@ (80225ac <pvPortMalloc+0x190>)
 802249c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 802249e:	4b43      	ldr	r3, [pc, #268]	@ (80225ac <pvPortMalloc+0x190>)
 80224a0:	681b      	ldr	r3, [r3, #0]
 80224a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80224a4:	e004      	b.n	80224b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80224a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80224aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224ac:	681b      	ldr	r3, [r3, #0]
 80224ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80224b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224b2:	685b      	ldr	r3, [r3, #4]
 80224b4:	687a      	ldr	r2, [r7, #4]
 80224b6:	429a      	cmp	r2, r3
 80224b8:	d903      	bls.n	80224c2 <pvPortMalloc+0xa6>
 80224ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224bc:	681b      	ldr	r3, [r3, #0]
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d1f1      	bne.n	80224a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80224c2:	4b37      	ldr	r3, [pc, #220]	@ (80225a0 <pvPortMalloc+0x184>)
 80224c4:	681b      	ldr	r3, [r3, #0]
 80224c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80224c8:	429a      	cmp	r2, r3
 80224ca:	d051      	beq.n	8022570 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80224cc:	6a3b      	ldr	r3, [r7, #32]
 80224ce:	681b      	ldr	r3, [r3, #0]
 80224d0:	2208      	movs	r2, #8
 80224d2:	4413      	add	r3, r2
 80224d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80224d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224d8:	681a      	ldr	r2, [r3, #0]
 80224da:	6a3b      	ldr	r3, [r7, #32]
 80224dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80224de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224e0:	685a      	ldr	r2, [r3, #4]
 80224e2:	687b      	ldr	r3, [r7, #4]
 80224e4:	1ad2      	subs	r2, r2, r3
 80224e6:	2308      	movs	r3, #8
 80224e8:	005b      	lsls	r3, r3, #1
 80224ea:	429a      	cmp	r2, r3
 80224ec:	d920      	bls.n	8022530 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80224ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80224f0:	687b      	ldr	r3, [r7, #4]
 80224f2:	4413      	add	r3, r2
 80224f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80224f6:	69bb      	ldr	r3, [r7, #24]
 80224f8:	f003 0307 	and.w	r3, r3, #7
 80224fc:	2b00      	cmp	r3, #0
 80224fe:	d00b      	beq.n	8022518 <pvPortMalloc+0xfc>
	__asm volatile
 8022500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022504:	f383 8811 	msr	BASEPRI, r3
 8022508:	f3bf 8f6f 	isb	sy
 802250c:	f3bf 8f4f 	dsb	sy
 8022510:	613b      	str	r3, [r7, #16]
}
 8022512:	bf00      	nop
 8022514:	bf00      	nop
 8022516:	e7fd      	b.n	8022514 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8022518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802251a:	685a      	ldr	r2, [r3, #4]
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	1ad2      	subs	r2, r2, r3
 8022520:	69bb      	ldr	r3, [r7, #24]
 8022522:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8022524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022526:	687a      	ldr	r2, [r7, #4]
 8022528:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 802252a:	69b8      	ldr	r0, [r7, #24]
 802252c:	f000 f90a 	bl	8022744 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8022530:	4b1d      	ldr	r3, [pc, #116]	@ (80225a8 <pvPortMalloc+0x18c>)
 8022532:	681a      	ldr	r2, [r3, #0]
 8022534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022536:	685b      	ldr	r3, [r3, #4]
 8022538:	1ad3      	subs	r3, r2, r3
 802253a:	4a1b      	ldr	r2, [pc, #108]	@ (80225a8 <pvPortMalloc+0x18c>)
 802253c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 802253e:	4b1a      	ldr	r3, [pc, #104]	@ (80225a8 <pvPortMalloc+0x18c>)
 8022540:	681a      	ldr	r2, [r3, #0]
 8022542:	4b1b      	ldr	r3, [pc, #108]	@ (80225b0 <pvPortMalloc+0x194>)
 8022544:	681b      	ldr	r3, [r3, #0]
 8022546:	429a      	cmp	r2, r3
 8022548:	d203      	bcs.n	8022552 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 802254a:	4b17      	ldr	r3, [pc, #92]	@ (80225a8 <pvPortMalloc+0x18c>)
 802254c:	681b      	ldr	r3, [r3, #0]
 802254e:	4a18      	ldr	r2, [pc, #96]	@ (80225b0 <pvPortMalloc+0x194>)
 8022550:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8022552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022554:	685a      	ldr	r2, [r3, #4]
 8022556:	4b13      	ldr	r3, [pc, #76]	@ (80225a4 <pvPortMalloc+0x188>)
 8022558:	681b      	ldr	r3, [r3, #0]
 802255a:	431a      	orrs	r2, r3
 802255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802255e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8022560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022562:	2200      	movs	r2, #0
 8022564:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8022566:	4b13      	ldr	r3, [pc, #76]	@ (80225b4 <pvPortMalloc+0x198>)
 8022568:	681b      	ldr	r3, [r3, #0]
 802256a:	3301      	adds	r3, #1
 802256c:	4a11      	ldr	r2, [pc, #68]	@ (80225b4 <pvPortMalloc+0x198>)
 802256e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8022570:	f7fe fac6 	bl	8020b00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8022574:	69fb      	ldr	r3, [r7, #28]
 8022576:	f003 0307 	and.w	r3, r3, #7
 802257a:	2b00      	cmp	r3, #0
 802257c:	d00b      	beq.n	8022596 <pvPortMalloc+0x17a>
	__asm volatile
 802257e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022582:	f383 8811 	msr	BASEPRI, r3
 8022586:	f3bf 8f6f 	isb	sy
 802258a:	f3bf 8f4f 	dsb	sy
 802258e:	60fb      	str	r3, [r7, #12]
}
 8022590:	bf00      	nop
 8022592:	bf00      	nop
 8022594:	e7fd      	b.n	8022592 <pvPortMalloc+0x176>
	return pvReturn;
 8022596:	69fb      	ldr	r3, [r7, #28]
}
 8022598:	4618      	mov	r0, r3
 802259a:	3728      	adds	r7, #40	@ 0x28
 802259c:	46bd      	mov	sp, r7
 802259e:	bd80      	pop	{r7, pc}
 80225a0:	24028f70 	.word	0x24028f70
 80225a4:	24028f84 	.word	0x24028f84
 80225a8:	24028f74 	.word	0x24028f74
 80225ac:	24028f68 	.word	0x24028f68
 80225b0:	24028f78 	.word	0x24028f78
 80225b4:	24028f7c 	.word	0x24028f7c

080225b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80225b8:	b580      	push	{r7, lr}
 80225ba:	b086      	sub	sp, #24
 80225bc:	af00      	add	r7, sp, #0
 80225be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80225c0:	687b      	ldr	r3, [r7, #4]
 80225c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80225c4:	687b      	ldr	r3, [r7, #4]
 80225c6:	2b00      	cmp	r3, #0
 80225c8:	d04f      	beq.n	802266a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80225ca:	2308      	movs	r3, #8
 80225cc:	425b      	negs	r3, r3
 80225ce:	697a      	ldr	r2, [r7, #20]
 80225d0:	4413      	add	r3, r2
 80225d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80225d4:	697b      	ldr	r3, [r7, #20]
 80225d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80225d8:	693b      	ldr	r3, [r7, #16]
 80225da:	685a      	ldr	r2, [r3, #4]
 80225dc:	4b25      	ldr	r3, [pc, #148]	@ (8022674 <vPortFree+0xbc>)
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	4013      	ands	r3, r2
 80225e2:	2b00      	cmp	r3, #0
 80225e4:	d10b      	bne.n	80225fe <vPortFree+0x46>
	__asm volatile
 80225e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80225ea:	f383 8811 	msr	BASEPRI, r3
 80225ee:	f3bf 8f6f 	isb	sy
 80225f2:	f3bf 8f4f 	dsb	sy
 80225f6:	60fb      	str	r3, [r7, #12]
}
 80225f8:	bf00      	nop
 80225fa:	bf00      	nop
 80225fc:	e7fd      	b.n	80225fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80225fe:	693b      	ldr	r3, [r7, #16]
 8022600:	681b      	ldr	r3, [r3, #0]
 8022602:	2b00      	cmp	r3, #0
 8022604:	d00b      	beq.n	802261e <vPortFree+0x66>
	__asm volatile
 8022606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802260a:	f383 8811 	msr	BASEPRI, r3
 802260e:	f3bf 8f6f 	isb	sy
 8022612:	f3bf 8f4f 	dsb	sy
 8022616:	60bb      	str	r3, [r7, #8]
}
 8022618:	bf00      	nop
 802261a:	bf00      	nop
 802261c:	e7fd      	b.n	802261a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 802261e:	693b      	ldr	r3, [r7, #16]
 8022620:	685a      	ldr	r2, [r3, #4]
 8022622:	4b14      	ldr	r3, [pc, #80]	@ (8022674 <vPortFree+0xbc>)
 8022624:	681b      	ldr	r3, [r3, #0]
 8022626:	4013      	ands	r3, r2
 8022628:	2b00      	cmp	r3, #0
 802262a:	d01e      	beq.n	802266a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 802262c:	693b      	ldr	r3, [r7, #16]
 802262e:	681b      	ldr	r3, [r3, #0]
 8022630:	2b00      	cmp	r3, #0
 8022632:	d11a      	bne.n	802266a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8022634:	693b      	ldr	r3, [r7, #16]
 8022636:	685a      	ldr	r2, [r3, #4]
 8022638:	4b0e      	ldr	r3, [pc, #56]	@ (8022674 <vPortFree+0xbc>)
 802263a:	681b      	ldr	r3, [r3, #0]
 802263c:	43db      	mvns	r3, r3
 802263e:	401a      	ands	r2, r3
 8022640:	693b      	ldr	r3, [r7, #16]
 8022642:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8022644:	f7fe fa4e 	bl	8020ae4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8022648:	693b      	ldr	r3, [r7, #16]
 802264a:	685a      	ldr	r2, [r3, #4]
 802264c:	4b0a      	ldr	r3, [pc, #40]	@ (8022678 <vPortFree+0xc0>)
 802264e:	681b      	ldr	r3, [r3, #0]
 8022650:	4413      	add	r3, r2
 8022652:	4a09      	ldr	r2, [pc, #36]	@ (8022678 <vPortFree+0xc0>)
 8022654:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8022656:	6938      	ldr	r0, [r7, #16]
 8022658:	f000 f874 	bl	8022744 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 802265c:	4b07      	ldr	r3, [pc, #28]	@ (802267c <vPortFree+0xc4>)
 802265e:	681b      	ldr	r3, [r3, #0]
 8022660:	3301      	adds	r3, #1
 8022662:	4a06      	ldr	r2, [pc, #24]	@ (802267c <vPortFree+0xc4>)
 8022664:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8022666:	f7fe fa4b 	bl	8020b00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 802266a:	bf00      	nop
 802266c:	3718      	adds	r7, #24
 802266e:	46bd      	mov	sp, r7
 8022670:	bd80      	pop	{r7, pc}
 8022672:	bf00      	nop
 8022674:	24028f84 	.word	0x24028f84
 8022678:	24028f74 	.word	0x24028f74
 802267c:	24028f80 	.word	0x24028f80

08022680 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8022680:	b480      	push	{r7}
 8022682:	b085      	sub	sp, #20
 8022684:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8022686:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 802268a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 802268c:	4b27      	ldr	r3, [pc, #156]	@ (802272c <prvHeapInit+0xac>)
 802268e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8022690:	68fb      	ldr	r3, [r7, #12]
 8022692:	f003 0307 	and.w	r3, r3, #7
 8022696:	2b00      	cmp	r3, #0
 8022698:	d00c      	beq.n	80226b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802269a:	68fb      	ldr	r3, [r7, #12]
 802269c:	3307      	adds	r3, #7
 802269e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80226a0:	68fb      	ldr	r3, [r7, #12]
 80226a2:	f023 0307 	bic.w	r3, r3, #7
 80226a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80226a8:	68ba      	ldr	r2, [r7, #8]
 80226aa:	68fb      	ldr	r3, [r7, #12]
 80226ac:	1ad3      	subs	r3, r2, r3
 80226ae:	4a1f      	ldr	r2, [pc, #124]	@ (802272c <prvHeapInit+0xac>)
 80226b0:	4413      	add	r3, r2
 80226b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80226b4:	68fb      	ldr	r3, [r7, #12]
 80226b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80226b8:	4a1d      	ldr	r2, [pc, #116]	@ (8022730 <prvHeapInit+0xb0>)
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80226be:	4b1c      	ldr	r3, [pc, #112]	@ (8022730 <prvHeapInit+0xb0>)
 80226c0:	2200      	movs	r2, #0
 80226c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80226c4:	687b      	ldr	r3, [r7, #4]
 80226c6:	68ba      	ldr	r2, [r7, #8]
 80226c8:	4413      	add	r3, r2
 80226ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80226cc:	2208      	movs	r2, #8
 80226ce:	68fb      	ldr	r3, [r7, #12]
 80226d0:	1a9b      	subs	r3, r3, r2
 80226d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80226d4:	68fb      	ldr	r3, [r7, #12]
 80226d6:	f023 0307 	bic.w	r3, r3, #7
 80226da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80226dc:	68fb      	ldr	r3, [r7, #12]
 80226de:	4a15      	ldr	r2, [pc, #84]	@ (8022734 <prvHeapInit+0xb4>)
 80226e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80226e2:	4b14      	ldr	r3, [pc, #80]	@ (8022734 <prvHeapInit+0xb4>)
 80226e4:	681b      	ldr	r3, [r3, #0]
 80226e6:	2200      	movs	r2, #0
 80226e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80226ea:	4b12      	ldr	r3, [pc, #72]	@ (8022734 <prvHeapInit+0xb4>)
 80226ec:	681b      	ldr	r3, [r3, #0]
 80226ee:	2200      	movs	r2, #0
 80226f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80226f2:	687b      	ldr	r3, [r7, #4]
 80226f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80226f6:	683b      	ldr	r3, [r7, #0]
 80226f8:	68fa      	ldr	r2, [r7, #12]
 80226fa:	1ad2      	subs	r2, r2, r3
 80226fc:	683b      	ldr	r3, [r7, #0]
 80226fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8022700:	4b0c      	ldr	r3, [pc, #48]	@ (8022734 <prvHeapInit+0xb4>)
 8022702:	681a      	ldr	r2, [r3, #0]
 8022704:	683b      	ldr	r3, [r7, #0]
 8022706:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8022708:	683b      	ldr	r3, [r7, #0]
 802270a:	685b      	ldr	r3, [r3, #4]
 802270c:	4a0a      	ldr	r2, [pc, #40]	@ (8022738 <prvHeapInit+0xb8>)
 802270e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8022710:	683b      	ldr	r3, [r7, #0]
 8022712:	685b      	ldr	r3, [r3, #4]
 8022714:	4a09      	ldr	r2, [pc, #36]	@ (802273c <prvHeapInit+0xbc>)
 8022716:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8022718:	4b09      	ldr	r3, [pc, #36]	@ (8022740 <prvHeapInit+0xc0>)
 802271a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 802271e:	601a      	str	r2, [r3, #0]
}
 8022720:	bf00      	nop
 8022722:	3714      	adds	r7, #20
 8022724:	46bd      	mov	sp, r7
 8022726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802272a:	4770      	bx	lr
 802272c:	24019568 	.word	0x24019568
 8022730:	24028f68 	.word	0x24028f68
 8022734:	24028f70 	.word	0x24028f70
 8022738:	24028f78 	.word	0x24028f78
 802273c:	24028f74 	.word	0x24028f74
 8022740:	24028f84 	.word	0x24028f84

08022744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8022744:	b480      	push	{r7}
 8022746:	b085      	sub	sp, #20
 8022748:	af00      	add	r7, sp, #0
 802274a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 802274c:	4b28      	ldr	r3, [pc, #160]	@ (80227f0 <prvInsertBlockIntoFreeList+0xac>)
 802274e:	60fb      	str	r3, [r7, #12]
 8022750:	e002      	b.n	8022758 <prvInsertBlockIntoFreeList+0x14>
 8022752:	68fb      	ldr	r3, [r7, #12]
 8022754:	681b      	ldr	r3, [r3, #0]
 8022756:	60fb      	str	r3, [r7, #12]
 8022758:	68fb      	ldr	r3, [r7, #12]
 802275a:	681b      	ldr	r3, [r3, #0]
 802275c:	687a      	ldr	r2, [r7, #4]
 802275e:	429a      	cmp	r2, r3
 8022760:	d8f7      	bhi.n	8022752 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8022762:	68fb      	ldr	r3, [r7, #12]
 8022764:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8022766:	68fb      	ldr	r3, [r7, #12]
 8022768:	685b      	ldr	r3, [r3, #4]
 802276a:	68ba      	ldr	r2, [r7, #8]
 802276c:	4413      	add	r3, r2
 802276e:	687a      	ldr	r2, [r7, #4]
 8022770:	429a      	cmp	r2, r3
 8022772:	d108      	bne.n	8022786 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8022774:	68fb      	ldr	r3, [r7, #12]
 8022776:	685a      	ldr	r2, [r3, #4]
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	685b      	ldr	r3, [r3, #4]
 802277c:	441a      	add	r2, r3
 802277e:	68fb      	ldr	r3, [r7, #12]
 8022780:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8022782:	68fb      	ldr	r3, [r7, #12]
 8022784:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802278a:	687b      	ldr	r3, [r7, #4]
 802278c:	685b      	ldr	r3, [r3, #4]
 802278e:	68ba      	ldr	r2, [r7, #8]
 8022790:	441a      	add	r2, r3
 8022792:	68fb      	ldr	r3, [r7, #12]
 8022794:	681b      	ldr	r3, [r3, #0]
 8022796:	429a      	cmp	r2, r3
 8022798:	d118      	bne.n	80227cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802279a:	68fb      	ldr	r3, [r7, #12]
 802279c:	681a      	ldr	r2, [r3, #0]
 802279e:	4b15      	ldr	r3, [pc, #84]	@ (80227f4 <prvInsertBlockIntoFreeList+0xb0>)
 80227a0:	681b      	ldr	r3, [r3, #0]
 80227a2:	429a      	cmp	r2, r3
 80227a4:	d00d      	beq.n	80227c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80227a6:	687b      	ldr	r3, [r7, #4]
 80227a8:	685a      	ldr	r2, [r3, #4]
 80227aa:	68fb      	ldr	r3, [r7, #12]
 80227ac:	681b      	ldr	r3, [r3, #0]
 80227ae:	685b      	ldr	r3, [r3, #4]
 80227b0:	441a      	add	r2, r3
 80227b2:	687b      	ldr	r3, [r7, #4]
 80227b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80227b6:	68fb      	ldr	r3, [r7, #12]
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	681a      	ldr	r2, [r3, #0]
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	601a      	str	r2, [r3, #0]
 80227c0:	e008      	b.n	80227d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80227c2:	4b0c      	ldr	r3, [pc, #48]	@ (80227f4 <prvInsertBlockIntoFreeList+0xb0>)
 80227c4:	681a      	ldr	r2, [r3, #0]
 80227c6:	687b      	ldr	r3, [r7, #4]
 80227c8:	601a      	str	r2, [r3, #0]
 80227ca:	e003      	b.n	80227d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80227cc:	68fb      	ldr	r3, [r7, #12]
 80227ce:	681a      	ldr	r2, [r3, #0]
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80227d4:	68fa      	ldr	r2, [r7, #12]
 80227d6:	687b      	ldr	r3, [r7, #4]
 80227d8:	429a      	cmp	r2, r3
 80227da:	d002      	beq.n	80227e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80227dc:	68fb      	ldr	r3, [r7, #12]
 80227de:	687a      	ldr	r2, [r7, #4]
 80227e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80227e2:	bf00      	nop
 80227e4:	3714      	adds	r7, #20
 80227e6:	46bd      	mov	sp, r7
 80227e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227ec:	4770      	bx	lr
 80227ee:	bf00      	nop
 80227f0:	24028f68 	.word	0x24028f68
 80227f4:	24028f70 	.word	0x24028f70

080227f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80227f8:	b580      	push	{r7, lr}
 80227fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80227fc:	2201      	movs	r2, #1
 80227fe:	4913      	ldr	r1, [pc, #76]	@ (802284c <MX_USB_DEVICE_Init+0x54>)
 8022800:	4813      	ldr	r0, [pc, #76]	@ (8022850 <MX_USB_DEVICE_Init+0x58>)
 8022802:	f7fa fc8d 	bl	801d120 <USBD_Init>
 8022806:	4603      	mov	r3, r0
 8022808:	2b00      	cmp	r3, #0
 802280a:	d001      	beq.n	8022810 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802280c:	f7e7 fe8b 	bl	800a526 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8022810:	4910      	ldr	r1, [pc, #64]	@ (8022854 <MX_USB_DEVICE_Init+0x5c>)
 8022812:	480f      	ldr	r0, [pc, #60]	@ (8022850 <MX_USB_DEVICE_Init+0x58>)
 8022814:	f7fa fcb4 	bl	801d180 <USBD_RegisterClass>
 8022818:	4603      	mov	r3, r0
 802281a:	2b00      	cmp	r3, #0
 802281c:	d001      	beq.n	8022822 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 802281e:	f7e7 fe82 	bl	800a526 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8022822:	490d      	ldr	r1, [pc, #52]	@ (8022858 <MX_USB_DEVICE_Init+0x60>)
 8022824:	480a      	ldr	r0, [pc, #40]	@ (8022850 <MX_USB_DEVICE_Init+0x58>)
 8022826:	f7fa fbab 	bl	801cf80 <USBD_CDC_RegisterInterface>
 802282a:	4603      	mov	r3, r0
 802282c:	2b00      	cmp	r3, #0
 802282e:	d001      	beq.n	8022834 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8022830:	f7e7 fe79 	bl	800a526 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8022834:	4806      	ldr	r0, [pc, #24]	@ (8022850 <MX_USB_DEVICE_Init+0x58>)
 8022836:	f7fa fcd9 	bl	801d1ec <USBD_Start>
 802283a:	4603      	mov	r3, r0
 802283c:	2b00      	cmp	r3, #0
 802283e:	d001      	beq.n	8022844 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8022840:	f7e7 fe71 	bl	800a526 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8022844:	f7f0 fb92 	bl	8012f6c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022848:	bf00      	nop
 802284a:	bd80      	pop	{r7, pc}
 802284c:	24000344 	.word	0x24000344
 8022850:	24028f88 	.word	0x24028f88
 8022854:	240002ac 	.word	0x240002ac
 8022858:	24000330 	.word	0x24000330

0802285c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 802285c:	b580      	push	{r7, lr}
 802285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8022860:	2200      	movs	r2, #0
 8022862:	4905      	ldr	r1, [pc, #20]	@ (8022878 <CDC_Init_HS+0x1c>)
 8022864:	4805      	ldr	r0, [pc, #20]	@ (802287c <CDC_Init_HS+0x20>)
 8022866:	f7fa fba5 	bl	801cfb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 802286a:	4905      	ldr	r1, [pc, #20]	@ (8022880 <CDC_Init_HS+0x24>)
 802286c:	4803      	ldr	r0, [pc, #12]	@ (802287c <CDC_Init_HS+0x20>)
 802286e:	f7fa fbc3 	bl	801cff8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8022872:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8022874:	4618      	mov	r0, r3
 8022876:	bd80      	pop	{r7, pc}
 8022878:	24029a64 	.word	0x24029a64
 802287c:	24028f88 	.word	0x24028f88
 8022880:	24029264 	.word	0x24029264

08022884 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8022884:	b480      	push	{r7}
 8022886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8022888:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 802288a:	4618      	mov	r0, r3
 802288c:	46bd      	mov	sp, r7
 802288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022892:	4770      	bx	lr

08022894 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8022894:	b480      	push	{r7}
 8022896:	b083      	sub	sp, #12
 8022898:	af00      	add	r7, sp, #0
 802289a:	4603      	mov	r3, r0
 802289c:	6039      	str	r1, [r7, #0]
 802289e:	71fb      	strb	r3, [r7, #7]
 80228a0:	4613      	mov	r3, r2
 80228a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80228a4:	79fb      	ldrb	r3, [r7, #7]
 80228a6:	2b23      	cmp	r3, #35	@ 0x23
 80228a8:	d84a      	bhi.n	8022940 <CDC_Control_HS+0xac>
 80228aa:	a201      	add	r2, pc, #4	@ (adr r2, 80228b0 <CDC_Control_HS+0x1c>)
 80228ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80228b0:	08022941 	.word	0x08022941
 80228b4:	08022941 	.word	0x08022941
 80228b8:	08022941 	.word	0x08022941
 80228bc:	08022941 	.word	0x08022941
 80228c0:	08022941 	.word	0x08022941
 80228c4:	08022941 	.word	0x08022941
 80228c8:	08022941 	.word	0x08022941
 80228cc:	08022941 	.word	0x08022941
 80228d0:	08022941 	.word	0x08022941
 80228d4:	08022941 	.word	0x08022941
 80228d8:	08022941 	.word	0x08022941
 80228dc:	08022941 	.word	0x08022941
 80228e0:	08022941 	.word	0x08022941
 80228e4:	08022941 	.word	0x08022941
 80228e8:	08022941 	.word	0x08022941
 80228ec:	08022941 	.word	0x08022941
 80228f0:	08022941 	.word	0x08022941
 80228f4:	08022941 	.word	0x08022941
 80228f8:	08022941 	.word	0x08022941
 80228fc:	08022941 	.word	0x08022941
 8022900:	08022941 	.word	0x08022941
 8022904:	08022941 	.word	0x08022941
 8022908:	08022941 	.word	0x08022941
 802290c:	08022941 	.word	0x08022941
 8022910:	08022941 	.word	0x08022941
 8022914:	08022941 	.word	0x08022941
 8022918:	08022941 	.word	0x08022941
 802291c:	08022941 	.word	0x08022941
 8022920:	08022941 	.word	0x08022941
 8022924:	08022941 	.word	0x08022941
 8022928:	08022941 	.word	0x08022941
 802292c:	08022941 	.word	0x08022941
 8022930:	08022941 	.word	0x08022941
 8022934:	08022941 	.word	0x08022941
 8022938:	08022941 	.word	0x08022941
 802293c:	08022941 	.word	0x08022941
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8022940:	bf00      	nop
  }

  return (USBD_OK);
 8022942:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8022944:	4618      	mov	r0, r3
 8022946:	370c      	adds	r7, #12
 8022948:	46bd      	mov	sp, r7
 802294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802294e:	4770      	bx	lr

08022950 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8022950:	b580      	push	{r7, lr}
 8022952:	b082      	sub	sp, #8
 8022954:	af00      	add	r7, sp, #0
 8022956:	6078      	str	r0, [r7, #4]
 8022958:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USB_ProcessRxData(Buf, *Len);
 802295a:	683b      	ldr	r3, [r7, #0]
 802295c:	681b      	ldr	r3, [r3, #0]
 802295e:	4619      	mov	r1, r3
 8022960:	6878      	ldr	r0, [r7, #4]
 8022962:	f7e6 fe59 	bl	8009618 <USB_ProcessRxData>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8022966:	6879      	ldr	r1, [r7, #4]
 8022968:	4805      	ldr	r0, [pc, #20]	@ (8022980 <CDC_Receive_HS+0x30>)
 802296a:	f7fa fb45 	bl	801cff8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 802296e:	4804      	ldr	r0, [pc, #16]	@ (8022980 <CDC_Receive_HS+0x30>)
 8022970:	f7fa fba0 	bl	801d0b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8022974:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8022976:	4618      	mov	r0, r3
 8022978:	3708      	adds	r7, #8
 802297a:	46bd      	mov	sp, r7
 802297c:	bd80      	pop	{r7, pc}
 802297e:	bf00      	nop
 8022980:	24028f88 	.word	0x24028f88

08022984 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8022984:	b580      	push	{r7, lr}
 8022986:	b084      	sub	sp, #16
 8022988:	af00      	add	r7, sp, #0
 802298a:	6078      	str	r0, [r7, #4]
 802298c:	460b      	mov	r3, r1
 802298e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8022990:	2300      	movs	r3, #0
 8022992:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8022994:	4b0d      	ldr	r3, [pc, #52]	@ (80229cc <CDC_Transmit_HS+0x48>)
 8022996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 802299a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 802299c:	68bb      	ldr	r3, [r7, #8]
 802299e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80229a2:	2b00      	cmp	r3, #0
 80229a4:	d001      	beq.n	80229aa <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80229a6:	2301      	movs	r3, #1
 80229a8:	e00b      	b.n	80229c2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80229aa:	887b      	ldrh	r3, [r7, #2]
 80229ac:	461a      	mov	r2, r3
 80229ae:	6879      	ldr	r1, [r7, #4]
 80229b0:	4806      	ldr	r0, [pc, #24]	@ (80229cc <CDC_Transmit_HS+0x48>)
 80229b2:	f7fa faff 	bl	801cfb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80229b6:	4805      	ldr	r0, [pc, #20]	@ (80229cc <CDC_Transmit_HS+0x48>)
 80229b8:	f7fa fb3c 	bl	801d034 <USBD_CDC_TransmitPacket>
 80229bc:	4603      	mov	r3, r0
 80229be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80229c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80229c2:	4618      	mov	r0, r3
 80229c4:	3710      	adds	r7, #16
 80229c6:	46bd      	mov	sp, r7
 80229c8:	bd80      	pop	{r7, pc}
 80229ca:	bf00      	nop
 80229cc:	24028f88 	.word	0x24028f88

080229d0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80229d0:	b480      	push	{r7}
 80229d2:	b087      	sub	sp, #28
 80229d4:	af00      	add	r7, sp, #0
 80229d6:	60f8      	str	r0, [r7, #12]
 80229d8:	60b9      	str	r1, [r7, #8]
 80229da:	4613      	mov	r3, r2
 80229dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80229de:	2300      	movs	r3, #0
 80229e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80229e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80229e6:	4618      	mov	r0, r3
 80229e8:	371c      	adds	r7, #28
 80229ea:	46bd      	mov	sp, r7
 80229ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229f0:	4770      	bx	lr
	...

080229f4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80229f4:	b480      	push	{r7}
 80229f6:	b083      	sub	sp, #12
 80229f8:	af00      	add	r7, sp, #0
 80229fa:	4603      	mov	r3, r0
 80229fc:	6039      	str	r1, [r7, #0]
 80229fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8022a00:	683b      	ldr	r3, [r7, #0]
 8022a02:	2212      	movs	r2, #18
 8022a04:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8022a06:	4b03      	ldr	r3, [pc, #12]	@ (8022a14 <USBD_HS_DeviceDescriptor+0x20>)
}
 8022a08:	4618      	mov	r0, r3
 8022a0a:	370c      	adds	r7, #12
 8022a0c:	46bd      	mov	sp, r7
 8022a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a12:	4770      	bx	lr
 8022a14:	24000364 	.word	0x24000364

08022a18 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022a18:	b480      	push	{r7}
 8022a1a:	b083      	sub	sp, #12
 8022a1c:	af00      	add	r7, sp, #0
 8022a1e:	4603      	mov	r3, r0
 8022a20:	6039      	str	r1, [r7, #0]
 8022a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8022a24:	683b      	ldr	r3, [r7, #0]
 8022a26:	2204      	movs	r2, #4
 8022a28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8022a2a:	4b03      	ldr	r3, [pc, #12]	@ (8022a38 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8022a2c:	4618      	mov	r0, r3
 8022a2e:	370c      	adds	r7, #12
 8022a30:	46bd      	mov	sp, r7
 8022a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a36:	4770      	bx	lr
 8022a38:	24000378 	.word	0x24000378

08022a3c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022a3c:	b580      	push	{r7, lr}
 8022a3e:	b082      	sub	sp, #8
 8022a40:	af00      	add	r7, sp, #0
 8022a42:	4603      	mov	r3, r0
 8022a44:	6039      	str	r1, [r7, #0]
 8022a46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022a48:	79fb      	ldrb	r3, [r7, #7]
 8022a4a:	2b00      	cmp	r3, #0
 8022a4c:	d105      	bne.n	8022a5a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8022a4e:	683a      	ldr	r2, [r7, #0]
 8022a50:	4907      	ldr	r1, [pc, #28]	@ (8022a70 <USBD_HS_ProductStrDescriptor+0x34>)
 8022a52:	4808      	ldr	r0, [pc, #32]	@ (8022a74 <USBD_HS_ProductStrDescriptor+0x38>)
 8022a54:	f7fb fda4 	bl	801e5a0 <USBD_GetString>
 8022a58:	e004      	b.n	8022a64 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8022a5a:	683a      	ldr	r2, [r7, #0]
 8022a5c:	4904      	ldr	r1, [pc, #16]	@ (8022a70 <USBD_HS_ProductStrDescriptor+0x34>)
 8022a5e:	4805      	ldr	r0, [pc, #20]	@ (8022a74 <USBD_HS_ProductStrDescriptor+0x38>)
 8022a60:	f7fb fd9e 	bl	801e5a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022a64:	4b02      	ldr	r3, [pc, #8]	@ (8022a70 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8022a66:	4618      	mov	r0, r3
 8022a68:	3708      	adds	r7, #8
 8022a6a:	46bd      	mov	sp, r7
 8022a6c:	bd80      	pop	{r7, pc}
 8022a6e:	bf00      	nop
 8022a70:	2402a264 	.word	0x2402a264
 8022a74:	0802ae00 	.word	0x0802ae00

08022a78 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022a78:	b580      	push	{r7, lr}
 8022a7a:	b082      	sub	sp, #8
 8022a7c:	af00      	add	r7, sp, #0
 8022a7e:	4603      	mov	r3, r0
 8022a80:	6039      	str	r1, [r7, #0]
 8022a82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8022a84:	683a      	ldr	r2, [r7, #0]
 8022a86:	4904      	ldr	r1, [pc, #16]	@ (8022a98 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8022a88:	4804      	ldr	r0, [pc, #16]	@ (8022a9c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8022a8a:	f7fb fd89 	bl	801e5a0 <USBD_GetString>
  return USBD_StrDesc;
 8022a8e:	4b02      	ldr	r3, [pc, #8]	@ (8022a98 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8022a90:	4618      	mov	r0, r3
 8022a92:	3708      	adds	r7, #8
 8022a94:	46bd      	mov	sp, r7
 8022a96:	bd80      	pop	{r7, pc}
 8022a98:	2402a264 	.word	0x2402a264
 8022a9c:	0802ae18 	.word	0x0802ae18

08022aa0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022aa0:	b580      	push	{r7, lr}
 8022aa2:	b082      	sub	sp, #8
 8022aa4:	af00      	add	r7, sp, #0
 8022aa6:	4603      	mov	r3, r0
 8022aa8:	6039      	str	r1, [r7, #0]
 8022aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022aac:	683b      	ldr	r3, [r7, #0]
 8022aae:	221a      	movs	r2, #26
 8022ab0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8022ab2:	f000 f843 	bl	8022b3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8022ab6:	4b02      	ldr	r3, [pc, #8]	@ (8022ac0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8022ab8:	4618      	mov	r0, r3
 8022aba:	3708      	adds	r7, #8
 8022abc:	46bd      	mov	sp, r7
 8022abe:	bd80      	pop	{r7, pc}
 8022ac0:	2400037c 	.word	0x2400037c

08022ac4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022ac4:	b580      	push	{r7, lr}
 8022ac6:	b082      	sub	sp, #8
 8022ac8:	af00      	add	r7, sp, #0
 8022aca:	4603      	mov	r3, r0
 8022acc:	6039      	str	r1, [r7, #0]
 8022ace:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8022ad0:	79fb      	ldrb	r3, [r7, #7]
 8022ad2:	2b00      	cmp	r3, #0
 8022ad4:	d105      	bne.n	8022ae2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8022ad6:	683a      	ldr	r2, [r7, #0]
 8022ad8:	4907      	ldr	r1, [pc, #28]	@ (8022af8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8022ada:	4808      	ldr	r0, [pc, #32]	@ (8022afc <USBD_HS_ConfigStrDescriptor+0x38>)
 8022adc:	f7fb fd60 	bl	801e5a0 <USBD_GetString>
 8022ae0:	e004      	b.n	8022aec <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8022ae2:	683a      	ldr	r2, [r7, #0]
 8022ae4:	4904      	ldr	r1, [pc, #16]	@ (8022af8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8022ae6:	4805      	ldr	r0, [pc, #20]	@ (8022afc <USBD_HS_ConfigStrDescriptor+0x38>)
 8022ae8:	f7fb fd5a 	bl	801e5a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022aec:	4b02      	ldr	r3, [pc, #8]	@ (8022af8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8022aee:	4618      	mov	r0, r3
 8022af0:	3708      	adds	r7, #8
 8022af2:	46bd      	mov	sp, r7
 8022af4:	bd80      	pop	{r7, pc}
 8022af6:	bf00      	nop
 8022af8:	2402a264 	.word	0x2402a264
 8022afc:	0802ae2c 	.word	0x0802ae2c

08022b00 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022b00:	b580      	push	{r7, lr}
 8022b02:	b082      	sub	sp, #8
 8022b04:	af00      	add	r7, sp, #0
 8022b06:	4603      	mov	r3, r0
 8022b08:	6039      	str	r1, [r7, #0]
 8022b0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022b0c:	79fb      	ldrb	r3, [r7, #7]
 8022b0e:	2b00      	cmp	r3, #0
 8022b10:	d105      	bne.n	8022b1e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8022b12:	683a      	ldr	r2, [r7, #0]
 8022b14:	4907      	ldr	r1, [pc, #28]	@ (8022b34 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8022b16:	4808      	ldr	r0, [pc, #32]	@ (8022b38 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8022b18:	f7fb fd42 	bl	801e5a0 <USBD_GetString>
 8022b1c:	e004      	b.n	8022b28 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8022b1e:	683a      	ldr	r2, [r7, #0]
 8022b20:	4904      	ldr	r1, [pc, #16]	@ (8022b34 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8022b22:	4805      	ldr	r0, [pc, #20]	@ (8022b38 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8022b24:	f7fb fd3c 	bl	801e5a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022b28:	4b02      	ldr	r3, [pc, #8]	@ (8022b34 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8022b2a:	4618      	mov	r0, r3
 8022b2c:	3708      	adds	r7, #8
 8022b2e:	46bd      	mov	sp, r7
 8022b30:	bd80      	pop	{r7, pc}
 8022b32:	bf00      	nop
 8022b34:	2402a264 	.word	0x2402a264
 8022b38:	0802ae38 	.word	0x0802ae38

08022b3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8022b3c:	b580      	push	{r7, lr}
 8022b3e:	b084      	sub	sp, #16
 8022b40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8022b42:	4b0f      	ldr	r3, [pc, #60]	@ (8022b80 <Get_SerialNum+0x44>)
 8022b44:	681b      	ldr	r3, [r3, #0]
 8022b46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022b48:	4b0e      	ldr	r3, [pc, #56]	@ (8022b84 <Get_SerialNum+0x48>)
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8022b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8022b88 <Get_SerialNum+0x4c>)
 8022b50:	681b      	ldr	r3, [r3, #0]
 8022b52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8022b54:	68fa      	ldr	r2, [r7, #12]
 8022b56:	687b      	ldr	r3, [r7, #4]
 8022b58:	4413      	add	r3, r2
 8022b5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8022b5c:	68fb      	ldr	r3, [r7, #12]
 8022b5e:	2b00      	cmp	r3, #0
 8022b60:	d009      	beq.n	8022b76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8022b62:	2208      	movs	r2, #8
 8022b64:	4909      	ldr	r1, [pc, #36]	@ (8022b8c <Get_SerialNum+0x50>)
 8022b66:	68f8      	ldr	r0, [r7, #12]
 8022b68:	f000 f814 	bl	8022b94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8022b6c:	2204      	movs	r2, #4
 8022b6e:	4908      	ldr	r1, [pc, #32]	@ (8022b90 <Get_SerialNum+0x54>)
 8022b70:	68b8      	ldr	r0, [r7, #8]
 8022b72:	f000 f80f 	bl	8022b94 <IntToUnicode>
  }
}
 8022b76:	bf00      	nop
 8022b78:	3710      	adds	r7, #16
 8022b7a:	46bd      	mov	sp, r7
 8022b7c:	bd80      	pop	{r7, pc}
 8022b7e:	bf00      	nop
 8022b80:	1ff1e800 	.word	0x1ff1e800
 8022b84:	1ff1e804 	.word	0x1ff1e804
 8022b88:	1ff1e808 	.word	0x1ff1e808
 8022b8c:	2400037e 	.word	0x2400037e
 8022b90:	2400038e 	.word	0x2400038e

08022b94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8022b94:	b480      	push	{r7}
 8022b96:	b087      	sub	sp, #28
 8022b98:	af00      	add	r7, sp, #0
 8022b9a:	60f8      	str	r0, [r7, #12]
 8022b9c:	60b9      	str	r1, [r7, #8]
 8022b9e:	4613      	mov	r3, r2
 8022ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8022ba2:	2300      	movs	r3, #0
 8022ba4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8022ba6:	2300      	movs	r3, #0
 8022ba8:	75fb      	strb	r3, [r7, #23]
 8022baa:	e027      	b.n	8022bfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8022bac:	68fb      	ldr	r3, [r7, #12]
 8022bae:	0f1b      	lsrs	r3, r3, #28
 8022bb0:	2b09      	cmp	r3, #9
 8022bb2:	d80b      	bhi.n	8022bcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8022bb4:	68fb      	ldr	r3, [r7, #12]
 8022bb6:	0f1b      	lsrs	r3, r3, #28
 8022bb8:	b2da      	uxtb	r2, r3
 8022bba:	7dfb      	ldrb	r3, [r7, #23]
 8022bbc:	005b      	lsls	r3, r3, #1
 8022bbe:	4619      	mov	r1, r3
 8022bc0:	68bb      	ldr	r3, [r7, #8]
 8022bc2:	440b      	add	r3, r1
 8022bc4:	3230      	adds	r2, #48	@ 0x30
 8022bc6:	b2d2      	uxtb	r2, r2
 8022bc8:	701a      	strb	r2, [r3, #0]
 8022bca:	e00a      	b.n	8022be2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022bcc:	68fb      	ldr	r3, [r7, #12]
 8022bce:	0f1b      	lsrs	r3, r3, #28
 8022bd0:	b2da      	uxtb	r2, r3
 8022bd2:	7dfb      	ldrb	r3, [r7, #23]
 8022bd4:	005b      	lsls	r3, r3, #1
 8022bd6:	4619      	mov	r1, r3
 8022bd8:	68bb      	ldr	r3, [r7, #8]
 8022bda:	440b      	add	r3, r1
 8022bdc:	3237      	adds	r2, #55	@ 0x37
 8022bde:	b2d2      	uxtb	r2, r2
 8022be0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8022be2:	68fb      	ldr	r3, [r7, #12]
 8022be4:	011b      	lsls	r3, r3, #4
 8022be6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8022be8:	7dfb      	ldrb	r3, [r7, #23]
 8022bea:	005b      	lsls	r3, r3, #1
 8022bec:	3301      	adds	r3, #1
 8022bee:	68ba      	ldr	r2, [r7, #8]
 8022bf0:	4413      	add	r3, r2
 8022bf2:	2200      	movs	r2, #0
 8022bf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8022bf6:	7dfb      	ldrb	r3, [r7, #23]
 8022bf8:	3301      	adds	r3, #1
 8022bfa:	75fb      	strb	r3, [r7, #23]
 8022bfc:	7dfa      	ldrb	r2, [r7, #23]
 8022bfe:	79fb      	ldrb	r3, [r7, #7]
 8022c00:	429a      	cmp	r2, r3
 8022c02:	d3d3      	bcc.n	8022bac <IntToUnicode+0x18>
  }
}
 8022c04:	bf00      	nop
 8022c06:	bf00      	nop
 8022c08:	371c      	adds	r7, #28
 8022c0a:	46bd      	mov	sp, r7
 8022c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c10:	4770      	bx	lr
	...

08022c14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8022c14:	b580      	push	{r7, lr}
 8022c16:	b0b8      	sub	sp, #224	@ 0xe0
 8022c18:	af00      	add	r7, sp, #0
 8022c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022c1c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8022c20:	2200      	movs	r2, #0
 8022c22:	601a      	str	r2, [r3, #0]
 8022c24:	605a      	str	r2, [r3, #4]
 8022c26:	609a      	str	r2, [r3, #8]
 8022c28:	60da      	str	r2, [r3, #12]
 8022c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8022c2c:	f107 0310 	add.w	r3, r7, #16
 8022c30:	22b8      	movs	r2, #184	@ 0xb8
 8022c32:	2100      	movs	r1, #0
 8022c34:	4618      	mov	r0, r3
 8022c36:	f002 fbe4 	bl	8025402 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8022c3a:	687b      	ldr	r3, [r7, #4]
 8022c3c:	681b      	ldr	r3, [r3, #0]
 8022c3e:	4a29      	ldr	r2, [pc, #164]	@ (8022ce4 <HAL_PCD_MspInit+0xd0>)
 8022c40:	4293      	cmp	r3, r2
 8022c42:	d14b      	bne.n	8022cdc <HAL_PCD_MspInit+0xc8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8022c44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8022c48:	f04f 0300 	mov.w	r3, #0
 8022c4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8022c50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8022c54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8022c58:	f107 0310 	add.w	r3, r7, #16
 8022c5c:	4618      	mov	r0, r3
 8022c5e:	f7f1 f93d 	bl	8013edc <HAL_RCCEx_PeriphCLKConfig>
 8022c62:	4603      	mov	r3, r0
 8022c64:	2b00      	cmp	r3, #0
 8022c66:	d001      	beq.n	8022c6c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8022c68:	f7e7 fc5d 	bl	800a526 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8022c6c:	f7f0 f97e 	bl	8012f6c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022c70:	4b1d      	ldr	r3, [pc, #116]	@ (8022ce8 <HAL_PCD_MspInit+0xd4>)
 8022c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8022c76:	4a1c      	ldr	r2, [pc, #112]	@ (8022ce8 <HAL_PCD_MspInit+0xd4>)
 8022c78:	f043 0301 	orr.w	r3, r3, #1
 8022c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8022c80:	4b19      	ldr	r3, [pc, #100]	@ (8022ce8 <HAL_PCD_MspInit+0xd4>)
 8022c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8022c86:	f003 0301 	and.w	r3, r3, #1
 8022c8a:	60fb      	str	r3, [r7, #12]
 8022c8c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8022c8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8022c92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022c96:	2300      	movs	r3, #0
 8022c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022c9c:	2300      	movs	r3, #0
 8022c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022ca2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8022ca6:	4619      	mov	r1, r3
 8022ca8:	4810      	ldr	r0, [pc, #64]	@ (8022cec <HAL_PCD_MspInit+0xd8>)
 8022caa:	f7ee fb51 	bl	8011350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8022cae:	4b0e      	ldr	r3, [pc, #56]	@ (8022ce8 <HAL_PCD_MspInit+0xd4>)
 8022cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8022cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8022ce8 <HAL_PCD_MspInit+0xd4>)
 8022cb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8022cba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8022cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8022ce8 <HAL_PCD_MspInit+0xd4>)
 8022cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8022cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8022cc8:	60bb      	str	r3, [r7, #8]
 8022cca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8022ccc:	2200      	movs	r2, #0
 8022cce:	2105      	movs	r1, #5
 8022cd0:	204d      	movs	r0, #77	@ 0x4d
 8022cd2:	f7ea ffbb 	bl	800dc4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8022cd6:	204d      	movs	r0, #77	@ 0x4d
 8022cd8:	f7ea ffd2 	bl	800dc80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8022cdc:	bf00      	nop
 8022cde:	37e0      	adds	r7, #224	@ 0xe0
 8022ce0:	46bd      	mov	sp, r7
 8022ce2:	bd80      	pop	{r7, pc}
 8022ce4:	40040000 	.word	0x40040000
 8022ce8:	58024400 	.word	0x58024400
 8022cec:	58020000 	.word	0x58020000

08022cf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022cf0:	b580      	push	{r7, lr}
 8022cf2:	b082      	sub	sp, #8
 8022cf4:	af00      	add	r7, sp, #0
 8022cf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022cf8:	687b      	ldr	r3, [r7, #4]
 8022cfa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8022cfe:	687b      	ldr	r3, [r7, #4]
 8022d00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8022d04:	4619      	mov	r1, r3
 8022d06:	4610      	mov	r0, r2
 8022d08:	f7fa fabd 	bl	801d286 <USBD_LL_SetupStage>
}
 8022d0c:	bf00      	nop
 8022d0e:	3708      	adds	r7, #8
 8022d10:	46bd      	mov	sp, r7
 8022d12:	bd80      	pop	{r7, pc}

08022d14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022d14:	b580      	push	{r7, lr}
 8022d16:	b082      	sub	sp, #8
 8022d18:	af00      	add	r7, sp, #0
 8022d1a:	6078      	str	r0, [r7, #4]
 8022d1c:	460b      	mov	r3, r1
 8022d1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022d20:	687b      	ldr	r3, [r7, #4]
 8022d22:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8022d26:	78fa      	ldrb	r2, [r7, #3]
 8022d28:	6879      	ldr	r1, [r7, #4]
 8022d2a:	4613      	mov	r3, r2
 8022d2c:	00db      	lsls	r3, r3, #3
 8022d2e:	4413      	add	r3, r2
 8022d30:	009b      	lsls	r3, r3, #2
 8022d32:	440b      	add	r3, r1
 8022d34:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8022d38:	681a      	ldr	r2, [r3, #0]
 8022d3a:	78fb      	ldrb	r3, [r7, #3]
 8022d3c:	4619      	mov	r1, r3
 8022d3e:	f7fa faf7 	bl	801d330 <USBD_LL_DataOutStage>
}
 8022d42:	bf00      	nop
 8022d44:	3708      	adds	r7, #8
 8022d46:	46bd      	mov	sp, r7
 8022d48:	bd80      	pop	{r7, pc}

08022d4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022d4a:	b580      	push	{r7, lr}
 8022d4c:	b082      	sub	sp, #8
 8022d4e:	af00      	add	r7, sp, #0
 8022d50:	6078      	str	r0, [r7, #4]
 8022d52:	460b      	mov	r3, r1
 8022d54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8022d5c:	78fa      	ldrb	r2, [r7, #3]
 8022d5e:	6879      	ldr	r1, [r7, #4]
 8022d60:	4613      	mov	r3, r2
 8022d62:	00db      	lsls	r3, r3, #3
 8022d64:	4413      	add	r3, r2
 8022d66:	009b      	lsls	r3, r3, #2
 8022d68:	440b      	add	r3, r1
 8022d6a:	3320      	adds	r3, #32
 8022d6c:	681a      	ldr	r2, [r3, #0]
 8022d6e:	78fb      	ldrb	r3, [r7, #3]
 8022d70:	4619      	mov	r1, r3
 8022d72:	f7fa fb90 	bl	801d496 <USBD_LL_DataInStage>
}
 8022d76:	bf00      	nop
 8022d78:	3708      	adds	r7, #8
 8022d7a:	46bd      	mov	sp, r7
 8022d7c:	bd80      	pop	{r7, pc}

08022d7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022d7e:	b580      	push	{r7, lr}
 8022d80:	b082      	sub	sp, #8
 8022d82:	af00      	add	r7, sp, #0
 8022d84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8022d86:	687b      	ldr	r3, [r7, #4]
 8022d88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8022d8c:	4618      	mov	r0, r3
 8022d8e:	f7fa fcca 	bl	801d726 <USBD_LL_SOF>
}
 8022d92:	bf00      	nop
 8022d94:	3708      	adds	r7, #8
 8022d96:	46bd      	mov	sp, r7
 8022d98:	bd80      	pop	{r7, pc}

08022d9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022d9a:	b580      	push	{r7, lr}
 8022d9c:	b084      	sub	sp, #16
 8022d9e:	af00      	add	r7, sp, #0
 8022da0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8022da2:	2301      	movs	r3, #1
 8022da4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8022da6:	687b      	ldr	r3, [r7, #4]
 8022da8:	79db      	ldrb	r3, [r3, #7]
 8022daa:	2b00      	cmp	r3, #0
 8022dac:	d102      	bne.n	8022db4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8022dae:	2300      	movs	r3, #0
 8022db0:	73fb      	strb	r3, [r7, #15]
 8022db2:	e008      	b.n	8022dc6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8022db4:	687b      	ldr	r3, [r7, #4]
 8022db6:	79db      	ldrb	r3, [r3, #7]
 8022db8:	2b02      	cmp	r3, #2
 8022dba:	d102      	bne.n	8022dc2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8022dbc:	2301      	movs	r3, #1
 8022dbe:	73fb      	strb	r3, [r7, #15]
 8022dc0:	e001      	b.n	8022dc6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8022dc2:	f7e7 fbb0 	bl	800a526 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8022dc6:	687b      	ldr	r3, [r7, #4]
 8022dc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8022dcc:	7bfa      	ldrb	r2, [r7, #15]
 8022dce:	4611      	mov	r1, r2
 8022dd0:	4618      	mov	r0, r3
 8022dd2:	f7fa fc64 	bl	801d69e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8022dd6:	687b      	ldr	r3, [r7, #4]
 8022dd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8022ddc:	4618      	mov	r0, r3
 8022dde:	f7fa fc0c 	bl	801d5fa <USBD_LL_Reset>
}
 8022de2:	bf00      	nop
 8022de4:	3710      	adds	r7, #16
 8022de6:	46bd      	mov	sp, r7
 8022de8:	bd80      	pop	{r7, pc}
	...

08022dec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022dec:	b580      	push	{r7, lr}
 8022dee:	b082      	sub	sp, #8
 8022df0:	af00      	add	r7, sp, #0
 8022df2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8022dfa:	4618      	mov	r0, r3
 8022dfc:	f7fa fc5f 	bl	801d6be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022e00:	687b      	ldr	r3, [r7, #4]
 8022e02:	681b      	ldr	r3, [r3, #0]
 8022e04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8022e08:	681b      	ldr	r3, [r3, #0]
 8022e0a:	687a      	ldr	r2, [r7, #4]
 8022e0c:	6812      	ldr	r2, [r2, #0]
 8022e0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8022e12:	f043 0301 	orr.w	r3, r3, #1
 8022e16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022e18:	687b      	ldr	r3, [r7, #4]
 8022e1a:	7adb      	ldrb	r3, [r3, #11]
 8022e1c:	2b00      	cmp	r3, #0
 8022e1e:	d005      	beq.n	8022e2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022e20:	4b04      	ldr	r3, [pc, #16]	@ (8022e34 <HAL_PCD_SuspendCallback+0x48>)
 8022e22:	691b      	ldr	r3, [r3, #16]
 8022e24:	4a03      	ldr	r2, [pc, #12]	@ (8022e34 <HAL_PCD_SuspendCallback+0x48>)
 8022e26:	f043 0306 	orr.w	r3, r3, #6
 8022e2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8022e2c:	bf00      	nop
 8022e2e:	3708      	adds	r7, #8
 8022e30:	46bd      	mov	sp, r7
 8022e32:	bd80      	pop	{r7, pc}
 8022e34:	e000ed00 	.word	0xe000ed00

08022e38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022e38:	b580      	push	{r7, lr}
 8022e3a:	b082      	sub	sp, #8
 8022e3c:	af00      	add	r7, sp, #0
 8022e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022e40:	687b      	ldr	r3, [r7, #4]
 8022e42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8022e46:	4618      	mov	r0, r3
 8022e48:	f7fa fc55 	bl	801d6f6 <USBD_LL_Resume>
}
 8022e4c:	bf00      	nop
 8022e4e:	3708      	adds	r7, #8
 8022e50:	46bd      	mov	sp, r7
 8022e52:	bd80      	pop	{r7, pc}

08022e54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022e54:	b580      	push	{r7, lr}
 8022e56:	b082      	sub	sp, #8
 8022e58:	af00      	add	r7, sp, #0
 8022e5a:	6078      	str	r0, [r7, #4]
 8022e5c:	460b      	mov	r3, r1
 8022e5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8022e66:	78fa      	ldrb	r2, [r7, #3]
 8022e68:	4611      	mov	r1, r2
 8022e6a:	4618      	mov	r0, r3
 8022e6c:	f7fa fcad 	bl	801d7ca <USBD_LL_IsoOUTIncomplete>
}
 8022e70:	bf00      	nop
 8022e72:	3708      	adds	r7, #8
 8022e74:	46bd      	mov	sp, r7
 8022e76:	bd80      	pop	{r7, pc}

08022e78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022e78:	b580      	push	{r7, lr}
 8022e7a:	b082      	sub	sp, #8
 8022e7c:	af00      	add	r7, sp, #0
 8022e7e:	6078      	str	r0, [r7, #4]
 8022e80:	460b      	mov	r3, r1
 8022e82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022e84:	687b      	ldr	r3, [r7, #4]
 8022e86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8022e8a:	78fa      	ldrb	r2, [r7, #3]
 8022e8c:	4611      	mov	r1, r2
 8022e8e:	4618      	mov	r0, r3
 8022e90:	f7fa fc69 	bl	801d766 <USBD_LL_IsoINIncomplete>
}
 8022e94:	bf00      	nop
 8022e96:	3708      	adds	r7, #8
 8022e98:	46bd      	mov	sp, r7
 8022e9a:	bd80      	pop	{r7, pc}

08022e9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022e9c:	b580      	push	{r7, lr}
 8022e9e:	b082      	sub	sp, #8
 8022ea0:	af00      	add	r7, sp, #0
 8022ea2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8022ea4:	687b      	ldr	r3, [r7, #4]
 8022ea6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8022eaa:	4618      	mov	r0, r3
 8022eac:	f7fa fcbf 	bl	801d82e <USBD_LL_DevConnected>
}
 8022eb0:	bf00      	nop
 8022eb2:	3708      	adds	r7, #8
 8022eb4:	46bd      	mov	sp, r7
 8022eb6:	bd80      	pop	{r7, pc}

08022eb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022eb8:	b580      	push	{r7, lr}
 8022eba:	b082      	sub	sp, #8
 8022ebc:	af00      	add	r7, sp, #0
 8022ebe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8022ec0:	687b      	ldr	r3, [r7, #4]
 8022ec2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8022ec6:	4618      	mov	r0, r3
 8022ec8:	f7fa fcbc 	bl	801d844 <USBD_LL_DevDisconnected>
}
 8022ecc:	bf00      	nop
 8022ece:	3708      	adds	r7, #8
 8022ed0:	46bd      	mov	sp, r7
 8022ed2:	bd80      	pop	{r7, pc}

08022ed4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8022ed4:	b580      	push	{r7, lr}
 8022ed6:	b082      	sub	sp, #8
 8022ed8:	af00      	add	r7, sp, #0
 8022eda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	781b      	ldrb	r3, [r3, #0]
 8022ee0:	2b01      	cmp	r3, #1
 8022ee2:	d140      	bne.n	8022f66 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8022ee4:	4a22      	ldr	r2, [pc, #136]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022ee6:	687b      	ldr	r3, [r7, #4]
 8022ee8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8022eec:	687b      	ldr	r3, [r7, #4]
 8022eee:	4a20      	ldr	r2, [pc, #128]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022ef0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8022ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8022f74 <USBD_LL_Init+0xa0>)
 8022ef8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8022efa:	4b1d      	ldr	r3, [pc, #116]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022efc:	2209      	movs	r2, #9
 8022efe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8022f00:	4b1b      	ldr	r3, [pc, #108]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f02:	2202      	movs	r2, #2
 8022f04:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8022f06:	4b1a      	ldr	r3, [pc, #104]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f08:	2200      	movs	r2, #0
 8022f0a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8022f0c:	4b18      	ldr	r3, [pc, #96]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f0e:	2202      	movs	r2, #2
 8022f10:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8022f12:	4b17      	ldr	r3, [pc, #92]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f14:	2200      	movs	r2, #0
 8022f16:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8022f18:	4b15      	ldr	r3, [pc, #84]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f1a:	2200      	movs	r2, #0
 8022f1c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8022f1e:	4b14      	ldr	r3, [pc, #80]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f20:	2200      	movs	r2, #0
 8022f22:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8022f24:	4b12      	ldr	r3, [pc, #72]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f26:	2201      	movs	r2, #1
 8022f28:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8022f2a:	4b11      	ldr	r3, [pc, #68]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f2c:	2200      	movs	r2, #0
 8022f2e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8022f30:	4b0f      	ldr	r3, [pc, #60]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f32:	2200      	movs	r2, #0
 8022f34:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8022f36:	480e      	ldr	r0, [pc, #56]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f38:	f7ee fd3e 	bl	80119b8 <HAL_PCD_Init>
 8022f3c:	4603      	mov	r3, r0
 8022f3e:	2b00      	cmp	r3, #0
 8022f40:	d001      	beq.n	8022f46 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8022f42:	f7e7 faf0 	bl	800a526 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8022f46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8022f4a:	4809      	ldr	r0, [pc, #36]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f4c:	f7ef ff93 	bl	8012e76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8022f50:	2280      	movs	r2, #128	@ 0x80
 8022f52:	2100      	movs	r1, #0
 8022f54:	4806      	ldr	r0, [pc, #24]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f56:	f7ef ff47 	bl	8012de8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8022f5a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8022f5e:	2101      	movs	r1, #1
 8022f60:	4803      	ldr	r0, [pc, #12]	@ (8022f70 <USBD_LL_Init+0x9c>)
 8022f62:	f7ef ff41 	bl	8012de8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8022f66:	2300      	movs	r3, #0
}
 8022f68:	4618      	mov	r0, r3
 8022f6a:	3708      	adds	r7, #8
 8022f6c:	46bd      	mov	sp, r7
 8022f6e:	bd80      	pop	{r7, pc}
 8022f70:	2402a464 	.word	0x2402a464
 8022f74:	40040000 	.word	0x40040000

08022f78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022f78:	b580      	push	{r7, lr}
 8022f7a:	b084      	sub	sp, #16
 8022f7c:	af00      	add	r7, sp, #0
 8022f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022f80:	2300      	movs	r3, #0
 8022f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022f84:	2300      	movs	r3, #0
 8022f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022f88:	687b      	ldr	r3, [r7, #4]
 8022f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8022f8e:	4618      	mov	r0, r3
 8022f90:	f7ee fe1e 	bl	8011bd0 <HAL_PCD_Start>
 8022f94:	4603      	mov	r3, r0
 8022f96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022f98:	7bfb      	ldrb	r3, [r7, #15]
 8022f9a:	4618      	mov	r0, r3
 8022f9c:	f000 f942 	bl	8023224 <USBD_Get_USB_Status>
 8022fa0:	4603      	mov	r3, r0
 8022fa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022fa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8022fa6:	4618      	mov	r0, r3
 8022fa8:	3710      	adds	r7, #16
 8022faa:	46bd      	mov	sp, r7
 8022fac:	bd80      	pop	{r7, pc}

08022fae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8022fae:	b580      	push	{r7, lr}
 8022fb0:	b084      	sub	sp, #16
 8022fb2:	af00      	add	r7, sp, #0
 8022fb4:	6078      	str	r0, [r7, #4]
 8022fb6:	4608      	mov	r0, r1
 8022fb8:	4611      	mov	r1, r2
 8022fba:	461a      	mov	r2, r3
 8022fbc:	4603      	mov	r3, r0
 8022fbe:	70fb      	strb	r3, [r7, #3]
 8022fc0:	460b      	mov	r3, r1
 8022fc2:	70bb      	strb	r3, [r7, #2]
 8022fc4:	4613      	mov	r3, r2
 8022fc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022fc8:	2300      	movs	r3, #0
 8022fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022fcc:	2300      	movs	r3, #0
 8022fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022fd0:	687b      	ldr	r3, [r7, #4]
 8022fd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8022fd6:	78bb      	ldrb	r3, [r7, #2]
 8022fd8:	883a      	ldrh	r2, [r7, #0]
 8022fda:	78f9      	ldrb	r1, [r7, #3]
 8022fdc:	f7ef fb1f 	bl	801261e <HAL_PCD_EP_Open>
 8022fe0:	4603      	mov	r3, r0
 8022fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022fe4:	7bfb      	ldrb	r3, [r7, #15]
 8022fe6:	4618      	mov	r0, r3
 8022fe8:	f000 f91c 	bl	8023224 <USBD_Get_USB_Status>
 8022fec:	4603      	mov	r3, r0
 8022fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8022ff2:	4618      	mov	r0, r3
 8022ff4:	3710      	adds	r7, #16
 8022ff6:	46bd      	mov	sp, r7
 8022ff8:	bd80      	pop	{r7, pc}

08022ffa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022ffa:	b580      	push	{r7, lr}
 8022ffc:	b084      	sub	sp, #16
 8022ffe:	af00      	add	r7, sp, #0
 8023000:	6078      	str	r0, [r7, #4]
 8023002:	460b      	mov	r3, r1
 8023004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023006:	2300      	movs	r3, #0
 8023008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802300a:	2300      	movs	r3, #0
 802300c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802300e:	687b      	ldr	r3, [r7, #4]
 8023010:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8023014:	78fa      	ldrb	r2, [r7, #3]
 8023016:	4611      	mov	r1, r2
 8023018:	4618      	mov	r0, r3
 802301a:	f7ef fb6a 	bl	80126f2 <HAL_PCD_EP_Close>
 802301e:	4603      	mov	r3, r0
 8023020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023022:	7bfb      	ldrb	r3, [r7, #15]
 8023024:	4618      	mov	r0, r3
 8023026:	f000 f8fd 	bl	8023224 <USBD_Get_USB_Status>
 802302a:	4603      	mov	r3, r0
 802302c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802302e:	7bbb      	ldrb	r3, [r7, #14]
}
 8023030:	4618      	mov	r0, r3
 8023032:	3710      	adds	r7, #16
 8023034:	46bd      	mov	sp, r7
 8023036:	bd80      	pop	{r7, pc}

08023038 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023038:	b580      	push	{r7, lr}
 802303a:	b084      	sub	sp, #16
 802303c:	af00      	add	r7, sp, #0
 802303e:	6078      	str	r0, [r7, #4]
 8023040:	460b      	mov	r3, r1
 8023042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023044:	2300      	movs	r3, #0
 8023046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023048:	2300      	movs	r3, #0
 802304a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802304c:	687b      	ldr	r3, [r7, #4]
 802304e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8023052:	78fa      	ldrb	r2, [r7, #3]
 8023054:	4611      	mov	r1, r2
 8023056:	4618      	mov	r0, r3
 8023058:	f7ef fc22 	bl	80128a0 <HAL_PCD_EP_SetStall>
 802305c:	4603      	mov	r3, r0
 802305e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023060:	7bfb      	ldrb	r3, [r7, #15]
 8023062:	4618      	mov	r0, r3
 8023064:	f000 f8de 	bl	8023224 <USBD_Get_USB_Status>
 8023068:	4603      	mov	r3, r0
 802306a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802306c:	7bbb      	ldrb	r3, [r7, #14]
}
 802306e:	4618      	mov	r0, r3
 8023070:	3710      	adds	r7, #16
 8023072:	46bd      	mov	sp, r7
 8023074:	bd80      	pop	{r7, pc}

08023076 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023076:	b580      	push	{r7, lr}
 8023078:	b084      	sub	sp, #16
 802307a:	af00      	add	r7, sp, #0
 802307c:	6078      	str	r0, [r7, #4]
 802307e:	460b      	mov	r3, r1
 8023080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023082:	2300      	movs	r3, #0
 8023084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023086:	2300      	movs	r3, #0
 8023088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802308a:	687b      	ldr	r3, [r7, #4]
 802308c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8023090:	78fa      	ldrb	r2, [r7, #3]
 8023092:	4611      	mov	r1, r2
 8023094:	4618      	mov	r0, r3
 8023096:	f7ef fc66 	bl	8012966 <HAL_PCD_EP_ClrStall>
 802309a:	4603      	mov	r3, r0
 802309c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802309e:	7bfb      	ldrb	r3, [r7, #15]
 80230a0:	4618      	mov	r0, r3
 80230a2:	f000 f8bf 	bl	8023224 <USBD_Get_USB_Status>
 80230a6:	4603      	mov	r3, r0
 80230a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80230aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80230ac:	4618      	mov	r0, r3
 80230ae:	3710      	adds	r7, #16
 80230b0:	46bd      	mov	sp, r7
 80230b2:	bd80      	pop	{r7, pc}

080230b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80230b4:	b480      	push	{r7}
 80230b6:	b085      	sub	sp, #20
 80230b8:	af00      	add	r7, sp, #0
 80230ba:	6078      	str	r0, [r7, #4]
 80230bc:	460b      	mov	r3, r1
 80230be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80230c0:	687b      	ldr	r3, [r7, #4]
 80230c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80230c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80230c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80230cc:	2b00      	cmp	r3, #0
 80230ce:	da0b      	bge.n	80230e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80230d0:	78fb      	ldrb	r3, [r7, #3]
 80230d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80230d6:	68f9      	ldr	r1, [r7, #12]
 80230d8:	4613      	mov	r3, r2
 80230da:	00db      	lsls	r3, r3, #3
 80230dc:	4413      	add	r3, r2
 80230de:	009b      	lsls	r3, r3, #2
 80230e0:	440b      	add	r3, r1
 80230e2:	3316      	adds	r3, #22
 80230e4:	781b      	ldrb	r3, [r3, #0]
 80230e6:	e00b      	b.n	8023100 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80230e8:	78fb      	ldrb	r3, [r7, #3]
 80230ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80230ee:	68f9      	ldr	r1, [r7, #12]
 80230f0:	4613      	mov	r3, r2
 80230f2:	00db      	lsls	r3, r3, #3
 80230f4:	4413      	add	r3, r2
 80230f6:	009b      	lsls	r3, r3, #2
 80230f8:	440b      	add	r3, r1
 80230fa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80230fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8023100:	4618      	mov	r0, r3
 8023102:	3714      	adds	r7, #20
 8023104:	46bd      	mov	sp, r7
 8023106:	f85d 7b04 	ldr.w	r7, [sp], #4
 802310a:	4770      	bx	lr

0802310c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 802310c:	b580      	push	{r7, lr}
 802310e:	b084      	sub	sp, #16
 8023110:	af00      	add	r7, sp, #0
 8023112:	6078      	str	r0, [r7, #4]
 8023114:	460b      	mov	r3, r1
 8023116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023118:	2300      	movs	r3, #0
 802311a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802311c:	2300      	movs	r3, #0
 802311e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023120:	687b      	ldr	r3, [r7, #4]
 8023122:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8023126:	78fa      	ldrb	r2, [r7, #3]
 8023128:	4611      	mov	r1, r2
 802312a:	4618      	mov	r0, r3
 802312c:	f7ef fa53 	bl	80125d6 <HAL_PCD_SetAddress>
 8023130:	4603      	mov	r3, r0
 8023132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023134:	7bfb      	ldrb	r3, [r7, #15]
 8023136:	4618      	mov	r0, r3
 8023138:	f000 f874 	bl	8023224 <USBD_Get_USB_Status>
 802313c:	4603      	mov	r3, r0
 802313e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023140:	7bbb      	ldrb	r3, [r7, #14]
}
 8023142:	4618      	mov	r0, r3
 8023144:	3710      	adds	r7, #16
 8023146:	46bd      	mov	sp, r7
 8023148:	bd80      	pop	{r7, pc}

0802314a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 802314a:	b580      	push	{r7, lr}
 802314c:	b086      	sub	sp, #24
 802314e:	af00      	add	r7, sp, #0
 8023150:	60f8      	str	r0, [r7, #12]
 8023152:	607a      	str	r2, [r7, #4]
 8023154:	603b      	str	r3, [r7, #0]
 8023156:	460b      	mov	r3, r1
 8023158:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802315a:	2300      	movs	r3, #0
 802315c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802315e:	2300      	movs	r3, #0
 8023160:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023162:	68fb      	ldr	r3, [r7, #12]
 8023164:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8023168:	7af9      	ldrb	r1, [r7, #11]
 802316a:	683b      	ldr	r3, [r7, #0]
 802316c:	687a      	ldr	r2, [r7, #4]
 802316e:	f7ef fb5d 	bl	801282c <HAL_PCD_EP_Transmit>
 8023172:	4603      	mov	r3, r0
 8023174:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023176:	7dfb      	ldrb	r3, [r7, #23]
 8023178:	4618      	mov	r0, r3
 802317a:	f000 f853 	bl	8023224 <USBD_Get_USB_Status>
 802317e:	4603      	mov	r3, r0
 8023180:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8023182:	7dbb      	ldrb	r3, [r7, #22]
}
 8023184:	4618      	mov	r0, r3
 8023186:	3718      	adds	r7, #24
 8023188:	46bd      	mov	sp, r7
 802318a:	bd80      	pop	{r7, pc}

0802318c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 802318c:	b580      	push	{r7, lr}
 802318e:	b086      	sub	sp, #24
 8023190:	af00      	add	r7, sp, #0
 8023192:	60f8      	str	r0, [r7, #12]
 8023194:	607a      	str	r2, [r7, #4]
 8023196:	603b      	str	r3, [r7, #0]
 8023198:	460b      	mov	r3, r1
 802319a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802319c:	2300      	movs	r3, #0
 802319e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80231a0:	2300      	movs	r3, #0
 80231a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80231a4:	68fb      	ldr	r3, [r7, #12]
 80231a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80231aa:	7af9      	ldrb	r1, [r7, #11]
 80231ac:	683b      	ldr	r3, [r7, #0]
 80231ae:	687a      	ldr	r2, [r7, #4]
 80231b0:	f7ef fae9 	bl	8012786 <HAL_PCD_EP_Receive>
 80231b4:	4603      	mov	r3, r0
 80231b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80231b8:	7dfb      	ldrb	r3, [r7, #23]
 80231ba:	4618      	mov	r0, r3
 80231bc:	f000 f832 	bl	8023224 <USBD_Get_USB_Status>
 80231c0:	4603      	mov	r3, r0
 80231c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80231c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80231c6:	4618      	mov	r0, r3
 80231c8:	3718      	adds	r7, #24
 80231ca:	46bd      	mov	sp, r7
 80231cc:	bd80      	pop	{r7, pc}

080231ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80231ce:	b580      	push	{r7, lr}
 80231d0:	b082      	sub	sp, #8
 80231d2:	af00      	add	r7, sp, #0
 80231d4:	6078      	str	r0, [r7, #4]
 80231d6:	460b      	mov	r3, r1
 80231d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80231da:	687b      	ldr	r3, [r7, #4]
 80231dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80231e0:	78fa      	ldrb	r2, [r7, #3]
 80231e2:	4611      	mov	r1, r2
 80231e4:	4618      	mov	r0, r3
 80231e6:	f7ef fb09 	bl	80127fc <HAL_PCD_EP_GetRxCount>
 80231ea:	4603      	mov	r3, r0
}
 80231ec:	4618      	mov	r0, r3
 80231ee:	3708      	adds	r7, #8
 80231f0:	46bd      	mov	sp, r7
 80231f2:	bd80      	pop	{r7, pc}

080231f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80231f4:	b480      	push	{r7}
 80231f6:	b083      	sub	sp, #12
 80231f8:	af00      	add	r7, sp, #0
 80231fa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80231fc:	4b03      	ldr	r3, [pc, #12]	@ (802320c <USBD_static_malloc+0x18>)
}
 80231fe:	4618      	mov	r0, r3
 8023200:	370c      	adds	r7, #12
 8023202:	46bd      	mov	sp, r7
 8023204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023208:	4770      	bx	lr
 802320a:	bf00      	nop
 802320c:	2402a948 	.word	0x2402a948

08023210 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8023210:	b480      	push	{r7}
 8023212:	b083      	sub	sp, #12
 8023214:	af00      	add	r7, sp, #0
 8023216:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8023218:	bf00      	nop
 802321a:	370c      	adds	r7, #12
 802321c:	46bd      	mov	sp, r7
 802321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023222:	4770      	bx	lr

08023224 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8023224:	b480      	push	{r7}
 8023226:	b085      	sub	sp, #20
 8023228:	af00      	add	r7, sp, #0
 802322a:	4603      	mov	r3, r0
 802322c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802322e:	2300      	movs	r3, #0
 8023230:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8023232:	79fb      	ldrb	r3, [r7, #7]
 8023234:	2b03      	cmp	r3, #3
 8023236:	d817      	bhi.n	8023268 <USBD_Get_USB_Status+0x44>
 8023238:	a201      	add	r2, pc, #4	@ (adr r2, 8023240 <USBD_Get_USB_Status+0x1c>)
 802323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802323e:	bf00      	nop
 8023240:	08023251 	.word	0x08023251
 8023244:	08023257 	.word	0x08023257
 8023248:	0802325d 	.word	0x0802325d
 802324c:	08023263 	.word	0x08023263
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8023250:	2300      	movs	r3, #0
 8023252:	73fb      	strb	r3, [r7, #15]
    break;
 8023254:	e00b      	b.n	802326e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8023256:	2303      	movs	r3, #3
 8023258:	73fb      	strb	r3, [r7, #15]
    break;
 802325a:	e008      	b.n	802326e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 802325c:	2301      	movs	r3, #1
 802325e:	73fb      	strb	r3, [r7, #15]
    break;
 8023260:	e005      	b.n	802326e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8023262:	2303      	movs	r3, #3
 8023264:	73fb      	strb	r3, [r7, #15]
    break;
 8023266:	e002      	b.n	802326e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8023268:	2303      	movs	r3, #3
 802326a:	73fb      	strb	r3, [r7, #15]
    break;
 802326c:	bf00      	nop
  }
  return usb_status;
 802326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023270:	4618      	mov	r0, r3
 8023272:	3714      	adds	r7, #20
 8023274:	46bd      	mov	sp, r7
 8023276:	f85d 7b04 	ldr.w	r7, [sp], #4
 802327a:	4770      	bx	lr

0802327c <arm_mean_f32>:
 802327c:	b430      	push	{r4, r5}
 802327e:	088d      	lsrs	r5, r1, #2
 8023280:	d037      	beq.n	80232f2 <arm_mean_f32+0x76>
 8023282:	f100 0310 	add.w	r3, r0, #16
 8023286:	462c      	mov	r4, r5
 8023288:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80232f8 <arm_mean_f32+0x7c>
 802328c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8023290:	3c01      	subs	r4, #1
 8023292:	ed13 6a03 	vldr	s12, [r3, #-12]
 8023296:	f103 0310 	add.w	r3, r3, #16
 802329a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802329e:	ed53 6a06 	vldr	s13, [r3, #-24]	@ 0xffffffe8
 80232a2:	ed13 7a05 	vldr	s14, [r3, #-20]	@ 0xffffffec
 80232a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80232aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80232ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80232b2:	d1eb      	bne.n	802328c <arm_mean_f32+0x10>
 80232b4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80232b8:	f011 0303 	ands.w	r3, r1, #3
 80232bc:	d00f      	beq.n	80232de <arm_mean_f32+0x62>
 80232be:	ed90 7a00 	vldr	s14, [r0]
 80232c2:	3b01      	subs	r3, #1
 80232c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80232c8:	d009      	beq.n	80232de <arm_mean_f32+0x62>
 80232ca:	ed90 7a01 	vldr	s14, [r0, #4]
 80232ce:	2b01      	cmp	r3, #1
 80232d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80232d4:	d003      	beq.n	80232de <arm_mean_f32+0x62>
 80232d6:	ed90 7a02 	vldr	s14, [r0, #8]
 80232da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80232de:	ee07 1a10 	vmov	s14, r1
 80232e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80232e6:	bc30      	pop	{r4, r5}
 80232e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80232ec:	edc2 6a00 	vstr	s13, [r2]
 80232f0:	4770      	bx	lr
 80232f2:	eddf 7a01 	vldr	s15, [pc, #4]	@ 80232f8 <arm_mean_f32+0x7c>
 80232f6:	e7df      	b.n	80232b8 <arm_mean_f32+0x3c>
 80232f8:	00000000 	.word	0x00000000

080232fc <arm_max_f32>:
 80232fc:	f101 3cff 	add.w	ip, r1, #4294967295
 8023300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023302:	4607      	mov	r7, r0
 8023304:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8023308:	ecf7 7a01 	vldmia	r7!, {s15}
 802330c:	d05c      	beq.n	80233c8 <arm_max_f32+0xcc>
 802330e:	2400      	movs	r4, #0
 8023310:	3014      	adds	r0, #20
 8023312:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8023316:	4625      	mov	r5, r4
 8023318:	ed10 7a04 	vldr	s14, [r0, #-16]
 802331c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023324:	d502      	bpl.n	802332c <arm_max_f32+0x30>
 8023326:	eef0 7a47 	vmov.f32	s15, s14
 802332a:	1c65      	adds	r5, r4, #1
 802332c:	ed10 7a03 	vldr	s14, [r0, #-12]
 8023330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023338:	d502      	bpl.n	8023340 <arm_max_f32+0x44>
 802333a:	eef0 7a47 	vmov.f32	s15, s14
 802333e:	1ca5      	adds	r5, r4, #2
 8023340:	ed10 7a02 	vldr	s14, [r0, #-8]
 8023344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802334c:	d502      	bpl.n	8023354 <arm_max_f32+0x58>
 802334e:	eef0 7a47 	vmov.f32	s15, s14
 8023352:	1ce5      	adds	r5, r4, #3
 8023354:	ed10 7a01 	vldr	s14, [r0, #-4]
 8023358:	3404      	adds	r4, #4
 802335a:	3010      	adds	r0, #16
 802335c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023364:	d502      	bpl.n	802336c <arm_max_f32+0x70>
 8023366:	eef0 7a47 	vmov.f32	s15, s14
 802336a:	4625      	mov	r5, r4
 802336c:	42a6      	cmp	r6, r4
 802336e:	d1d3      	bne.n	8023318 <arm_max_f32+0x1c>
 8023370:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8023374:	f01c 0003 	ands.w	r0, ip, #3
 8023378:	d01e      	beq.n	80233b8 <arm_max_f32+0xbc>
 802337a:	ed97 7a00 	vldr	s14, [r7]
 802337e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023386:	dc1b      	bgt.n	80233c0 <arm_max_f32+0xc4>
 8023388:	3801      	subs	r0, #1
 802338a:	d015      	beq.n	80233b8 <arm_max_f32+0xbc>
 802338c:	ed97 7a01 	vldr	s14, [r7, #4]
 8023390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023398:	d502      	bpl.n	80233a0 <arm_max_f32+0xa4>
 802339a:	eef0 7a47 	vmov.f32	s15, s14
 802339e:	1a0d      	subs	r5, r1, r0
 80233a0:	2801      	cmp	r0, #1
 80233a2:	d009      	beq.n	80233b8 <arm_max_f32+0xbc>
 80233a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80233a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80233ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80233b0:	dd02      	ble.n	80233b8 <arm_max_f32+0xbc>
 80233b2:	eef0 7a47 	vmov.f32	s15, s14
 80233b6:	4665      	mov	r5, ip
 80233b8:	edc2 7a00 	vstr	s15, [r2]
 80233bc:	601d      	str	r5, [r3, #0]
 80233be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80233c0:	eef0 7a47 	vmov.f32	s15, s14
 80233c4:	1a0d      	subs	r5, r1, r0
 80233c6:	e7df      	b.n	8023388 <arm_max_f32+0x8c>
 80233c8:	4675      	mov	r5, lr
 80233ca:	e7d3      	b.n	8023374 <arm_max_f32+0x78>

080233cc <arm_rfft_64_fast_init_f32>:
 80233cc:	b180      	cbz	r0, 80233f0 <arm_rfft_64_fast_init_f32+0x24>
 80233ce:	4603      	mov	r3, r0
 80233d0:	2240      	movs	r2, #64	@ 0x40
 80233d2:	2020      	movs	r0, #32
 80233d4:	4908      	ldr	r1, [pc, #32]	@ (80233f8 <arm_rfft_64_fast_init_f32+0x2c>)
 80233d6:	b430      	push	{r4, r5}
 80233d8:	2530      	movs	r5, #48	@ 0x30
 80233da:	4c08      	ldr	r4, [pc, #32]	@ (80233fc <arm_rfft_64_fast_init_f32+0x30>)
 80233dc:	821a      	strh	r2, [r3, #16]
 80233de:	4a08      	ldr	r2, [pc, #32]	@ (8023400 <arm_rfft_64_fast_init_f32+0x34>)
 80233e0:	8018      	strh	r0, [r3, #0]
 80233e2:	2000      	movs	r0, #0
 80233e4:	819d      	strh	r5, [r3, #12]
 80233e6:	615a      	str	r2, [r3, #20]
 80233e8:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80233ec:	bc30      	pop	{r4, r5}
 80233ee:	4770      	bx	lr
 80233f0:	f04f 30ff 	mov.w	r0, #4294967295
 80233f4:	4770      	bx	lr
 80233f6:	bf00      	nop
 80233f8:	0802bef8 	.word	0x0802bef8
 80233fc:	0802be98 	.word	0x0802be98
 8023400:	0802bff8 	.word	0x0802bff8

08023404 <stage_rfft_f32>:
 8023404:	b470      	push	{r4, r5, r6}
 8023406:	edd1 7a00 	vldr	s15, [r1]
 802340a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802340e:	ed91 7a01 	vldr	s14, [r1, #4]
 8023412:	f101 0510 	add.w	r5, r1, #16
 8023416:	ee77 7aa7 	vadd.f32	s15, s15, s15
 802341a:	8806      	ldrh	r6, [r0, #0]
 802341c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8023420:	6943      	ldr	r3, [r0, #20]
 8023422:	1e70      	subs	r0, r6, #1
 8023424:	eeb0 4a46 	vmov.f32	s8, s12
 8023428:	f102 0410 	add.w	r4, r2, #16
 802342c:	3310      	adds	r3, #16
 802342e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8023432:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8023436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802343a:	3908      	subs	r1, #8
 802343c:	ee26 7a86 	vmul.f32	s14, s13, s12
 8023440:	ee67 7a86 	vmul.f32	s15, s15, s12
 8023444:	ed82 7a00 	vstr	s14, [r2]
 8023448:	edc2 7a01 	vstr	s15, [r2, #4]
 802344c:	ed15 6a02 	vldr	s12, [r5, #-8]
 8023450:	3801      	subs	r0, #1
 8023452:	ed91 7a02 	vldr	s14, [r1, #8]
 8023456:	f105 0508 	add.w	r5, r5, #8
 802345a:	ed53 6a02 	vldr	s13, [r3, #-8]
 802345e:	f1a1 0108 	sub.w	r1, r1, #8
 8023462:	ee77 5a46 	vsub.f32	s11, s14, s12
 8023466:	edd1 4a05 	vldr	s9, [r1, #20]
 802346a:	ed55 7a03 	vldr	s15, [r5, #-12]
 802346e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8023472:	ed13 6a01 	vldr	s12, [r3, #-4]
 8023476:	f104 0408 	add.w	r4, r4, #8
 802347a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 802347e:	f103 0308 	add.w	r3, r3, #8
 8023482:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8023486:	ee66 5a25 	vmul.f32	s11, s12, s11
 802348a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 802348e:	ee37 7a23 	vadd.f32	s14, s14, s7
 8023492:	ee66 6a85 	vmul.f32	s13, s13, s10
 8023496:	ee26 6a05 	vmul.f32	s12, s12, s10
 802349a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 802349e:	ee37 7a06 	vadd.f32	s14, s14, s12
 80234a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80234a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80234aa:	ee67 7a84 	vmul.f32	s15, s15, s8
 80234ae:	ed04 7a04 	vstr	s14, [r4, #-16]
 80234b2:	ed44 7a03 	vstr	s15, [r4, #-12]
 80234b6:	d1c9      	bne.n	802344c <stage_rfft_f32+0x48>
 80234b8:	bc70      	pop	{r4, r5, r6}
 80234ba:	4770      	bx	lr

080234bc <merge_rfft_f32>:
 80234bc:	b410      	push	{r4}
 80234be:	edd1 7a00 	vldr	s15, [r1]
 80234c2:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80234c6:	edd1 6a01 	vldr	s13, [r1, #4]
 80234ca:	8804      	ldrh	r4, [r0, #0]
 80234cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80234d0:	6940      	ldr	r0, [r0, #20]
 80234d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80234d6:	3c01      	subs	r4, #1
 80234d8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80234dc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80234e0:	ed82 7a00 	vstr	s14, [r2]
 80234e4:	edc2 7a01 	vstr	s15, [r2, #4]
 80234e8:	b3dc      	cbz	r4, 8023562 <merge_rfft_f32+0xa6>
 80234ea:	00e3      	lsls	r3, r4, #3
 80234ec:	3010      	adds	r0, #16
 80234ee:	3210      	adds	r2, #16
 80234f0:	3b08      	subs	r3, #8
 80234f2:	440b      	add	r3, r1
 80234f4:	3110      	adds	r1, #16
 80234f6:	ed11 6a02 	vldr	s12, [r1, #-8]
 80234fa:	3c01      	subs	r4, #1
 80234fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8023500:	f101 0108 	add.w	r1, r1, #8
 8023504:	ed50 6a02 	vldr	s13, [r0, #-8]
 8023508:	f1a3 0308 	sub.w	r3, r3, #8
 802350c:	ee76 5a47 	vsub.f32	s11, s12, s14
 8023510:	edd3 4a05 	vldr	s9, [r3, #20]
 8023514:	ed51 7a03 	vldr	s15, [r1, #-12]
 8023518:	ee37 7a06 	vadd.f32	s14, s14, s12
 802351c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8023520:	f102 0208 	add.w	r2, r2, #8
 8023524:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8023528:	f100 0008 	add.w	r0, r0, #8
 802352c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8023530:	ee66 5a25 	vmul.f32	s11, s12, s11
 8023534:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8023538:	ee37 7a63 	vsub.f32	s14, s14, s7
 802353c:	ee66 6a85 	vmul.f32	s13, s13, s10
 8023540:	ee26 6a05 	vmul.f32	s12, s12, s10
 8023544:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8023548:	ee37 7a46 	vsub.f32	s14, s14, s12
 802354c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8023550:	ee27 7a04 	vmul.f32	s14, s14, s8
 8023554:	ee67 7a84 	vmul.f32	s15, s15, s8
 8023558:	ed02 7a04 	vstr	s14, [r2, #-16]
 802355c:	ed42 7a03 	vstr	s15, [r2, #-12]
 8023560:	d1c9      	bne.n	80234f6 <merge_rfft_f32+0x3a>
 8023562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023566:	4770      	bx	lr

08023568 <arm_rfft_fast_f32>:
 8023568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802356c:	8a05      	ldrh	r5, [r0, #16]
 802356e:	4604      	mov	r4, r0
 8023570:	4617      	mov	r7, r2
 8023572:	461e      	mov	r6, r3
 8023574:	086d      	lsrs	r5, r5, #1
 8023576:	8005      	strh	r5, [r0, #0]
 8023578:	b14b      	cbz	r3, 802358e <arm_rfft_fast_f32+0x26>
 802357a:	f7ff ff9f 	bl	80234bc <merge_rfft_f32>
 802357e:	4632      	mov	r2, r6
 8023580:	4639      	mov	r1, r7
 8023582:	4620      	mov	r0, r4
 8023584:	2301      	movs	r3, #1
 8023586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802358a:	f000 bb35 	b.w	8023bf8 <arm_cfft_f32>
 802358e:	4688      	mov	r8, r1
 8023590:	461a      	mov	r2, r3
 8023592:	2301      	movs	r3, #1
 8023594:	f000 fb30 	bl	8023bf8 <arm_cfft_f32>
 8023598:	463a      	mov	r2, r7
 802359a:	4641      	mov	r1, r8
 802359c:	4620      	mov	r0, r4
 802359e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80235a2:	f7ff bf2f 	b.w	8023404 <stage_rfft_f32>
 80235a6:	bf00      	nop

080235a8 <arm_cfft_radix8by2_f32>:
 80235a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235ac:	4607      	mov	r7, r0
 80235ae:	4608      	mov	r0, r1
 80235b0:	ed2d 8b06 	vpush	{d8-d10}
 80235b4:	f8b7 c000 	ldrh.w	ip, [r7]
 80235b8:	687a      	ldr	r2, [r7, #4]
 80235ba:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80235be:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80235c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80235c6:	f000 80ac 	beq.w	8023722 <arm_cfft_radix8by2_f32+0x17a>
 80235ca:	008c      	lsls	r4, r1, #2
 80235cc:	f100 0310 	add.w	r3, r0, #16
 80235d0:	3210      	adds	r2, #16
 80235d2:	f108 0610 	add.w	r6, r8, #16
 80235d6:	3410      	adds	r4, #16
 80235d8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80235dc:	1905      	adds	r5, r0, r4
 80235de:	4444      	add	r4, r8
 80235e0:	ed16 7a04 	vldr	s14, [r6, #-16]
 80235e4:	3310      	adds	r3, #16
 80235e6:	ed53 4a08 	vldr	s9, [r3, #-32]	@ 0xffffffe0
 80235ea:	3510      	adds	r5, #16
 80235ec:	ed56 0a03 	vldr	s1, [r6, #-12]
 80235f0:	3210      	adds	r2, #16
 80235f2:	ee74 9a87 	vadd.f32	s19, s9, s14
 80235f6:	ed56 7a02 	vldr	s15, [r6, #-8]
 80235fa:	ed56 2a01 	vldr	s5, [r6, #-4]
 80235fe:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8023602:	ed54 5a04 	vldr	s11, [r4, #-16]
 8023606:	3610      	adds	r6, #16
 8023608:	ed14 5a03 	vldr	s10, [r4, #-12]
 802360c:	3410      	adds	r4, #16
 802360e:	ed14 3a06 	vldr	s6, [r4, #-24]	@ 0xffffffe8
 8023612:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 8023616:	ed55 6a08 	vldr	s13, [r5, #-32]	@ 0xffffffe0
 802361a:	ed55 3a06 	vldr	s7, [r5, #-24]	@ 0xffffffe8
 802361e:	ed15 4a05 	vldr	s8, [r5, #-20]	@ 0xffffffec
 8023622:	ee36 9aa5 	vadd.f32	s18, s13, s11
 8023626:	ed14 6a05 	vldr	s12, [r4, #-20]	@ 0xffffffec
 802362a:	ee33 8a83 	vadd.f32	s16, s7, s6
 802362e:	ed13 7a07 	vldr	s14, [r3, #-28]	@ 0xffffffe4
 8023632:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8023636:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 802363a:	ee34 0a06 	vadd.f32	s0, s8, s12
 802363e:	ed15 1a07 	vldr	s2, [r5, #-28]	@ 0xffffffe4
 8023642:	ee77 aa20 	vadd.f32	s21, s14, s1
 8023646:	ed43 9a08 	vstr	s19, [r3, #-32]	@ 0xffffffe0
 802364a:	ee31 aaa7 	vadd.f32	s20, s3, s15
 802364e:	ee72 9a22 	vadd.f32	s19, s4, s5
 8023652:	ee71 8a05 	vadd.f32	s17, s2, s10
 8023656:	ed43 aa07 	vstr	s21, [r3, #-28]	@ 0xffffffe4
 802365a:	ee37 7a60 	vsub.f32	s14, s14, s1
 802365e:	ed03 aa06 	vstr	s20, [r3, #-24]	@ 0xffffffe8
 8023662:	ee35 5a41 	vsub.f32	s10, s10, s2
 8023666:	ed43 9a05 	vstr	s19, [r3, #-20]	@ 0xffffffec
 802366a:	ee36 6a44 	vsub.f32	s12, s12, s8
 802366e:	ed05 9a08 	vstr	s18, [r5, #-32]	@ 0xffffffe0
 8023672:	ed45 8a07 	vstr	s17, [r5, #-28]	@ 0xffffffe4
 8023676:	ee71 1ae7 	vsub.f32	s3, s3, s15
 802367a:	ed05 8a06 	vstr	s16, [r5, #-24]	@ 0xffffffe8
 802367e:	ee72 7a62 	vsub.f32	s15, s4, s5
 8023682:	ed05 0a05 	vstr	s0, [r5, #-20]	@ 0xffffffec
 8023686:	ee73 2a63 	vsub.f32	s5, s6, s7
 802368a:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 802368e:	4563      	cmp	r3, ip
 8023690:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8023694:	ee24 3a84 	vmul.f32	s6, s9, s8
 8023698:	ee27 2a26 	vmul.f32	s4, s14, s13
 802369c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80236a0:	ee65 3aa6 	vmul.f32	s7, s11, s13
 80236a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80236a8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80236ac:	ee65 6a26 	vmul.f32	s13, s10, s13
 80236b0:	ee25 5a04 	vmul.f32	s10, s10, s8
 80236b4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80236b8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80236bc:	ee33 4a02 	vadd.f32	s8, s6, s4
 80236c0:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80236c4:	ed06 7a07 	vstr	s14, [r6, #-28]	@ 0xffffffe4
 80236c8:	ed06 4a08 	vstr	s8, [r6, #-32]	@ 0xffffffe0
 80236cc:	ed04 5a08 	vstr	s10, [r4, #-32]	@ 0xffffffe0
 80236d0:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 80236d4:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 80236d8:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 80236dc:	ee61 4aa6 	vmul.f32	s9, s3, s13
 80236e0:	ee27 4a87 	vmul.f32	s8, s15, s14
 80236e4:	ee61 5a87 	vmul.f32	s11, s3, s14
 80236e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80236ec:	ee22 5a87 	vmul.f32	s10, s5, s14
 80236f0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80236f4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80236f8:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80236fc:	ee74 4a84 	vadd.f32	s9, s9, s8
 8023700:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8023704:	ee35 6a46 	vsub.f32	s12, s10, s12
 8023708:	ee37 7a26 	vadd.f32	s14, s14, s13
 802370c:	ed46 4a06 	vstr	s9, [r6, #-24]	@ 0xffffffe8
 8023710:	ed46 7a05 	vstr	s15, [r6, #-20]	@ 0xffffffec
 8023714:	ed04 6a06 	vstr	s12, [r4, #-24]	@ 0xffffffe8
 8023718:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 802371c:	f47f af60 	bne.w	80235e0 <arm_cfft_radix8by2_f32+0x38>
 8023720:	687a      	ldr	r2, [r7, #4]
 8023722:	b28c      	uxth	r4, r1
 8023724:	2302      	movs	r3, #2
 8023726:	4621      	mov	r1, r4
 8023728:	f000 fb04 	bl	8023d34 <arm_radix8_butterfly_f32>
 802372c:	4621      	mov	r1, r4
 802372e:	687a      	ldr	r2, [r7, #4]
 8023730:	4640      	mov	r0, r8
 8023732:	2302      	movs	r3, #2
 8023734:	ecbd 8b06 	vpop	{d8-d10}
 8023738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802373c:	f000 bafa 	b.w	8023d34 <arm_radix8_butterfly_f32>

08023740 <arm_cfft_radix8by4_f32>:
 8023740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023744:	ed2d 8b04 	vpush	{d8-d9}
 8023748:	8804      	ldrh	r4, [r0, #0]
 802374a:	b08d      	sub	sp, #52	@ 0x34
 802374c:	6842      	ldr	r2, [r0, #4]
 802374e:	460d      	mov	r5, r1
 8023750:	0864      	lsrs	r4, r4, #1
 8023752:	edd1 7a00 	vldr	s15, [r1]
 8023756:	edd1 5a01 	vldr	s11, [r1, #4]
 802375a:	00a3      	lsls	r3, r4, #2
 802375c:	18ce      	adds	r6, r1, r3
 802375e:	18f7      	adds	r7, r6, r3
 8023760:	ed96 7a00 	vldr	s14, [r6]
 8023764:	ed96 4a01 	vldr	s8, [r6, #4]
 8023768:	ed97 6a00 	vldr	s12, [r7]
 802376c:	edd7 4a01 	vldr	s9, [r7, #4]
 8023770:	ee77 6a86 	vadd.f32	s13, s15, s12
 8023774:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8023778:	ee35 6aa4 	vadd.f32	s12, s11, s9
 802377c:	ee77 2a26 	vadd.f32	s5, s14, s13
 8023780:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8023784:	ee74 3a27 	vadd.f32	s7, s8, s15
 8023788:	ee76 4a44 	vsub.f32	s9, s12, s8
 802378c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8023790:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8023794:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8023798:	ee37 7a25 	vadd.f32	s14, s14, s11
 802379c:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80237a0:	0860      	lsrs	r0, r4, #1
 80237a2:	f102 0408 	add.w	r4, r2, #8
 80237a6:	9405      	str	r4, [sp, #20]
 80237a8:	f102 0410 	add.w	r4, r2, #16
 80237ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80237ae:	f1a0 0902 	sub.w	r9, r0, #2
 80237b2:	9403      	str	r4, [sp, #12]
 80237b4:	18fc      	adds	r4, r7, r3
 80237b6:	f102 0018 	add.w	r0, r2, #24
 80237ba:	ed94 5a00 	vldr	s10, [r4]
 80237be:	ed94 3a01 	vldr	s6, [r4, #4]
 80237c2:	ee72 2a85 	vadd.f32	s5, s5, s10
 80237c6:	9004      	str	r0, [sp, #16]
 80237c8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80237cc:	4620      	mov	r0, r4
 80237ce:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80237d2:	9408      	str	r4, [sp, #32]
 80237d4:	ee12 ca90 	vmov	ip, s5
 80237d8:	ee74 5ac3 	vsub.f32	s11, s9, s6
 80237dc:	ee77 7a83 	vadd.f32	s15, s15, s6
 80237e0:	f845 cb08 	str.w	ip, [r5], #8
 80237e4:	ee13 ca90 	vmov	ip, s7
 80237e8:	ed96 2a01 	vldr	s4, [r6, #4]
 80237ec:	ee74 4a05 	vadd.f32	s9, s8, s10
 80237f0:	edd4 2a01 	vldr	s5, [r4, #4]
 80237f4:	ee37 7a45 	vsub.f32	s14, s14, s10
 80237f8:	ee36 6a02 	vadd.f32	s12, s12, s4
 80237fc:	9500      	str	r5, [sp, #0]
 80237fe:	460d      	mov	r5, r1
 8023800:	ee36 6a22 	vadd.f32	s12, s12, s5
 8023804:	ed81 6a01 	vstr	s12, [r1, #4]
 8023808:	4631      	mov	r1, r6
 802380a:	f841 cb08 	str.w	ip, [r1], #8
 802380e:	ee16 ca90 	vmov	ip, s13
 8023812:	9106      	str	r1, [sp, #24]
 8023814:	4639      	mov	r1, r7
 8023816:	edc6 4a01 	vstr	s9, [r6, #4]
 802381a:	f841 cb08 	str.w	ip, [r1], #8
 802381e:	9102      	str	r1, [sp, #8]
 8023820:	ee17 1a90 	vmov	r1, s15
 8023824:	edc7 5a01 	vstr	s11, [r7, #4]
 8023828:	f840 1b08 	str.w	r1, [r0], #8
 802382c:	ea5f 0159 	movs.w	r1, r9, lsr #1
 8023830:	9001      	str	r0, [sp, #4]
 8023832:	ed84 7a01 	vstr	s14, [r4, #4]
 8023836:	9107      	str	r1, [sp, #28]
 8023838:	f000 8135 	beq.w	8023aa6 <arm_cfft_radix8by4_f32+0x366>
 802383c:	3b0c      	subs	r3, #12
 802383e:	f102 0920 	add.w	r9, r2, #32
 8023842:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8023846:	4622      	mov	r2, r4
 8023848:	468b      	mov	fp, r1
 802384a:	f105 0e10 	add.w	lr, r5, #16
 802384e:	4423      	add	r3, r4
 8023850:	f1a6 0c0c 	sub.w	ip, r6, #12
 8023854:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8023858:	f106 0010 	add.w	r0, r6, #16
 802385c:	f1a7 010c 	sub.w	r1, r7, #12
 8023860:	f107 0510 	add.w	r5, r7, #16
 8023864:	3c0c      	subs	r4, #12
 8023866:	3210      	adds	r2, #16
 8023868:	ed15 7a02 	vldr	s14, [r5, #-8]
 802386c:	f1bb 0b01 	subs.w	fp, fp, #1
 8023870:	ed5e 7a02 	vldr	s15, [lr, #-8]
 8023874:	f1ac 0c08 	sub.w	ip, ip, #8
 8023878:	ed50 6a02 	vldr	s13, [r0, #-8]
 802387c:	f10e 0e08 	add.w	lr, lr, #8
 8023880:	ee77 1a87 	vadd.f32	s3, s15, s14
 8023884:	ed52 4a02 	vldr	s9, [r2, #-8]
 8023888:	ed55 5a01 	vldr	s11, [r5, #-4]
 802388c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023890:	ed1e 7a03 	vldr	s14, [lr, #-12]
 8023894:	f10a 0a08 	add.w	sl, sl, #8
 8023898:	ee36 6aa1 	vadd.f32	s12, s13, s3
 802389c:	ed10 3a01 	vldr	s6, [r0, #-4]
 80238a0:	ee37 4a25 	vadd.f32	s8, s14, s11
 80238a4:	ed52 3a01 	vldr	s7, [r2, #-4]
 80238a8:	ee37 7a65 	vsub.f32	s14, s14, s11
 80238ac:	f100 0008 	add.w	r0, r0, #8
 80238b0:	ee36 6a24 	vadd.f32	s12, s12, s9
 80238b4:	f1a1 0108 	sub.w	r1, r1, #8
 80238b8:	ee73 2a27 	vadd.f32	s5, s6, s15
 80238bc:	f109 0910 	add.w	r9, r9, #16
 80238c0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80238c4:	f105 0508 	add.w	r5, r5, #8
 80238c8:	ed0e 6a04 	vstr	s12, [lr, #-16]
 80238cc:	ee37 5a66 	vsub.f32	s10, s14, s13
 80238d0:	ed50 5a03 	vldr	s11, [r0, #-12]
 80238d4:	ee71 1ae6 	vsub.f32	s3, s3, s13
 80238d8:	ed12 6a01 	vldr	s12, [r2, #-4]
 80238dc:	ee36 7a87 	vadd.f32	s14, s13, s14
 80238e0:	ee74 5a25 	vadd.f32	s11, s8, s11
 80238e4:	f1a4 0408 	sub.w	r4, r4, #8
 80238e8:	ee34 4a43 	vsub.f32	s8, s8, s6
 80238ec:	f108 0818 	add.w	r8, r8, #24
 80238f0:	ee32 0ae3 	vsub.f32	s0, s5, s7
 80238f4:	f102 0208 	add.w	r2, r2, #8
 80238f8:	ee75 5a86 	vadd.f32	s11, s11, s12
 80238fc:	f1a3 0308 	sub.w	r3, r3, #8
 8023900:	ee34 6a63 	vsub.f32	s12, s8, s7
 8023904:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8023908:	ed4e 5a03 	vstr	s11, [lr, #-12]
 802390c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8023910:	ed94 4a04 	vldr	s8, [r4, #16]
 8023914:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8023918:	ed9c 3a04 	vldr	s6, [ip, #16]
 802391c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8023920:	edd1 7a04 	vldr	s15, [r1, #16]
 8023924:	ee73 6a04 	vadd.f32	s13, s6, s8
 8023928:	ed93 8a04 	vldr	s16, [r3, #16]
 802392c:	edd4 5a03 	vldr	s11, [r4, #12]
 8023930:	ee33 3a44 	vsub.f32	s6, s6, s8
 8023934:	ed9c 2a03 	vldr	s4, [ip, #12]
 8023938:	ee77 8ac8 	vsub.f32	s17, s15, s16
 802393c:	ee77 0aa6 	vadd.f32	s1, s15, s13
 8023940:	ed91 1a03 	vldr	s2, [r1, #12]
 8023944:	ee32 4a25 	vadd.f32	s8, s4, s11
 8023948:	edd3 2a03 	vldr	s5, [r3, #12]
 802394c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8023950:	ee70 0a88 	vadd.f32	s1, s1, s16
 8023954:	ee73 4a41 	vsub.f32	s9, s6, s2
 8023958:	ee32 2a65 	vsub.f32	s4, s4, s11
 802395c:	edcc 0a04 	vstr	s1, [ip, #16]
 8023960:	ee74 0a41 	vsub.f32	s1, s8, s2
 8023964:	edd1 6a03 	vldr	s13, [r1, #12]
 8023968:	ee74 4aa2 	vadd.f32	s9, s9, s5
 802396c:	ed93 9a03 	vldr	s18, [r3, #12]
 8023970:	ee78 5a82 	vadd.f32	s11, s17, s4
 8023974:	ee34 4a26 	vadd.f32	s8, s8, s13
 8023978:	ee70 0ae2 	vsub.f32	s1, s1, s5
 802397c:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8023980:	ee34 4a09 	vadd.f32	s8, s8, s18
 8023984:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8023988:	ee32 3ac3 	vsub.f32	s6, s5, s6
 802398c:	ed8c 4a03 	vstr	s8, [ip, #12]
 8023990:	ee38 2ac2 	vsub.f32	s4, s17, s4
 8023994:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8023998:	ed1a 4a04 	vldr	s8, [sl, #-16]
 802399c:	ee60 2a01 	vmul.f32	s5, s0, s2
 80239a0:	ee64 6a81 	vmul.f32	s13, s9, s2
 80239a4:	ee20 8a04 	vmul.f32	s16, s0, s8
 80239a8:	ee64 4a84 	vmul.f32	s9, s9, s8
 80239ac:	ee25 0a01 	vmul.f32	s0, s10, s2
 80239b0:	ee25 5a04 	vmul.f32	s10, s10, s8
 80239b4:	ee25 4a84 	vmul.f32	s8, s11, s8
 80239b8:	ee65 5a81 	vmul.f32	s11, s11, s2
 80239bc:	ee35 5a62 	vsub.f32	s10, s10, s5
 80239c0:	ee36 4ac4 	vsub.f32	s8, s13, s8
 80239c4:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80239c8:	ee38 1a00 	vadd.f32	s2, s16, s0
 80239cc:	ed00 5a03 	vstr	s10, [r0, #-12]
 80239d0:	ed00 1a04 	vstr	s2, [r0, #-16]
 80239d4:	ed81 4a04 	vstr	s8, [r1, #16]
 80239d8:	edc1 5a03 	vstr	s11, [r1, #12]
 80239dc:	ed19 5a08 	vldr	s10, [r9, #-32]	@ 0xffffffe0
 80239e0:	ed59 5a07 	vldr	s11, [r9, #-28]	@ 0xffffffe4
 80239e4:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 80239e8:	ee66 2a25 	vmul.f32	s5, s12, s11
 80239ec:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80239f0:	ee21 4a85 	vmul.f32	s8, s3, s10
 80239f4:	ee60 7a85 	vmul.f32	s15, s1, s10
 80239f8:	ee61 1aa5 	vmul.f32	s3, s3, s11
 80239fc:	ee26 6a05 	vmul.f32	s12, s12, s10
 8023a00:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8023a04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8023a08:	ee34 5a22 	vadd.f32	s10, s8, s5
 8023a0c:	ee36 6a61 	vsub.f32	s12, s12, s3
 8023a10:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8023a14:	ed05 5a04 	vstr	s10, [r5, #-16]
 8023a18:	ed05 6a03 	vstr	s12, [r5, #-12]
 8023a1c:	edc4 5a04 	vstr	s11, [r4, #16]
 8023a20:	edc4 6a03 	vstr	s13, [r4, #12]
 8023a24:	ed58 2a0c 	vldr	s5, [r8, #-48]	@ 0xffffffd0
 8023a28:	ed58 7a0b 	vldr	s15, [r8, #-44]	@ 0xffffffd4
 8023a2c:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8023a30:	ee67 5a27 	vmul.f32	s11, s14, s15
 8023a34:	ee63 6a27 	vmul.f32	s13, s6, s15
 8023a38:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8023a3c:	ee27 7a22 	vmul.f32	s14, s14, s5
 8023a40:	ee62 7a27 	vmul.f32	s15, s4, s15
 8023a44:	ee23 3a22 	vmul.f32	s6, s6, s5
 8023a48:	ee22 2a22 	vmul.f32	s4, s4, s5
 8023a4c:	ee36 6a25 	vadd.f32	s12, s12, s11
 8023a50:	ee37 7a63 	vsub.f32	s14, s14, s7
 8023a54:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8023a58:	ee77 7a83 	vadd.f32	s15, s15, s6
 8023a5c:	ed02 6a04 	vstr	s12, [r2, #-16]
 8023a60:	ed02 7a03 	vstr	s14, [r2, #-12]
 8023a64:	ed83 2a04 	vstr	s4, [r3, #16]
 8023a68:	edc3 7a03 	vstr	s15, [r3, #12]
 8023a6c:	f47f aefc 	bne.w	8023868 <arm_cfft_radix8by4_f32+0x128>
 8023a70:	9907      	ldr	r1, [sp, #28]
 8023a72:	9803      	ldr	r0, [sp, #12]
 8023a74:	00cb      	lsls	r3, r1, #3
 8023a76:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8023a7a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8023a7e:	9103      	str	r1, [sp, #12]
 8023a80:	9900      	ldr	r1, [sp, #0]
 8023a82:	4419      	add	r1, r3
 8023a84:	9100      	str	r1, [sp, #0]
 8023a86:	9905      	ldr	r1, [sp, #20]
 8023a88:	4419      	add	r1, r3
 8023a8a:	9105      	str	r1, [sp, #20]
 8023a8c:	9906      	ldr	r1, [sp, #24]
 8023a8e:	4419      	add	r1, r3
 8023a90:	9106      	str	r1, [sp, #24]
 8023a92:	9902      	ldr	r1, [sp, #8]
 8023a94:	4419      	add	r1, r3
 8023a96:	9102      	str	r1, [sp, #8]
 8023a98:	9901      	ldr	r1, [sp, #4]
 8023a9a:	4419      	add	r1, r3
 8023a9c:	9b04      	ldr	r3, [sp, #16]
 8023a9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023aa2:	9101      	str	r1, [sp, #4]
 8023aa4:	9304      	str	r3, [sp, #16]
 8023aa6:	9b00      	ldr	r3, [sp, #0]
 8023aa8:	9902      	ldr	r1, [sp, #8]
 8023aaa:	ed93 7a00 	vldr	s14, [r3]
 8023aae:	edd1 7a00 	vldr	s15, [r1]
 8023ab2:	9a06      	ldr	r2, [sp, #24]
 8023ab4:	ee37 6a27 	vadd.f32	s12, s14, s15
 8023ab8:	9d01      	ldr	r5, [sp, #4]
 8023aba:	edd2 6a00 	vldr	s13, [r2]
 8023abe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023ac2:	9b02      	ldr	r3, [sp, #8]
 8023ac4:	ee76 3a86 	vadd.f32	s7, s13, s12
 8023ac8:	ed95 3a00 	vldr	s6, [r5]
 8023acc:	ed93 5a01 	vldr	s10, [r3, #4]
 8023ad0:	ee36 6a66 	vsub.f32	s12, s12, s13
 8023ad4:	9b00      	ldr	r3, [sp, #0]
 8023ad6:	ee73 3a83 	vadd.f32	s7, s7, s6
 8023ada:	edd5 2a01 	vldr	s5, [r5, #4]
 8023ade:	ed93 4a01 	vldr	s8, [r3, #4]
 8023ae2:	ee36 6a43 	vsub.f32	s12, s12, s6
 8023ae6:	9b00      	ldr	r3, [sp, #0]
 8023ae8:	ee74 5a05 	vadd.f32	s11, s8, s10
 8023aec:	edd2 7a01 	vldr	s15, [r2, #4]
 8023af0:	edc3 3a00 	vstr	s7, [r3]
 8023af4:	ee34 4a45 	vsub.f32	s8, s8, s10
 8023af8:	edd2 3a01 	vldr	s7, [r2, #4]
 8023afc:	ee77 4a87 	vadd.f32	s9, s15, s14
 8023b00:	ed95 2a01 	vldr	s4, [r5, #4]
 8023b04:	ee75 3aa3 	vadd.f32	s7, s11, s7
 8023b08:	9d05      	ldr	r5, [sp, #20]
 8023b0a:	ee34 5a66 	vsub.f32	s10, s8, s13
 8023b0e:	9b00      	ldr	r3, [sp, #0]
 8023b10:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8023b14:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8023b18:	ee73 3a82 	vadd.f32	s7, s7, s4
 8023b1c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8023b1e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8023b22:	4621      	mov	r1, r4
 8023b24:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8023b28:	edc3 3a01 	vstr	s7, [r3, #4]
 8023b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023b30:	edd5 3a00 	vldr	s7, [r5]
 8023b34:	ee76 6a84 	vadd.f32	s13, s13, s8
 8023b38:	ed95 7a01 	vldr	s14, [r5, #4]
 8023b3c:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8023b40:	ee24 4aa3 	vmul.f32	s8, s9, s7
 8023b44:	2304      	movs	r3, #4
 8023b46:	ee64 4a87 	vmul.f32	s9, s9, s14
 8023b4a:	ee25 7a07 	vmul.f32	s14, s10, s14
 8023b4e:	ee25 5a23 	vmul.f32	s10, s10, s7
 8023b52:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8023b56:	ee34 7a07 	vadd.f32	s14, s8, s14
 8023b5a:	ee35 5a64 	vsub.f32	s10, s10, s9
 8023b5e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8023b62:	ed82 7a00 	vstr	s14, [r2]
 8023b66:	ed82 5a01 	vstr	s10, [r2, #4]
 8023b6a:	9a03      	ldr	r2, [sp, #12]
 8023b6c:	edd2 4a01 	vldr	s9, [r2, #4]
 8023b70:	ed92 7a00 	vldr	s14, [r2]
 8023b74:	9a02      	ldr	r2, [sp, #8]
 8023b76:	ee26 5a07 	vmul.f32	s10, s12, s14
 8023b7a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8023b7e:	ee25 7a87 	vmul.f32	s14, s11, s14
 8023b82:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8023b86:	ee37 6a46 	vsub.f32	s12, s14, s12
 8023b8a:	ee75 5a25 	vadd.f32	s11, s10, s11
 8023b8e:	edc2 5a00 	vstr	s11, [r2]
 8023b92:	ed82 6a01 	vstr	s12, [r2, #4]
 8023b96:	9a04      	ldr	r2, [sp, #16]
 8023b98:	9d01      	ldr	r5, [sp, #4]
 8023b9a:	edd2 5a01 	vldr	s11, [r2, #4]
 8023b9e:	ed92 7a00 	vldr	s14, [r2]
 8023ba2:	ee27 6a87 	vmul.f32	s12, s15, s14
 8023ba6:	ee26 7a87 	vmul.f32	s14, s13, s14
 8023baa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8023bae:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8023bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023bb6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8023bba:	edc5 7a01 	vstr	s15, [r5, #4]
 8023bbe:	edc5 6a00 	vstr	s13, [r5]
 8023bc2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8023bc4:	686a      	ldr	r2, [r5, #4]
 8023bc6:	f000 f8b5 	bl	8023d34 <arm_radix8_butterfly_f32>
 8023bca:	4630      	mov	r0, r6
 8023bcc:	4621      	mov	r1, r4
 8023bce:	686a      	ldr	r2, [r5, #4]
 8023bd0:	2304      	movs	r3, #4
 8023bd2:	f000 f8af 	bl	8023d34 <arm_radix8_butterfly_f32>
 8023bd6:	4638      	mov	r0, r7
 8023bd8:	4621      	mov	r1, r4
 8023bda:	686a      	ldr	r2, [r5, #4]
 8023bdc:	2304      	movs	r3, #4
 8023bde:	f000 f8a9 	bl	8023d34 <arm_radix8_butterfly_f32>
 8023be2:	4621      	mov	r1, r4
 8023be4:	686a      	ldr	r2, [r5, #4]
 8023be6:	2304      	movs	r3, #4
 8023be8:	9808      	ldr	r0, [sp, #32]
 8023bea:	b00d      	add	sp, #52	@ 0x34
 8023bec:	ecbd 8b04 	vpop	{d8-d9}
 8023bf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bf4:	f000 b89e 	b.w	8023d34 <arm_radix8_butterfly_f32>

08023bf8 <arm_cfft_f32>:
 8023bf8:	2a01      	cmp	r2, #1
 8023bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023bfe:	4606      	mov	r6, r0
 8023c00:	4617      	mov	r7, r2
 8023c02:	460c      	mov	r4, r1
 8023c04:	4698      	mov	r8, r3
 8023c06:	8805      	ldrh	r5, [r0, #0]
 8023c08:	d055      	beq.n	8023cb6 <arm_cfft_f32+0xbe>
 8023c0a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8023c0e:	d061      	beq.n	8023cd4 <arm_cfft_f32+0xdc>
 8023c10:	d916      	bls.n	8023c40 <arm_cfft_f32+0x48>
 8023c12:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8023c16:	d01a      	beq.n	8023c4e <arm_cfft_f32+0x56>
 8023c18:	d946      	bls.n	8023ca8 <arm_cfft_f32+0xb0>
 8023c1a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8023c1e:	d059      	beq.n	8023cd4 <arm_cfft_f32+0xdc>
 8023c20:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8023c24:	d105      	bne.n	8023c32 <arm_cfft_f32+0x3a>
 8023c26:	2301      	movs	r3, #1
 8023c28:	6872      	ldr	r2, [r6, #4]
 8023c2a:	4629      	mov	r1, r5
 8023c2c:	4620      	mov	r0, r4
 8023c2e:	f000 f881 	bl	8023d34 <arm_radix8_butterfly_f32>
 8023c32:	f1b8 0f00 	cmp.w	r8, #0
 8023c36:	d111      	bne.n	8023c5c <arm_cfft_f32+0x64>
 8023c38:	2f01      	cmp	r7, #1
 8023c3a:	d016      	beq.n	8023c6a <arm_cfft_f32+0x72>
 8023c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023c40:	2d20      	cmp	r5, #32
 8023c42:	d047      	beq.n	8023cd4 <arm_cfft_f32+0xdc>
 8023c44:	d934      	bls.n	8023cb0 <arm_cfft_f32+0xb8>
 8023c46:	2d40      	cmp	r5, #64	@ 0x40
 8023c48:	d0ed      	beq.n	8023c26 <arm_cfft_f32+0x2e>
 8023c4a:	2d80      	cmp	r5, #128	@ 0x80
 8023c4c:	d1f1      	bne.n	8023c32 <arm_cfft_f32+0x3a>
 8023c4e:	4621      	mov	r1, r4
 8023c50:	4630      	mov	r0, r6
 8023c52:	f7ff fca9 	bl	80235a8 <arm_cfft_radix8by2_f32>
 8023c56:	f1b8 0f00 	cmp.w	r8, #0
 8023c5a:	d0ed      	beq.n	8023c38 <arm_cfft_f32+0x40>
 8023c5c:	68b2      	ldr	r2, [r6, #8]
 8023c5e:	4620      	mov	r0, r4
 8023c60:	89b1      	ldrh	r1, [r6, #12]
 8023c62:	f000 f83f 	bl	8023ce4 <arm_bitreversal_32>
 8023c66:	2f01      	cmp	r7, #1
 8023c68:	d1e8      	bne.n	8023c3c <arm_cfft_f32+0x44>
 8023c6a:	ee07 5a90 	vmov	s15, r5
 8023c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8023c76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8023c7a:	2d00      	cmp	r5, #0
 8023c7c:	d0de      	beq.n	8023c3c <arm_cfft_f32+0x44>
 8023c7e:	f104 0108 	add.w	r1, r4, #8
 8023c82:	2300      	movs	r3, #0
 8023c84:	ed11 7a02 	vldr	s14, [r1, #-8]
 8023c88:	3301      	adds	r3, #1
 8023c8a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8023c8e:	3108      	adds	r1, #8
 8023c90:	429d      	cmp	r5, r3
 8023c92:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023c96:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8023c9a:	ed01 7a04 	vstr	s14, [r1, #-16]
 8023c9e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8023ca2:	d1ef      	bne.n	8023c84 <arm_cfft_f32+0x8c>
 8023ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ca8:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8023cac:	d0bb      	beq.n	8023c26 <arm_cfft_f32+0x2e>
 8023cae:	e7c0      	b.n	8023c32 <arm_cfft_f32+0x3a>
 8023cb0:	2d10      	cmp	r5, #16
 8023cb2:	d0cc      	beq.n	8023c4e <arm_cfft_f32+0x56>
 8023cb4:	e7bd      	b.n	8023c32 <arm_cfft_f32+0x3a>
 8023cb6:	b195      	cbz	r5, 8023cde <arm_cfft_f32+0xe6>
 8023cb8:	f101 030c 	add.w	r3, r1, #12
 8023cbc:	2200      	movs	r2, #0
 8023cbe:	ed53 7a02 	vldr	s15, [r3, #-8]
 8023cc2:	3201      	adds	r2, #1
 8023cc4:	3308      	adds	r3, #8
 8023cc6:	eef1 7a67 	vneg.f32	s15, s15
 8023cca:	4295      	cmp	r5, r2
 8023ccc:	ed43 7a04 	vstr	s15, [r3, #-16]
 8023cd0:	d1f5      	bne.n	8023cbe <arm_cfft_f32+0xc6>
 8023cd2:	e79a      	b.n	8023c0a <arm_cfft_f32+0x12>
 8023cd4:	4621      	mov	r1, r4
 8023cd6:	4630      	mov	r0, r6
 8023cd8:	f7ff fd32 	bl	8023740 <arm_cfft_radix8by4_f32>
 8023cdc:	e7a9      	b.n	8023c32 <arm_cfft_f32+0x3a>
 8023cde:	2b00      	cmp	r3, #0
 8023ce0:	d0ac      	beq.n	8023c3c <arm_cfft_f32+0x44>
 8023ce2:	e7bb      	b.n	8023c5c <arm_cfft_f32+0x64>

08023ce4 <arm_bitreversal_32>:
 8023ce4:	b321      	cbz	r1, 8023d30 <arm_bitreversal_32+0x4c>
 8023ce6:	f102 0c02 	add.w	ip, r2, #2
 8023cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023cee:	4690      	mov	r8, r2
 8023cf0:	2500      	movs	r5, #0
 8023cf2:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 8023cf6:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8023cfa:	3502      	adds	r5, #2
 8023cfc:	08a4      	lsrs	r4, r4, #2
 8023cfe:	089b      	lsrs	r3, r3, #2
 8023d00:	428d      	cmp	r5, r1
 8023d02:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8023d06:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8023d0a:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8023d0e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8023d12:	f107 0704 	add.w	r7, r7, #4
 8023d16:	f106 0604 	add.w	r6, r6, #4
 8023d1a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8023d1e:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 8023d22:	59c4      	ldr	r4, [r0, r7]
 8023d24:	5983      	ldr	r3, [r0, r6]
 8023d26:	51c3      	str	r3, [r0, r7]
 8023d28:	5184      	str	r4, [r0, r6]
 8023d2a:	d3e2      	bcc.n	8023cf2 <arm_bitreversal_32+0xe>
 8023d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d30:	4770      	bx	lr
 8023d32:	bf00      	nop

08023d34 <arm_radix8_butterfly_f32>:
 8023d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d38:	ed2d 8b10 	vpush	{d8-d15}
 8023d3c:	b095      	sub	sp, #84	@ 0x54
 8023d3e:	468a      	mov	sl, r1
 8023d40:	468b      	mov	fp, r1
 8023d42:	eddf 8abb 	vldr	s17, [pc, #748]	@ 8024030 <arm_radix8_butterfly_f32+0x2fc>
 8023d46:	9012      	str	r0, [sp, #72]	@ 0x48
 8023d48:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8023d4c:	4603      	mov	r3, r0
 8023d4e:	3304      	adds	r3, #4
 8023d50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023d52:	ea4f 02db 	mov.w	r2, fp, lsr #3
 8023d56:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8023d5c:	f8dd c04c 	ldr.w	ip, [sp, #76]	@ 0x4c
 8023d60:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8023d64:	920f      	str	r2, [sp, #60]	@ 0x3c
 8023d66:	9303      	str	r3, [sp, #12]
 8023d68:	0153      	lsls	r3, r2, #5
 8023d6a:	0114      	lsls	r4, r2, #4
 8023d6c:	eba9 0002 	sub.w	r0, r9, r2
 8023d70:	18ce      	adds	r6, r1, r3
 8023d72:	9302      	str	r3, [sp, #8]
 8023d74:	0097      	lsls	r7, r2, #2
 8023d76:	4613      	mov	r3, r2
 8023d78:	eb06 0509 	add.w	r5, r6, r9
 8023d7c:	9004      	str	r0, [sp, #16]
 8023d7e:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 8023d82:	1bd2      	subs	r2, r2, r7
 8023d84:	eb05 0109 	add.w	r1, r5, r9
 8023d88:	441f      	add	r7, r3
 8023d8a:	9405      	str	r4, [sp, #20]
 8023d8c:	f109 0004 	add.w	r0, r9, #4
 8023d90:	9101      	str	r1, [sp, #4]
 8023d92:	1d21      	adds	r1, r4, #4
 8023d94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023d96:	f04f 0e00 	mov.w	lr, #0
 8023d9a:	9c01      	ldr	r4, [sp, #4]
 8023d9c:	4418      	add	r0, r3
 8023d9e:	4419      	add	r1, r3
 8023da0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8023da4:	9b02      	ldr	r3, [sp, #8]
 8023da6:	00fc      	lsls	r4, r7, #3
 8023da8:	18d7      	adds	r7, r2, r3
 8023daa:	9b04      	ldr	r3, [sp, #16]
 8023dac:	9406      	str	r4, [sp, #24]
 8023dae:	00db      	lsls	r3, r3, #3
 8023db0:	9c01      	ldr	r4, [sp, #4]
 8023db2:	9307      	str	r3, [sp, #28]
 8023db4:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8023db8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8023dbc:	9304      	str	r3, [sp, #16]
 8023dbe:	9b03      	ldr	r3, [sp, #12]
 8023dc0:	edd6 6a00 	vldr	s13, [r6]
 8023dc4:	44de      	add	lr, fp
 8023dc6:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8023dca:	ed94 7a00 	vldr	s14, [r4]
 8023dce:	45f2      	cmp	sl, lr
 8023dd0:	ed10 6a01 	vldr	s12, [r0, #-4]
 8023dd4:	ee37 2aa6 	vadd.f32	s4, s15, s13
 8023dd8:	edd5 2a00 	vldr	s5, [r5]
 8023ddc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8023de0:	edd7 3a00 	vldr	s7, [r7]
 8023de4:	ed11 5a01 	vldr	s10, [r1, #-4]
 8023de8:	ee36 3a22 	vadd.f32	s6, s12, s5
 8023dec:	edd2 6a00 	vldr	s13, [r2]
 8023df0:	ee75 5a07 	vadd.f32	s11, s10, s14
 8023df4:	ee36 4aa3 	vadd.f32	s8, s13, s7
 8023df8:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8023dfc:	ee72 4a25 	vadd.f32	s9, s4, s11
 8023e00:	ee73 3a04 	vadd.f32	s7, s6, s8
 8023e04:	ee35 5a47 	vsub.f32	s10, s10, s14
 8023e08:	ee36 7a62 	vsub.f32	s14, s12, s5
 8023e0c:	ee32 2a65 	vsub.f32	s4, s4, s11
 8023e10:	ee74 5aa3 	vadd.f32	s11, s9, s7
 8023e14:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8023e18:	ee37 6a66 	vsub.f32	s12, s14, s13
 8023e1c:	ed4c 5a01 	vstr	s11, [ip, #-4]
 8023e20:	ee33 3a44 	vsub.f32	s6, s6, s8
 8023e24:	edc6 4a00 	vstr	s9, [r6]
 8023e28:	ee37 7a26 	vadd.f32	s14, s14, s13
 8023e2c:	ed97 4a01 	vldr	s8, [r7, #4]
 8023e30:	ee66 6a28 	vmul.f32	s13, s12, s17
 8023e34:	edd0 5a00 	vldr	s11, [r0]
 8023e38:	ed95 6a01 	vldr	s12, [r5, #4]
 8023e3c:	ee27 7a28 	vmul.f32	s14, s14, s17
 8023e40:	edd2 3a01 	vldr	s7, [r2, #4]
 8023e44:	ee77 2aa6 	vadd.f32	s5, s15, s13
 8023e48:	ee75 4ac6 	vsub.f32	s9, s11, s12
 8023e4c:	ed96 1a01 	vldr	s2, [r6, #4]
 8023e50:	ee33 0ac4 	vsub.f32	s0, s7, s8
 8023e54:	edd4 0a01 	vldr	s1, [r4, #4]
 8023e58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8023e5c:	eddc 6a00 	vldr	s13, [ip]
 8023e60:	ee75 5a86 	vadd.f32	s11, s11, s12
 8023e64:	ed91 6a00 	vldr	s12, [r1]
 8023e68:	ee73 3a84 	vadd.f32	s7, s7, s8
 8023e6c:	ee74 1a80 	vadd.f32	s3, s9, s0
 8023e70:	ee36 4a81 	vadd.f32	s8, s13, s2
 8023e74:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8023e78:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8023e7c:	ee36 1a20 	vadd.f32	s2, s12, s1
 8023e80:	ee61 1aa8 	vmul.f32	s3, s3, s17
 8023e84:	ee36 6a60 	vsub.f32	s12, s12, s1
 8023e88:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8023e8c:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8023e90:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8023e94:	ee74 3a01 	vadd.f32	s7, s8, s2
 8023e98:	ee34 4a41 	vsub.f32	s8, s8, s2
 8023e9c:	ee36 1a21 	vadd.f32	s2, s12, s3
 8023ea0:	ee33 0aa0 	vadd.f32	s0, s7, s1
 8023ea4:	ee36 6a61 	vsub.f32	s12, s12, s3
 8023ea8:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8023eac:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8023eb0:	ed8c 0a00 	vstr	s0, [ip]
 8023eb4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8023eb8:	449c      	add	ip, r3
 8023eba:	ee75 4a07 	vadd.f32	s9, s10, s14
 8023ebe:	edc6 3a01 	vstr	s7, [r6, #4]
 8023ec2:	ee35 7a47 	vsub.f32	s14, s10, s14
 8023ec6:	441e      	add	r6, r3
 8023ec8:	ee32 5a25 	vadd.f32	s10, s4, s11
 8023ecc:	ee72 5a65 	vsub.f32	s11, s4, s11
 8023ed0:	ee72 3a81 	vadd.f32	s7, s5, s2
 8023ed4:	ed01 5a01 	vstr	s10, [r1, #-4]
 8023ed8:	ee34 2a43 	vsub.f32	s4, s8, s6
 8023edc:	edc4 5a00 	vstr	s11, [r4]
 8023ee0:	ee37 5a86 	vadd.f32	s10, s15, s12
 8023ee4:	ee71 5ae4 	vsub.f32	s11, s3, s9
 8023ee8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8023eec:	ed81 2a00 	vstr	s4, [r1]
 8023ef0:	ee36 6ac7 	vsub.f32	s12, s13, s14
 8023ef4:	4419      	add	r1, r3
 8023ef6:	ee33 4a04 	vadd.f32	s8, s6, s8
 8023efa:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8023efe:	ee74 4aa1 	vadd.f32	s9, s9, s3
 8023f02:	ee37 7a26 	vadd.f32	s14, s14, s13
 8023f06:	ed84 4a01 	vstr	s8, [r4, #4]
 8023f0a:	ed40 3a01 	vstr	s7, [r0, #-4]
 8023f0e:	441c      	add	r4, r3
 8023f10:	edc7 2a00 	vstr	s5, [r7]
 8023f14:	ed85 5a00 	vstr	s10, [r5]
 8023f18:	edc2 7a00 	vstr	s15, [r2]
 8023f1c:	edc0 5a00 	vstr	s11, [r0]
 8023f20:	4418      	add	r0, r3
 8023f22:	edc7 4a01 	vstr	s9, [r7, #4]
 8023f26:	441f      	add	r7, r3
 8023f28:	ed85 6a01 	vstr	s12, [r5, #4]
 8023f2c:	441d      	add	r5, r3
 8023f2e:	ed82 7a01 	vstr	s14, [r2, #4]
 8023f32:	441a      	add	r2, r3
 8023f34:	f63f af44 	bhi.w	8023dc0 <arm_radix8_butterfly_f32+0x8c>
 8023f38:	469c      	mov	ip, r3
 8023f3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023f3c:	2b07      	cmp	r3, #7
 8023f3e:	f240 81b6 	bls.w	80242ae <arm_radix8_butterfly_f32+0x57a>
 8023f42:	9a02      	ldr	r2, [sp, #8]
 8023f44:	f109 0608 	add.w	r6, r9, #8
 8023f48:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023f4a:	f108 0408 	add.w	r4, r8, #8
 8023f4e:	3208      	adds	r2, #8
 8023f50:	9f06      	ldr	r7, [sp, #24]
 8023f52:	9d04      	ldr	r5, [sp, #16]
 8023f54:	189a      	adds	r2, r3, r2
 8023f56:	3708      	adds	r7, #8
 8023f58:	3508      	adds	r5, #8
 8023f5a:	9807      	ldr	r0, [sp, #28]
 8023f5c:	920c      	str	r2, [sp, #48]	@ 0x30
 8023f5e:	199a      	adds	r2, r3, r6
 8023f60:	9905      	ldr	r1, [sp, #20]
 8023f62:	3008      	adds	r0, #8
 8023f64:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023f66:	19da      	adds	r2, r3, r7
 8023f68:	310c      	adds	r1, #12
 8023f6a:	920a      	str	r2, [sp, #40]	@ 0x28
 8023f6c:	195a      	adds	r2, r3, r5
 8023f6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8023f70:	191a      	adds	r2, r3, r4
 8023f72:	9208      	str	r2, [sp, #32]
 8023f74:	181a      	adds	r2, r3, r0
 8023f76:	9207      	str	r2, [sp, #28]
 8023f78:	185a      	adds	r2, r3, r1
 8023f7a:	330c      	adds	r3, #12
 8023f7c:	9205      	str	r2, [sp, #20]
 8023f7e:	9306      	str	r3, [sp, #24]
 8023f80:	2301      	movs	r3, #1
 8023f82:	9304      	str	r3, [sp, #16]
 8023f84:	2300      	movs	r3, #0
 8023f86:	930d      	str	r3, [sp, #52]	@ 0x34
 8023f88:	4663      	mov	r3, ip
 8023f8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023f8c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8023f8e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8023f92:	440a      	add	r2, r1
 8023f94:	9f06      	ldr	r7, [sp, #24]
 8023f96:	9e07      	ldr	r6, [sp, #28]
 8023f98:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8023f9c:	920d      	str	r2, [sp, #52]	@ 0x34
 8023f9e:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 8023fa2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023fa4:	9d08      	ldr	r5, [sp, #32]
 8023fa6:	4442      	add	r2, r8
 8023fa8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023faa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023fac:	eb02 0108 	add.w	r1, r2, r8
 8023fb0:	ed92 ea00 	vldr	s28, [r2]
 8023fb4:	eb01 0208 	add.w	r2, r1, r8
 8023fb8:	edd1 da00 	vldr	s27, [r1]
 8023fbc:	eb02 0108 	add.w	r1, r2, r8
 8023fc0:	ed92 da00 	vldr	s26, [r2]
 8023fc4:	eb01 0208 	add.w	r2, r1, r8
 8023fc8:	edd1 ca00 	vldr	s25, [r1]
 8023fcc:	eb02 0108 	add.w	r1, r2, r8
 8023fd0:	ed92 ca00 	vldr	s24, [r2]
 8023fd4:	eb01 0208 	add.w	r2, r1, r8
 8023fd8:	edd1 ba00 	vldr	s23, [r1]
 8023fdc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023fde:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 8023fe2:	ed92 ba00 	vldr	s22, [r2]
 8023fe6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023fe8:	eb0e 0908 	add.w	r9, lr, r8
 8023fec:	910e      	str	r1, [sp, #56]	@ 0x38
 8023fee:	9201      	str	r2, [sp, #4]
 8023ff0:	eb09 0208 	add.w	r2, r9, r8
 8023ff4:	ed99 aa01 	vldr	s20, [r9, #4]
 8023ff8:	edde aa01 	vldr	s21, [lr, #4]
 8023ffc:	eb02 0908 	add.w	r9, r2, r8
 8024000:	edd2 9a01 	vldr	s19, [r2, #4]
 8024004:	f8dd e010 	ldr.w	lr, [sp, #16]
 8024008:	eb09 0208 	add.w	r2, r9, r8
 802400c:	ed99 9a01 	vldr	s18, [r9, #4]
 8024010:	eb02 0908 	add.w	r9, r2, r8
 8024014:	ed92 8a01 	vldr	s16, [r2, #4]
 8024018:	9a01      	ldr	r2, [sp, #4]
 802401a:	edd9 7a01 	vldr	s15, [r9, #4]
 802401e:	44c8      	add	r8, r9
 8024020:	edcd 7a02 	vstr	s15, [sp, #8]
 8024024:	edd8 7a01 	vldr	s15, [r8, #4]
 8024028:	edcd 7a03 	vstr	s15, [sp, #12]
 802402c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802402e:	e001      	b.n	8024034 <arm_radix8_butterfly_f32+0x300>
 8024030:	3f3504f3 	.word	0x3f3504f3
 8024034:	ed92 7a00 	vldr	s14, [r2]
 8024038:	44de      	add	lr, fp
 802403a:	ed17 1a01 	vldr	s2, [r7, #-4]
 802403e:	ed90 5a00 	vldr	s10, [r0]
 8024042:	45f2      	cmp	sl, lr
 8024044:	ed1c fa01 	vldr	s30, [ip, #-4]
 8024048:	ee31 3a07 	vadd.f32	s6, s2, s14
 802404c:	edd6 5a00 	vldr	s11, [r6]
 8024050:	ee31 1a47 	vsub.f32	s2, s2, s14
 8024054:	edd4 7a00 	vldr	s15, [r4]
 8024058:	ed95 7a00 	vldr	s14, [r5]
 802405c:	ed91 4a00 	vldr	s8, [r1]
 8024060:	ee3f 6a27 	vadd.f32	s12, s30, s15
 8024064:	ee77 6a25 	vadd.f32	s13, s14, s11
 8024068:	edd7 ea00 	vldr	s29, [r7]
 802406c:	ee74 fa05 	vadd.f32	s31, s8, s10
 8024070:	ee73 1a06 	vadd.f32	s3, s6, s12
 8024074:	ee34 4a45 	vsub.f32	s8, s8, s10
 8024078:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 802407c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8024080:	ee33 3a46 	vsub.f32	s6, s6, s12
 8024084:	ee31 6a85 	vadd.f32	s12, s3, s10
 8024088:	ee7f 7a67 	vsub.f32	s15, s30, s15
 802408c:	ee34 fa07 	vadd.f32	s30, s8, s14
 8024090:	ed07 6a01 	vstr	s12, [r7, #-4]
 8024094:	ee34 4a47 	vsub.f32	s8, s8, s14
 8024098:	edd5 3a01 	vldr	s7, [r5, #4]
 802409c:	ee7f fae6 	vsub.f32	s31, s31, s13
 80240a0:	ed90 7a01 	vldr	s14, [r0, #4]
 80240a4:	ee2f fa28 	vmul.f32	s30, s30, s17
 80240a8:	edd1 5a01 	vldr	s11, [r1, #4]
 80240ac:	ee24 4a28 	vmul.f32	s8, s8, s17
 80240b0:	ed96 6a01 	vldr	s12, [r6, #4]
 80240b4:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80240b8:	ee75 0ac7 	vsub.f32	s1, s11, s14
 80240bc:	edd2 6a01 	vldr	s13, [r2, #4]
 80240c0:	ee73 2ac6 	vsub.f32	s5, s7, s12
 80240c4:	edd4 4a01 	vldr	s9, [r4, #4]
 80240c8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80240cc:	ed9c 7a00 	vldr	s14, [ip]
 80240d0:	ee37 2a8f 	vadd.f32	s4, s15, s30
 80240d4:	ee33 6a86 	vadd.f32	s12, s7, s12
 80240d8:	ee37 facf 	vsub.f32	s30, s15, s30
 80240dc:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 80240e0:	ee70 7ae2 	vsub.f32	s15, s1, s5
 80240e4:	ee7e eae6 	vsub.f32	s29, s29, s13
 80240e8:	ee70 2aa2 	vadd.f32	s5, s1, s5
 80240ec:	ee77 6a24 	vadd.f32	s13, s14, s9
 80240f0:	ee75 0a86 	vadd.f32	s1, s11, s12
 80240f4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80240f8:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80240fc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8024100:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8024104:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8024108:	ee73 3ae6 	vsub.f32	s7, s7, s13
 802410c:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 8024110:	ee77 4a22 	vadd.f32	s9, s14, s5
 8024114:	ee7e eae7 	vsub.f32	s29, s29, s15
 8024118:	ee77 7a62 	vsub.f32	s15, s14, s5
 802411c:	ee71 2a04 	vadd.f32	s5, s2, s8
 8024120:	ee31 7a44 	vsub.f32	s14, s2, s8
 8024124:	ee30 1a60 	vsub.f32	s2, s0, s1
 8024128:	ee73 1a06 	vadd.f32	s3, s6, s12
 802412c:	ee33 6a46 	vsub.f32	s12, s6, s12
 8024130:	ee33 3aef 	vsub.f32	s6, s7, s31
 8024134:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 8024138:	ee3e 4acf 	vsub.f32	s8, s29, s30
 802413c:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8024140:	ee72 5a25 	vadd.f32	s11, s4, s11
 8024144:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8024148:	ee72 4ae4 	vsub.f32	s9, s5, s9
 802414c:	ee77 2a27 	vadd.f32	s5, s14, s15
 8024150:	ee37 7a67 	vsub.f32	s14, s14, s15
 8024154:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 8024158:	ee2c fa85 	vmul.f32	s30, s25, s10
 802415c:	ee69 ea01 	vmul.f32	s29, s18, s2
 8024160:	ee29 5a05 	vmul.f32	s10, s18, s10
 8024164:	ee2c 1a81 	vmul.f32	s2, s25, s2
 8024168:	ee6d faa1 	vmul.f32	s31, s27, s3
 802416c:	ee70 0a20 	vadd.f32	s1, s0, s1
 8024170:	ee6a 1a21 	vmul.f32	s3, s20, s3
 8024174:	ee2a 0a03 	vmul.f32	s0, s20, s6
 8024178:	ee2d 3a83 	vmul.f32	s6, s27, s6
 802417c:	edc7 0a00 	vstr	s1, [r7]
 8024180:	ee7f ea2e 	vadd.f32	s29, s30, s29
 8024184:	441f      	add	r7, r3
 8024186:	ee2a faa3 	vmul.f32	s30, s21, s7
 802418a:	ee31 5a45 	vsub.f32	s10, s2, s10
 802418e:	ee6e 3a23 	vmul.f32	s7, s28, s7
 8024192:	edc2 ea00 	vstr	s29, [r2]
 8024196:	ee3f 0a80 	vadd.f32	s0, s31, s0
 802419a:	ee33 3a61 	vsub.f32	s6, s6, s3
 802419e:	ed82 5a01 	vstr	s10, [r2, #4]
 80241a2:	ee6e 0a02 	vmul.f32	s1, s28, s4
 80241a6:	edcd 3a01 	vstr	s7, [sp, #4]
 80241aa:	ed9d 5a03 	vldr	s10, [sp, #12]
 80241ae:	ee6b ea86 	vmul.f32	s29, s23, s12
 80241b2:	eddd 3a02 	vldr	s7, [sp, #8]
 80241b6:	ee6b fa24 	vmul.f32	s31, s22, s9
 80241ba:	ed0c 0a01 	vstr	s0, [ip, #-4]
 80241be:	ee65 4a24 	vmul.f32	s9, s10, s9
 80241c2:	ed8c 3a00 	vstr	s6, [ip]
 80241c6:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80241ca:	ee23 6a86 	vmul.f32	s12, s7, s12
 80241ce:	eddd 3a01 	vldr	s7, [sp, #4]
 80241d2:	ee25 5a25 	vmul.f32	s10, s10, s11
 80241d6:	441a      	add	r2, r3
 80241d8:	ee2c 0a22 	vmul.f32	s0, s24, s5
 80241dc:	449c      	add	ip, r3
 80241de:	ee68 1a04 	vmul.f32	s3, s16, s8
 80241e2:	ee70 0a8f 	vadd.f32	s1, s1, s30
 80241e6:	ee2d 3a07 	vmul.f32	s6, s26, s14
 80241ea:	ee29 faa7 	vmul.f32	s30, s19, s15
 80241ee:	ee2a 2a82 	vmul.f32	s4, s21, s4
 80241f2:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 80241f6:	ee6b 5a25 	vmul.f32	s11, s22, s11
 80241fa:	ee68 2a22 	vmul.f32	s5, s16, s5
 80241fe:	ee2c 4a04 	vmul.f32	s8, s24, s8
 8024202:	ee29 7a87 	vmul.f32	s14, s19, s14
 8024206:	ee6d 7a27 	vmul.f32	s15, s26, s15
 802420a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 802420e:	ee7e ea81 	vadd.f32	s29, s29, s2
 8024212:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8024216:	ee3f 5a85 	vadd.f32	s10, s31, s10
 802421a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 802421e:	edc4 ea00 	vstr	s29, [r4]
 8024222:	ee30 0a21 	vadd.f32	s0, s0, s3
 8024226:	ed84 6a01 	vstr	s12, [r4, #4]
 802422a:	ee74 2a62 	vsub.f32	s5, s8, s5
 802422e:	edc1 0a00 	vstr	s1, [r1]
 8024232:	ee33 3a0f 	vadd.f32	s6, s6, s30
 8024236:	edc1 3a01 	vstr	s7, [r1, #4]
 802423a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802423e:	ed86 5a00 	vstr	s10, [r6]
 8024242:	edc6 4a01 	vstr	s9, [r6, #4]
 8024246:	4419      	add	r1, r3
 8024248:	ed80 0a00 	vstr	s0, [r0]
 802424c:	441c      	add	r4, r3
 802424e:	edc0 2a01 	vstr	s5, [r0, #4]
 8024252:	441e      	add	r6, r3
 8024254:	ed85 3a00 	vstr	s6, [r5]
 8024258:	4418      	add	r0, r3
 802425a:	ed85 7a01 	vstr	s14, [r5, #4]
 802425e:	441d      	add	r5, r3
 8024260:	f63f aee8 	bhi.w	8024034 <arm_radix8_butterfly_f32+0x300>
 8024264:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024266:	9a04      	ldr	r2, [sp, #16]
 8024268:	3108      	adds	r1, #8
 802426a:	3201      	adds	r2, #1
 802426c:	910c      	str	r1, [sp, #48]	@ 0x30
 802426e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024270:	9204      	str	r2, [sp, #16]
 8024272:	3108      	adds	r1, #8
 8024274:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024276:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024278:	3108      	adds	r1, #8
 802427a:	910a      	str	r1, [sp, #40]	@ 0x28
 802427c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802427e:	3108      	adds	r1, #8
 8024280:	9109      	str	r1, [sp, #36]	@ 0x24
 8024282:	9908      	ldr	r1, [sp, #32]
 8024284:	3108      	adds	r1, #8
 8024286:	9108      	str	r1, [sp, #32]
 8024288:	9907      	ldr	r1, [sp, #28]
 802428a:	3108      	adds	r1, #8
 802428c:	9107      	str	r1, [sp, #28]
 802428e:	9906      	ldr	r1, [sp, #24]
 8024290:	3108      	adds	r1, #8
 8024292:	9106      	str	r1, [sp, #24]
 8024294:	9905      	ldr	r1, [sp, #20]
 8024296:	3108      	adds	r1, #8
 8024298:	9105      	str	r1, [sp, #20]
 802429a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802429c:	4291      	cmp	r1, r2
 802429e:	f47f ae74 	bne.w	8023f8a <arm_radix8_butterfly_f32+0x256>
 80242a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80242a4:	468b      	mov	fp, r1
 80242a6:	00db      	lsls	r3, r3, #3
 80242a8:	b29b      	uxth	r3, r3
 80242aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80242ac:	e551      	b.n	8023d52 <arm_radix8_butterfly_f32+0x1e>
 80242ae:	b015      	add	sp, #84	@ 0x54
 80242b0:	ecbd 8b10 	vpop	{d8-d15}
 80242b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080242b8 <atoi>:
 80242b8:	220a      	movs	r2, #10
 80242ba:	2100      	movs	r1, #0
 80242bc:	f000 b87c 	b.w	80243b8 <strtol>

080242c0 <_strtol_l.isra.0>:
 80242c0:	2b24      	cmp	r3, #36	@ 0x24
 80242c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80242c6:	4686      	mov	lr, r0
 80242c8:	4690      	mov	r8, r2
 80242ca:	d801      	bhi.n	80242d0 <_strtol_l.isra.0+0x10>
 80242cc:	2b01      	cmp	r3, #1
 80242ce:	d106      	bne.n	80242de <_strtol_l.isra.0+0x1e>
 80242d0:	f001 f95a 	bl	8025588 <__errno>
 80242d4:	2316      	movs	r3, #22
 80242d6:	6003      	str	r3, [r0, #0]
 80242d8:	2000      	movs	r0, #0
 80242da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80242de:	4834      	ldr	r0, [pc, #208]	@ (80243b0 <_strtol_l.isra.0+0xf0>)
 80242e0:	460d      	mov	r5, r1
 80242e2:	462a      	mov	r2, r5
 80242e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80242e8:	5d06      	ldrb	r6, [r0, r4]
 80242ea:	f016 0608 	ands.w	r6, r6, #8
 80242ee:	d1f8      	bne.n	80242e2 <_strtol_l.isra.0+0x22>
 80242f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80242f2:	d110      	bne.n	8024316 <_strtol_l.isra.0+0x56>
 80242f4:	782c      	ldrb	r4, [r5, #0]
 80242f6:	2601      	movs	r6, #1
 80242f8:	1c95      	adds	r5, r2, #2
 80242fa:	f033 0210 	bics.w	r2, r3, #16
 80242fe:	d115      	bne.n	802432c <_strtol_l.isra.0+0x6c>
 8024300:	2c30      	cmp	r4, #48	@ 0x30
 8024302:	d10d      	bne.n	8024320 <_strtol_l.isra.0+0x60>
 8024304:	782a      	ldrb	r2, [r5, #0]
 8024306:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802430a:	2a58      	cmp	r2, #88	@ 0x58
 802430c:	d108      	bne.n	8024320 <_strtol_l.isra.0+0x60>
 802430e:	786c      	ldrb	r4, [r5, #1]
 8024310:	3502      	adds	r5, #2
 8024312:	2310      	movs	r3, #16
 8024314:	e00a      	b.n	802432c <_strtol_l.isra.0+0x6c>
 8024316:	2c2b      	cmp	r4, #43	@ 0x2b
 8024318:	bf04      	itt	eq
 802431a:	782c      	ldrbeq	r4, [r5, #0]
 802431c:	1c95      	addeq	r5, r2, #2
 802431e:	e7ec      	b.n	80242fa <_strtol_l.isra.0+0x3a>
 8024320:	2b00      	cmp	r3, #0
 8024322:	d1f6      	bne.n	8024312 <_strtol_l.isra.0+0x52>
 8024324:	2c30      	cmp	r4, #48	@ 0x30
 8024326:	bf14      	ite	ne
 8024328:	230a      	movne	r3, #10
 802432a:	2308      	moveq	r3, #8
 802432c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8024330:	f10c 3cff 	add.w	ip, ip, #4294967295
 8024334:	2200      	movs	r2, #0
 8024336:	fbbc f9f3 	udiv	r9, ip, r3
 802433a:	4610      	mov	r0, r2
 802433c:	fb03 ca19 	mls	sl, r3, r9, ip
 8024340:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8024344:	2f09      	cmp	r7, #9
 8024346:	d80f      	bhi.n	8024368 <_strtol_l.isra.0+0xa8>
 8024348:	463c      	mov	r4, r7
 802434a:	42a3      	cmp	r3, r4
 802434c:	dd1b      	ble.n	8024386 <_strtol_l.isra.0+0xc6>
 802434e:	1c57      	adds	r7, r2, #1
 8024350:	d007      	beq.n	8024362 <_strtol_l.isra.0+0xa2>
 8024352:	4581      	cmp	r9, r0
 8024354:	d314      	bcc.n	8024380 <_strtol_l.isra.0+0xc0>
 8024356:	d101      	bne.n	802435c <_strtol_l.isra.0+0x9c>
 8024358:	45a2      	cmp	sl, r4
 802435a:	db11      	blt.n	8024380 <_strtol_l.isra.0+0xc0>
 802435c:	fb00 4003 	mla	r0, r0, r3, r4
 8024360:	2201      	movs	r2, #1
 8024362:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024366:	e7eb      	b.n	8024340 <_strtol_l.isra.0+0x80>
 8024368:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802436c:	2f19      	cmp	r7, #25
 802436e:	d801      	bhi.n	8024374 <_strtol_l.isra.0+0xb4>
 8024370:	3c37      	subs	r4, #55	@ 0x37
 8024372:	e7ea      	b.n	802434a <_strtol_l.isra.0+0x8a>
 8024374:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8024378:	2f19      	cmp	r7, #25
 802437a:	d804      	bhi.n	8024386 <_strtol_l.isra.0+0xc6>
 802437c:	3c57      	subs	r4, #87	@ 0x57
 802437e:	e7e4      	b.n	802434a <_strtol_l.isra.0+0x8a>
 8024380:	f04f 32ff 	mov.w	r2, #4294967295
 8024384:	e7ed      	b.n	8024362 <_strtol_l.isra.0+0xa2>
 8024386:	1c53      	adds	r3, r2, #1
 8024388:	d108      	bne.n	802439c <_strtol_l.isra.0+0xdc>
 802438a:	2322      	movs	r3, #34	@ 0x22
 802438c:	f8ce 3000 	str.w	r3, [lr]
 8024390:	4660      	mov	r0, ip
 8024392:	f1b8 0f00 	cmp.w	r8, #0
 8024396:	d0a0      	beq.n	80242da <_strtol_l.isra.0+0x1a>
 8024398:	1e69      	subs	r1, r5, #1
 802439a:	e006      	b.n	80243aa <_strtol_l.isra.0+0xea>
 802439c:	b106      	cbz	r6, 80243a0 <_strtol_l.isra.0+0xe0>
 802439e:	4240      	negs	r0, r0
 80243a0:	f1b8 0f00 	cmp.w	r8, #0
 80243a4:	d099      	beq.n	80242da <_strtol_l.isra.0+0x1a>
 80243a6:	2a00      	cmp	r2, #0
 80243a8:	d1f6      	bne.n	8024398 <_strtol_l.isra.0+0xd8>
 80243aa:	f8c8 1000 	str.w	r1, [r8]
 80243ae:	e794      	b.n	80242da <_strtol_l.isra.0+0x1a>
 80243b0:	0802c0f9 	.word	0x0802c0f9

080243b4 <_strtol_r>:
 80243b4:	f7ff bf84 	b.w	80242c0 <_strtol_l.isra.0>

080243b8 <strtol>:
 80243b8:	4613      	mov	r3, r2
 80243ba:	460a      	mov	r2, r1
 80243bc:	4601      	mov	r1, r0
 80243be:	4802      	ldr	r0, [pc, #8]	@ (80243c8 <strtol+0x10>)
 80243c0:	6800      	ldr	r0, [r0, #0]
 80243c2:	f7ff bf7d 	b.w	80242c0 <_strtol_l.isra.0>
 80243c6:	bf00      	nop
 80243c8:	240003a4 	.word	0x240003a4

080243cc <_strtoul_l.isra.0>:
 80243cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80243d0:	4e34      	ldr	r6, [pc, #208]	@ (80244a4 <_strtoul_l.isra.0+0xd8>)
 80243d2:	4686      	mov	lr, r0
 80243d4:	460d      	mov	r5, r1
 80243d6:	4628      	mov	r0, r5
 80243d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80243dc:	5d37      	ldrb	r7, [r6, r4]
 80243de:	f017 0708 	ands.w	r7, r7, #8
 80243e2:	d1f8      	bne.n	80243d6 <_strtoul_l.isra.0+0xa>
 80243e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80243e6:	d110      	bne.n	802440a <_strtoul_l.isra.0+0x3e>
 80243e8:	782c      	ldrb	r4, [r5, #0]
 80243ea:	2701      	movs	r7, #1
 80243ec:	1c85      	adds	r5, r0, #2
 80243ee:	f033 0010 	bics.w	r0, r3, #16
 80243f2:	d115      	bne.n	8024420 <_strtoul_l.isra.0+0x54>
 80243f4:	2c30      	cmp	r4, #48	@ 0x30
 80243f6:	d10d      	bne.n	8024414 <_strtoul_l.isra.0+0x48>
 80243f8:	7828      	ldrb	r0, [r5, #0]
 80243fa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80243fe:	2858      	cmp	r0, #88	@ 0x58
 8024400:	d108      	bne.n	8024414 <_strtoul_l.isra.0+0x48>
 8024402:	786c      	ldrb	r4, [r5, #1]
 8024404:	3502      	adds	r5, #2
 8024406:	2310      	movs	r3, #16
 8024408:	e00a      	b.n	8024420 <_strtoul_l.isra.0+0x54>
 802440a:	2c2b      	cmp	r4, #43	@ 0x2b
 802440c:	bf04      	itt	eq
 802440e:	782c      	ldrbeq	r4, [r5, #0]
 8024410:	1c85      	addeq	r5, r0, #2
 8024412:	e7ec      	b.n	80243ee <_strtoul_l.isra.0+0x22>
 8024414:	2b00      	cmp	r3, #0
 8024416:	d1f6      	bne.n	8024406 <_strtoul_l.isra.0+0x3a>
 8024418:	2c30      	cmp	r4, #48	@ 0x30
 802441a:	bf14      	ite	ne
 802441c:	230a      	movne	r3, #10
 802441e:	2308      	moveq	r3, #8
 8024420:	f04f 38ff 	mov.w	r8, #4294967295
 8024424:	2600      	movs	r6, #0
 8024426:	fbb8 f8f3 	udiv	r8, r8, r3
 802442a:	fb03 f908 	mul.w	r9, r3, r8
 802442e:	ea6f 0909 	mvn.w	r9, r9
 8024432:	4630      	mov	r0, r6
 8024434:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8024438:	f1bc 0f09 	cmp.w	ip, #9
 802443c:	d810      	bhi.n	8024460 <_strtoul_l.isra.0+0x94>
 802443e:	4664      	mov	r4, ip
 8024440:	42a3      	cmp	r3, r4
 8024442:	dd1e      	ble.n	8024482 <_strtoul_l.isra.0+0xb6>
 8024444:	f1b6 3fff 	cmp.w	r6, #4294967295
 8024448:	d007      	beq.n	802445a <_strtoul_l.isra.0+0x8e>
 802444a:	4580      	cmp	r8, r0
 802444c:	d316      	bcc.n	802447c <_strtoul_l.isra.0+0xb0>
 802444e:	d101      	bne.n	8024454 <_strtoul_l.isra.0+0x88>
 8024450:	45a1      	cmp	r9, r4
 8024452:	db13      	blt.n	802447c <_strtoul_l.isra.0+0xb0>
 8024454:	fb00 4003 	mla	r0, r0, r3, r4
 8024458:	2601      	movs	r6, #1
 802445a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802445e:	e7e9      	b.n	8024434 <_strtoul_l.isra.0+0x68>
 8024460:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8024464:	f1bc 0f19 	cmp.w	ip, #25
 8024468:	d801      	bhi.n	802446e <_strtoul_l.isra.0+0xa2>
 802446a:	3c37      	subs	r4, #55	@ 0x37
 802446c:	e7e8      	b.n	8024440 <_strtoul_l.isra.0+0x74>
 802446e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8024472:	f1bc 0f19 	cmp.w	ip, #25
 8024476:	d804      	bhi.n	8024482 <_strtoul_l.isra.0+0xb6>
 8024478:	3c57      	subs	r4, #87	@ 0x57
 802447a:	e7e1      	b.n	8024440 <_strtoul_l.isra.0+0x74>
 802447c:	f04f 36ff 	mov.w	r6, #4294967295
 8024480:	e7eb      	b.n	802445a <_strtoul_l.isra.0+0x8e>
 8024482:	1c73      	adds	r3, r6, #1
 8024484:	d106      	bne.n	8024494 <_strtoul_l.isra.0+0xc8>
 8024486:	2322      	movs	r3, #34	@ 0x22
 8024488:	f8ce 3000 	str.w	r3, [lr]
 802448c:	4630      	mov	r0, r6
 802448e:	b932      	cbnz	r2, 802449e <_strtoul_l.isra.0+0xd2>
 8024490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024494:	b107      	cbz	r7, 8024498 <_strtoul_l.isra.0+0xcc>
 8024496:	4240      	negs	r0, r0
 8024498:	2a00      	cmp	r2, #0
 802449a:	d0f9      	beq.n	8024490 <_strtoul_l.isra.0+0xc4>
 802449c:	b106      	cbz	r6, 80244a0 <_strtoul_l.isra.0+0xd4>
 802449e:	1e69      	subs	r1, r5, #1
 80244a0:	6011      	str	r1, [r2, #0]
 80244a2:	e7f5      	b.n	8024490 <_strtoul_l.isra.0+0xc4>
 80244a4:	0802c0f9 	.word	0x0802c0f9

080244a8 <_strtoul_r>:
 80244a8:	f7ff bf90 	b.w	80243cc <_strtoul_l.isra.0>

080244ac <strtoul>:
 80244ac:	4613      	mov	r3, r2
 80244ae:	460a      	mov	r2, r1
 80244b0:	4601      	mov	r1, r0
 80244b2:	4802      	ldr	r0, [pc, #8]	@ (80244bc <strtoul+0x10>)
 80244b4:	6800      	ldr	r0, [r0, #0]
 80244b6:	f7ff bf89 	b.w	80243cc <_strtoul_l.isra.0>
 80244ba:	bf00      	nop
 80244bc:	240003a4 	.word	0x240003a4

080244c0 <__cvt>:
 80244c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80244c2:	ed2d 8b02 	vpush	{d8}
 80244c6:	eeb0 8b40 	vmov.f64	d8, d0
 80244ca:	b085      	sub	sp, #20
 80244cc:	4617      	mov	r7, r2
 80244ce:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80244d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80244d2:	ee18 2a90 	vmov	r2, s17
 80244d6:	f025 0520 	bic.w	r5, r5, #32
 80244da:	2a00      	cmp	r2, #0
 80244dc:	bfb6      	itet	lt
 80244de:	222d      	movlt	r2, #45	@ 0x2d
 80244e0:	2200      	movge	r2, #0
 80244e2:	eeb1 8b40 	vneglt.f64	d8, d0
 80244e6:	2d46      	cmp	r5, #70	@ 0x46
 80244e8:	460c      	mov	r4, r1
 80244ea:	701a      	strb	r2, [r3, #0]
 80244ec:	d004      	beq.n	80244f8 <__cvt+0x38>
 80244ee:	2d45      	cmp	r5, #69	@ 0x45
 80244f0:	d100      	bne.n	80244f4 <__cvt+0x34>
 80244f2:	3401      	adds	r4, #1
 80244f4:	2102      	movs	r1, #2
 80244f6:	e000      	b.n	80244fa <__cvt+0x3a>
 80244f8:	2103      	movs	r1, #3
 80244fa:	ab03      	add	r3, sp, #12
 80244fc:	9301      	str	r3, [sp, #4]
 80244fe:	ab02      	add	r3, sp, #8
 8024500:	9300      	str	r3, [sp, #0]
 8024502:	4622      	mov	r2, r4
 8024504:	4633      	mov	r3, r6
 8024506:	eeb0 0b48 	vmov.f64	d0, d8
 802450a:	f001 f909 	bl	8025720 <_dtoa_r>
 802450e:	2d47      	cmp	r5, #71	@ 0x47
 8024510:	d114      	bne.n	802453c <__cvt+0x7c>
 8024512:	07fb      	lsls	r3, r7, #31
 8024514:	d50a      	bpl.n	802452c <__cvt+0x6c>
 8024516:	1902      	adds	r2, r0, r4
 8024518:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024520:	bf08      	it	eq
 8024522:	9203      	streq	r2, [sp, #12]
 8024524:	2130      	movs	r1, #48	@ 0x30
 8024526:	9b03      	ldr	r3, [sp, #12]
 8024528:	4293      	cmp	r3, r2
 802452a:	d319      	bcc.n	8024560 <__cvt+0xa0>
 802452c:	9b03      	ldr	r3, [sp, #12]
 802452e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024530:	1a1b      	subs	r3, r3, r0
 8024532:	6013      	str	r3, [r2, #0]
 8024534:	b005      	add	sp, #20
 8024536:	ecbd 8b02 	vpop	{d8}
 802453a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802453c:	2d46      	cmp	r5, #70	@ 0x46
 802453e:	eb00 0204 	add.w	r2, r0, r4
 8024542:	d1e9      	bne.n	8024518 <__cvt+0x58>
 8024544:	7803      	ldrb	r3, [r0, #0]
 8024546:	2b30      	cmp	r3, #48	@ 0x30
 8024548:	d107      	bne.n	802455a <__cvt+0x9a>
 802454a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024552:	bf1c      	itt	ne
 8024554:	f1c4 0401 	rsbne	r4, r4, #1
 8024558:	6034      	strne	r4, [r6, #0]
 802455a:	6833      	ldr	r3, [r6, #0]
 802455c:	441a      	add	r2, r3
 802455e:	e7db      	b.n	8024518 <__cvt+0x58>
 8024560:	1c5c      	adds	r4, r3, #1
 8024562:	9403      	str	r4, [sp, #12]
 8024564:	7019      	strb	r1, [r3, #0]
 8024566:	e7de      	b.n	8024526 <__cvt+0x66>

08024568 <__exponent>:
 8024568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802456a:	2900      	cmp	r1, #0
 802456c:	bfba      	itte	lt
 802456e:	4249      	neglt	r1, r1
 8024570:	232d      	movlt	r3, #45	@ 0x2d
 8024572:	232b      	movge	r3, #43	@ 0x2b
 8024574:	2909      	cmp	r1, #9
 8024576:	7002      	strb	r2, [r0, #0]
 8024578:	7043      	strb	r3, [r0, #1]
 802457a:	dd29      	ble.n	80245d0 <__exponent+0x68>
 802457c:	f10d 0307 	add.w	r3, sp, #7
 8024580:	461d      	mov	r5, r3
 8024582:	270a      	movs	r7, #10
 8024584:	461a      	mov	r2, r3
 8024586:	fbb1 f6f7 	udiv	r6, r1, r7
 802458a:	fb07 1416 	mls	r4, r7, r6, r1
 802458e:	3430      	adds	r4, #48	@ 0x30
 8024590:	f802 4c01 	strb.w	r4, [r2, #-1]
 8024594:	460c      	mov	r4, r1
 8024596:	2c63      	cmp	r4, #99	@ 0x63
 8024598:	f103 33ff 	add.w	r3, r3, #4294967295
 802459c:	4631      	mov	r1, r6
 802459e:	dcf1      	bgt.n	8024584 <__exponent+0x1c>
 80245a0:	3130      	adds	r1, #48	@ 0x30
 80245a2:	1e94      	subs	r4, r2, #2
 80245a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80245a8:	1c41      	adds	r1, r0, #1
 80245aa:	4623      	mov	r3, r4
 80245ac:	42ab      	cmp	r3, r5
 80245ae:	d30a      	bcc.n	80245c6 <__exponent+0x5e>
 80245b0:	f10d 0309 	add.w	r3, sp, #9
 80245b4:	1a9b      	subs	r3, r3, r2
 80245b6:	42ac      	cmp	r4, r5
 80245b8:	bf88      	it	hi
 80245ba:	2300      	movhi	r3, #0
 80245bc:	3302      	adds	r3, #2
 80245be:	4403      	add	r3, r0
 80245c0:	1a18      	subs	r0, r3, r0
 80245c2:	b003      	add	sp, #12
 80245c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80245c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80245ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80245ce:	e7ed      	b.n	80245ac <__exponent+0x44>
 80245d0:	2330      	movs	r3, #48	@ 0x30
 80245d2:	3130      	adds	r1, #48	@ 0x30
 80245d4:	7083      	strb	r3, [r0, #2]
 80245d6:	70c1      	strb	r1, [r0, #3]
 80245d8:	1d03      	adds	r3, r0, #4
 80245da:	e7f1      	b.n	80245c0 <__exponent+0x58>
 80245dc:	0000      	movs	r0, r0
	...

080245e0 <_printf_float>:
 80245e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245e4:	b08d      	sub	sp, #52	@ 0x34
 80245e6:	460c      	mov	r4, r1
 80245e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80245ec:	4616      	mov	r6, r2
 80245ee:	461f      	mov	r7, r3
 80245f0:	4605      	mov	r5, r0
 80245f2:	f000 ff21 	bl	8025438 <_localeconv_r>
 80245f6:	f8d0 b000 	ldr.w	fp, [r0]
 80245fa:	4658      	mov	r0, fp
 80245fc:	f7db fed8 	bl	80003b0 <strlen>
 8024600:	2300      	movs	r3, #0
 8024602:	930a      	str	r3, [sp, #40]	@ 0x28
 8024604:	f8d8 3000 	ldr.w	r3, [r8]
 8024608:	f894 9018 	ldrb.w	r9, [r4, #24]
 802460c:	6822      	ldr	r2, [r4, #0]
 802460e:	9005      	str	r0, [sp, #20]
 8024610:	3307      	adds	r3, #7
 8024612:	f023 0307 	bic.w	r3, r3, #7
 8024616:	f103 0108 	add.w	r1, r3, #8
 802461a:	f8c8 1000 	str.w	r1, [r8]
 802461e:	ed93 0b00 	vldr	d0, [r3]
 8024622:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8024880 <_printf_float+0x2a0>
 8024626:	eeb0 7bc0 	vabs.f64	d7, d0
 802462a:	eeb4 7b46 	vcmp.f64	d7, d6
 802462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024632:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8024636:	dd24      	ble.n	8024682 <_printf_float+0xa2>
 8024638:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802463c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024640:	d502      	bpl.n	8024648 <_printf_float+0x68>
 8024642:	232d      	movs	r3, #45	@ 0x2d
 8024644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024648:	498f      	ldr	r1, [pc, #572]	@ (8024888 <_printf_float+0x2a8>)
 802464a:	4b90      	ldr	r3, [pc, #576]	@ (802488c <_printf_float+0x2ac>)
 802464c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8024650:	bf8c      	ite	hi
 8024652:	4688      	movhi	r8, r1
 8024654:	4698      	movls	r8, r3
 8024656:	f022 0204 	bic.w	r2, r2, #4
 802465a:	2303      	movs	r3, #3
 802465c:	6123      	str	r3, [r4, #16]
 802465e:	6022      	str	r2, [r4, #0]
 8024660:	f04f 0a00 	mov.w	sl, #0
 8024664:	9700      	str	r7, [sp, #0]
 8024666:	4633      	mov	r3, r6
 8024668:	aa0b      	add	r2, sp, #44	@ 0x2c
 802466a:	4621      	mov	r1, r4
 802466c:	4628      	mov	r0, r5
 802466e:	f000 f9d1 	bl	8024a14 <_printf_common>
 8024672:	3001      	adds	r0, #1
 8024674:	f040 8089 	bne.w	802478a <_printf_float+0x1aa>
 8024678:	f04f 30ff 	mov.w	r0, #4294967295
 802467c:	b00d      	add	sp, #52	@ 0x34
 802467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024682:	eeb4 0b40 	vcmp.f64	d0, d0
 8024686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802468a:	d709      	bvc.n	80246a0 <_printf_float+0xc0>
 802468c:	ee10 3a90 	vmov	r3, s1
 8024690:	2b00      	cmp	r3, #0
 8024692:	bfbc      	itt	lt
 8024694:	232d      	movlt	r3, #45	@ 0x2d
 8024696:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802469a:	497d      	ldr	r1, [pc, #500]	@ (8024890 <_printf_float+0x2b0>)
 802469c:	4b7d      	ldr	r3, [pc, #500]	@ (8024894 <_printf_float+0x2b4>)
 802469e:	e7d5      	b.n	802464c <_printf_float+0x6c>
 80246a0:	6863      	ldr	r3, [r4, #4]
 80246a2:	1c59      	adds	r1, r3, #1
 80246a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80246a8:	d139      	bne.n	802471e <_printf_float+0x13e>
 80246aa:	2306      	movs	r3, #6
 80246ac:	6063      	str	r3, [r4, #4]
 80246ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80246b2:	2300      	movs	r3, #0
 80246b4:	6022      	str	r2, [r4, #0]
 80246b6:	9303      	str	r3, [sp, #12]
 80246b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80246ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80246be:	ab09      	add	r3, sp, #36	@ 0x24
 80246c0:	9300      	str	r3, [sp, #0]
 80246c2:	6861      	ldr	r1, [r4, #4]
 80246c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80246c8:	4628      	mov	r0, r5
 80246ca:	f7ff fef9 	bl	80244c0 <__cvt>
 80246ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80246d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80246d4:	4680      	mov	r8, r0
 80246d6:	d129      	bne.n	802472c <_printf_float+0x14c>
 80246d8:	1cc8      	adds	r0, r1, #3
 80246da:	db02      	blt.n	80246e2 <_printf_float+0x102>
 80246dc:	6863      	ldr	r3, [r4, #4]
 80246de:	4299      	cmp	r1, r3
 80246e0:	dd41      	ble.n	8024766 <_printf_float+0x186>
 80246e2:	f1a9 0902 	sub.w	r9, r9, #2
 80246e6:	fa5f f989 	uxtb.w	r9, r9
 80246ea:	3901      	subs	r1, #1
 80246ec:	464a      	mov	r2, r9
 80246ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80246f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80246f4:	f7ff ff38 	bl	8024568 <__exponent>
 80246f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80246fa:	1813      	adds	r3, r2, r0
 80246fc:	2a01      	cmp	r2, #1
 80246fe:	4682      	mov	sl, r0
 8024700:	6123      	str	r3, [r4, #16]
 8024702:	dc02      	bgt.n	802470a <_printf_float+0x12a>
 8024704:	6822      	ldr	r2, [r4, #0]
 8024706:	07d2      	lsls	r2, r2, #31
 8024708:	d501      	bpl.n	802470e <_printf_float+0x12e>
 802470a:	3301      	adds	r3, #1
 802470c:	6123      	str	r3, [r4, #16]
 802470e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8024712:	2b00      	cmp	r3, #0
 8024714:	d0a6      	beq.n	8024664 <_printf_float+0x84>
 8024716:	232d      	movs	r3, #45	@ 0x2d
 8024718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802471c:	e7a2      	b.n	8024664 <_printf_float+0x84>
 802471e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8024722:	d1c4      	bne.n	80246ae <_printf_float+0xce>
 8024724:	2b00      	cmp	r3, #0
 8024726:	d1c2      	bne.n	80246ae <_printf_float+0xce>
 8024728:	2301      	movs	r3, #1
 802472a:	e7bf      	b.n	80246ac <_printf_float+0xcc>
 802472c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8024730:	d9db      	bls.n	80246ea <_printf_float+0x10a>
 8024732:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8024736:	d118      	bne.n	802476a <_printf_float+0x18a>
 8024738:	2900      	cmp	r1, #0
 802473a:	6863      	ldr	r3, [r4, #4]
 802473c:	dd0b      	ble.n	8024756 <_printf_float+0x176>
 802473e:	6121      	str	r1, [r4, #16]
 8024740:	b913      	cbnz	r3, 8024748 <_printf_float+0x168>
 8024742:	6822      	ldr	r2, [r4, #0]
 8024744:	07d0      	lsls	r0, r2, #31
 8024746:	d502      	bpl.n	802474e <_printf_float+0x16e>
 8024748:	3301      	adds	r3, #1
 802474a:	440b      	add	r3, r1
 802474c:	6123      	str	r3, [r4, #16]
 802474e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8024750:	f04f 0a00 	mov.w	sl, #0
 8024754:	e7db      	b.n	802470e <_printf_float+0x12e>
 8024756:	b913      	cbnz	r3, 802475e <_printf_float+0x17e>
 8024758:	6822      	ldr	r2, [r4, #0]
 802475a:	07d2      	lsls	r2, r2, #31
 802475c:	d501      	bpl.n	8024762 <_printf_float+0x182>
 802475e:	3302      	adds	r3, #2
 8024760:	e7f4      	b.n	802474c <_printf_float+0x16c>
 8024762:	2301      	movs	r3, #1
 8024764:	e7f2      	b.n	802474c <_printf_float+0x16c>
 8024766:	f04f 0967 	mov.w	r9, #103	@ 0x67
 802476a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802476c:	4299      	cmp	r1, r3
 802476e:	db05      	blt.n	802477c <_printf_float+0x19c>
 8024770:	6823      	ldr	r3, [r4, #0]
 8024772:	6121      	str	r1, [r4, #16]
 8024774:	07d8      	lsls	r0, r3, #31
 8024776:	d5ea      	bpl.n	802474e <_printf_float+0x16e>
 8024778:	1c4b      	adds	r3, r1, #1
 802477a:	e7e7      	b.n	802474c <_printf_float+0x16c>
 802477c:	2900      	cmp	r1, #0
 802477e:	bfd4      	ite	le
 8024780:	f1c1 0202 	rsble	r2, r1, #2
 8024784:	2201      	movgt	r2, #1
 8024786:	4413      	add	r3, r2
 8024788:	e7e0      	b.n	802474c <_printf_float+0x16c>
 802478a:	6823      	ldr	r3, [r4, #0]
 802478c:	055a      	lsls	r2, r3, #21
 802478e:	d407      	bmi.n	80247a0 <_printf_float+0x1c0>
 8024790:	6923      	ldr	r3, [r4, #16]
 8024792:	4642      	mov	r2, r8
 8024794:	4631      	mov	r1, r6
 8024796:	4628      	mov	r0, r5
 8024798:	47b8      	blx	r7
 802479a:	3001      	adds	r0, #1
 802479c:	d12a      	bne.n	80247f4 <_printf_float+0x214>
 802479e:	e76b      	b.n	8024678 <_printf_float+0x98>
 80247a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80247a4:	f240 80e0 	bls.w	8024968 <_printf_float+0x388>
 80247a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80247ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80247b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247b4:	d133      	bne.n	802481e <_printf_float+0x23e>
 80247b6:	4a38      	ldr	r2, [pc, #224]	@ (8024898 <_printf_float+0x2b8>)
 80247b8:	2301      	movs	r3, #1
 80247ba:	4631      	mov	r1, r6
 80247bc:	4628      	mov	r0, r5
 80247be:	47b8      	blx	r7
 80247c0:	3001      	adds	r0, #1
 80247c2:	f43f af59 	beq.w	8024678 <_printf_float+0x98>
 80247c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80247ca:	4543      	cmp	r3, r8
 80247cc:	db02      	blt.n	80247d4 <_printf_float+0x1f4>
 80247ce:	6823      	ldr	r3, [r4, #0]
 80247d0:	07d8      	lsls	r0, r3, #31
 80247d2:	d50f      	bpl.n	80247f4 <_printf_float+0x214>
 80247d4:	9b05      	ldr	r3, [sp, #20]
 80247d6:	465a      	mov	r2, fp
 80247d8:	4631      	mov	r1, r6
 80247da:	4628      	mov	r0, r5
 80247dc:	47b8      	blx	r7
 80247de:	3001      	adds	r0, #1
 80247e0:	f43f af4a 	beq.w	8024678 <_printf_float+0x98>
 80247e4:	f04f 0900 	mov.w	r9, #0
 80247e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80247ec:	f104 0a1a 	add.w	sl, r4, #26
 80247f0:	45c8      	cmp	r8, r9
 80247f2:	dc09      	bgt.n	8024808 <_printf_float+0x228>
 80247f4:	6823      	ldr	r3, [r4, #0]
 80247f6:	079b      	lsls	r3, r3, #30
 80247f8:	f100 8107 	bmi.w	8024a0a <_printf_float+0x42a>
 80247fc:	68e0      	ldr	r0, [r4, #12]
 80247fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024800:	4298      	cmp	r0, r3
 8024802:	bfb8      	it	lt
 8024804:	4618      	movlt	r0, r3
 8024806:	e739      	b.n	802467c <_printf_float+0x9c>
 8024808:	2301      	movs	r3, #1
 802480a:	4652      	mov	r2, sl
 802480c:	4631      	mov	r1, r6
 802480e:	4628      	mov	r0, r5
 8024810:	47b8      	blx	r7
 8024812:	3001      	adds	r0, #1
 8024814:	f43f af30 	beq.w	8024678 <_printf_float+0x98>
 8024818:	f109 0901 	add.w	r9, r9, #1
 802481c:	e7e8      	b.n	80247f0 <_printf_float+0x210>
 802481e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024820:	2b00      	cmp	r3, #0
 8024822:	dc3b      	bgt.n	802489c <_printf_float+0x2bc>
 8024824:	4a1c      	ldr	r2, [pc, #112]	@ (8024898 <_printf_float+0x2b8>)
 8024826:	2301      	movs	r3, #1
 8024828:	4631      	mov	r1, r6
 802482a:	4628      	mov	r0, r5
 802482c:	47b8      	blx	r7
 802482e:	3001      	adds	r0, #1
 8024830:	f43f af22 	beq.w	8024678 <_printf_float+0x98>
 8024834:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8024838:	ea59 0303 	orrs.w	r3, r9, r3
 802483c:	d102      	bne.n	8024844 <_printf_float+0x264>
 802483e:	6823      	ldr	r3, [r4, #0]
 8024840:	07d9      	lsls	r1, r3, #31
 8024842:	d5d7      	bpl.n	80247f4 <_printf_float+0x214>
 8024844:	9b05      	ldr	r3, [sp, #20]
 8024846:	465a      	mov	r2, fp
 8024848:	4631      	mov	r1, r6
 802484a:	4628      	mov	r0, r5
 802484c:	47b8      	blx	r7
 802484e:	3001      	adds	r0, #1
 8024850:	f43f af12 	beq.w	8024678 <_printf_float+0x98>
 8024854:	f04f 0a00 	mov.w	sl, #0
 8024858:	f104 0b1a 	add.w	fp, r4, #26
 802485c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802485e:	425b      	negs	r3, r3
 8024860:	4553      	cmp	r3, sl
 8024862:	dc01      	bgt.n	8024868 <_printf_float+0x288>
 8024864:	464b      	mov	r3, r9
 8024866:	e794      	b.n	8024792 <_printf_float+0x1b2>
 8024868:	2301      	movs	r3, #1
 802486a:	465a      	mov	r2, fp
 802486c:	4631      	mov	r1, r6
 802486e:	4628      	mov	r0, r5
 8024870:	47b8      	blx	r7
 8024872:	3001      	adds	r0, #1
 8024874:	f43f af00 	beq.w	8024678 <_printf_float+0x98>
 8024878:	f10a 0a01 	add.w	sl, sl, #1
 802487c:	e7ee      	b.n	802485c <_printf_float+0x27c>
 802487e:	bf00      	nop
 8024880:	ffffffff 	.word	0xffffffff
 8024884:	7fefffff 	.word	0x7fefffff
 8024888:	0802c1fd 	.word	0x0802c1fd
 802488c:	0802c1f9 	.word	0x0802c1f9
 8024890:	0802c205 	.word	0x0802c205
 8024894:	0802c201 	.word	0x0802c201
 8024898:	0802c33f 	.word	0x0802c33f
 802489c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802489e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80248a2:	4553      	cmp	r3, sl
 80248a4:	bfa8      	it	ge
 80248a6:	4653      	movge	r3, sl
 80248a8:	2b00      	cmp	r3, #0
 80248aa:	4699      	mov	r9, r3
 80248ac:	dc37      	bgt.n	802491e <_printf_float+0x33e>
 80248ae:	2300      	movs	r3, #0
 80248b0:	9307      	str	r3, [sp, #28]
 80248b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80248b6:	f104 021a 	add.w	r2, r4, #26
 80248ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80248bc:	9907      	ldr	r1, [sp, #28]
 80248be:	9306      	str	r3, [sp, #24]
 80248c0:	eba3 0309 	sub.w	r3, r3, r9
 80248c4:	428b      	cmp	r3, r1
 80248c6:	dc31      	bgt.n	802492c <_printf_float+0x34c>
 80248c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248ca:	459a      	cmp	sl, r3
 80248cc:	dc3b      	bgt.n	8024946 <_printf_float+0x366>
 80248ce:	6823      	ldr	r3, [r4, #0]
 80248d0:	07da      	lsls	r2, r3, #31
 80248d2:	d438      	bmi.n	8024946 <_printf_float+0x366>
 80248d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248d6:	ebaa 0903 	sub.w	r9, sl, r3
 80248da:	9b06      	ldr	r3, [sp, #24]
 80248dc:	ebaa 0303 	sub.w	r3, sl, r3
 80248e0:	4599      	cmp	r9, r3
 80248e2:	bfa8      	it	ge
 80248e4:	4699      	movge	r9, r3
 80248e6:	f1b9 0f00 	cmp.w	r9, #0
 80248ea:	dc34      	bgt.n	8024956 <_printf_float+0x376>
 80248ec:	f04f 0800 	mov.w	r8, #0
 80248f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80248f4:	f104 0b1a 	add.w	fp, r4, #26
 80248f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248fa:	ebaa 0303 	sub.w	r3, sl, r3
 80248fe:	eba3 0309 	sub.w	r3, r3, r9
 8024902:	4543      	cmp	r3, r8
 8024904:	f77f af76 	ble.w	80247f4 <_printf_float+0x214>
 8024908:	2301      	movs	r3, #1
 802490a:	465a      	mov	r2, fp
 802490c:	4631      	mov	r1, r6
 802490e:	4628      	mov	r0, r5
 8024910:	47b8      	blx	r7
 8024912:	3001      	adds	r0, #1
 8024914:	f43f aeb0 	beq.w	8024678 <_printf_float+0x98>
 8024918:	f108 0801 	add.w	r8, r8, #1
 802491c:	e7ec      	b.n	80248f8 <_printf_float+0x318>
 802491e:	4642      	mov	r2, r8
 8024920:	4631      	mov	r1, r6
 8024922:	4628      	mov	r0, r5
 8024924:	47b8      	blx	r7
 8024926:	3001      	adds	r0, #1
 8024928:	d1c1      	bne.n	80248ae <_printf_float+0x2ce>
 802492a:	e6a5      	b.n	8024678 <_printf_float+0x98>
 802492c:	2301      	movs	r3, #1
 802492e:	4631      	mov	r1, r6
 8024930:	4628      	mov	r0, r5
 8024932:	9206      	str	r2, [sp, #24]
 8024934:	47b8      	blx	r7
 8024936:	3001      	adds	r0, #1
 8024938:	f43f ae9e 	beq.w	8024678 <_printf_float+0x98>
 802493c:	9b07      	ldr	r3, [sp, #28]
 802493e:	9a06      	ldr	r2, [sp, #24]
 8024940:	3301      	adds	r3, #1
 8024942:	9307      	str	r3, [sp, #28]
 8024944:	e7b9      	b.n	80248ba <_printf_float+0x2da>
 8024946:	9b05      	ldr	r3, [sp, #20]
 8024948:	465a      	mov	r2, fp
 802494a:	4631      	mov	r1, r6
 802494c:	4628      	mov	r0, r5
 802494e:	47b8      	blx	r7
 8024950:	3001      	adds	r0, #1
 8024952:	d1bf      	bne.n	80248d4 <_printf_float+0x2f4>
 8024954:	e690      	b.n	8024678 <_printf_float+0x98>
 8024956:	9a06      	ldr	r2, [sp, #24]
 8024958:	464b      	mov	r3, r9
 802495a:	4442      	add	r2, r8
 802495c:	4631      	mov	r1, r6
 802495e:	4628      	mov	r0, r5
 8024960:	47b8      	blx	r7
 8024962:	3001      	adds	r0, #1
 8024964:	d1c2      	bne.n	80248ec <_printf_float+0x30c>
 8024966:	e687      	b.n	8024678 <_printf_float+0x98>
 8024968:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802496c:	f1b9 0f01 	cmp.w	r9, #1
 8024970:	dc01      	bgt.n	8024976 <_printf_float+0x396>
 8024972:	07db      	lsls	r3, r3, #31
 8024974:	d536      	bpl.n	80249e4 <_printf_float+0x404>
 8024976:	2301      	movs	r3, #1
 8024978:	4642      	mov	r2, r8
 802497a:	4631      	mov	r1, r6
 802497c:	4628      	mov	r0, r5
 802497e:	47b8      	blx	r7
 8024980:	3001      	adds	r0, #1
 8024982:	f43f ae79 	beq.w	8024678 <_printf_float+0x98>
 8024986:	9b05      	ldr	r3, [sp, #20]
 8024988:	465a      	mov	r2, fp
 802498a:	4631      	mov	r1, r6
 802498c:	4628      	mov	r0, r5
 802498e:	47b8      	blx	r7
 8024990:	3001      	adds	r0, #1
 8024992:	f43f ae71 	beq.w	8024678 <_printf_float+0x98>
 8024996:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 802499a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80249a6:	d018      	beq.n	80249da <_printf_float+0x3fa>
 80249a8:	464b      	mov	r3, r9
 80249aa:	f108 0201 	add.w	r2, r8, #1
 80249ae:	4631      	mov	r1, r6
 80249b0:	4628      	mov	r0, r5
 80249b2:	47b8      	blx	r7
 80249b4:	3001      	adds	r0, #1
 80249b6:	d10c      	bne.n	80249d2 <_printf_float+0x3f2>
 80249b8:	e65e      	b.n	8024678 <_printf_float+0x98>
 80249ba:	2301      	movs	r3, #1
 80249bc:	465a      	mov	r2, fp
 80249be:	4631      	mov	r1, r6
 80249c0:	4628      	mov	r0, r5
 80249c2:	47b8      	blx	r7
 80249c4:	3001      	adds	r0, #1
 80249c6:	f43f ae57 	beq.w	8024678 <_printf_float+0x98>
 80249ca:	f108 0801 	add.w	r8, r8, #1
 80249ce:	45c8      	cmp	r8, r9
 80249d0:	dbf3      	blt.n	80249ba <_printf_float+0x3da>
 80249d2:	4653      	mov	r3, sl
 80249d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80249d8:	e6dc      	b.n	8024794 <_printf_float+0x1b4>
 80249da:	f04f 0800 	mov.w	r8, #0
 80249de:	f104 0b1a 	add.w	fp, r4, #26
 80249e2:	e7f4      	b.n	80249ce <_printf_float+0x3ee>
 80249e4:	2301      	movs	r3, #1
 80249e6:	4642      	mov	r2, r8
 80249e8:	e7e1      	b.n	80249ae <_printf_float+0x3ce>
 80249ea:	2301      	movs	r3, #1
 80249ec:	464a      	mov	r2, r9
 80249ee:	4631      	mov	r1, r6
 80249f0:	4628      	mov	r0, r5
 80249f2:	47b8      	blx	r7
 80249f4:	3001      	adds	r0, #1
 80249f6:	f43f ae3f 	beq.w	8024678 <_printf_float+0x98>
 80249fa:	f108 0801 	add.w	r8, r8, #1
 80249fe:	68e3      	ldr	r3, [r4, #12]
 8024a00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024a02:	1a5b      	subs	r3, r3, r1
 8024a04:	4543      	cmp	r3, r8
 8024a06:	dcf0      	bgt.n	80249ea <_printf_float+0x40a>
 8024a08:	e6f8      	b.n	80247fc <_printf_float+0x21c>
 8024a0a:	f04f 0800 	mov.w	r8, #0
 8024a0e:	f104 0919 	add.w	r9, r4, #25
 8024a12:	e7f4      	b.n	80249fe <_printf_float+0x41e>

08024a14 <_printf_common>:
 8024a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024a18:	4616      	mov	r6, r2
 8024a1a:	4698      	mov	r8, r3
 8024a1c:	688a      	ldr	r2, [r1, #8]
 8024a1e:	690b      	ldr	r3, [r1, #16]
 8024a20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024a24:	4293      	cmp	r3, r2
 8024a26:	bfb8      	it	lt
 8024a28:	4613      	movlt	r3, r2
 8024a2a:	6033      	str	r3, [r6, #0]
 8024a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8024a30:	4607      	mov	r7, r0
 8024a32:	460c      	mov	r4, r1
 8024a34:	b10a      	cbz	r2, 8024a3a <_printf_common+0x26>
 8024a36:	3301      	adds	r3, #1
 8024a38:	6033      	str	r3, [r6, #0]
 8024a3a:	6823      	ldr	r3, [r4, #0]
 8024a3c:	0699      	lsls	r1, r3, #26
 8024a3e:	bf42      	ittt	mi
 8024a40:	6833      	ldrmi	r3, [r6, #0]
 8024a42:	3302      	addmi	r3, #2
 8024a44:	6033      	strmi	r3, [r6, #0]
 8024a46:	6825      	ldr	r5, [r4, #0]
 8024a48:	f015 0506 	ands.w	r5, r5, #6
 8024a4c:	d106      	bne.n	8024a5c <_printf_common+0x48>
 8024a4e:	f104 0a19 	add.w	sl, r4, #25
 8024a52:	68e3      	ldr	r3, [r4, #12]
 8024a54:	6832      	ldr	r2, [r6, #0]
 8024a56:	1a9b      	subs	r3, r3, r2
 8024a58:	42ab      	cmp	r3, r5
 8024a5a:	dc26      	bgt.n	8024aaa <_printf_common+0x96>
 8024a5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024a60:	6822      	ldr	r2, [r4, #0]
 8024a62:	3b00      	subs	r3, #0
 8024a64:	bf18      	it	ne
 8024a66:	2301      	movne	r3, #1
 8024a68:	0692      	lsls	r2, r2, #26
 8024a6a:	d42b      	bmi.n	8024ac4 <_printf_common+0xb0>
 8024a6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024a70:	4641      	mov	r1, r8
 8024a72:	4638      	mov	r0, r7
 8024a74:	47c8      	blx	r9
 8024a76:	3001      	adds	r0, #1
 8024a78:	d01e      	beq.n	8024ab8 <_printf_common+0xa4>
 8024a7a:	6823      	ldr	r3, [r4, #0]
 8024a7c:	6922      	ldr	r2, [r4, #16]
 8024a7e:	f003 0306 	and.w	r3, r3, #6
 8024a82:	2b04      	cmp	r3, #4
 8024a84:	bf02      	ittt	eq
 8024a86:	68e5      	ldreq	r5, [r4, #12]
 8024a88:	6833      	ldreq	r3, [r6, #0]
 8024a8a:	1aed      	subeq	r5, r5, r3
 8024a8c:	68a3      	ldr	r3, [r4, #8]
 8024a8e:	bf0c      	ite	eq
 8024a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024a94:	2500      	movne	r5, #0
 8024a96:	4293      	cmp	r3, r2
 8024a98:	bfc4      	itt	gt
 8024a9a:	1a9b      	subgt	r3, r3, r2
 8024a9c:	18ed      	addgt	r5, r5, r3
 8024a9e:	2600      	movs	r6, #0
 8024aa0:	341a      	adds	r4, #26
 8024aa2:	42b5      	cmp	r5, r6
 8024aa4:	d11a      	bne.n	8024adc <_printf_common+0xc8>
 8024aa6:	2000      	movs	r0, #0
 8024aa8:	e008      	b.n	8024abc <_printf_common+0xa8>
 8024aaa:	2301      	movs	r3, #1
 8024aac:	4652      	mov	r2, sl
 8024aae:	4641      	mov	r1, r8
 8024ab0:	4638      	mov	r0, r7
 8024ab2:	47c8      	blx	r9
 8024ab4:	3001      	adds	r0, #1
 8024ab6:	d103      	bne.n	8024ac0 <_printf_common+0xac>
 8024ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8024abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024ac0:	3501      	adds	r5, #1
 8024ac2:	e7c6      	b.n	8024a52 <_printf_common+0x3e>
 8024ac4:	18e1      	adds	r1, r4, r3
 8024ac6:	1c5a      	adds	r2, r3, #1
 8024ac8:	2030      	movs	r0, #48	@ 0x30
 8024aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024ace:	4422      	add	r2, r4
 8024ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8024ad4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8024ad8:	3302      	adds	r3, #2
 8024ada:	e7c7      	b.n	8024a6c <_printf_common+0x58>
 8024adc:	2301      	movs	r3, #1
 8024ade:	4622      	mov	r2, r4
 8024ae0:	4641      	mov	r1, r8
 8024ae2:	4638      	mov	r0, r7
 8024ae4:	47c8      	blx	r9
 8024ae6:	3001      	adds	r0, #1
 8024ae8:	d0e6      	beq.n	8024ab8 <_printf_common+0xa4>
 8024aea:	3601      	adds	r6, #1
 8024aec:	e7d9      	b.n	8024aa2 <_printf_common+0x8e>
	...

08024af0 <_printf_i>:
 8024af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024af4:	7e0f      	ldrb	r7, [r1, #24]
 8024af6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024af8:	2f78      	cmp	r7, #120	@ 0x78
 8024afa:	4691      	mov	r9, r2
 8024afc:	4680      	mov	r8, r0
 8024afe:	460c      	mov	r4, r1
 8024b00:	469a      	mov	sl, r3
 8024b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8024b06:	d807      	bhi.n	8024b18 <_printf_i+0x28>
 8024b08:	2f62      	cmp	r7, #98	@ 0x62
 8024b0a:	d80a      	bhi.n	8024b22 <_printf_i+0x32>
 8024b0c:	2f00      	cmp	r7, #0
 8024b0e:	f000 80d1 	beq.w	8024cb4 <_printf_i+0x1c4>
 8024b12:	2f58      	cmp	r7, #88	@ 0x58
 8024b14:	f000 80b8 	beq.w	8024c88 <_printf_i+0x198>
 8024b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024b20:	e03a      	b.n	8024b98 <_printf_i+0xa8>
 8024b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8024b26:	2b15      	cmp	r3, #21
 8024b28:	d8f6      	bhi.n	8024b18 <_printf_i+0x28>
 8024b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8024b30 <_printf_i+0x40>)
 8024b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024b30:	08024b89 	.word	0x08024b89
 8024b34:	08024b9d 	.word	0x08024b9d
 8024b38:	08024b19 	.word	0x08024b19
 8024b3c:	08024b19 	.word	0x08024b19
 8024b40:	08024b19 	.word	0x08024b19
 8024b44:	08024b19 	.word	0x08024b19
 8024b48:	08024b9d 	.word	0x08024b9d
 8024b4c:	08024b19 	.word	0x08024b19
 8024b50:	08024b19 	.word	0x08024b19
 8024b54:	08024b19 	.word	0x08024b19
 8024b58:	08024b19 	.word	0x08024b19
 8024b5c:	08024c9b 	.word	0x08024c9b
 8024b60:	08024bc7 	.word	0x08024bc7
 8024b64:	08024c55 	.word	0x08024c55
 8024b68:	08024b19 	.word	0x08024b19
 8024b6c:	08024b19 	.word	0x08024b19
 8024b70:	08024cbd 	.word	0x08024cbd
 8024b74:	08024b19 	.word	0x08024b19
 8024b78:	08024bc7 	.word	0x08024bc7
 8024b7c:	08024b19 	.word	0x08024b19
 8024b80:	08024b19 	.word	0x08024b19
 8024b84:	08024c5d 	.word	0x08024c5d
 8024b88:	6833      	ldr	r3, [r6, #0]
 8024b8a:	1d1a      	adds	r2, r3, #4
 8024b8c:	681b      	ldr	r3, [r3, #0]
 8024b8e:	6032      	str	r2, [r6, #0]
 8024b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8024b98:	2301      	movs	r3, #1
 8024b9a:	e09c      	b.n	8024cd6 <_printf_i+0x1e6>
 8024b9c:	6833      	ldr	r3, [r6, #0]
 8024b9e:	6820      	ldr	r0, [r4, #0]
 8024ba0:	1d19      	adds	r1, r3, #4
 8024ba2:	6031      	str	r1, [r6, #0]
 8024ba4:	0606      	lsls	r6, r0, #24
 8024ba6:	d501      	bpl.n	8024bac <_printf_i+0xbc>
 8024ba8:	681d      	ldr	r5, [r3, #0]
 8024baa:	e003      	b.n	8024bb4 <_printf_i+0xc4>
 8024bac:	0645      	lsls	r5, r0, #25
 8024bae:	d5fb      	bpl.n	8024ba8 <_printf_i+0xb8>
 8024bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8024bb4:	2d00      	cmp	r5, #0
 8024bb6:	da03      	bge.n	8024bc0 <_printf_i+0xd0>
 8024bb8:	232d      	movs	r3, #45	@ 0x2d
 8024bba:	426d      	negs	r5, r5
 8024bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024bc0:	4858      	ldr	r0, [pc, #352]	@ (8024d24 <_printf_i+0x234>)
 8024bc2:	230a      	movs	r3, #10
 8024bc4:	e011      	b.n	8024bea <_printf_i+0xfa>
 8024bc6:	6821      	ldr	r1, [r4, #0]
 8024bc8:	6833      	ldr	r3, [r6, #0]
 8024bca:	0608      	lsls	r0, r1, #24
 8024bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8024bd0:	d402      	bmi.n	8024bd8 <_printf_i+0xe8>
 8024bd2:	0649      	lsls	r1, r1, #25
 8024bd4:	bf48      	it	mi
 8024bd6:	b2ad      	uxthmi	r5, r5
 8024bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8024bda:	4852      	ldr	r0, [pc, #328]	@ (8024d24 <_printf_i+0x234>)
 8024bdc:	6033      	str	r3, [r6, #0]
 8024bde:	bf14      	ite	ne
 8024be0:	230a      	movne	r3, #10
 8024be2:	2308      	moveq	r3, #8
 8024be4:	2100      	movs	r1, #0
 8024be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8024bea:	6866      	ldr	r6, [r4, #4]
 8024bec:	60a6      	str	r6, [r4, #8]
 8024bee:	2e00      	cmp	r6, #0
 8024bf0:	db05      	blt.n	8024bfe <_printf_i+0x10e>
 8024bf2:	6821      	ldr	r1, [r4, #0]
 8024bf4:	432e      	orrs	r6, r5
 8024bf6:	f021 0104 	bic.w	r1, r1, #4
 8024bfa:	6021      	str	r1, [r4, #0]
 8024bfc:	d04b      	beq.n	8024c96 <_printf_i+0x1a6>
 8024bfe:	4616      	mov	r6, r2
 8024c00:	fbb5 f1f3 	udiv	r1, r5, r3
 8024c04:	fb03 5711 	mls	r7, r3, r1, r5
 8024c08:	5dc7      	ldrb	r7, [r0, r7]
 8024c0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024c0e:	462f      	mov	r7, r5
 8024c10:	42bb      	cmp	r3, r7
 8024c12:	460d      	mov	r5, r1
 8024c14:	d9f4      	bls.n	8024c00 <_printf_i+0x110>
 8024c16:	2b08      	cmp	r3, #8
 8024c18:	d10b      	bne.n	8024c32 <_printf_i+0x142>
 8024c1a:	6823      	ldr	r3, [r4, #0]
 8024c1c:	07df      	lsls	r7, r3, #31
 8024c1e:	d508      	bpl.n	8024c32 <_printf_i+0x142>
 8024c20:	6923      	ldr	r3, [r4, #16]
 8024c22:	6861      	ldr	r1, [r4, #4]
 8024c24:	4299      	cmp	r1, r3
 8024c26:	bfde      	ittt	le
 8024c28:	2330      	movle	r3, #48	@ 0x30
 8024c2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024c2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024c32:	1b92      	subs	r2, r2, r6
 8024c34:	6122      	str	r2, [r4, #16]
 8024c36:	f8cd a000 	str.w	sl, [sp]
 8024c3a:	464b      	mov	r3, r9
 8024c3c:	aa03      	add	r2, sp, #12
 8024c3e:	4621      	mov	r1, r4
 8024c40:	4640      	mov	r0, r8
 8024c42:	f7ff fee7 	bl	8024a14 <_printf_common>
 8024c46:	3001      	adds	r0, #1
 8024c48:	d14a      	bne.n	8024ce0 <_printf_i+0x1f0>
 8024c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8024c4e:	b004      	add	sp, #16
 8024c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024c54:	6823      	ldr	r3, [r4, #0]
 8024c56:	f043 0320 	orr.w	r3, r3, #32
 8024c5a:	6023      	str	r3, [r4, #0]
 8024c5c:	4832      	ldr	r0, [pc, #200]	@ (8024d28 <_printf_i+0x238>)
 8024c5e:	2778      	movs	r7, #120	@ 0x78
 8024c60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8024c64:	6823      	ldr	r3, [r4, #0]
 8024c66:	6831      	ldr	r1, [r6, #0]
 8024c68:	061f      	lsls	r7, r3, #24
 8024c6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8024c6e:	d402      	bmi.n	8024c76 <_printf_i+0x186>
 8024c70:	065f      	lsls	r7, r3, #25
 8024c72:	bf48      	it	mi
 8024c74:	b2ad      	uxthmi	r5, r5
 8024c76:	6031      	str	r1, [r6, #0]
 8024c78:	07d9      	lsls	r1, r3, #31
 8024c7a:	bf44      	itt	mi
 8024c7c:	f043 0320 	orrmi.w	r3, r3, #32
 8024c80:	6023      	strmi	r3, [r4, #0]
 8024c82:	b11d      	cbz	r5, 8024c8c <_printf_i+0x19c>
 8024c84:	2310      	movs	r3, #16
 8024c86:	e7ad      	b.n	8024be4 <_printf_i+0xf4>
 8024c88:	4826      	ldr	r0, [pc, #152]	@ (8024d24 <_printf_i+0x234>)
 8024c8a:	e7e9      	b.n	8024c60 <_printf_i+0x170>
 8024c8c:	6823      	ldr	r3, [r4, #0]
 8024c8e:	f023 0320 	bic.w	r3, r3, #32
 8024c92:	6023      	str	r3, [r4, #0]
 8024c94:	e7f6      	b.n	8024c84 <_printf_i+0x194>
 8024c96:	4616      	mov	r6, r2
 8024c98:	e7bd      	b.n	8024c16 <_printf_i+0x126>
 8024c9a:	6833      	ldr	r3, [r6, #0]
 8024c9c:	6825      	ldr	r5, [r4, #0]
 8024c9e:	6961      	ldr	r1, [r4, #20]
 8024ca0:	1d18      	adds	r0, r3, #4
 8024ca2:	6030      	str	r0, [r6, #0]
 8024ca4:	062e      	lsls	r6, r5, #24
 8024ca6:	681b      	ldr	r3, [r3, #0]
 8024ca8:	d501      	bpl.n	8024cae <_printf_i+0x1be>
 8024caa:	6019      	str	r1, [r3, #0]
 8024cac:	e002      	b.n	8024cb4 <_printf_i+0x1c4>
 8024cae:	0668      	lsls	r0, r5, #25
 8024cb0:	d5fb      	bpl.n	8024caa <_printf_i+0x1ba>
 8024cb2:	8019      	strh	r1, [r3, #0]
 8024cb4:	2300      	movs	r3, #0
 8024cb6:	6123      	str	r3, [r4, #16]
 8024cb8:	4616      	mov	r6, r2
 8024cba:	e7bc      	b.n	8024c36 <_printf_i+0x146>
 8024cbc:	6833      	ldr	r3, [r6, #0]
 8024cbe:	1d1a      	adds	r2, r3, #4
 8024cc0:	6032      	str	r2, [r6, #0]
 8024cc2:	681e      	ldr	r6, [r3, #0]
 8024cc4:	6862      	ldr	r2, [r4, #4]
 8024cc6:	2100      	movs	r1, #0
 8024cc8:	4630      	mov	r0, r6
 8024cca:	f7db fb21 	bl	8000310 <memchr>
 8024cce:	b108      	cbz	r0, 8024cd4 <_printf_i+0x1e4>
 8024cd0:	1b80      	subs	r0, r0, r6
 8024cd2:	6060      	str	r0, [r4, #4]
 8024cd4:	6863      	ldr	r3, [r4, #4]
 8024cd6:	6123      	str	r3, [r4, #16]
 8024cd8:	2300      	movs	r3, #0
 8024cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024cde:	e7aa      	b.n	8024c36 <_printf_i+0x146>
 8024ce0:	6923      	ldr	r3, [r4, #16]
 8024ce2:	4632      	mov	r2, r6
 8024ce4:	4649      	mov	r1, r9
 8024ce6:	4640      	mov	r0, r8
 8024ce8:	47d0      	blx	sl
 8024cea:	3001      	adds	r0, #1
 8024cec:	d0ad      	beq.n	8024c4a <_printf_i+0x15a>
 8024cee:	6823      	ldr	r3, [r4, #0]
 8024cf0:	079b      	lsls	r3, r3, #30
 8024cf2:	d413      	bmi.n	8024d1c <_printf_i+0x22c>
 8024cf4:	68e0      	ldr	r0, [r4, #12]
 8024cf6:	9b03      	ldr	r3, [sp, #12]
 8024cf8:	4298      	cmp	r0, r3
 8024cfa:	bfb8      	it	lt
 8024cfc:	4618      	movlt	r0, r3
 8024cfe:	e7a6      	b.n	8024c4e <_printf_i+0x15e>
 8024d00:	2301      	movs	r3, #1
 8024d02:	4632      	mov	r2, r6
 8024d04:	4649      	mov	r1, r9
 8024d06:	4640      	mov	r0, r8
 8024d08:	47d0      	blx	sl
 8024d0a:	3001      	adds	r0, #1
 8024d0c:	d09d      	beq.n	8024c4a <_printf_i+0x15a>
 8024d0e:	3501      	adds	r5, #1
 8024d10:	68e3      	ldr	r3, [r4, #12]
 8024d12:	9903      	ldr	r1, [sp, #12]
 8024d14:	1a5b      	subs	r3, r3, r1
 8024d16:	42ab      	cmp	r3, r5
 8024d18:	dcf2      	bgt.n	8024d00 <_printf_i+0x210>
 8024d1a:	e7eb      	b.n	8024cf4 <_printf_i+0x204>
 8024d1c:	2500      	movs	r5, #0
 8024d1e:	f104 0619 	add.w	r6, r4, #25
 8024d22:	e7f5      	b.n	8024d10 <_printf_i+0x220>
 8024d24:	0802c209 	.word	0x0802c209
 8024d28:	0802c21a 	.word	0x0802c21a

08024d2c <_scanf_float>:
 8024d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d30:	b087      	sub	sp, #28
 8024d32:	4691      	mov	r9, r2
 8024d34:	9303      	str	r3, [sp, #12]
 8024d36:	688b      	ldr	r3, [r1, #8]
 8024d38:	1e5a      	subs	r2, r3, #1
 8024d3a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8024d3e:	bf81      	itttt	hi
 8024d40:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8024d44:	eb03 0b05 	addhi.w	fp, r3, r5
 8024d48:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8024d4c:	608b      	strhi	r3, [r1, #8]
 8024d4e:	680b      	ldr	r3, [r1, #0]
 8024d50:	460a      	mov	r2, r1
 8024d52:	f04f 0500 	mov.w	r5, #0
 8024d56:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8024d5a:	f842 3b1c 	str.w	r3, [r2], #28
 8024d5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8024d62:	4680      	mov	r8, r0
 8024d64:	460c      	mov	r4, r1
 8024d66:	bf98      	it	ls
 8024d68:	f04f 0b00 	movls.w	fp, #0
 8024d6c:	9201      	str	r2, [sp, #4]
 8024d6e:	4616      	mov	r6, r2
 8024d70:	46aa      	mov	sl, r5
 8024d72:	462f      	mov	r7, r5
 8024d74:	9502      	str	r5, [sp, #8]
 8024d76:	68a2      	ldr	r2, [r4, #8]
 8024d78:	b15a      	cbz	r2, 8024d92 <_scanf_float+0x66>
 8024d7a:	f8d9 3000 	ldr.w	r3, [r9]
 8024d7e:	781b      	ldrb	r3, [r3, #0]
 8024d80:	2b4e      	cmp	r3, #78	@ 0x4e
 8024d82:	d863      	bhi.n	8024e4c <_scanf_float+0x120>
 8024d84:	2b40      	cmp	r3, #64	@ 0x40
 8024d86:	d83b      	bhi.n	8024e00 <_scanf_float+0xd4>
 8024d88:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8024d8c:	b2c8      	uxtb	r0, r1
 8024d8e:	280e      	cmp	r0, #14
 8024d90:	d939      	bls.n	8024e06 <_scanf_float+0xda>
 8024d92:	b11f      	cbz	r7, 8024d9c <_scanf_float+0x70>
 8024d94:	6823      	ldr	r3, [r4, #0]
 8024d96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8024d9a:	6023      	str	r3, [r4, #0]
 8024d9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024da0:	f1ba 0f01 	cmp.w	sl, #1
 8024da4:	f200 8114 	bhi.w	8024fd0 <_scanf_float+0x2a4>
 8024da8:	9b01      	ldr	r3, [sp, #4]
 8024daa:	429e      	cmp	r6, r3
 8024dac:	f200 8105 	bhi.w	8024fba <_scanf_float+0x28e>
 8024db0:	2001      	movs	r0, #1
 8024db2:	b007      	add	sp, #28
 8024db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024db8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8024dbc:	2a0d      	cmp	r2, #13
 8024dbe:	d8e8      	bhi.n	8024d92 <_scanf_float+0x66>
 8024dc0:	a101      	add	r1, pc, #4	@ (adr r1, 8024dc8 <_scanf_float+0x9c>)
 8024dc2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8024dc6:	bf00      	nop
 8024dc8:	08024f11 	.word	0x08024f11
 8024dcc:	08024d93 	.word	0x08024d93
 8024dd0:	08024d93 	.word	0x08024d93
 8024dd4:	08024d93 	.word	0x08024d93
 8024dd8:	08024f6d 	.word	0x08024f6d
 8024ddc:	08024f47 	.word	0x08024f47
 8024de0:	08024d93 	.word	0x08024d93
 8024de4:	08024d93 	.word	0x08024d93
 8024de8:	08024f1f 	.word	0x08024f1f
 8024dec:	08024d93 	.word	0x08024d93
 8024df0:	08024d93 	.word	0x08024d93
 8024df4:	08024d93 	.word	0x08024d93
 8024df8:	08024d93 	.word	0x08024d93
 8024dfc:	08024edb 	.word	0x08024edb
 8024e00:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8024e04:	e7da      	b.n	8024dbc <_scanf_float+0x90>
 8024e06:	290e      	cmp	r1, #14
 8024e08:	d8c3      	bhi.n	8024d92 <_scanf_float+0x66>
 8024e0a:	a001      	add	r0, pc, #4	@ (adr r0, 8024e10 <_scanf_float+0xe4>)
 8024e0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8024e10:	08024ecb 	.word	0x08024ecb
 8024e14:	08024d93 	.word	0x08024d93
 8024e18:	08024ecb 	.word	0x08024ecb
 8024e1c:	08024f5b 	.word	0x08024f5b
 8024e20:	08024d93 	.word	0x08024d93
 8024e24:	08024e6d 	.word	0x08024e6d
 8024e28:	08024eb1 	.word	0x08024eb1
 8024e2c:	08024eb1 	.word	0x08024eb1
 8024e30:	08024eb1 	.word	0x08024eb1
 8024e34:	08024eb1 	.word	0x08024eb1
 8024e38:	08024eb1 	.word	0x08024eb1
 8024e3c:	08024eb1 	.word	0x08024eb1
 8024e40:	08024eb1 	.word	0x08024eb1
 8024e44:	08024eb1 	.word	0x08024eb1
 8024e48:	08024eb1 	.word	0x08024eb1
 8024e4c:	2b6e      	cmp	r3, #110	@ 0x6e
 8024e4e:	d809      	bhi.n	8024e64 <_scanf_float+0x138>
 8024e50:	2b60      	cmp	r3, #96	@ 0x60
 8024e52:	d8b1      	bhi.n	8024db8 <_scanf_float+0x8c>
 8024e54:	2b54      	cmp	r3, #84	@ 0x54
 8024e56:	d07b      	beq.n	8024f50 <_scanf_float+0x224>
 8024e58:	2b59      	cmp	r3, #89	@ 0x59
 8024e5a:	d19a      	bne.n	8024d92 <_scanf_float+0x66>
 8024e5c:	2d07      	cmp	r5, #7
 8024e5e:	d198      	bne.n	8024d92 <_scanf_float+0x66>
 8024e60:	2508      	movs	r5, #8
 8024e62:	e02f      	b.n	8024ec4 <_scanf_float+0x198>
 8024e64:	2b74      	cmp	r3, #116	@ 0x74
 8024e66:	d073      	beq.n	8024f50 <_scanf_float+0x224>
 8024e68:	2b79      	cmp	r3, #121	@ 0x79
 8024e6a:	e7f6      	b.n	8024e5a <_scanf_float+0x12e>
 8024e6c:	6821      	ldr	r1, [r4, #0]
 8024e6e:	05c8      	lsls	r0, r1, #23
 8024e70:	d51e      	bpl.n	8024eb0 <_scanf_float+0x184>
 8024e72:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8024e76:	6021      	str	r1, [r4, #0]
 8024e78:	3701      	adds	r7, #1
 8024e7a:	f1bb 0f00 	cmp.w	fp, #0
 8024e7e:	d003      	beq.n	8024e88 <_scanf_float+0x15c>
 8024e80:	3201      	adds	r2, #1
 8024e82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024e86:	60a2      	str	r2, [r4, #8]
 8024e88:	68a3      	ldr	r3, [r4, #8]
 8024e8a:	3b01      	subs	r3, #1
 8024e8c:	60a3      	str	r3, [r4, #8]
 8024e8e:	6923      	ldr	r3, [r4, #16]
 8024e90:	3301      	adds	r3, #1
 8024e92:	6123      	str	r3, [r4, #16]
 8024e94:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8024e98:	3b01      	subs	r3, #1
 8024e9a:	2b00      	cmp	r3, #0
 8024e9c:	f8c9 3004 	str.w	r3, [r9, #4]
 8024ea0:	f340 8082 	ble.w	8024fa8 <_scanf_float+0x27c>
 8024ea4:	f8d9 3000 	ldr.w	r3, [r9]
 8024ea8:	3301      	adds	r3, #1
 8024eaa:	f8c9 3000 	str.w	r3, [r9]
 8024eae:	e762      	b.n	8024d76 <_scanf_float+0x4a>
 8024eb0:	eb1a 0105 	adds.w	r1, sl, r5
 8024eb4:	f47f af6d 	bne.w	8024d92 <_scanf_float+0x66>
 8024eb8:	6822      	ldr	r2, [r4, #0]
 8024eba:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8024ebe:	6022      	str	r2, [r4, #0]
 8024ec0:	460d      	mov	r5, r1
 8024ec2:	468a      	mov	sl, r1
 8024ec4:	f806 3b01 	strb.w	r3, [r6], #1
 8024ec8:	e7de      	b.n	8024e88 <_scanf_float+0x15c>
 8024eca:	6822      	ldr	r2, [r4, #0]
 8024ecc:	0610      	lsls	r0, r2, #24
 8024ece:	f57f af60 	bpl.w	8024d92 <_scanf_float+0x66>
 8024ed2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8024ed6:	6022      	str	r2, [r4, #0]
 8024ed8:	e7f4      	b.n	8024ec4 <_scanf_float+0x198>
 8024eda:	f1ba 0f00 	cmp.w	sl, #0
 8024ede:	d10c      	bne.n	8024efa <_scanf_float+0x1ce>
 8024ee0:	b977      	cbnz	r7, 8024f00 <_scanf_float+0x1d4>
 8024ee2:	6822      	ldr	r2, [r4, #0]
 8024ee4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8024ee8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8024eec:	d108      	bne.n	8024f00 <_scanf_float+0x1d4>
 8024eee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024ef2:	6022      	str	r2, [r4, #0]
 8024ef4:	f04f 0a01 	mov.w	sl, #1
 8024ef8:	e7e4      	b.n	8024ec4 <_scanf_float+0x198>
 8024efa:	f1ba 0f02 	cmp.w	sl, #2
 8024efe:	d050      	beq.n	8024fa2 <_scanf_float+0x276>
 8024f00:	2d01      	cmp	r5, #1
 8024f02:	d002      	beq.n	8024f0a <_scanf_float+0x1de>
 8024f04:	2d04      	cmp	r5, #4
 8024f06:	f47f af44 	bne.w	8024d92 <_scanf_float+0x66>
 8024f0a:	3501      	adds	r5, #1
 8024f0c:	b2ed      	uxtb	r5, r5
 8024f0e:	e7d9      	b.n	8024ec4 <_scanf_float+0x198>
 8024f10:	f1ba 0f01 	cmp.w	sl, #1
 8024f14:	f47f af3d 	bne.w	8024d92 <_scanf_float+0x66>
 8024f18:	f04f 0a02 	mov.w	sl, #2
 8024f1c:	e7d2      	b.n	8024ec4 <_scanf_float+0x198>
 8024f1e:	b975      	cbnz	r5, 8024f3e <_scanf_float+0x212>
 8024f20:	2f00      	cmp	r7, #0
 8024f22:	f47f af37 	bne.w	8024d94 <_scanf_float+0x68>
 8024f26:	6822      	ldr	r2, [r4, #0]
 8024f28:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8024f2c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8024f30:	f040 80fc 	bne.w	802512c <_scanf_float+0x400>
 8024f34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024f38:	6022      	str	r2, [r4, #0]
 8024f3a:	2501      	movs	r5, #1
 8024f3c:	e7c2      	b.n	8024ec4 <_scanf_float+0x198>
 8024f3e:	2d03      	cmp	r5, #3
 8024f40:	d0e3      	beq.n	8024f0a <_scanf_float+0x1de>
 8024f42:	2d05      	cmp	r5, #5
 8024f44:	e7df      	b.n	8024f06 <_scanf_float+0x1da>
 8024f46:	2d02      	cmp	r5, #2
 8024f48:	f47f af23 	bne.w	8024d92 <_scanf_float+0x66>
 8024f4c:	2503      	movs	r5, #3
 8024f4e:	e7b9      	b.n	8024ec4 <_scanf_float+0x198>
 8024f50:	2d06      	cmp	r5, #6
 8024f52:	f47f af1e 	bne.w	8024d92 <_scanf_float+0x66>
 8024f56:	2507      	movs	r5, #7
 8024f58:	e7b4      	b.n	8024ec4 <_scanf_float+0x198>
 8024f5a:	6822      	ldr	r2, [r4, #0]
 8024f5c:	0591      	lsls	r1, r2, #22
 8024f5e:	f57f af18 	bpl.w	8024d92 <_scanf_float+0x66>
 8024f62:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8024f66:	6022      	str	r2, [r4, #0]
 8024f68:	9702      	str	r7, [sp, #8]
 8024f6a:	e7ab      	b.n	8024ec4 <_scanf_float+0x198>
 8024f6c:	6822      	ldr	r2, [r4, #0]
 8024f6e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8024f72:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8024f76:	d005      	beq.n	8024f84 <_scanf_float+0x258>
 8024f78:	0550      	lsls	r0, r2, #21
 8024f7a:	f57f af0a 	bpl.w	8024d92 <_scanf_float+0x66>
 8024f7e:	2f00      	cmp	r7, #0
 8024f80:	f000 80d4 	beq.w	802512c <_scanf_float+0x400>
 8024f84:	0591      	lsls	r1, r2, #22
 8024f86:	bf58      	it	pl
 8024f88:	9902      	ldrpl	r1, [sp, #8]
 8024f8a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024f8e:	bf58      	it	pl
 8024f90:	1a79      	subpl	r1, r7, r1
 8024f92:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8024f96:	bf58      	it	pl
 8024f98:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8024f9c:	6022      	str	r2, [r4, #0]
 8024f9e:	2700      	movs	r7, #0
 8024fa0:	e790      	b.n	8024ec4 <_scanf_float+0x198>
 8024fa2:	f04f 0a03 	mov.w	sl, #3
 8024fa6:	e78d      	b.n	8024ec4 <_scanf_float+0x198>
 8024fa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8024fac:	4649      	mov	r1, r9
 8024fae:	4640      	mov	r0, r8
 8024fb0:	4798      	blx	r3
 8024fb2:	2800      	cmp	r0, #0
 8024fb4:	f43f aedf 	beq.w	8024d76 <_scanf_float+0x4a>
 8024fb8:	e6eb      	b.n	8024d92 <_scanf_float+0x66>
 8024fba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024fbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8024fc2:	464a      	mov	r2, r9
 8024fc4:	4640      	mov	r0, r8
 8024fc6:	4798      	blx	r3
 8024fc8:	6923      	ldr	r3, [r4, #16]
 8024fca:	3b01      	subs	r3, #1
 8024fcc:	6123      	str	r3, [r4, #16]
 8024fce:	e6eb      	b.n	8024da8 <_scanf_float+0x7c>
 8024fd0:	1e6b      	subs	r3, r5, #1
 8024fd2:	2b06      	cmp	r3, #6
 8024fd4:	d824      	bhi.n	8025020 <_scanf_float+0x2f4>
 8024fd6:	2d02      	cmp	r5, #2
 8024fd8:	d836      	bhi.n	8025048 <_scanf_float+0x31c>
 8024fda:	9b01      	ldr	r3, [sp, #4]
 8024fdc:	429e      	cmp	r6, r3
 8024fde:	f67f aee7 	bls.w	8024db0 <_scanf_float+0x84>
 8024fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024fe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8024fea:	464a      	mov	r2, r9
 8024fec:	4640      	mov	r0, r8
 8024fee:	4798      	blx	r3
 8024ff0:	6923      	ldr	r3, [r4, #16]
 8024ff2:	3b01      	subs	r3, #1
 8024ff4:	6123      	str	r3, [r4, #16]
 8024ff6:	e7f0      	b.n	8024fda <_scanf_float+0x2ae>
 8024ff8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024ffc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8025000:	464a      	mov	r2, r9
 8025002:	4640      	mov	r0, r8
 8025004:	4798      	blx	r3
 8025006:	6923      	ldr	r3, [r4, #16]
 8025008:	3b01      	subs	r3, #1
 802500a:	6123      	str	r3, [r4, #16]
 802500c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025010:	fa5f fa8a 	uxtb.w	sl, sl
 8025014:	f1ba 0f02 	cmp.w	sl, #2
 8025018:	d1ee      	bne.n	8024ff8 <_scanf_float+0x2cc>
 802501a:	3d03      	subs	r5, #3
 802501c:	b2ed      	uxtb	r5, r5
 802501e:	1b76      	subs	r6, r6, r5
 8025020:	6823      	ldr	r3, [r4, #0]
 8025022:	05da      	lsls	r2, r3, #23
 8025024:	d530      	bpl.n	8025088 <_scanf_float+0x35c>
 8025026:	055b      	lsls	r3, r3, #21
 8025028:	d511      	bpl.n	802504e <_scanf_float+0x322>
 802502a:	9b01      	ldr	r3, [sp, #4]
 802502c:	429e      	cmp	r6, r3
 802502e:	f67f aebf 	bls.w	8024db0 <_scanf_float+0x84>
 8025032:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025036:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802503a:	464a      	mov	r2, r9
 802503c:	4640      	mov	r0, r8
 802503e:	4798      	blx	r3
 8025040:	6923      	ldr	r3, [r4, #16]
 8025042:	3b01      	subs	r3, #1
 8025044:	6123      	str	r3, [r4, #16]
 8025046:	e7f0      	b.n	802502a <_scanf_float+0x2fe>
 8025048:	46aa      	mov	sl, r5
 802504a:	46b3      	mov	fp, r6
 802504c:	e7de      	b.n	802500c <_scanf_float+0x2e0>
 802504e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8025052:	6923      	ldr	r3, [r4, #16]
 8025054:	2965      	cmp	r1, #101	@ 0x65
 8025056:	f103 33ff 	add.w	r3, r3, #4294967295
 802505a:	f106 35ff 	add.w	r5, r6, #4294967295
 802505e:	6123      	str	r3, [r4, #16]
 8025060:	d00c      	beq.n	802507c <_scanf_float+0x350>
 8025062:	2945      	cmp	r1, #69	@ 0x45
 8025064:	d00a      	beq.n	802507c <_scanf_float+0x350>
 8025066:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802506a:	464a      	mov	r2, r9
 802506c:	4640      	mov	r0, r8
 802506e:	4798      	blx	r3
 8025070:	6923      	ldr	r3, [r4, #16]
 8025072:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8025076:	3b01      	subs	r3, #1
 8025078:	1eb5      	subs	r5, r6, #2
 802507a:	6123      	str	r3, [r4, #16]
 802507c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025080:	464a      	mov	r2, r9
 8025082:	4640      	mov	r0, r8
 8025084:	4798      	blx	r3
 8025086:	462e      	mov	r6, r5
 8025088:	6822      	ldr	r2, [r4, #0]
 802508a:	f012 0210 	ands.w	r2, r2, #16
 802508e:	d001      	beq.n	8025094 <_scanf_float+0x368>
 8025090:	2000      	movs	r0, #0
 8025092:	e68e      	b.n	8024db2 <_scanf_float+0x86>
 8025094:	7032      	strb	r2, [r6, #0]
 8025096:	6823      	ldr	r3, [r4, #0]
 8025098:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 802509c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80250a0:	d123      	bne.n	80250ea <_scanf_float+0x3be>
 80250a2:	9b02      	ldr	r3, [sp, #8]
 80250a4:	429f      	cmp	r7, r3
 80250a6:	d00a      	beq.n	80250be <_scanf_float+0x392>
 80250a8:	1bda      	subs	r2, r3, r7
 80250aa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80250ae:	429e      	cmp	r6, r3
 80250b0:	bf28      	it	cs
 80250b2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80250b6:	491e      	ldr	r1, [pc, #120]	@ (8025130 <_scanf_float+0x404>)
 80250b8:	4630      	mov	r0, r6
 80250ba:	f000 f8ff 	bl	80252bc <siprintf>
 80250be:	9901      	ldr	r1, [sp, #4]
 80250c0:	2200      	movs	r2, #0
 80250c2:	4640      	mov	r0, r8
 80250c4:	f002 fbe6 	bl	8027894 <_strtod_r>
 80250c8:	9b03      	ldr	r3, [sp, #12]
 80250ca:	6821      	ldr	r1, [r4, #0]
 80250cc:	681b      	ldr	r3, [r3, #0]
 80250ce:	f011 0f02 	tst.w	r1, #2
 80250d2:	f103 0204 	add.w	r2, r3, #4
 80250d6:	d015      	beq.n	8025104 <_scanf_float+0x3d8>
 80250d8:	9903      	ldr	r1, [sp, #12]
 80250da:	600a      	str	r2, [r1, #0]
 80250dc:	681b      	ldr	r3, [r3, #0]
 80250de:	ed83 0b00 	vstr	d0, [r3]
 80250e2:	68e3      	ldr	r3, [r4, #12]
 80250e4:	3301      	adds	r3, #1
 80250e6:	60e3      	str	r3, [r4, #12]
 80250e8:	e7d2      	b.n	8025090 <_scanf_float+0x364>
 80250ea:	9b04      	ldr	r3, [sp, #16]
 80250ec:	2b00      	cmp	r3, #0
 80250ee:	d0e6      	beq.n	80250be <_scanf_float+0x392>
 80250f0:	9905      	ldr	r1, [sp, #20]
 80250f2:	230a      	movs	r3, #10
 80250f4:	3101      	adds	r1, #1
 80250f6:	4640      	mov	r0, r8
 80250f8:	f7ff f95c 	bl	80243b4 <_strtol_r>
 80250fc:	9b04      	ldr	r3, [sp, #16]
 80250fe:	9e05      	ldr	r6, [sp, #20]
 8025100:	1ac2      	subs	r2, r0, r3
 8025102:	e7d2      	b.n	80250aa <_scanf_float+0x37e>
 8025104:	f011 0f04 	tst.w	r1, #4
 8025108:	9903      	ldr	r1, [sp, #12]
 802510a:	600a      	str	r2, [r1, #0]
 802510c:	d1e6      	bne.n	80250dc <_scanf_float+0x3b0>
 802510e:	eeb4 0b40 	vcmp.f64	d0, d0
 8025112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025116:	681d      	ldr	r5, [r3, #0]
 8025118:	d705      	bvc.n	8025126 <_scanf_float+0x3fa>
 802511a:	4806      	ldr	r0, [pc, #24]	@ (8025134 <_scanf_float+0x408>)
 802511c:	f000 fa70 	bl	8025600 <nanf>
 8025120:	ed85 0a00 	vstr	s0, [r5]
 8025124:	e7dd      	b.n	80250e2 <_scanf_float+0x3b6>
 8025126:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802512a:	e7f9      	b.n	8025120 <_scanf_float+0x3f4>
 802512c:	2700      	movs	r7, #0
 802512e:	e635      	b.n	8024d9c <_scanf_float+0x70>
 8025130:	0802c22b 	.word	0x0802c22b
 8025134:	0802c387 	.word	0x0802c387

08025138 <std>:
 8025138:	2300      	movs	r3, #0
 802513a:	b510      	push	{r4, lr}
 802513c:	4604      	mov	r4, r0
 802513e:	e9c0 3300 	strd	r3, r3, [r0]
 8025142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025146:	6083      	str	r3, [r0, #8]
 8025148:	8181      	strh	r1, [r0, #12]
 802514a:	6643      	str	r3, [r0, #100]	@ 0x64
 802514c:	81c2      	strh	r2, [r0, #14]
 802514e:	6183      	str	r3, [r0, #24]
 8025150:	4619      	mov	r1, r3
 8025152:	2208      	movs	r2, #8
 8025154:	305c      	adds	r0, #92	@ 0x5c
 8025156:	f000 f954 	bl	8025402 <memset>
 802515a:	4b0d      	ldr	r3, [pc, #52]	@ (8025190 <std+0x58>)
 802515c:	6263      	str	r3, [r4, #36]	@ 0x24
 802515e:	4b0d      	ldr	r3, [pc, #52]	@ (8025194 <std+0x5c>)
 8025160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025162:	4b0d      	ldr	r3, [pc, #52]	@ (8025198 <std+0x60>)
 8025164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025166:	4b0d      	ldr	r3, [pc, #52]	@ (802519c <std+0x64>)
 8025168:	6323      	str	r3, [r4, #48]	@ 0x30
 802516a:	4b0d      	ldr	r3, [pc, #52]	@ (80251a0 <std+0x68>)
 802516c:	6224      	str	r4, [r4, #32]
 802516e:	429c      	cmp	r4, r3
 8025170:	d006      	beq.n	8025180 <std+0x48>
 8025172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8025176:	4294      	cmp	r4, r2
 8025178:	d002      	beq.n	8025180 <std+0x48>
 802517a:	33d0      	adds	r3, #208	@ 0xd0
 802517c:	429c      	cmp	r4, r3
 802517e:	d105      	bne.n	802518c <std+0x54>
 8025180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8025184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025188:	f000 ba28 	b.w	80255dc <__retarget_lock_init_recursive>
 802518c:	bd10      	pop	{r4, pc}
 802518e:	bf00      	nop
 8025190:	08025359 	.word	0x08025359
 8025194:	0802537f 	.word	0x0802537f
 8025198:	080253b7 	.word	0x080253b7
 802519c:	080253db 	.word	0x080253db
 80251a0:	2402ab68 	.word	0x2402ab68

080251a4 <stdio_exit_handler>:
 80251a4:	4a02      	ldr	r2, [pc, #8]	@ (80251b0 <stdio_exit_handler+0xc>)
 80251a6:	4903      	ldr	r1, [pc, #12]	@ (80251b4 <stdio_exit_handler+0x10>)
 80251a8:	4803      	ldr	r0, [pc, #12]	@ (80251b8 <stdio_exit_handler+0x14>)
 80251aa:	f000 b869 	b.w	8025280 <_fwalk_sglue>
 80251ae:	bf00      	nop
 80251b0:	24000398 	.word	0x24000398
 80251b4:	08028295 	.word	0x08028295
 80251b8:	240003a8 	.word	0x240003a8

080251bc <cleanup_stdio>:
 80251bc:	6841      	ldr	r1, [r0, #4]
 80251be:	4b0c      	ldr	r3, [pc, #48]	@ (80251f0 <cleanup_stdio+0x34>)
 80251c0:	4299      	cmp	r1, r3
 80251c2:	b510      	push	{r4, lr}
 80251c4:	4604      	mov	r4, r0
 80251c6:	d001      	beq.n	80251cc <cleanup_stdio+0x10>
 80251c8:	f003 f864 	bl	8028294 <_fflush_r>
 80251cc:	68a1      	ldr	r1, [r4, #8]
 80251ce:	4b09      	ldr	r3, [pc, #36]	@ (80251f4 <cleanup_stdio+0x38>)
 80251d0:	4299      	cmp	r1, r3
 80251d2:	d002      	beq.n	80251da <cleanup_stdio+0x1e>
 80251d4:	4620      	mov	r0, r4
 80251d6:	f003 f85d 	bl	8028294 <_fflush_r>
 80251da:	68e1      	ldr	r1, [r4, #12]
 80251dc:	4b06      	ldr	r3, [pc, #24]	@ (80251f8 <cleanup_stdio+0x3c>)
 80251de:	4299      	cmp	r1, r3
 80251e0:	d004      	beq.n	80251ec <cleanup_stdio+0x30>
 80251e2:	4620      	mov	r0, r4
 80251e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80251e8:	f003 b854 	b.w	8028294 <_fflush_r>
 80251ec:	bd10      	pop	{r4, pc}
 80251ee:	bf00      	nop
 80251f0:	2402ab68 	.word	0x2402ab68
 80251f4:	2402abd0 	.word	0x2402abd0
 80251f8:	2402ac38 	.word	0x2402ac38

080251fc <global_stdio_init.part.0>:
 80251fc:	b510      	push	{r4, lr}
 80251fe:	4b0b      	ldr	r3, [pc, #44]	@ (802522c <global_stdio_init.part.0+0x30>)
 8025200:	4c0b      	ldr	r4, [pc, #44]	@ (8025230 <global_stdio_init.part.0+0x34>)
 8025202:	4a0c      	ldr	r2, [pc, #48]	@ (8025234 <global_stdio_init.part.0+0x38>)
 8025204:	601a      	str	r2, [r3, #0]
 8025206:	4620      	mov	r0, r4
 8025208:	2200      	movs	r2, #0
 802520a:	2104      	movs	r1, #4
 802520c:	f7ff ff94 	bl	8025138 <std>
 8025210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8025214:	2201      	movs	r2, #1
 8025216:	2109      	movs	r1, #9
 8025218:	f7ff ff8e 	bl	8025138 <std>
 802521c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8025220:	2202      	movs	r2, #2
 8025222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025226:	2112      	movs	r1, #18
 8025228:	f7ff bf86 	b.w	8025138 <std>
 802522c:	2402aca0 	.word	0x2402aca0
 8025230:	2402ab68 	.word	0x2402ab68
 8025234:	080251a5 	.word	0x080251a5

08025238 <__sfp_lock_acquire>:
 8025238:	4801      	ldr	r0, [pc, #4]	@ (8025240 <__sfp_lock_acquire+0x8>)
 802523a:	f000 b9d0 	b.w	80255de <__retarget_lock_acquire_recursive>
 802523e:	bf00      	nop
 8025240:	2402aca9 	.word	0x2402aca9

08025244 <__sfp_lock_release>:
 8025244:	4801      	ldr	r0, [pc, #4]	@ (802524c <__sfp_lock_release+0x8>)
 8025246:	f000 b9cb 	b.w	80255e0 <__retarget_lock_release_recursive>
 802524a:	bf00      	nop
 802524c:	2402aca9 	.word	0x2402aca9

08025250 <__sinit>:
 8025250:	b510      	push	{r4, lr}
 8025252:	4604      	mov	r4, r0
 8025254:	f7ff fff0 	bl	8025238 <__sfp_lock_acquire>
 8025258:	6a23      	ldr	r3, [r4, #32]
 802525a:	b11b      	cbz	r3, 8025264 <__sinit+0x14>
 802525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025260:	f7ff bff0 	b.w	8025244 <__sfp_lock_release>
 8025264:	4b04      	ldr	r3, [pc, #16]	@ (8025278 <__sinit+0x28>)
 8025266:	6223      	str	r3, [r4, #32]
 8025268:	4b04      	ldr	r3, [pc, #16]	@ (802527c <__sinit+0x2c>)
 802526a:	681b      	ldr	r3, [r3, #0]
 802526c:	2b00      	cmp	r3, #0
 802526e:	d1f5      	bne.n	802525c <__sinit+0xc>
 8025270:	f7ff ffc4 	bl	80251fc <global_stdio_init.part.0>
 8025274:	e7f2      	b.n	802525c <__sinit+0xc>
 8025276:	bf00      	nop
 8025278:	080251bd 	.word	0x080251bd
 802527c:	2402aca0 	.word	0x2402aca0

08025280 <_fwalk_sglue>:
 8025280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025284:	4607      	mov	r7, r0
 8025286:	4688      	mov	r8, r1
 8025288:	4614      	mov	r4, r2
 802528a:	2600      	movs	r6, #0
 802528c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025290:	f1b9 0901 	subs.w	r9, r9, #1
 8025294:	d505      	bpl.n	80252a2 <_fwalk_sglue+0x22>
 8025296:	6824      	ldr	r4, [r4, #0]
 8025298:	2c00      	cmp	r4, #0
 802529a:	d1f7      	bne.n	802528c <_fwalk_sglue+0xc>
 802529c:	4630      	mov	r0, r6
 802529e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80252a2:	89ab      	ldrh	r3, [r5, #12]
 80252a4:	2b01      	cmp	r3, #1
 80252a6:	d907      	bls.n	80252b8 <_fwalk_sglue+0x38>
 80252a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80252ac:	3301      	adds	r3, #1
 80252ae:	d003      	beq.n	80252b8 <_fwalk_sglue+0x38>
 80252b0:	4629      	mov	r1, r5
 80252b2:	4638      	mov	r0, r7
 80252b4:	47c0      	blx	r8
 80252b6:	4306      	orrs	r6, r0
 80252b8:	3568      	adds	r5, #104	@ 0x68
 80252ba:	e7e9      	b.n	8025290 <_fwalk_sglue+0x10>

080252bc <siprintf>:
 80252bc:	b40e      	push	{r1, r2, r3}
 80252be:	b510      	push	{r4, lr}
 80252c0:	b09d      	sub	sp, #116	@ 0x74
 80252c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80252c4:	9002      	str	r0, [sp, #8]
 80252c6:	9006      	str	r0, [sp, #24]
 80252c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80252cc:	480a      	ldr	r0, [pc, #40]	@ (80252f8 <siprintf+0x3c>)
 80252ce:	9107      	str	r1, [sp, #28]
 80252d0:	9104      	str	r1, [sp, #16]
 80252d2:	490a      	ldr	r1, [pc, #40]	@ (80252fc <siprintf+0x40>)
 80252d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80252d8:	9105      	str	r1, [sp, #20]
 80252da:	2400      	movs	r4, #0
 80252dc:	a902      	add	r1, sp, #8
 80252de:	6800      	ldr	r0, [r0, #0]
 80252e0:	9301      	str	r3, [sp, #4]
 80252e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80252e4:	f002 fb38 	bl	8027958 <_svfiprintf_r>
 80252e8:	9b02      	ldr	r3, [sp, #8]
 80252ea:	701c      	strb	r4, [r3, #0]
 80252ec:	b01d      	add	sp, #116	@ 0x74
 80252ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80252f2:	b003      	add	sp, #12
 80252f4:	4770      	bx	lr
 80252f6:	bf00      	nop
 80252f8:	240003a4 	.word	0x240003a4
 80252fc:	ffff0208 	.word	0xffff0208

08025300 <siscanf>:
 8025300:	b40e      	push	{r1, r2, r3}
 8025302:	b570      	push	{r4, r5, r6, lr}
 8025304:	b09d      	sub	sp, #116	@ 0x74
 8025306:	ac21      	add	r4, sp, #132	@ 0x84
 8025308:	2500      	movs	r5, #0
 802530a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802530e:	f854 6b04 	ldr.w	r6, [r4], #4
 8025312:	f8ad 2014 	strh.w	r2, [sp, #20]
 8025316:	951b      	str	r5, [sp, #108]	@ 0x6c
 8025318:	9002      	str	r0, [sp, #8]
 802531a:	9006      	str	r0, [sp, #24]
 802531c:	f7db f848 	bl	80003b0 <strlen>
 8025320:	4b0b      	ldr	r3, [pc, #44]	@ (8025350 <siscanf+0x50>)
 8025322:	9003      	str	r0, [sp, #12]
 8025324:	9007      	str	r0, [sp, #28]
 8025326:	480b      	ldr	r0, [pc, #44]	@ (8025354 <siscanf+0x54>)
 8025328:	930b      	str	r3, [sp, #44]	@ 0x2c
 802532a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802532e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025332:	4632      	mov	r2, r6
 8025334:	4623      	mov	r3, r4
 8025336:	a902      	add	r1, sp, #8
 8025338:	6800      	ldr	r0, [r0, #0]
 802533a:	950f      	str	r5, [sp, #60]	@ 0x3c
 802533c:	9514      	str	r5, [sp, #80]	@ 0x50
 802533e:	9401      	str	r4, [sp, #4]
 8025340:	f002 fc60 	bl	8027c04 <__ssvfiscanf_r>
 8025344:	b01d      	add	sp, #116	@ 0x74
 8025346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802534a:	b003      	add	sp, #12
 802534c:	4770      	bx	lr
 802534e:	bf00      	nop
 8025350:	0802537b 	.word	0x0802537b
 8025354:	240003a4 	.word	0x240003a4

08025358 <__sread>:
 8025358:	b510      	push	{r4, lr}
 802535a:	460c      	mov	r4, r1
 802535c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025360:	f000 f8ee 	bl	8025540 <_read_r>
 8025364:	2800      	cmp	r0, #0
 8025366:	bfab      	itete	ge
 8025368:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802536a:	89a3      	ldrhlt	r3, [r4, #12]
 802536c:	181b      	addge	r3, r3, r0
 802536e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8025372:	bfac      	ite	ge
 8025374:	6563      	strge	r3, [r4, #84]	@ 0x54
 8025376:	81a3      	strhlt	r3, [r4, #12]
 8025378:	bd10      	pop	{r4, pc}

0802537a <__seofread>:
 802537a:	2000      	movs	r0, #0
 802537c:	4770      	bx	lr

0802537e <__swrite>:
 802537e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025382:	461f      	mov	r7, r3
 8025384:	898b      	ldrh	r3, [r1, #12]
 8025386:	05db      	lsls	r3, r3, #23
 8025388:	4605      	mov	r5, r0
 802538a:	460c      	mov	r4, r1
 802538c:	4616      	mov	r6, r2
 802538e:	d505      	bpl.n	802539c <__swrite+0x1e>
 8025390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025394:	2302      	movs	r3, #2
 8025396:	2200      	movs	r2, #0
 8025398:	f000 f8c0 	bl	802551c <_lseek_r>
 802539c:	89a3      	ldrh	r3, [r4, #12]
 802539e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80253a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80253a6:	81a3      	strh	r3, [r4, #12]
 80253a8:	4632      	mov	r2, r6
 80253aa:	463b      	mov	r3, r7
 80253ac:	4628      	mov	r0, r5
 80253ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80253b2:	f000 b8d7 	b.w	8025564 <_write_r>

080253b6 <__sseek>:
 80253b6:	b510      	push	{r4, lr}
 80253b8:	460c      	mov	r4, r1
 80253ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80253be:	f000 f8ad 	bl	802551c <_lseek_r>
 80253c2:	1c43      	adds	r3, r0, #1
 80253c4:	89a3      	ldrh	r3, [r4, #12]
 80253c6:	bf15      	itete	ne
 80253c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80253ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80253ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80253d2:	81a3      	strheq	r3, [r4, #12]
 80253d4:	bf18      	it	ne
 80253d6:	81a3      	strhne	r3, [r4, #12]
 80253d8:	bd10      	pop	{r4, pc}

080253da <__sclose>:
 80253da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80253de:	f000 b82f 	b.w	8025440 <_close_r>

080253e2 <memcmp>:
 80253e2:	b510      	push	{r4, lr}
 80253e4:	3901      	subs	r1, #1
 80253e6:	4402      	add	r2, r0
 80253e8:	4290      	cmp	r0, r2
 80253ea:	d101      	bne.n	80253f0 <memcmp+0xe>
 80253ec:	2000      	movs	r0, #0
 80253ee:	e005      	b.n	80253fc <memcmp+0x1a>
 80253f0:	7803      	ldrb	r3, [r0, #0]
 80253f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80253f6:	42a3      	cmp	r3, r4
 80253f8:	d001      	beq.n	80253fe <memcmp+0x1c>
 80253fa:	1b18      	subs	r0, r3, r4
 80253fc:	bd10      	pop	{r4, pc}
 80253fe:	3001      	adds	r0, #1
 8025400:	e7f2      	b.n	80253e8 <memcmp+0x6>

08025402 <memset>:
 8025402:	4402      	add	r2, r0
 8025404:	4603      	mov	r3, r0
 8025406:	4293      	cmp	r3, r2
 8025408:	d100      	bne.n	802540c <memset+0xa>
 802540a:	4770      	bx	lr
 802540c:	f803 1b01 	strb.w	r1, [r3], #1
 8025410:	e7f9      	b.n	8025406 <memset+0x4>

08025412 <strncpy>:
 8025412:	b510      	push	{r4, lr}
 8025414:	3901      	subs	r1, #1
 8025416:	4603      	mov	r3, r0
 8025418:	b132      	cbz	r2, 8025428 <strncpy+0x16>
 802541a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802541e:	f803 4b01 	strb.w	r4, [r3], #1
 8025422:	3a01      	subs	r2, #1
 8025424:	2c00      	cmp	r4, #0
 8025426:	d1f7      	bne.n	8025418 <strncpy+0x6>
 8025428:	441a      	add	r2, r3
 802542a:	2100      	movs	r1, #0
 802542c:	4293      	cmp	r3, r2
 802542e:	d100      	bne.n	8025432 <strncpy+0x20>
 8025430:	bd10      	pop	{r4, pc}
 8025432:	f803 1b01 	strb.w	r1, [r3], #1
 8025436:	e7f9      	b.n	802542c <strncpy+0x1a>

08025438 <_localeconv_r>:
 8025438:	4800      	ldr	r0, [pc, #0]	@ (802543c <_localeconv_r+0x4>)
 802543a:	4770      	bx	lr
 802543c:	240004e4 	.word	0x240004e4

08025440 <_close_r>:
 8025440:	b538      	push	{r3, r4, r5, lr}
 8025442:	4d06      	ldr	r5, [pc, #24]	@ (802545c <_close_r+0x1c>)
 8025444:	2300      	movs	r3, #0
 8025446:	4604      	mov	r4, r0
 8025448:	4608      	mov	r0, r1
 802544a:	602b      	str	r3, [r5, #0]
 802544c:	f7e5 ff18 	bl	800b280 <_close>
 8025450:	1c43      	adds	r3, r0, #1
 8025452:	d102      	bne.n	802545a <_close_r+0x1a>
 8025454:	682b      	ldr	r3, [r5, #0]
 8025456:	b103      	cbz	r3, 802545a <_close_r+0x1a>
 8025458:	6023      	str	r3, [r4, #0]
 802545a:	bd38      	pop	{r3, r4, r5, pc}
 802545c:	2402aca4 	.word	0x2402aca4

08025460 <_reclaim_reent>:
 8025460:	4b2d      	ldr	r3, [pc, #180]	@ (8025518 <_reclaim_reent+0xb8>)
 8025462:	681b      	ldr	r3, [r3, #0]
 8025464:	4283      	cmp	r3, r0
 8025466:	b570      	push	{r4, r5, r6, lr}
 8025468:	4604      	mov	r4, r0
 802546a:	d053      	beq.n	8025514 <_reclaim_reent+0xb4>
 802546c:	69c3      	ldr	r3, [r0, #28]
 802546e:	b31b      	cbz	r3, 80254b8 <_reclaim_reent+0x58>
 8025470:	68db      	ldr	r3, [r3, #12]
 8025472:	b163      	cbz	r3, 802548e <_reclaim_reent+0x2e>
 8025474:	2500      	movs	r5, #0
 8025476:	69e3      	ldr	r3, [r4, #28]
 8025478:	68db      	ldr	r3, [r3, #12]
 802547a:	5959      	ldr	r1, [r3, r5]
 802547c:	b9b1      	cbnz	r1, 80254ac <_reclaim_reent+0x4c>
 802547e:	3504      	adds	r5, #4
 8025480:	2d80      	cmp	r5, #128	@ 0x80
 8025482:	d1f8      	bne.n	8025476 <_reclaim_reent+0x16>
 8025484:	69e3      	ldr	r3, [r4, #28]
 8025486:	4620      	mov	r0, r4
 8025488:	68d9      	ldr	r1, [r3, #12]
 802548a:	f000 fea7 	bl	80261dc <_free_r>
 802548e:	69e3      	ldr	r3, [r4, #28]
 8025490:	6819      	ldr	r1, [r3, #0]
 8025492:	b111      	cbz	r1, 802549a <_reclaim_reent+0x3a>
 8025494:	4620      	mov	r0, r4
 8025496:	f000 fea1 	bl	80261dc <_free_r>
 802549a:	69e3      	ldr	r3, [r4, #28]
 802549c:	689d      	ldr	r5, [r3, #8]
 802549e:	b15d      	cbz	r5, 80254b8 <_reclaim_reent+0x58>
 80254a0:	4629      	mov	r1, r5
 80254a2:	4620      	mov	r0, r4
 80254a4:	682d      	ldr	r5, [r5, #0]
 80254a6:	f000 fe99 	bl	80261dc <_free_r>
 80254aa:	e7f8      	b.n	802549e <_reclaim_reent+0x3e>
 80254ac:	680e      	ldr	r6, [r1, #0]
 80254ae:	4620      	mov	r0, r4
 80254b0:	f000 fe94 	bl	80261dc <_free_r>
 80254b4:	4631      	mov	r1, r6
 80254b6:	e7e1      	b.n	802547c <_reclaim_reent+0x1c>
 80254b8:	6961      	ldr	r1, [r4, #20]
 80254ba:	b111      	cbz	r1, 80254c2 <_reclaim_reent+0x62>
 80254bc:	4620      	mov	r0, r4
 80254be:	f000 fe8d 	bl	80261dc <_free_r>
 80254c2:	69e1      	ldr	r1, [r4, #28]
 80254c4:	b111      	cbz	r1, 80254cc <_reclaim_reent+0x6c>
 80254c6:	4620      	mov	r0, r4
 80254c8:	f000 fe88 	bl	80261dc <_free_r>
 80254cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80254ce:	b111      	cbz	r1, 80254d6 <_reclaim_reent+0x76>
 80254d0:	4620      	mov	r0, r4
 80254d2:	f000 fe83 	bl	80261dc <_free_r>
 80254d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80254d8:	b111      	cbz	r1, 80254e0 <_reclaim_reent+0x80>
 80254da:	4620      	mov	r0, r4
 80254dc:	f000 fe7e 	bl	80261dc <_free_r>
 80254e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80254e2:	b111      	cbz	r1, 80254ea <_reclaim_reent+0x8a>
 80254e4:	4620      	mov	r0, r4
 80254e6:	f000 fe79 	bl	80261dc <_free_r>
 80254ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80254ec:	b111      	cbz	r1, 80254f4 <_reclaim_reent+0x94>
 80254ee:	4620      	mov	r0, r4
 80254f0:	f000 fe74 	bl	80261dc <_free_r>
 80254f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80254f6:	b111      	cbz	r1, 80254fe <_reclaim_reent+0x9e>
 80254f8:	4620      	mov	r0, r4
 80254fa:	f000 fe6f 	bl	80261dc <_free_r>
 80254fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8025500:	b111      	cbz	r1, 8025508 <_reclaim_reent+0xa8>
 8025502:	4620      	mov	r0, r4
 8025504:	f000 fe6a 	bl	80261dc <_free_r>
 8025508:	6a23      	ldr	r3, [r4, #32]
 802550a:	b11b      	cbz	r3, 8025514 <_reclaim_reent+0xb4>
 802550c:	4620      	mov	r0, r4
 802550e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025512:	4718      	bx	r3
 8025514:	bd70      	pop	{r4, r5, r6, pc}
 8025516:	bf00      	nop
 8025518:	240003a4 	.word	0x240003a4

0802551c <_lseek_r>:
 802551c:	b538      	push	{r3, r4, r5, lr}
 802551e:	4d07      	ldr	r5, [pc, #28]	@ (802553c <_lseek_r+0x20>)
 8025520:	4604      	mov	r4, r0
 8025522:	4608      	mov	r0, r1
 8025524:	4611      	mov	r1, r2
 8025526:	2200      	movs	r2, #0
 8025528:	602a      	str	r2, [r5, #0]
 802552a:	461a      	mov	r2, r3
 802552c:	f7e5 fecf 	bl	800b2ce <_lseek>
 8025530:	1c43      	adds	r3, r0, #1
 8025532:	d102      	bne.n	802553a <_lseek_r+0x1e>
 8025534:	682b      	ldr	r3, [r5, #0]
 8025536:	b103      	cbz	r3, 802553a <_lseek_r+0x1e>
 8025538:	6023      	str	r3, [r4, #0]
 802553a:	bd38      	pop	{r3, r4, r5, pc}
 802553c:	2402aca4 	.word	0x2402aca4

08025540 <_read_r>:
 8025540:	b538      	push	{r3, r4, r5, lr}
 8025542:	4d07      	ldr	r5, [pc, #28]	@ (8025560 <_read_r+0x20>)
 8025544:	4604      	mov	r4, r0
 8025546:	4608      	mov	r0, r1
 8025548:	4611      	mov	r1, r2
 802554a:	2200      	movs	r2, #0
 802554c:	602a      	str	r2, [r5, #0]
 802554e:	461a      	mov	r2, r3
 8025550:	f7e5 fe5d 	bl	800b20e <_read>
 8025554:	1c43      	adds	r3, r0, #1
 8025556:	d102      	bne.n	802555e <_read_r+0x1e>
 8025558:	682b      	ldr	r3, [r5, #0]
 802555a:	b103      	cbz	r3, 802555e <_read_r+0x1e>
 802555c:	6023      	str	r3, [r4, #0]
 802555e:	bd38      	pop	{r3, r4, r5, pc}
 8025560:	2402aca4 	.word	0x2402aca4

08025564 <_write_r>:
 8025564:	b538      	push	{r3, r4, r5, lr}
 8025566:	4d07      	ldr	r5, [pc, #28]	@ (8025584 <_write_r+0x20>)
 8025568:	4604      	mov	r4, r0
 802556a:	4608      	mov	r0, r1
 802556c:	4611      	mov	r1, r2
 802556e:	2200      	movs	r2, #0
 8025570:	602a      	str	r2, [r5, #0]
 8025572:	461a      	mov	r2, r3
 8025574:	f7e5 fe68 	bl	800b248 <_write>
 8025578:	1c43      	adds	r3, r0, #1
 802557a:	d102      	bne.n	8025582 <_write_r+0x1e>
 802557c:	682b      	ldr	r3, [r5, #0]
 802557e:	b103      	cbz	r3, 8025582 <_write_r+0x1e>
 8025580:	6023      	str	r3, [r4, #0]
 8025582:	bd38      	pop	{r3, r4, r5, pc}
 8025584:	2402aca4 	.word	0x2402aca4

08025588 <__errno>:
 8025588:	4b01      	ldr	r3, [pc, #4]	@ (8025590 <__errno+0x8>)
 802558a:	6818      	ldr	r0, [r3, #0]
 802558c:	4770      	bx	lr
 802558e:	bf00      	nop
 8025590:	240003a4 	.word	0x240003a4

08025594 <__libc_init_array>:
 8025594:	b570      	push	{r4, r5, r6, lr}
 8025596:	4d0d      	ldr	r5, [pc, #52]	@ (80255cc <__libc_init_array+0x38>)
 8025598:	4c0d      	ldr	r4, [pc, #52]	@ (80255d0 <__libc_init_array+0x3c>)
 802559a:	1b64      	subs	r4, r4, r5
 802559c:	10a4      	asrs	r4, r4, #2
 802559e:	2600      	movs	r6, #0
 80255a0:	42a6      	cmp	r6, r4
 80255a2:	d109      	bne.n	80255b8 <__libc_init_array+0x24>
 80255a4:	4d0b      	ldr	r5, [pc, #44]	@ (80255d4 <__libc_init_array+0x40>)
 80255a6:	4c0c      	ldr	r4, [pc, #48]	@ (80255d8 <__libc_init_array+0x44>)
 80255a8:	f003 ffbe 	bl	8029528 <_init>
 80255ac:	1b64      	subs	r4, r4, r5
 80255ae:	10a4      	asrs	r4, r4, #2
 80255b0:	2600      	movs	r6, #0
 80255b2:	42a6      	cmp	r6, r4
 80255b4:	d105      	bne.n	80255c2 <__libc_init_array+0x2e>
 80255b6:	bd70      	pop	{r4, r5, r6, pc}
 80255b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80255bc:	4798      	blx	r3
 80255be:	3601      	adds	r6, #1
 80255c0:	e7ee      	b.n	80255a0 <__libc_init_array+0xc>
 80255c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80255c6:	4798      	blx	r3
 80255c8:	3601      	adds	r6, #1
 80255ca:	e7f2      	b.n	80255b2 <__libc_init_array+0x1e>
 80255cc:	0802c680 	.word	0x0802c680
 80255d0:	0802c680 	.word	0x0802c680
 80255d4:	0802c680 	.word	0x0802c680
 80255d8:	0802c684 	.word	0x0802c684

080255dc <__retarget_lock_init_recursive>:
 80255dc:	4770      	bx	lr

080255de <__retarget_lock_acquire_recursive>:
 80255de:	4770      	bx	lr

080255e0 <__retarget_lock_release_recursive>:
 80255e0:	4770      	bx	lr

080255e2 <memcpy>:
 80255e2:	440a      	add	r2, r1
 80255e4:	4291      	cmp	r1, r2
 80255e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80255ea:	d100      	bne.n	80255ee <memcpy+0xc>
 80255ec:	4770      	bx	lr
 80255ee:	b510      	push	{r4, lr}
 80255f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80255f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80255f8:	4291      	cmp	r1, r2
 80255fa:	d1f9      	bne.n	80255f0 <memcpy+0xe>
 80255fc:	bd10      	pop	{r4, pc}
	...

08025600 <nanf>:
 8025600:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8025608 <nanf+0x8>
 8025604:	4770      	bx	lr
 8025606:	bf00      	nop
 8025608:	7fc00000 	.word	0x7fc00000

0802560c <quorem>:
 802560c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025610:	6903      	ldr	r3, [r0, #16]
 8025612:	690c      	ldr	r4, [r1, #16]
 8025614:	42a3      	cmp	r3, r4
 8025616:	4607      	mov	r7, r0
 8025618:	db7e      	blt.n	8025718 <quorem+0x10c>
 802561a:	3c01      	subs	r4, #1
 802561c:	f101 0814 	add.w	r8, r1, #20
 8025620:	00a3      	lsls	r3, r4, #2
 8025622:	f100 0514 	add.w	r5, r0, #20
 8025626:	9300      	str	r3, [sp, #0]
 8025628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802562c:	9301      	str	r3, [sp, #4]
 802562e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025636:	3301      	adds	r3, #1
 8025638:	429a      	cmp	r2, r3
 802563a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802563e:	fbb2 f6f3 	udiv	r6, r2, r3
 8025642:	d32e      	bcc.n	80256a2 <quorem+0x96>
 8025644:	f04f 0a00 	mov.w	sl, #0
 8025648:	46c4      	mov	ip, r8
 802564a:	46ae      	mov	lr, r5
 802564c:	46d3      	mov	fp, sl
 802564e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8025652:	b298      	uxth	r0, r3
 8025654:	fb06 a000 	mla	r0, r6, r0, sl
 8025658:	0c02      	lsrs	r2, r0, #16
 802565a:	0c1b      	lsrs	r3, r3, #16
 802565c:	fb06 2303 	mla	r3, r6, r3, r2
 8025660:	f8de 2000 	ldr.w	r2, [lr]
 8025664:	b280      	uxth	r0, r0
 8025666:	b292      	uxth	r2, r2
 8025668:	1a12      	subs	r2, r2, r0
 802566a:	445a      	add	r2, fp
 802566c:	f8de 0000 	ldr.w	r0, [lr]
 8025670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8025674:	b29b      	uxth	r3, r3
 8025676:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802567a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802567e:	b292      	uxth	r2, r2
 8025680:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8025684:	45e1      	cmp	r9, ip
 8025686:	f84e 2b04 	str.w	r2, [lr], #4
 802568a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802568e:	d2de      	bcs.n	802564e <quorem+0x42>
 8025690:	9b00      	ldr	r3, [sp, #0]
 8025692:	58eb      	ldr	r3, [r5, r3]
 8025694:	b92b      	cbnz	r3, 80256a2 <quorem+0x96>
 8025696:	9b01      	ldr	r3, [sp, #4]
 8025698:	3b04      	subs	r3, #4
 802569a:	429d      	cmp	r5, r3
 802569c:	461a      	mov	r2, r3
 802569e:	d32f      	bcc.n	8025700 <quorem+0xf4>
 80256a0:	613c      	str	r4, [r7, #16]
 80256a2:	4638      	mov	r0, r7
 80256a4:	f001 f956 	bl	8026954 <__mcmp>
 80256a8:	2800      	cmp	r0, #0
 80256aa:	db25      	blt.n	80256f8 <quorem+0xec>
 80256ac:	4629      	mov	r1, r5
 80256ae:	2000      	movs	r0, #0
 80256b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80256b4:	f8d1 c000 	ldr.w	ip, [r1]
 80256b8:	fa1f fe82 	uxth.w	lr, r2
 80256bc:	fa1f f38c 	uxth.w	r3, ip
 80256c0:	eba3 030e 	sub.w	r3, r3, lr
 80256c4:	4403      	add	r3, r0
 80256c6:	0c12      	lsrs	r2, r2, #16
 80256c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80256cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80256d0:	b29b      	uxth	r3, r3
 80256d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80256d6:	45c1      	cmp	r9, r8
 80256d8:	f841 3b04 	str.w	r3, [r1], #4
 80256dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80256e0:	d2e6      	bcs.n	80256b0 <quorem+0xa4>
 80256e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80256e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80256ea:	b922      	cbnz	r2, 80256f6 <quorem+0xea>
 80256ec:	3b04      	subs	r3, #4
 80256ee:	429d      	cmp	r5, r3
 80256f0:	461a      	mov	r2, r3
 80256f2:	d30b      	bcc.n	802570c <quorem+0x100>
 80256f4:	613c      	str	r4, [r7, #16]
 80256f6:	3601      	adds	r6, #1
 80256f8:	4630      	mov	r0, r6
 80256fa:	b003      	add	sp, #12
 80256fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025700:	6812      	ldr	r2, [r2, #0]
 8025702:	3b04      	subs	r3, #4
 8025704:	2a00      	cmp	r2, #0
 8025706:	d1cb      	bne.n	80256a0 <quorem+0x94>
 8025708:	3c01      	subs	r4, #1
 802570a:	e7c6      	b.n	802569a <quorem+0x8e>
 802570c:	6812      	ldr	r2, [r2, #0]
 802570e:	3b04      	subs	r3, #4
 8025710:	2a00      	cmp	r2, #0
 8025712:	d1ef      	bne.n	80256f4 <quorem+0xe8>
 8025714:	3c01      	subs	r4, #1
 8025716:	e7ea      	b.n	80256ee <quorem+0xe2>
 8025718:	2000      	movs	r0, #0
 802571a:	e7ee      	b.n	80256fa <quorem+0xee>
 802571c:	0000      	movs	r0, r0
	...

08025720 <_dtoa_r>:
 8025720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025724:	ed2d 8b02 	vpush	{d8}
 8025728:	69c7      	ldr	r7, [r0, #28]
 802572a:	b091      	sub	sp, #68	@ 0x44
 802572c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025730:	ec55 4b10 	vmov	r4, r5, d0
 8025734:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8025736:	9107      	str	r1, [sp, #28]
 8025738:	4681      	mov	r9, r0
 802573a:	9209      	str	r2, [sp, #36]	@ 0x24
 802573c:	930d      	str	r3, [sp, #52]	@ 0x34
 802573e:	b97f      	cbnz	r7, 8025760 <_dtoa_r+0x40>
 8025740:	2010      	movs	r0, #16
 8025742:	f000 fd95 	bl	8026270 <malloc>
 8025746:	4602      	mov	r2, r0
 8025748:	f8c9 001c 	str.w	r0, [r9, #28]
 802574c:	b920      	cbnz	r0, 8025758 <_dtoa_r+0x38>
 802574e:	4ba0      	ldr	r3, [pc, #640]	@ (80259d0 <_dtoa_r+0x2b0>)
 8025750:	21ef      	movs	r1, #239	@ 0xef
 8025752:	48a0      	ldr	r0, [pc, #640]	@ (80259d4 <_dtoa_r+0x2b4>)
 8025754:	f002 fe80 	bl	8028458 <__assert_func>
 8025758:	e9c0 7701 	strd	r7, r7, [r0, #4]
 802575c:	6007      	str	r7, [r0, #0]
 802575e:	60c7      	str	r7, [r0, #12]
 8025760:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8025764:	6819      	ldr	r1, [r3, #0]
 8025766:	b159      	cbz	r1, 8025780 <_dtoa_r+0x60>
 8025768:	685a      	ldr	r2, [r3, #4]
 802576a:	604a      	str	r2, [r1, #4]
 802576c:	2301      	movs	r3, #1
 802576e:	4093      	lsls	r3, r2
 8025770:	608b      	str	r3, [r1, #8]
 8025772:	4648      	mov	r0, r9
 8025774:	f000 fe72 	bl	802645c <_Bfree>
 8025778:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802577c:	2200      	movs	r2, #0
 802577e:	601a      	str	r2, [r3, #0]
 8025780:	1e2b      	subs	r3, r5, #0
 8025782:	bfbb      	ittet	lt
 8025784:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8025788:	9303      	strlt	r3, [sp, #12]
 802578a:	2300      	movge	r3, #0
 802578c:	2201      	movlt	r2, #1
 802578e:	bfac      	ite	ge
 8025790:	6033      	strge	r3, [r6, #0]
 8025792:	6032      	strlt	r2, [r6, #0]
 8025794:	4b90      	ldr	r3, [pc, #576]	@ (80259d8 <_dtoa_r+0x2b8>)
 8025796:	9e03      	ldr	r6, [sp, #12]
 8025798:	43b3      	bics	r3, r6
 802579a:	d110      	bne.n	80257be <_dtoa_r+0x9e>
 802579c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802579e:	f242 730f 	movw	r3, #9999	@ 0x270f
 80257a2:	6013      	str	r3, [r2, #0]
 80257a4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80257a8:	4323      	orrs	r3, r4
 80257aa:	f000 84e6 	beq.w	802617a <_dtoa_r+0xa5a>
 80257ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80257b0:	4f8a      	ldr	r7, [pc, #552]	@ (80259dc <_dtoa_r+0x2bc>)
 80257b2:	2b00      	cmp	r3, #0
 80257b4:	f000 84e8 	beq.w	8026188 <_dtoa_r+0xa68>
 80257b8:	1cfb      	adds	r3, r7, #3
 80257ba:	f000 bce3 	b.w	8026184 <_dtoa_r+0xa64>
 80257be:	ed9d 8b02 	vldr	d8, [sp, #8]
 80257c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80257c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80257ca:	d10a      	bne.n	80257e2 <_dtoa_r+0xc2>
 80257cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80257ce:	2301      	movs	r3, #1
 80257d0:	6013      	str	r3, [r2, #0]
 80257d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80257d4:	b113      	cbz	r3, 80257dc <_dtoa_r+0xbc>
 80257d6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80257d8:	4b81      	ldr	r3, [pc, #516]	@ (80259e0 <_dtoa_r+0x2c0>)
 80257da:	6013      	str	r3, [r2, #0]
 80257dc:	4f81      	ldr	r7, [pc, #516]	@ (80259e4 <_dtoa_r+0x2c4>)
 80257de:	f000 bcd3 	b.w	8026188 <_dtoa_r+0xa68>
 80257e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80257e4:	a90f      	add	r1, sp, #60	@ 0x3c
 80257e6:	4648      	mov	r0, r9
 80257e8:	eeb0 0b48 	vmov.f64	d0, d8
 80257ec:	f001 f9d2 	bl	8026b94 <__d2b>
 80257f0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80257f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80257f6:	9001      	str	r0, [sp, #4]
 80257f8:	2b00      	cmp	r3, #0
 80257fa:	d045      	beq.n	8025888 <_dtoa_r+0x168>
 80257fc:	eeb0 7b48 	vmov.f64	d7, d8
 8025800:	ee18 1a90 	vmov	r1, s17
 8025804:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8025808:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 802580c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8025810:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8025814:	2500      	movs	r5, #0
 8025816:	ee07 1a90 	vmov	s15, r1
 802581a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 802581e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80259b8 <_dtoa_r+0x298>
 8025822:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025826:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80259c0 <_dtoa_r+0x2a0>
 802582a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802582e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80259c8 <_dtoa_r+0x2a8>
 8025832:	ee07 3a90 	vmov	s15, r3
 8025836:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802583a:	eeb0 7b46 	vmov.f64	d7, d6
 802583e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8025842:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8025846:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802584a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802584e:	ee16 8a90 	vmov	r8, s13
 8025852:	d508      	bpl.n	8025866 <_dtoa_r+0x146>
 8025854:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8025858:	eeb4 6b47 	vcmp.f64	d6, d7
 802585c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025860:	bf18      	it	ne
 8025862:	f108 38ff 	addne.w	r8, r8, #4294967295
 8025866:	f1b8 0f16 	cmp.w	r8, #22
 802586a:	d82b      	bhi.n	80258c4 <_dtoa_r+0x1a4>
 802586c:	495e      	ldr	r1, [pc, #376]	@ (80259e8 <_dtoa_r+0x2c8>)
 802586e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8025872:	ed91 7b00 	vldr	d7, [r1]
 8025876:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802587a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802587e:	d501      	bpl.n	8025884 <_dtoa_r+0x164>
 8025880:	f108 38ff 	add.w	r8, r8, #4294967295
 8025884:	2100      	movs	r1, #0
 8025886:	e01e      	b.n	80258c6 <_dtoa_r+0x1a6>
 8025888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802588a:	4413      	add	r3, r2
 802588c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8025890:	2920      	cmp	r1, #32
 8025892:	bfc1      	itttt	gt
 8025894:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8025898:	408e      	lslgt	r6, r1
 802589a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 802589e:	fa24 f101 	lsrgt.w	r1, r4, r1
 80258a2:	bfd6      	itet	le
 80258a4:	f1c1 0120 	rsble	r1, r1, #32
 80258a8:	4331      	orrgt	r1, r6
 80258aa:	fa04 f101 	lslle.w	r1, r4, r1
 80258ae:	ee07 1a90 	vmov	s15, r1
 80258b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80258b6:	3b01      	subs	r3, #1
 80258b8:	ee17 1a90 	vmov	r1, s15
 80258bc:	2501      	movs	r5, #1
 80258be:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80258c2:	e7a8      	b.n	8025816 <_dtoa_r+0xf6>
 80258c4:	2101      	movs	r1, #1
 80258c6:	1ad2      	subs	r2, r2, r3
 80258c8:	1e53      	subs	r3, r2, #1
 80258ca:	9306      	str	r3, [sp, #24]
 80258cc:	bf45      	ittet	mi
 80258ce:	f1c2 0301 	rsbmi	r3, r2, #1
 80258d2:	9304      	strmi	r3, [sp, #16]
 80258d4:	2300      	movpl	r3, #0
 80258d6:	2300      	movmi	r3, #0
 80258d8:	bf4c      	ite	mi
 80258da:	9306      	strmi	r3, [sp, #24]
 80258dc:	9304      	strpl	r3, [sp, #16]
 80258de:	f1b8 0f00 	cmp.w	r8, #0
 80258e2:	910c      	str	r1, [sp, #48]	@ 0x30
 80258e4:	db18      	blt.n	8025918 <_dtoa_r+0x1f8>
 80258e6:	9b06      	ldr	r3, [sp, #24]
 80258e8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80258ec:	4443      	add	r3, r8
 80258ee:	9306      	str	r3, [sp, #24]
 80258f0:	2300      	movs	r3, #0
 80258f2:	9a07      	ldr	r2, [sp, #28]
 80258f4:	2a09      	cmp	r2, #9
 80258f6:	d845      	bhi.n	8025984 <_dtoa_r+0x264>
 80258f8:	2a05      	cmp	r2, #5
 80258fa:	bfc4      	itt	gt
 80258fc:	3a04      	subgt	r2, #4
 80258fe:	9207      	strgt	r2, [sp, #28]
 8025900:	9a07      	ldr	r2, [sp, #28]
 8025902:	f1a2 0202 	sub.w	r2, r2, #2
 8025906:	bfcc      	ite	gt
 8025908:	2400      	movgt	r4, #0
 802590a:	2401      	movle	r4, #1
 802590c:	2a03      	cmp	r2, #3
 802590e:	d844      	bhi.n	802599a <_dtoa_r+0x27a>
 8025910:	e8df f002 	tbb	[pc, r2]
 8025914:	0b173634 	.word	0x0b173634
 8025918:	9b04      	ldr	r3, [sp, #16]
 802591a:	2200      	movs	r2, #0
 802591c:	eba3 0308 	sub.w	r3, r3, r8
 8025920:	9304      	str	r3, [sp, #16]
 8025922:	920a      	str	r2, [sp, #40]	@ 0x28
 8025924:	f1c8 0300 	rsb	r3, r8, #0
 8025928:	e7e3      	b.n	80258f2 <_dtoa_r+0x1d2>
 802592a:	2201      	movs	r2, #1
 802592c:	9208      	str	r2, [sp, #32]
 802592e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025930:	eb08 0b02 	add.w	fp, r8, r2
 8025934:	f10b 0a01 	add.w	sl, fp, #1
 8025938:	4652      	mov	r2, sl
 802593a:	2a01      	cmp	r2, #1
 802593c:	bfb8      	it	lt
 802593e:	2201      	movlt	r2, #1
 8025940:	e006      	b.n	8025950 <_dtoa_r+0x230>
 8025942:	2201      	movs	r2, #1
 8025944:	9208      	str	r2, [sp, #32]
 8025946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025948:	2a00      	cmp	r2, #0
 802594a:	dd29      	ble.n	80259a0 <_dtoa_r+0x280>
 802594c:	4693      	mov	fp, r2
 802594e:	4692      	mov	sl, r2
 8025950:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8025954:	2100      	movs	r1, #0
 8025956:	2004      	movs	r0, #4
 8025958:	f100 0614 	add.w	r6, r0, #20
 802595c:	4296      	cmp	r6, r2
 802595e:	d926      	bls.n	80259ae <_dtoa_r+0x28e>
 8025960:	6079      	str	r1, [r7, #4]
 8025962:	4648      	mov	r0, r9
 8025964:	9305      	str	r3, [sp, #20]
 8025966:	f000 fd39 	bl	80263dc <_Balloc>
 802596a:	9b05      	ldr	r3, [sp, #20]
 802596c:	4607      	mov	r7, r0
 802596e:	2800      	cmp	r0, #0
 8025970:	d13e      	bne.n	80259f0 <_dtoa_r+0x2d0>
 8025972:	4b1e      	ldr	r3, [pc, #120]	@ (80259ec <_dtoa_r+0x2cc>)
 8025974:	4602      	mov	r2, r0
 8025976:	f240 11af 	movw	r1, #431	@ 0x1af
 802597a:	e6ea      	b.n	8025752 <_dtoa_r+0x32>
 802597c:	2200      	movs	r2, #0
 802597e:	e7e1      	b.n	8025944 <_dtoa_r+0x224>
 8025980:	2200      	movs	r2, #0
 8025982:	e7d3      	b.n	802592c <_dtoa_r+0x20c>
 8025984:	2401      	movs	r4, #1
 8025986:	2200      	movs	r2, #0
 8025988:	e9cd 2407 	strd	r2, r4, [sp, #28]
 802598c:	f04f 3bff 	mov.w	fp, #4294967295
 8025990:	2100      	movs	r1, #0
 8025992:	46da      	mov	sl, fp
 8025994:	2212      	movs	r2, #18
 8025996:	9109      	str	r1, [sp, #36]	@ 0x24
 8025998:	e7da      	b.n	8025950 <_dtoa_r+0x230>
 802599a:	2201      	movs	r2, #1
 802599c:	9208      	str	r2, [sp, #32]
 802599e:	e7f5      	b.n	802598c <_dtoa_r+0x26c>
 80259a0:	f04f 0b01 	mov.w	fp, #1
 80259a4:	46da      	mov	sl, fp
 80259a6:	465a      	mov	r2, fp
 80259a8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80259ac:	e7d0      	b.n	8025950 <_dtoa_r+0x230>
 80259ae:	3101      	adds	r1, #1
 80259b0:	0040      	lsls	r0, r0, #1
 80259b2:	e7d1      	b.n	8025958 <_dtoa_r+0x238>
 80259b4:	f3af 8000 	nop.w
 80259b8:	636f4361 	.word	0x636f4361
 80259bc:	3fd287a7 	.word	0x3fd287a7
 80259c0:	8b60c8b3 	.word	0x8b60c8b3
 80259c4:	3fc68a28 	.word	0x3fc68a28
 80259c8:	509f79fb 	.word	0x509f79fb
 80259cc:	3fd34413 	.word	0x3fd34413
 80259d0:	0802c23d 	.word	0x0802c23d
 80259d4:	0802c254 	.word	0x0802c254
 80259d8:	7ff00000 	.word	0x7ff00000
 80259dc:	0802c239 	.word	0x0802c239
 80259e0:	0802c340 	.word	0x0802c340
 80259e4:	0802c33f 	.word	0x0802c33f
 80259e8:	0802c420 	.word	0x0802c420
 80259ec:	0802c2ac 	.word	0x0802c2ac
 80259f0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80259f4:	f1ba 0f0e 	cmp.w	sl, #14
 80259f8:	6010      	str	r0, [r2, #0]
 80259fa:	d86e      	bhi.n	8025ada <_dtoa_r+0x3ba>
 80259fc:	2c00      	cmp	r4, #0
 80259fe:	d06c      	beq.n	8025ada <_dtoa_r+0x3ba>
 8025a00:	f1b8 0f00 	cmp.w	r8, #0
 8025a04:	f340 80b4 	ble.w	8025b70 <_dtoa_r+0x450>
 8025a08:	4ac8      	ldr	r2, [pc, #800]	@ (8025d2c <_dtoa_r+0x60c>)
 8025a0a:	f008 010f 	and.w	r1, r8, #15
 8025a0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8025a12:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8025a16:	ed92 7b00 	vldr	d7, [r2]
 8025a1a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8025a1e:	f000 809b 	beq.w	8025b58 <_dtoa_r+0x438>
 8025a22:	4ac3      	ldr	r2, [pc, #780]	@ (8025d30 <_dtoa_r+0x610>)
 8025a24:	ed92 6b08 	vldr	d6, [r2, #32]
 8025a28:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8025a2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8025a30:	f001 010f 	and.w	r1, r1, #15
 8025a34:	2203      	movs	r2, #3
 8025a36:	48be      	ldr	r0, [pc, #760]	@ (8025d30 <_dtoa_r+0x610>)
 8025a38:	2900      	cmp	r1, #0
 8025a3a:	f040 808f 	bne.w	8025b5c <_dtoa_r+0x43c>
 8025a3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8025a42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8025a46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025a4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025a4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025a50:	2900      	cmp	r1, #0
 8025a52:	f000 80b3 	beq.w	8025bbc <_dtoa_r+0x49c>
 8025a56:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8025a5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8025a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a62:	f140 80ab 	bpl.w	8025bbc <_dtoa_r+0x49c>
 8025a66:	f1ba 0f00 	cmp.w	sl, #0
 8025a6a:	f000 80a7 	beq.w	8025bbc <_dtoa_r+0x49c>
 8025a6e:	f1bb 0f00 	cmp.w	fp, #0
 8025a72:	dd30      	ble.n	8025ad6 <_dtoa_r+0x3b6>
 8025a74:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8025a78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025a7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025a80:	f108 31ff 	add.w	r1, r8, #4294967295
 8025a84:	9105      	str	r1, [sp, #20]
 8025a86:	3201      	adds	r2, #1
 8025a88:	465c      	mov	r4, fp
 8025a8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8025a8e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8025a92:	ee07 2a90 	vmov	s15, r2
 8025a96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025a9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8025a9e:	ee15 2a90 	vmov	r2, s11
 8025aa2:	ec51 0b15 	vmov	r0, r1, d5
 8025aa6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8025aaa:	2c00      	cmp	r4, #0
 8025aac:	f040 808a 	bne.w	8025bc4 <_dtoa_r+0x4a4>
 8025ab0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8025ab4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8025ab8:	ec41 0b17 	vmov	d7, r0, r1
 8025abc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ac4:	f300 826a 	bgt.w	8025f9c <_dtoa_r+0x87c>
 8025ac8:	eeb1 7b47 	vneg.f64	d7, d7
 8025acc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ad4:	d423      	bmi.n	8025b1e <_dtoa_r+0x3fe>
 8025ad6:	ed8d 8b02 	vstr	d8, [sp, #8]
 8025ada:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025adc:	2a00      	cmp	r2, #0
 8025ade:	f2c0 8129 	blt.w	8025d34 <_dtoa_r+0x614>
 8025ae2:	f1b8 0f0e 	cmp.w	r8, #14
 8025ae6:	f300 8125 	bgt.w	8025d34 <_dtoa_r+0x614>
 8025aea:	4b90      	ldr	r3, [pc, #576]	@ (8025d2c <_dtoa_r+0x60c>)
 8025aec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8025af0:	ed93 6b00 	vldr	d6, [r3]
 8025af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025af6:	2b00      	cmp	r3, #0
 8025af8:	f280 80c8 	bge.w	8025c8c <_dtoa_r+0x56c>
 8025afc:	f1ba 0f00 	cmp.w	sl, #0
 8025b00:	f300 80c4 	bgt.w	8025c8c <_dtoa_r+0x56c>
 8025b04:	d10b      	bne.n	8025b1e <_dtoa_r+0x3fe>
 8025b06:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8025b0a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8025b0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025b12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b1a:	f2c0 823c 	blt.w	8025f96 <_dtoa_r+0x876>
 8025b1e:	2400      	movs	r4, #0
 8025b20:	4625      	mov	r5, r4
 8025b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b24:	43db      	mvns	r3, r3
 8025b26:	9305      	str	r3, [sp, #20]
 8025b28:	463e      	mov	r6, r7
 8025b2a:	f04f 0800 	mov.w	r8, #0
 8025b2e:	4621      	mov	r1, r4
 8025b30:	4648      	mov	r0, r9
 8025b32:	f000 fc93 	bl	802645c <_Bfree>
 8025b36:	2d00      	cmp	r5, #0
 8025b38:	f000 80a2 	beq.w	8025c80 <_dtoa_r+0x560>
 8025b3c:	f1b8 0f00 	cmp.w	r8, #0
 8025b40:	d005      	beq.n	8025b4e <_dtoa_r+0x42e>
 8025b42:	45a8      	cmp	r8, r5
 8025b44:	d003      	beq.n	8025b4e <_dtoa_r+0x42e>
 8025b46:	4641      	mov	r1, r8
 8025b48:	4648      	mov	r0, r9
 8025b4a:	f000 fc87 	bl	802645c <_Bfree>
 8025b4e:	4629      	mov	r1, r5
 8025b50:	4648      	mov	r0, r9
 8025b52:	f000 fc83 	bl	802645c <_Bfree>
 8025b56:	e093      	b.n	8025c80 <_dtoa_r+0x560>
 8025b58:	2202      	movs	r2, #2
 8025b5a:	e76c      	b.n	8025a36 <_dtoa_r+0x316>
 8025b5c:	07cc      	lsls	r4, r1, #31
 8025b5e:	d504      	bpl.n	8025b6a <_dtoa_r+0x44a>
 8025b60:	ed90 6b00 	vldr	d6, [r0]
 8025b64:	3201      	adds	r2, #1
 8025b66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025b6a:	1049      	asrs	r1, r1, #1
 8025b6c:	3008      	adds	r0, #8
 8025b6e:	e763      	b.n	8025a38 <_dtoa_r+0x318>
 8025b70:	d022      	beq.n	8025bb8 <_dtoa_r+0x498>
 8025b72:	f1c8 0100 	rsb	r1, r8, #0
 8025b76:	4a6d      	ldr	r2, [pc, #436]	@ (8025d2c <_dtoa_r+0x60c>)
 8025b78:	f001 000f 	and.w	r0, r1, #15
 8025b7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8025b80:	ed92 7b00 	vldr	d7, [r2]
 8025b84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8025b88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025b8c:	4868      	ldr	r0, [pc, #416]	@ (8025d30 <_dtoa_r+0x610>)
 8025b8e:	1109      	asrs	r1, r1, #4
 8025b90:	2400      	movs	r4, #0
 8025b92:	2202      	movs	r2, #2
 8025b94:	b929      	cbnz	r1, 8025ba2 <_dtoa_r+0x482>
 8025b96:	2c00      	cmp	r4, #0
 8025b98:	f43f af57 	beq.w	8025a4a <_dtoa_r+0x32a>
 8025b9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025ba0:	e753      	b.n	8025a4a <_dtoa_r+0x32a>
 8025ba2:	07ce      	lsls	r6, r1, #31
 8025ba4:	d505      	bpl.n	8025bb2 <_dtoa_r+0x492>
 8025ba6:	ed90 6b00 	vldr	d6, [r0]
 8025baa:	3201      	adds	r2, #1
 8025bac:	2401      	movs	r4, #1
 8025bae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025bb2:	1049      	asrs	r1, r1, #1
 8025bb4:	3008      	adds	r0, #8
 8025bb6:	e7ed      	b.n	8025b94 <_dtoa_r+0x474>
 8025bb8:	2202      	movs	r2, #2
 8025bba:	e746      	b.n	8025a4a <_dtoa_r+0x32a>
 8025bbc:	f8cd 8014 	str.w	r8, [sp, #20]
 8025bc0:	4654      	mov	r4, sl
 8025bc2:	e762      	b.n	8025a8a <_dtoa_r+0x36a>
 8025bc4:	4a59      	ldr	r2, [pc, #356]	@ (8025d2c <_dtoa_r+0x60c>)
 8025bc6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8025bca:	ed12 4b02 	vldr	d4, [r2, #-8]
 8025bce:	9a08      	ldr	r2, [sp, #32]
 8025bd0:	ec41 0b17 	vmov	d7, r0, r1
 8025bd4:	443c      	add	r4, r7
 8025bd6:	b34a      	cbz	r2, 8025c2c <_dtoa_r+0x50c>
 8025bd8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8025bdc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8025be0:	463e      	mov	r6, r7
 8025be2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8025be6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8025bea:	ee35 7b47 	vsub.f64	d7, d5, d7
 8025bee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8025bf2:	ee14 2a90 	vmov	r2, s9
 8025bf6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025bfa:	3230      	adds	r2, #48	@ 0x30
 8025bfc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8025c00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c08:	f806 2b01 	strb.w	r2, [r6], #1
 8025c0c:	d438      	bmi.n	8025c80 <_dtoa_r+0x560>
 8025c0e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8025c12:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8025c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c1a:	d46e      	bmi.n	8025cfa <_dtoa_r+0x5da>
 8025c1c:	42a6      	cmp	r6, r4
 8025c1e:	f43f af5a 	beq.w	8025ad6 <_dtoa_r+0x3b6>
 8025c22:	ee27 7b03 	vmul.f64	d7, d7, d3
 8025c26:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025c2a:	e7e0      	b.n	8025bee <_dtoa_r+0x4ce>
 8025c2c:	4621      	mov	r1, r4
 8025c2e:	463e      	mov	r6, r7
 8025c30:	ee27 7b04 	vmul.f64	d7, d7, d4
 8025c34:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8025c38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8025c3c:	ee14 2a90 	vmov	r2, s9
 8025c40:	3230      	adds	r2, #48	@ 0x30
 8025c42:	f806 2b01 	strb.w	r2, [r6], #1
 8025c46:	42a6      	cmp	r6, r4
 8025c48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025c4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8025c50:	d119      	bne.n	8025c86 <_dtoa_r+0x566>
 8025c52:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8025c56:	ee37 4b05 	vadd.f64	d4, d7, d5
 8025c5a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8025c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c62:	dc4a      	bgt.n	8025cfa <_dtoa_r+0x5da>
 8025c64:	ee35 5b47 	vsub.f64	d5, d5, d7
 8025c68:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8025c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c70:	f57f af31 	bpl.w	8025ad6 <_dtoa_r+0x3b6>
 8025c74:	460e      	mov	r6, r1
 8025c76:	3901      	subs	r1, #1
 8025c78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8025c7c:	2b30      	cmp	r3, #48	@ 0x30
 8025c7e:	d0f9      	beq.n	8025c74 <_dtoa_r+0x554>
 8025c80:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8025c84:	e027      	b.n	8025cd6 <_dtoa_r+0x5b6>
 8025c86:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025c8a:	e7d5      	b.n	8025c38 <_dtoa_r+0x518>
 8025c8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025c90:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8025c94:	463e      	mov	r6, r7
 8025c96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8025c9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8025c9e:	ee15 3a10 	vmov	r3, s10
 8025ca2:	3330      	adds	r3, #48	@ 0x30
 8025ca4:	f806 3b01 	strb.w	r3, [r6], #1
 8025ca8:	1bf3      	subs	r3, r6, r7
 8025caa:	459a      	cmp	sl, r3
 8025cac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8025cb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8025cb4:	d132      	bne.n	8025d1c <_dtoa_r+0x5fc>
 8025cb6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8025cba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8025cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025cc2:	dc18      	bgt.n	8025cf6 <_dtoa_r+0x5d6>
 8025cc4:	eeb4 7b46 	vcmp.f64	d7, d6
 8025cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ccc:	d103      	bne.n	8025cd6 <_dtoa_r+0x5b6>
 8025cce:	ee15 3a10 	vmov	r3, s10
 8025cd2:	07db      	lsls	r3, r3, #31
 8025cd4:	d40f      	bmi.n	8025cf6 <_dtoa_r+0x5d6>
 8025cd6:	9901      	ldr	r1, [sp, #4]
 8025cd8:	4648      	mov	r0, r9
 8025cda:	f000 fbbf 	bl	802645c <_Bfree>
 8025cde:	2300      	movs	r3, #0
 8025ce0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025ce2:	7033      	strb	r3, [r6, #0]
 8025ce4:	f108 0301 	add.w	r3, r8, #1
 8025ce8:	6013      	str	r3, [r2, #0]
 8025cea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025cec:	2b00      	cmp	r3, #0
 8025cee:	f000 824b 	beq.w	8026188 <_dtoa_r+0xa68>
 8025cf2:	601e      	str	r6, [r3, #0]
 8025cf4:	e248      	b.n	8026188 <_dtoa_r+0xa68>
 8025cf6:	f8cd 8014 	str.w	r8, [sp, #20]
 8025cfa:	4633      	mov	r3, r6
 8025cfc:	461e      	mov	r6, r3
 8025cfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025d02:	2a39      	cmp	r2, #57	@ 0x39
 8025d04:	d106      	bne.n	8025d14 <_dtoa_r+0x5f4>
 8025d06:	429f      	cmp	r7, r3
 8025d08:	d1f8      	bne.n	8025cfc <_dtoa_r+0x5dc>
 8025d0a:	9a05      	ldr	r2, [sp, #20]
 8025d0c:	3201      	adds	r2, #1
 8025d0e:	9205      	str	r2, [sp, #20]
 8025d10:	2230      	movs	r2, #48	@ 0x30
 8025d12:	703a      	strb	r2, [r7, #0]
 8025d14:	781a      	ldrb	r2, [r3, #0]
 8025d16:	3201      	adds	r2, #1
 8025d18:	701a      	strb	r2, [r3, #0]
 8025d1a:	e7b1      	b.n	8025c80 <_dtoa_r+0x560>
 8025d1c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8025d20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d28:	d1b5      	bne.n	8025c96 <_dtoa_r+0x576>
 8025d2a:	e7d4      	b.n	8025cd6 <_dtoa_r+0x5b6>
 8025d2c:	0802c420 	.word	0x0802c420
 8025d30:	0802c3f8 	.word	0x0802c3f8
 8025d34:	9908      	ldr	r1, [sp, #32]
 8025d36:	2900      	cmp	r1, #0
 8025d38:	f000 80e9 	beq.w	8025f0e <_dtoa_r+0x7ee>
 8025d3c:	9907      	ldr	r1, [sp, #28]
 8025d3e:	2901      	cmp	r1, #1
 8025d40:	f300 80cb 	bgt.w	8025eda <_dtoa_r+0x7ba>
 8025d44:	2d00      	cmp	r5, #0
 8025d46:	f000 80c4 	beq.w	8025ed2 <_dtoa_r+0x7b2>
 8025d4a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8025d4e:	9e04      	ldr	r6, [sp, #16]
 8025d50:	461c      	mov	r4, r3
 8025d52:	9305      	str	r3, [sp, #20]
 8025d54:	9b04      	ldr	r3, [sp, #16]
 8025d56:	4413      	add	r3, r2
 8025d58:	9304      	str	r3, [sp, #16]
 8025d5a:	9b06      	ldr	r3, [sp, #24]
 8025d5c:	2101      	movs	r1, #1
 8025d5e:	4413      	add	r3, r2
 8025d60:	4648      	mov	r0, r9
 8025d62:	9306      	str	r3, [sp, #24]
 8025d64:	f000 fc78 	bl	8026658 <__i2b>
 8025d68:	9b05      	ldr	r3, [sp, #20]
 8025d6a:	4605      	mov	r5, r0
 8025d6c:	b166      	cbz	r6, 8025d88 <_dtoa_r+0x668>
 8025d6e:	9a06      	ldr	r2, [sp, #24]
 8025d70:	2a00      	cmp	r2, #0
 8025d72:	dd09      	ble.n	8025d88 <_dtoa_r+0x668>
 8025d74:	42b2      	cmp	r2, r6
 8025d76:	9904      	ldr	r1, [sp, #16]
 8025d78:	bfa8      	it	ge
 8025d7a:	4632      	movge	r2, r6
 8025d7c:	1a89      	subs	r1, r1, r2
 8025d7e:	9104      	str	r1, [sp, #16]
 8025d80:	9906      	ldr	r1, [sp, #24]
 8025d82:	1ab6      	subs	r6, r6, r2
 8025d84:	1a8a      	subs	r2, r1, r2
 8025d86:	9206      	str	r2, [sp, #24]
 8025d88:	b30b      	cbz	r3, 8025dce <_dtoa_r+0x6ae>
 8025d8a:	9a08      	ldr	r2, [sp, #32]
 8025d8c:	2a00      	cmp	r2, #0
 8025d8e:	f000 80c5 	beq.w	8025f1c <_dtoa_r+0x7fc>
 8025d92:	2c00      	cmp	r4, #0
 8025d94:	f000 80bf 	beq.w	8025f16 <_dtoa_r+0x7f6>
 8025d98:	4629      	mov	r1, r5
 8025d9a:	4622      	mov	r2, r4
 8025d9c:	4648      	mov	r0, r9
 8025d9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025da0:	f000 fd12 	bl	80267c8 <__pow5mult>
 8025da4:	9a01      	ldr	r2, [sp, #4]
 8025da6:	4601      	mov	r1, r0
 8025da8:	4605      	mov	r5, r0
 8025daa:	4648      	mov	r0, r9
 8025dac:	f000 fc6a 	bl	8026684 <__multiply>
 8025db0:	9901      	ldr	r1, [sp, #4]
 8025db2:	9005      	str	r0, [sp, #20]
 8025db4:	4648      	mov	r0, r9
 8025db6:	f000 fb51 	bl	802645c <_Bfree>
 8025dba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025dbc:	1b1b      	subs	r3, r3, r4
 8025dbe:	f000 80b0 	beq.w	8025f22 <_dtoa_r+0x802>
 8025dc2:	9905      	ldr	r1, [sp, #20]
 8025dc4:	461a      	mov	r2, r3
 8025dc6:	4648      	mov	r0, r9
 8025dc8:	f000 fcfe 	bl	80267c8 <__pow5mult>
 8025dcc:	9001      	str	r0, [sp, #4]
 8025dce:	2101      	movs	r1, #1
 8025dd0:	4648      	mov	r0, r9
 8025dd2:	f000 fc41 	bl	8026658 <__i2b>
 8025dd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025dd8:	4604      	mov	r4, r0
 8025dda:	2b00      	cmp	r3, #0
 8025ddc:	f000 81da 	beq.w	8026194 <_dtoa_r+0xa74>
 8025de0:	461a      	mov	r2, r3
 8025de2:	4601      	mov	r1, r0
 8025de4:	4648      	mov	r0, r9
 8025de6:	f000 fcef 	bl	80267c8 <__pow5mult>
 8025dea:	9b07      	ldr	r3, [sp, #28]
 8025dec:	2b01      	cmp	r3, #1
 8025dee:	4604      	mov	r4, r0
 8025df0:	f300 80a0 	bgt.w	8025f34 <_dtoa_r+0x814>
 8025df4:	9b02      	ldr	r3, [sp, #8]
 8025df6:	2b00      	cmp	r3, #0
 8025df8:	f040 8096 	bne.w	8025f28 <_dtoa_r+0x808>
 8025dfc:	9b03      	ldr	r3, [sp, #12]
 8025dfe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8025e02:	2a00      	cmp	r2, #0
 8025e04:	f040 8092 	bne.w	8025f2c <_dtoa_r+0x80c>
 8025e08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8025e0c:	0d12      	lsrs	r2, r2, #20
 8025e0e:	0512      	lsls	r2, r2, #20
 8025e10:	2a00      	cmp	r2, #0
 8025e12:	f000 808d 	beq.w	8025f30 <_dtoa_r+0x810>
 8025e16:	9b04      	ldr	r3, [sp, #16]
 8025e18:	3301      	adds	r3, #1
 8025e1a:	9304      	str	r3, [sp, #16]
 8025e1c:	9b06      	ldr	r3, [sp, #24]
 8025e1e:	3301      	adds	r3, #1
 8025e20:	9306      	str	r3, [sp, #24]
 8025e22:	2301      	movs	r3, #1
 8025e24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025e26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025e28:	2b00      	cmp	r3, #0
 8025e2a:	f000 81b9 	beq.w	80261a0 <_dtoa_r+0xa80>
 8025e2e:	6922      	ldr	r2, [r4, #16]
 8025e30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8025e34:	6910      	ldr	r0, [r2, #16]
 8025e36:	f000 fbc3 	bl	80265c0 <__hi0bits>
 8025e3a:	f1c0 0020 	rsb	r0, r0, #32
 8025e3e:	9b06      	ldr	r3, [sp, #24]
 8025e40:	4418      	add	r0, r3
 8025e42:	f010 001f 	ands.w	r0, r0, #31
 8025e46:	f000 8081 	beq.w	8025f4c <_dtoa_r+0x82c>
 8025e4a:	f1c0 0220 	rsb	r2, r0, #32
 8025e4e:	2a04      	cmp	r2, #4
 8025e50:	dd73      	ble.n	8025f3a <_dtoa_r+0x81a>
 8025e52:	9b04      	ldr	r3, [sp, #16]
 8025e54:	f1c0 001c 	rsb	r0, r0, #28
 8025e58:	4403      	add	r3, r0
 8025e5a:	9304      	str	r3, [sp, #16]
 8025e5c:	9b06      	ldr	r3, [sp, #24]
 8025e5e:	4406      	add	r6, r0
 8025e60:	4403      	add	r3, r0
 8025e62:	9306      	str	r3, [sp, #24]
 8025e64:	9b04      	ldr	r3, [sp, #16]
 8025e66:	2b00      	cmp	r3, #0
 8025e68:	dd05      	ble.n	8025e76 <_dtoa_r+0x756>
 8025e6a:	9901      	ldr	r1, [sp, #4]
 8025e6c:	461a      	mov	r2, r3
 8025e6e:	4648      	mov	r0, r9
 8025e70:	f000 fd04 	bl	802687c <__lshift>
 8025e74:	9001      	str	r0, [sp, #4]
 8025e76:	9b06      	ldr	r3, [sp, #24]
 8025e78:	2b00      	cmp	r3, #0
 8025e7a:	dd05      	ble.n	8025e88 <_dtoa_r+0x768>
 8025e7c:	4621      	mov	r1, r4
 8025e7e:	461a      	mov	r2, r3
 8025e80:	4648      	mov	r0, r9
 8025e82:	f000 fcfb 	bl	802687c <__lshift>
 8025e86:	4604      	mov	r4, r0
 8025e88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e8a:	2b00      	cmp	r3, #0
 8025e8c:	d060      	beq.n	8025f50 <_dtoa_r+0x830>
 8025e8e:	9801      	ldr	r0, [sp, #4]
 8025e90:	4621      	mov	r1, r4
 8025e92:	f000 fd5f 	bl	8026954 <__mcmp>
 8025e96:	2800      	cmp	r0, #0
 8025e98:	da5a      	bge.n	8025f50 <_dtoa_r+0x830>
 8025e9a:	f108 33ff 	add.w	r3, r8, #4294967295
 8025e9e:	9305      	str	r3, [sp, #20]
 8025ea0:	9901      	ldr	r1, [sp, #4]
 8025ea2:	2300      	movs	r3, #0
 8025ea4:	220a      	movs	r2, #10
 8025ea6:	4648      	mov	r0, r9
 8025ea8:	f000 fafa 	bl	80264a0 <__multadd>
 8025eac:	9b08      	ldr	r3, [sp, #32]
 8025eae:	9001      	str	r0, [sp, #4]
 8025eb0:	2b00      	cmp	r3, #0
 8025eb2:	f000 8177 	beq.w	80261a4 <_dtoa_r+0xa84>
 8025eb6:	4629      	mov	r1, r5
 8025eb8:	2300      	movs	r3, #0
 8025eba:	220a      	movs	r2, #10
 8025ebc:	4648      	mov	r0, r9
 8025ebe:	f000 faef 	bl	80264a0 <__multadd>
 8025ec2:	f1bb 0f00 	cmp.w	fp, #0
 8025ec6:	4605      	mov	r5, r0
 8025ec8:	dc6e      	bgt.n	8025fa8 <_dtoa_r+0x888>
 8025eca:	9b07      	ldr	r3, [sp, #28]
 8025ecc:	2b02      	cmp	r3, #2
 8025ece:	dc48      	bgt.n	8025f62 <_dtoa_r+0x842>
 8025ed0:	e06a      	b.n	8025fa8 <_dtoa_r+0x888>
 8025ed2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025ed4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8025ed8:	e739      	b.n	8025d4e <_dtoa_r+0x62e>
 8025eda:	f10a 34ff 	add.w	r4, sl, #4294967295
 8025ede:	42a3      	cmp	r3, r4
 8025ee0:	db07      	blt.n	8025ef2 <_dtoa_r+0x7d2>
 8025ee2:	f1ba 0f00 	cmp.w	sl, #0
 8025ee6:	eba3 0404 	sub.w	r4, r3, r4
 8025eea:	db0b      	blt.n	8025f04 <_dtoa_r+0x7e4>
 8025eec:	9e04      	ldr	r6, [sp, #16]
 8025eee:	4652      	mov	r2, sl
 8025ef0:	e72f      	b.n	8025d52 <_dtoa_r+0x632>
 8025ef2:	1ae2      	subs	r2, r4, r3
 8025ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025ef6:	9e04      	ldr	r6, [sp, #16]
 8025ef8:	4413      	add	r3, r2
 8025efa:	930a      	str	r3, [sp, #40]	@ 0x28
 8025efc:	4652      	mov	r2, sl
 8025efe:	4623      	mov	r3, r4
 8025f00:	2400      	movs	r4, #0
 8025f02:	e726      	b.n	8025d52 <_dtoa_r+0x632>
 8025f04:	9a04      	ldr	r2, [sp, #16]
 8025f06:	eba2 060a 	sub.w	r6, r2, sl
 8025f0a:	2200      	movs	r2, #0
 8025f0c:	e721      	b.n	8025d52 <_dtoa_r+0x632>
 8025f0e:	9e04      	ldr	r6, [sp, #16]
 8025f10:	9d08      	ldr	r5, [sp, #32]
 8025f12:	461c      	mov	r4, r3
 8025f14:	e72a      	b.n	8025d6c <_dtoa_r+0x64c>
 8025f16:	9a01      	ldr	r2, [sp, #4]
 8025f18:	9205      	str	r2, [sp, #20]
 8025f1a:	e752      	b.n	8025dc2 <_dtoa_r+0x6a2>
 8025f1c:	9901      	ldr	r1, [sp, #4]
 8025f1e:	461a      	mov	r2, r3
 8025f20:	e751      	b.n	8025dc6 <_dtoa_r+0x6a6>
 8025f22:	9b05      	ldr	r3, [sp, #20]
 8025f24:	9301      	str	r3, [sp, #4]
 8025f26:	e752      	b.n	8025dce <_dtoa_r+0x6ae>
 8025f28:	2300      	movs	r3, #0
 8025f2a:	e77b      	b.n	8025e24 <_dtoa_r+0x704>
 8025f2c:	9b02      	ldr	r3, [sp, #8]
 8025f2e:	e779      	b.n	8025e24 <_dtoa_r+0x704>
 8025f30:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025f32:	e778      	b.n	8025e26 <_dtoa_r+0x706>
 8025f34:	2300      	movs	r3, #0
 8025f36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025f38:	e779      	b.n	8025e2e <_dtoa_r+0x70e>
 8025f3a:	d093      	beq.n	8025e64 <_dtoa_r+0x744>
 8025f3c:	9b04      	ldr	r3, [sp, #16]
 8025f3e:	321c      	adds	r2, #28
 8025f40:	4413      	add	r3, r2
 8025f42:	9304      	str	r3, [sp, #16]
 8025f44:	9b06      	ldr	r3, [sp, #24]
 8025f46:	4416      	add	r6, r2
 8025f48:	4413      	add	r3, r2
 8025f4a:	e78a      	b.n	8025e62 <_dtoa_r+0x742>
 8025f4c:	4602      	mov	r2, r0
 8025f4e:	e7f5      	b.n	8025f3c <_dtoa_r+0x81c>
 8025f50:	f1ba 0f00 	cmp.w	sl, #0
 8025f54:	f8cd 8014 	str.w	r8, [sp, #20]
 8025f58:	46d3      	mov	fp, sl
 8025f5a:	dc21      	bgt.n	8025fa0 <_dtoa_r+0x880>
 8025f5c:	9b07      	ldr	r3, [sp, #28]
 8025f5e:	2b02      	cmp	r3, #2
 8025f60:	dd1e      	ble.n	8025fa0 <_dtoa_r+0x880>
 8025f62:	f1bb 0f00 	cmp.w	fp, #0
 8025f66:	f47f addc 	bne.w	8025b22 <_dtoa_r+0x402>
 8025f6a:	4621      	mov	r1, r4
 8025f6c:	465b      	mov	r3, fp
 8025f6e:	2205      	movs	r2, #5
 8025f70:	4648      	mov	r0, r9
 8025f72:	f000 fa95 	bl	80264a0 <__multadd>
 8025f76:	4601      	mov	r1, r0
 8025f78:	4604      	mov	r4, r0
 8025f7a:	9801      	ldr	r0, [sp, #4]
 8025f7c:	f000 fcea 	bl	8026954 <__mcmp>
 8025f80:	2800      	cmp	r0, #0
 8025f82:	f77f adce 	ble.w	8025b22 <_dtoa_r+0x402>
 8025f86:	463e      	mov	r6, r7
 8025f88:	2331      	movs	r3, #49	@ 0x31
 8025f8a:	f806 3b01 	strb.w	r3, [r6], #1
 8025f8e:	9b05      	ldr	r3, [sp, #20]
 8025f90:	3301      	adds	r3, #1
 8025f92:	9305      	str	r3, [sp, #20]
 8025f94:	e5c9      	b.n	8025b2a <_dtoa_r+0x40a>
 8025f96:	f8cd 8014 	str.w	r8, [sp, #20]
 8025f9a:	4654      	mov	r4, sl
 8025f9c:	4625      	mov	r5, r4
 8025f9e:	e7f2      	b.n	8025f86 <_dtoa_r+0x866>
 8025fa0:	9b08      	ldr	r3, [sp, #32]
 8025fa2:	2b00      	cmp	r3, #0
 8025fa4:	f000 8102 	beq.w	80261ac <_dtoa_r+0xa8c>
 8025fa8:	2e00      	cmp	r6, #0
 8025faa:	dd05      	ble.n	8025fb8 <_dtoa_r+0x898>
 8025fac:	4629      	mov	r1, r5
 8025fae:	4632      	mov	r2, r6
 8025fb0:	4648      	mov	r0, r9
 8025fb2:	f000 fc63 	bl	802687c <__lshift>
 8025fb6:	4605      	mov	r5, r0
 8025fb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025fba:	2b00      	cmp	r3, #0
 8025fbc:	d058      	beq.n	8026070 <_dtoa_r+0x950>
 8025fbe:	6869      	ldr	r1, [r5, #4]
 8025fc0:	4648      	mov	r0, r9
 8025fc2:	f000 fa0b 	bl	80263dc <_Balloc>
 8025fc6:	4606      	mov	r6, r0
 8025fc8:	b928      	cbnz	r0, 8025fd6 <_dtoa_r+0x8b6>
 8025fca:	4b82      	ldr	r3, [pc, #520]	@ (80261d4 <_dtoa_r+0xab4>)
 8025fcc:	4602      	mov	r2, r0
 8025fce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8025fd2:	f7ff bbbe 	b.w	8025752 <_dtoa_r+0x32>
 8025fd6:	692a      	ldr	r2, [r5, #16]
 8025fd8:	3202      	adds	r2, #2
 8025fda:	0092      	lsls	r2, r2, #2
 8025fdc:	f105 010c 	add.w	r1, r5, #12
 8025fe0:	300c      	adds	r0, #12
 8025fe2:	f7ff fafe 	bl	80255e2 <memcpy>
 8025fe6:	2201      	movs	r2, #1
 8025fe8:	4631      	mov	r1, r6
 8025fea:	4648      	mov	r0, r9
 8025fec:	f000 fc46 	bl	802687c <__lshift>
 8025ff0:	1c7b      	adds	r3, r7, #1
 8025ff2:	9304      	str	r3, [sp, #16]
 8025ff4:	eb07 030b 	add.w	r3, r7, fp
 8025ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8025ffa:	9b02      	ldr	r3, [sp, #8]
 8025ffc:	f003 0301 	and.w	r3, r3, #1
 8026000:	46a8      	mov	r8, r5
 8026002:	9308      	str	r3, [sp, #32]
 8026004:	4605      	mov	r5, r0
 8026006:	9b04      	ldr	r3, [sp, #16]
 8026008:	9801      	ldr	r0, [sp, #4]
 802600a:	4621      	mov	r1, r4
 802600c:	f103 3bff 	add.w	fp, r3, #4294967295
 8026010:	f7ff fafc 	bl	802560c <quorem>
 8026014:	4641      	mov	r1, r8
 8026016:	9002      	str	r0, [sp, #8]
 8026018:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802601c:	9801      	ldr	r0, [sp, #4]
 802601e:	f000 fc99 	bl	8026954 <__mcmp>
 8026022:	462a      	mov	r2, r5
 8026024:	9006      	str	r0, [sp, #24]
 8026026:	4621      	mov	r1, r4
 8026028:	4648      	mov	r0, r9
 802602a:	f000 fcaf 	bl	802698c <__mdiff>
 802602e:	68c2      	ldr	r2, [r0, #12]
 8026030:	4606      	mov	r6, r0
 8026032:	b9fa      	cbnz	r2, 8026074 <_dtoa_r+0x954>
 8026034:	4601      	mov	r1, r0
 8026036:	9801      	ldr	r0, [sp, #4]
 8026038:	f000 fc8c 	bl	8026954 <__mcmp>
 802603c:	4602      	mov	r2, r0
 802603e:	4631      	mov	r1, r6
 8026040:	4648      	mov	r0, r9
 8026042:	920a      	str	r2, [sp, #40]	@ 0x28
 8026044:	f000 fa0a 	bl	802645c <_Bfree>
 8026048:	9b07      	ldr	r3, [sp, #28]
 802604a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802604c:	9e04      	ldr	r6, [sp, #16]
 802604e:	ea42 0103 	orr.w	r1, r2, r3
 8026052:	9b08      	ldr	r3, [sp, #32]
 8026054:	4319      	orrs	r1, r3
 8026056:	d10f      	bne.n	8026078 <_dtoa_r+0x958>
 8026058:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802605c:	d028      	beq.n	80260b0 <_dtoa_r+0x990>
 802605e:	9b06      	ldr	r3, [sp, #24]
 8026060:	2b00      	cmp	r3, #0
 8026062:	dd02      	ble.n	802606a <_dtoa_r+0x94a>
 8026064:	9b02      	ldr	r3, [sp, #8]
 8026066:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 802606a:	f88b a000 	strb.w	sl, [fp]
 802606e:	e55e      	b.n	8025b2e <_dtoa_r+0x40e>
 8026070:	4628      	mov	r0, r5
 8026072:	e7bd      	b.n	8025ff0 <_dtoa_r+0x8d0>
 8026074:	2201      	movs	r2, #1
 8026076:	e7e2      	b.n	802603e <_dtoa_r+0x91e>
 8026078:	9b06      	ldr	r3, [sp, #24]
 802607a:	2b00      	cmp	r3, #0
 802607c:	db04      	blt.n	8026088 <_dtoa_r+0x968>
 802607e:	9907      	ldr	r1, [sp, #28]
 8026080:	430b      	orrs	r3, r1
 8026082:	9908      	ldr	r1, [sp, #32]
 8026084:	430b      	orrs	r3, r1
 8026086:	d120      	bne.n	80260ca <_dtoa_r+0x9aa>
 8026088:	2a00      	cmp	r2, #0
 802608a:	ddee      	ble.n	802606a <_dtoa_r+0x94a>
 802608c:	9901      	ldr	r1, [sp, #4]
 802608e:	2201      	movs	r2, #1
 8026090:	4648      	mov	r0, r9
 8026092:	f000 fbf3 	bl	802687c <__lshift>
 8026096:	4621      	mov	r1, r4
 8026098:	9001      	str	r0, [sp, #4]
 802609a:	f000 fc5b 	bl	8026954 <__mcmp>
 802609e:	2800      	cmp	r0, #0
 80260a0:	dc03      	bgt.n	80260aa <_dtoa_r+0x98a>
 80260a2:	d1e2      	bne.n	802606a <_dtoa_r+0x94a>
 80260a4:	f01a 0f01 	tst.w	sl, #1
 80260a8:	d0df      	beq.n	802606a <_dtoa_r+0x94a>
 80260aa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80260ae:	d1d9      	bne.n	8026064 <_dtoa_r+0x944>
 80260b0:	2339      	movs	r3, #57	@ 0x39
 80260b2:	f88b 3000 	strb.w	r3, [fp]
 80260b6:	4633      	mov	r3, r6
 80260b8:	461e      	mov	r6, r3
 80260ba:	3b01      	subs	r3, #1
 80260bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80260c0:	2a39      	cmp	r2, #57	@ 0x39
 80260c2:	d052      	beq.n	802616a <_dtoa_r+0xa4a>
 80260c4:	3201      	adds	r2, #1
 80260c6:	701a      	strb	r2, [r3, #0]
 80260c8:	e531      	b.n	8025b2e <_dtoa_r+0x40e>
 80260ca:	2a00      	cmp	r2, #0
 80260cc:	dd07      	ble.n	80260de <_dtoa_r+0x9be>
 80260ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80260d2:	d0ed      	beq.n	80260b0 <_dtoa_r+0x990>
 80260d4:	f10a 0301 	add.w	r3, sl, #1
 80260d8:	f88b 3000 	strb.w	r3, [fp]
 80260dc:	e527      	b.n	8025b2e <_dtoa_r+0x40e>
 80260de:	9b04      	ldr	r3, [sp, #16]
 80260e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80260e2:	f803 ac01 	strb.w	sl, [r3, #-1]
 80260e6:	4293      	cmp	r3, r2
 80260e8:	d029      	beq.n	802613e <_dtoa_r+0xa1e>
 80260ea:	9901      	ldr	r1, [sp, #4]
 80260ec:	2300      	movs	r3, #0
 80260ee:	220a      	movs	r2, #10
 80260f0:	4648      	mov	r0, r9
 80260f2:	f000 f9d5 	bl	80264a0 <__multadd>
 80260f6:	45a8      	cmp	r8, r5
 80260f8:	9001      	str	r0, [sp, #4]
 80260fa:	f04f 0300 	mov.w	r3, #0
 80260fe:	f04f 020a 	mov.w	r2, #10
 8026102:	4641      	mov	r1, r8
 8026104:	4648      	mov	r0, r9
 8026106:	d107      	bne.n	8026118 <_dtoa_r+0x9f8>
 8026108:	f000 f9ca 	bl	80264a0 <__multadd>
 802610c:	4680      	mov	r8, r0
 802610e:	4605      	mov	r5, r0
 8026110:	9b04      	ldr	r3, [sp, #16]
 8026112:	3301      	adds	r3, #1
 8026114:	9304      	str	r3, [sp, #16]
 8026116:	e776      	b.n	8026006 <_dtoa_r+0x8e6>
 8026118:	f000 f9c2 	bl	80264a0 <__multadd>
 802611c:	4629      	mov	r1, r5
 802611e:	4680      	mov	r8, r0
 8026120:	2300      	movs	r3, #0
 8026122:	220a      	movs	r2, #10
 8026124:	4648      	mov	r0, r9
 8026126:	f000 f9bb 	bl	80264a0 <__multadd>
 802612a:	4605      	mov	r5, r0
 802612c:	e7f0      	b.n	8026110 <_dtoa_r+0x9f0>
 802612e:	f1bb 0f00 	cmp.w	fp, #0
 8026132:	bfcc      	ite	gt
 8026134:	465e      	movgt	r6, fp
 8026136:	2601      	movle	r6, #1
 8026138:	443e      	add	r6, r7
 802613a:	f04f 0800 	mov.w	r8, #0
 802613e:	9901      	ldr	r1, [sp, #4]
 8026140:	2201      	movs	r2, #1
 8026142:	4648      	mov	r0, r9
 8026144:	f000 fb9a 	bl	802687c <__lshift>
 8026148:	4621      	mov	r1, r4
 802614a:	9001      	str	r0, [sp, #4]
 802614c:	f000 fc02 	bl	8026954 <__mcmp>
 8026150:	2800      	cmp	r0, #0
 8026152:	dcb0      	bgt.n	80260b6 <_dtoa_r+0x996>
 8026154:	d102      	bne.n	802615c <_dtoa_r+0xa3c>
 8026156:	f01a 0f01 	tst.w	sl, #1
 802615a:	d1ac      	bne.n	80260b6 <_dtoa_r+0x996>
 802615c:	4633      	mov	r3, r6
 802615e:	461e      	mov	r6, r3
 8026160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026164:	2a30      	cmp	r2, #48	@ 0x30
 8026166:	d0fa      	beq.n	802615e <_dtoa_r+0xa3e>
 8026168:	e4e1      	b.n	8025b2e <_dtoa_r+0x40e>
 802616a:	429f      	cmp	r7, r3
 802616c:	d1a4      	bne.n	80260b8 <_dtoa_r+0x998>
 802616e:	9b05      	ldr	r3, [sp, #20]
 8026170:	3301      	adds	r3, #1
 8026172:	9305      	str	r3, [sp, #20]
 8026174:	2331      	movs	r3, #49	@ 0x31
 8026176:	703b      	strb	r3, [r7, #0]
 8026178:	e4d9      	b.n	8025b2e <_dtoa_r+0x40e>
 802617a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802617c:	4f16      	ldr	r7, [pc, #88]	@ (80261d8 <_dtoa_r+0xab8>)
 802617e:	b11b      	cbz	r3, 8026188 <_dtoa_r+0xa68>
 8026180:	f107 0308 	add.w	r3, r7, #8
 8026184:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8026186:	6013      	str	r3, [r2, #0]
 8026188:	4638      	mov	r0, r7
 802618a:	b011      	add	sp, #68	@ 0x44
 802618c:	ecbd 8b02 	vpop	{d8}
 8026190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026194:	9b07      	ldr	r3, [sp, #28]
 8026196:	2b01      	cmp	r3, #1
 8026198:	f77f ae2c 	ble.w	8025df4 <_dtoa_r+0x6d4>
 802619c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802619e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80261a0:	2001      	movs	r0, #1
 80261a2:	e64c      	b.n	8025e3e <_dtoa_r+0x71e>
 80261a4:	f1bb 0f00 	cmp.w	fp, #0
 80261a8:	f77f aed8 	ble.w	8025f5c <_dtoa_r+0x83c>
 80261ac:	463e      	mov	r6, r7
 80261ae:	9801      	ldr	r0, [sp, #4]
 80261b0:	4621      	mov	r1, r4
 80261b2:	f7ff fa2b 	bl	802560c <quorem>
 80261b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80261ba:	f806 ab01 	strb.w	sl, [r6], #1
 80261be:	1bf2      	subs	r2, r6, r7
 80261c0:	4593      	cmp	fp, r2
 80261c2:	ddb4      	ble.n	802612e <_dtoa_r+0xa0e>
 80261c4:	9901      	ldr	r1, [sp, #4]
 80261c6:	2300      	movs	r3, #0
 80261c8:	220a      	movs	r2, #10
 80261ca:	4648      	mov	r0, r9
 80261cc:	f000 f968 	bl	80264a0 <__multadd>
 80261d0:	9001      	str	r0, [sp, #4]
 80261d2:	e7ec      	b.n	80261ae <_dtoa_r+0xa8e>
 80261d4:	0802c2ac 	.word	0x0802c2ac
 80261d8:	0802c230 	.word	0x0802c230

080261dc <_free_r>:
 80261dc:	b538      	push	{r3, r4, r5, lr}
 80261de:	4605      	mov	r5, r0
 80261e0:	2900      	cmp	r1, #0
 80261e2:	d041      	beq.n	8026268 <_free_r+0x8c>
 80261e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80261e8:	1f0c      	subs	r4, r1, #4
 80261ea:	2b00      	cmp	r3, #0
 80261ec:	bfb8      	it	lt
 80261ee:	18e4      	addlt	r4, r4, r3
 80261f0:	f000 f8e8 	bl	80263c4 <__malloc_lock>
 80261f4:	4a1d      	ldr	r2, [pc, #116]	@ (802626c <_free_r+0x90>)
 80261f6:	6813      	ldr	r3, [r2, #0]
 80261f8:	b933      	cbnz	r3, 8026208 <_free_r+0x2c>
 80261fa:	6063      	str	r3, [r4, #4]
 80261fc:	6014      	str	r4, [r2, #0]
 80261fe:	4628      	mov	r0, r5
 8026200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026204:	f000 b8e4 	b.w	80263d0 <__malloc_unlock>
 8026208:	42a3      	cmp	r3, r4
 802620a:	d908      	bls.n	802621e <_free_r+0x42>
 802620c:	6820      	ldr	r0, [r4, #0]
 802620e:	1821      	adds	r1, r4, r0
 8026210:	428b      	cmp	r3, r1
 8026212:	bf01      	itttt	eq
 8026214:	6819      	ldreq	r1, [r3, #0]
 8026216:	685b      	ldreq	r3, [r3, #4]
 8026218:	1809      	addeq	r1, r1, r0
 802621a:	6021      	streq	r1, [r4, #0]
 802621c:	e7ed      	b.n	80261fa <_free_r+0x1e>
 802621e:	461a      	mov	r2, r3
 8026220:	685b      	ldr	r3, [r3, #4]
 8026222:	b10b      	cbz	r3, 8026228 <_free_r+0x4c>
 8026224:	42a3      	cmp	r3, r4
 8026226:	d9fa      	bls.n	802621e <_free_r+0x42>
 8026228:	6811      	ldr	r1, [r2, #0]
 802622a:	1850      	adds	r0, r2, r1
 802622c:	42a0      	cmp	r0, r4
 802622e:	d10b      	bne.n	8026248 <_free_r+0x6c>
 8026230:	6820      	ldr	r0, [r4, #0]
 8026232:	4401      	add	r1, r0
 8026234:	1850      	adds	r0, r2, r1
 8026236:	4283      	cmp	r3, r0
 8026238:	6011      	str	r1, [r2, #0]
 802623a:	d1e0      	bne.n	80261fe <_free_r+0x22>
 802623c:	6818      	ldr	r0, [r3, #0]
 802623e:	685b      	ldr	r3, [r3, #4]
 8026240:	6053      	str	r3, [r2, #4]
 8026242:	4408      	add	r0, r1
 8026244:	6010      	str	r0, [r2, #0]
 8026246:	e7da      	b.n	80261fe <_free_r+0x22>
 8026248:	d902      	bls.n	8026250 <_free_r+0x74>
 802624a:	230c      	movs	r3, #12
 802624c:	602b      	str	r3, [r5, #0]
 802624e:	e7d6      	b.n	80261fe <_free_r+0x22>
 8026250:	6820      	ldr	r0, [r4, #0]
 8026252:	1821      	adds	r1, r4, r0
 8026254:	428b      	cmp	r3, r1
 8026256:	bf04      	itt	eq
 8026258:	6819      	ldreq	r1, [r3, #0]
 802625a:	685b      	ldreq	r3, [r3, #4]
 802625c:	6063      	str	r3, [r4, #4]
 802625e:	bf04      	itt	eq
 8026260:	1809      	addeq	r1, r1, r0
 8026262:	6021      	streq	r1, [r4, #0]
 8026264:	6054      	str	r4, [r2, #4]
 8026266:	e7ca      	b.n	80261fe <_free_r+0x22>
 8026268:	bd38      	pop	{r3, r4, r5, pc}
 802626a:	bf00      	nop
 802626c:	2402acb0 	.word	0x2402acb0

08026270 <malloc>:
 8026270:	4b02      	ldr	r3, [pc, #8]	@ (802627c <malloc+0xc>)
 8026272:	4601      	mov	r1, r0
 8026274:	6818      	ldr	r0, [r3, #0]
 8026276:	f000 b825 	b.w	80262c4 <_malloc_r>
 802627a:	bf00      	nop
 802627c:	240003a4 	.word	0x240003a4

08026280 <sbrk_aligned>:
 8026280:	b570      	push	{r4, r5, r6, lr}
 8026282:	4e0f      	ldr	r6, [pc, #60]	@ (80262c0 <sbrk_aligned+0x40>)
 8026284:	460c      	mov	r4, r1
 8026286:	6831      	ldr	r1, [r6, #0]
 8026288:	4605      	mov	r5, r0
 802628a:	b911      	cbnz	r1, 8026292 <sbrk_aligned+0x12>
 802628c:	f002 f8ca 	bl	8028424 <_sbrk_r>
 8026290:	6030      	str	r0, [r6, #0]
 8026292:	4621      	mov	r1, r4
 8026294:	4628      	mov	r0, r5
 8026296:	f002 f8c5 	bl	8028424 <_sbrk_r>
 802629a:	1c43      	adds	r3, r0, #1
 802629c:	d103      	bne.n	80262a6 <sbrk_aligned+0x26>
 802629e:	f04f 34ff 	mov.w	r4, #4294967295
 80262a2:	4620      	mov	r0, r4
 80262a4:	bd70      	pop	{r4, r5, r6, pc}
 80262a6:	1cc4      	adds	r4, r0, #3
 80262a8:	f024 0403 	bic.w	r4, r4, #3
 80262ac:	42a0      	cmp	r0, r4
 80262ae:	d0f8      	beq.n	80262a2 <sbrk_aligned+0x22>
 80262b0:	1a21      	subs	r1, r4, r0
 80262b2:	4628      	mov	r0, r5
 80262b4:	f002 f8b6 	bl	8028424 <_sbrk_r>
 80262b8:	3001      	adds	r0, #1
 80262ba:	d1f2      	bne.n	80262a2 <sbrk_aligned+0x22>
 80262bc:	e7ef      	b.n	802629e <sbrk_aligned+0x1e>
 80262be:	bf00      	nop
 80262c0:	2402acac 	.word	0x2402acac

080262c4 <_malloc_r>:
 80262c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80262c8:	1ccd      	adds	r5, r1, #3
 80262ca:	f025 0503 	bic.w	r5, r5, #3
 80262ce:	3508      	adds	r5, #8
 80262d0:	2d0c      	cmp	r5, #12
 80262d2:	bf38      	it	cc
 80262d4:	250c      	movcc	r5, #12
 80262d6:	2d00      	cmp	r5, #0
 80262d8:	4606      	mov	r6, r0
 80262da:	db01      	blt.n	80262e0 <_malloc_r+0x1c>
 80262dc:	42a9      	cmp	r1, r5
 80262de:	d904      	bls.n	80262ea <_malloc_r+0x26>
 80262e0:	230c      	movs	r3, #12
 80262e2:	6033      	str	r3, [r6, #0]
 80262e4:	2000      	movs	r0, #0
 80262e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80262ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80263c0 <_malloc_r+0xfc>
 80262ee:	f000 f869 	bl	80263c4 <__malloc_lock>
 80262f2:	f8d8 3000 	ldr.w	r3, [r8]
 80262f6:	461c      	mov	r4, r3
 80262f8:	bb44      	cbnz	r4, 802634c <_malloc_r+0x88>
 80262fa:	4629      	mov	r1, r5
 80262fc:	4630      	mov	r0, r6
 80262fe:	f7ff ffbf 	bl	8026280 <sbrk_aligned>
 8026302:	1c43      	adds	r3, r0, #1
 8026304:	4604      	mov	r4, r0
 8026306:	d158      	bne.n	80263ba <_malloc_r+0xf6>
 8026308:	f8d8 4000 	ldr.w	r4, [r8]
 802630c:	4627      	mov	r7, r4
 802630e:	2f00      	cmp	r7, #0
 8026310:	d143      	bne.n	802639a <_malloc_r+0xd6>
 8026312:	2c00      	cmp	r4, #0
 8026314:	d04b      	beq.n	80263ae <_malloc_r+0xea>
 8026316:	6823      	ldr	r3, [r4, #0]
 8026318:	4639      	mov	r1, r7
 802631a:	4630      	mov	r0, r6
 802631c:	eb04 0903 	add.w	r9, r4, r3
 8026320:	f002 f880 	bl	8028424 <_sbrk_r>
 8026324:	4581      	cmp	r9, r0
 8026326:	d142      	bne.n	80263ae <_malloc_r+0xea>
 8026328:	6821      	ldr	r1, [r4, #0]
 802632a:	1a6d      	subs	r5, r5, r1
 802632c:	4629      	mov	r1, r5
 802632e:	4630      	mov	r0, r6
 8026330:	f7ff ffa6 	bl	8026280 <sbrk_aligned>
 8026334:	3001      	adds	r0, #1
 8026336:	d03a      	beq.n	80263ae <_malloc_r+0xea>
 8026338:	6823      	ldr	r3, [r4, #0]
 802633a:	442b      	add	r3, r5
 802633c:	6023      	str	r3, [r4, #0]
 802633e:	f8d8 3000 	ldr.w	r3, [r8]
 8026342:	685a      	ldr	r2, [r3, #4]
 8026344:	bb62      	cbnz	r2, 80263a0 <_malloc_r+0xdc>
 8026346:	f8c8 7000 	str.w	r7, [r8]
 802634a:	e00f      	b.n	802636c <_malloc_r+0xa8>
 802634c:	6822      	ldr	r2, [r4, #0]
 802634e:	1b52      	subs	r2, r2, r5
 8026350:	d420      	bmi.n	8026394 <_malloc_r+0xd0>
 8026352:	2a0b      	cmp	r2, #11
 8026354:	d917      	bls.n	8026386 <_malloc_r+0xc2>
 8026356:	1961      	adds	r1, r4, r5
 8026358:	42a3      	cmp	r3, r4
 802635a:	6025      	str	r5, [r4, #0]
 802635c:	bf18      	it	ne
 802635e:	6059      	strne	r1, [r3, #4]
 8026360:	6863      	ldr	r3, [r4, #4]
 8026362:	bf08      	it	eq
 8026364:	f8c8 1000 	streq.w	r1, [r8]
 8026368:	5162      	str	r2, [r4, r5]
 802636a:	604b      	str	r3, [r1, #4]
 802636c:	4630      	mov	r0, r6
 802636e:	f000 f82f 	bl	80263d0 <__malloc_unlock>
 8026372:	f104 000b 	add.w	r0, r4, #11
 8026376:	1d23      	adds	r3, r4, #4
 8026378:	f020 0007 	bic.w	r0, r0, #7
 802637c:	1ac2      	subs	r2, r0, r3
 802637e:	bf1c      	itt	ne
 8026380:	1a1b      	subne	r3, r3, r0
 8026382:	50a3      	strne	r3, [r4, r2]
 8026384:	e7af      	b.n	80262e6 <_malloc_r+0x22>
 8026386:	6862      	ldr	r2, [r4, #4]
 8026388:	42a3      	cmp	r3, r4
 802638a:	bf0c      	ite	eq
 802638c:	f8c8 2000 	streq.w	r2, [r8]
 8026390:	605a      	strne	r2, [r3, #4]
 8026392:	e7eb      	b.n	802636c <_malloc_r+0xa8>
 8026394:	4623      	mov	r3, r4
 8026396:	6864      	ldr	r4, [r4, #4]
 8026398:	e7ae      	b.n	80262f8 <_malloc_r+0x34>
 802639a:	463c      	mov	r4, r7
 802639c:	687f      	ldr	r7, [r7, #4]
 802639e:	e7b6      	b.n	802630e <_malloc_r+0x4a>
 80263a0:	461a      	mov	r2, r3
 80263a2:	685b      	ldr	r3, [r3, #4]
 80263a4:	42a3      	cmp	r3, r4
 80263a6:	d1fb      	bne.n	80263a0 <_malloc_r+0xdc>
 80263a8:	2300      	movs	r3, #0
 80263aa:	6053      	str	r3, [r2, #4]
 80263ac:	e7de      	b.n	802636c <_malloc_r+0xa8>
 80263ae:	230c      	movs	r3, #12
 80263b0:	6033      	str	r3, [r6, #0]
 80263b2:	4630      	mov	r0, r6
 80263b4:	f000 f80c 	bl	80263d0 <__malloc_unlock>
 80263b8:	e794      	b.n	80262e4 <_malloc_r+0x20>
 80263ba:	6005      	str	r5, [r0, #0]
 80263bc:	e7d6      	b.n	802636c <_malloc_r+0xa8>
 80263be:	bf00      	nop
 80263c0:	2402acb0 	.word	0x2402acb0

080263c4 <__malloc_lock>:
 80263c4:	4801      	ldr	r0, [pc, #4]	@ (80263cc <__malloc_lock+0x8>)
 80263c6:	f7ff b90a 	b.w	80255de <__retarget_lock_acquire_recursive>
 80263ca:	bf00      	nop
 80263cc:	2402aca8 	.word	0x2402aca8

080263d0 <__malloc_unlock>:
 80263d0:	4801      	ldr	r0, [pc, #4]	@ (80263d8 <__malloc_unlock+0x8>)
 80263d2:	f7ff b905 	b.w	80255e0 <__retarget_lock_release_recursive>
 80263d6:	bf00      	nop
 80263d8:	2402aca8 	.word	0x2402aca8

080263dc <_Balloc>:
 80263dc:	b570      	push	{r4, r5, r6, lr}
 80263de:	69c6      	ldr	r6, [r0, #28]
 80263e0:	4604      	mov	r4, r0
 80263e2:	460d      	mov	r5, r1
 80263e4:	b976      	cbnz	r6, 8026404 <_Balloc+0x28>
 80263e6:	2010      	movs	r0, #16
 80263e8:	f7ff ff42 	bl	8026270 <malloc>
 80263ec:	4602      	mov	r2, r0
 80263ee:	61e0      	str	r0, [r4, #28]
 80263f0:	b920      	cbnz	r0, 80263fc <_Balloc+0x20>
 80263f2:	4b18      	ldr	r3, [pc, #96]	@ (8026454 <_Balloc+0x78>)
 80263f4:	4818      	ldr	r0, [pc, #96]	@ (8026458 <_Balloc+0x7c>)
 80263f6:	216b      	movs	r1, #107	@ 0x6b
 80263f8:	f002 f82e 	bl	8028458 <__assert_func>
 80263fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026400:	6006      	str	r6, [r0, #0]
 8026402:	60c6      	str	r6, [r0, #12]
 8026404:	69e6      	ldr	r6, [r4, #28]
 8026406:	68f3      	ldr	r3, [r6, #12]
 8026408:	b183      	cbz	r3, 802642c <_Balloc+0x50>
 802640a:	69e3      	ldr	r3, [r4, #28]
 802640c:	68db      	ldr	r3, [r3, #12]
 802640e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026412:	b9b8      	cbnz	r0, 8026444 <_Balloc+0x68>
 8026414:	2101      	movs	r1, #1
 8026416:	fa01 f605 	lsl.w	r6, r1, r5
 802641a:	1d72      	adds	r2, r6, #5
 802641c:	0092      	lsls	r2, r2, #2
 802641e:	4620      	mov	r0, r4
 8026420:	f002 f838 	bl	8028494 <_calloc_r>
 8026424:	b160      	cbz	r0, 8026440 <_Balloc+0x64>
 8026426:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802642a:	e00e      	b.n	802644a <_Balloc+0x6e>
 802642c:	2221      	movs	r2, #33	@ 0x21
 802642e:	2104      	movs	r1, #4
 8026430:	4620      	mov	r0, r4
 8026432:	f002 f82f 	bl	8028494 <_calloc_r>
 8026436:	69e3      	ldr	r3, [r4, #28]
 8026438:	60f0      	str	r0, [r6, #12]
 802643a:	68db      	ldr	r3, [r3, #12]
 802643c:	2b00      	cmp	r3, #0
 802643e:	d1e4      	bne.n	802640a <_Balloc+0x2e>
 8026440:	2000      	movs	r0, #0
 8026442:	bd70      	pop	{r4, r5, r6, pc}
 8026444:	6802      	ldr	r2, [r0, #0]
 8026446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802644a:	2300      	movs	r3, #0
 802644c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026450:	e7f7      	b.n	8026442 <_Balloc+0x66>
 8026452:	bf00      	nop
 8026454:	0802c23d 	.word	0x0802c23d
 8026458:	0802c2bd 	.word	0x0802c2bd

0802645c <_Bfree>:
 802645c:	b570      	push	{r4, r5, r6, lr}
 802645e:	69c6      	ldr	r6, [r0, #28]
 8026460:	4605      	mov	r5, r0
 8026462:	460c      	mov	r4, r1
 8026464:	b976      	cbnz	r6, 8026484 <_Bfree+0x28>
 8026466:	2010      	movs	r0, #16
 8026468:	f7ff ff02 	bl	8026270 <malloc>
 802646c:	4602      	mov	r2, r0
 802646e:	61e8      	str	r0, [r5, #28]
 8026470:	b920      	cbnz	r0, 802647c <_Bfree+0x20>
 8026472:	4b09      	ldr	r3, [pc, #36]	@ (8026498 <_Bfree+0x3c>)
 8026474:	4809      	ldr	r0, [pc, #36]	@ (802649c <_Bfree+0x40>)
 8026476:	218f      	movs	r1, #143	@ 0x8f
 8026478:	f001 ffee 	bl	8028458 <__assert_func>
 802647c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026480:	6006      	str	r6, [r0, #0]
 8026482:	60c6      	str	r6, [r0, #12]
 8026484:	b13c      	cbz	r4, 8026496 <_Bfree+0x3a>
 8026486:	69eb      	ldr	r3, [r5, #28]
 8026488:	6862      	ldr	r2, [r4, #4]
 802648a:	68db      	ldr	r3, [r3, #12]
 802648c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026490:	6021      	str	r1, [r4, #0]
 8026492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026496:	bd70      	pop	{r4, r5, r6, pc}
 8026498:	0802c23d 	.word	0x0802c23d
 802649c:	0802c2bd 	.word	0x0802c2bd

080264a0 <__multadd>:
 80264a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80264a4:	690d      	ldr	r5, [r1, #16]
 80264a6:	4607      	mov	r7, r0
 80264a8:	460c      	mov	r4, r1
 80264aa:	461e      	mov	r6, r3
 80264ac:	f101 0c14 	add.w	ip, r1, #20
 80264b0:	2000      	movs	r0, #0
 80264b2:	f8dc 3000 	ldr.w	r3, [ip]
 80264b6:	b299      	uxth	r1, r3
 80264b8:	fb02 6101 	mla	r1, r2, r1, r6
 80264bc:	0c1e      	lsrs	r6, r3, #16
 80264be:	0c0b      	lsrs	r3, r1, #16
 80264c0:	fb02 3306 	mla	r3, r2, r6, r3
 80264c4:	b289      	uxth	r1, r1
 80264c6:	3001      	adds	r0, #1
 80264c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80264cc:	4285      	cmp	r5, r0
 80264ce:	f84c 1b04 	str.w	r1, [ip], #4
 80264d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80264d6:	dcec      	bgt.n	80264b2 <__multadd+0x12>
 80264d8:	b30e      	cbz	r6, 802651e <__multadd+0x7e>
 80264da:	68a3      	ldr	r3, [r4, #8]
 80264dc:	42ab      	cmp	r3, r5
 80264de:	dc19      	bgt.n	8026514 <__multadd+0x74>
 80264e0:	6861      	ldr	r1, [r4, #4]
 80264e2:	4638      	mov	r0, r7
 80264e4:	3101      	adds	r1, #1
 80264e6:	f7ff ff79 	bl	80263dc <_Balloc>
 80264ea:	4680      	mov	r8, r0
 80264ec:	b928      	cbnz	r0, 80264fa <__multadd+0x5a>
 80264ee:	4602      	mov	r2, r0
 80264f0:	4b0c      	ldr	r3, [pc, #48]	@ (8026524 <__multadd+0x84>)
 80264f2:	480d      	ldr	r0, [pc, #52]	@ (8026528 <__multadd+0x88>)
 80264f4:	21ba      	movs	r1, #186	@ 0xba
 80264f6:	f001 ffaf 	bl	8028458 <__assert_func>
 80264fa:	6922      	ldr	r2, [r4, #16]
 80264fc:	3202      	adds	r2, #2
 80264fe:	f104 010c 	add.w	r1, r4, #12
 8026502:	0092      	lsls	r2, r2, #2
 8026504:	300c      	adds	r0, #12
 8026506:	f7ff f86c 	bl	80255e2 <memcpy>
 802650a:	4621      	mov	r1, r4
 802650c:	4638      	mov	r0, r7
 802650e:	f7ff ffa5 	bl	802645c <_Bfree>
 8026512:	4644      	mov	r4, r8
 8026514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8026518:	3501      	adds	r5, #1
 802651a:	615e      	str	r6, [r3, #20]
 802651c:	6125      	str	r5, [r4, #16]
 802651e:	4620      	mov	r0, r4
 8026520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026524:	0802c2ac 	.word	0x0802c2ac
 8026528:	0802c2bd 	.word	0x0802c2bd

0802652c <__s2b>:
 802652c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026530:	460c      	mov	r4, r1
 8026532:	4615      	mov	r5, r2
 8026534:	461f      	mov	r7, r3
 8026536:	2209      	movs	r2, #9
 8026538:	3308      	adds	r3, #8
 802653a:	4606      	mov	r6, r0
 802653c:	fb93 f3f2 	sdiv	r3, r3, r2
 8026540:	2100      	movs	r1, #0
 8026542:	2201      	movs	r2, #1
 8026544:	429a      	cmp	r2, r3
 8026546:	db09      	blt.n	802655c <__s2b+0x30>
 8026548:	4630      	mov	r0, r6
 802654a:	f7ff ff47 	bl	80263dc <_Balloc>
 802654e:	b940      	cbnz	r0, 8026562 <__s2b+0x36>
 8026550:	4602      	mov	r2, r0
 8026552:	4b19      	ldr	r3, [pc, #100]	@ (80265b8 <__s2b+0x8c>)
 8026554:	4819      	ldr	r0, [pc, #100]	@ (80265bc <__s2b+0x90>)
 8026556:	21d3      	movs	r1, #211	@ 0xd3
 8026558:	f001 ff7e 	bl	8028458 <__assert_func>
 802655c:	0052      	lsls	r2, r2, #1
 802655e:	3101      	adds	r1, #1
 8026560:	e7f0      	b.n	8026544 <__s2b+0x18>
 8026562:	9b08      	ldr	r3, [sp, #32]
 8026564:	6143      	str	r3, [r0, #20]
 8026566:	2d09      	cmp	r5, #9
 8026568:	f04f 0301 	mov.w	r3, #1
 802656c:	6103      	str	r3, [r0, #16]
 802656e:	dd16      	ble.n	802659e <__s2b+0x72>
 8026570:	f104 0909 	add.w	r9, r4, #9
 8026574:	46c8      	mov	r8, r9
 8026576:	442c      	add	r4, r5
 8026578:	f818 3b01 	ldrb.w	r3, [r8], #1
 802657c:	4601      	mov	r1, r0
 802657e:	3b30      	subs	r3, #48	@ 0x30
 8026580:	220a      	movs	r2, #10
 8026582:	4630      	mov	r0, r6
 8026584:	f7ff ff8c 	bl	80264a0 <__multadd>
 8026588:	45a0      	cmp	r8, r4
 802658a:	d1f5      	bne.n	8026578 <__s2b+0x4c>
 802658c:	f1a5 0408 	sub.w	r4, r5, #8
 8026590:	444c      	add	r4, r9
 8026592:	1b2d      	subs	r5, r5, r4
 8026594:	1963      	adds	r3, r4, r5
 8026596:	42bb      	cmp	r3, r7
 8026598:	db04      	blt.n	80265a4 <__s2b+0x78>
 802659a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802659e:	340a      	adds	r4, #10
 80265a0:	2509      	movs	r5, #9
 80265a2:	e7f6      	b.n	8026592 <__s2b+0x66>
 80265a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80265a8:	4601      	mov	r1, r0
 80265aa:	3b30      	subs	r3, #48	@ 0x30
 80265ac:	220a      	movs	r2, #10
 80265ae:	4630      	mov	r0, r6
 80265b0:	f7ff ff76 	bl	80264a0 <__multadd>
 80265b4:	e7ee      	b.n	8026594 <__s2b+0x68>
 80265b6:	bf00      	nop
 80265b8:	0802c2ac 	.word	0x0802c2ac
 80265bc:	0802c2bd 	.word	0x0802c2bd

080265c0 <__hi0bits>:
 80265c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80265c4:	4603      	mov	r3, r0
 80265c6:	bf36      	itet	cc
 80265c8:	0403      	lslcc	r3, r0, #16
 80265ca:	2000      	movcs	r0, #0
 80265cc:	2010      	movcc	r0, #16
 80265ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80265d2:	bf3c      	itt	cc
 80265d4:	021b      	lslcc	r3, r3, #8
 80265d6:	3008      	addcc	r0, #8
 80265d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80265dc:	bf3c      	itt	cc
 80265de:	011b      	lslcc	r3, r3, #4
 80265e0:	3004      	addcc	r0, #4
 80265e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80265e6:	bf3c      	itt	cc
 80265e8:	009b      	lslcc	r3, r3, #2
 80265ea:	3002      	addcc	r0, #2
 80265ec:	2b00      	cmp	r3, #0
 80265ee:	db05      	blt.n	80265fc <__hi0bits+0x3c>
 80265f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80265f4:	f100 0001 	add.w	r0, r0, #1
 80265f8:	bf08      	it	eq
 80265fa:	2020      	moveq	r0, #32
 80265fc:	4770      	bx	lr

080265fe <__lo0bits>:
 80265fe:	6803      	ldr	r3, [r0, #0]
 8026600:	4602      	mov	r2, r0
 8026602:	f013 0007 	ands.w	r0, r3, #7
 8026606:	d00b      	beq.n	8026620 <__lo0bits+0x22>
 8026608:	07d9      	lsls	r1, r3, #31
 802660a:	d421      	bmi.n	8026650 <__lo0bits+0x52>
 802660c:	0798      	lsls	r0, r3, #30
 802660e:	bf49      	itett	mi
 8026610:	085b      	lsrmi	r3, r3, #1
 8026612:	089b      	lsrpl	r3, r3, #2
 8026614:	2001      	movmi	r0, #1
 8026616:	6013      	strmi	r3, [r2, #0]
 8026618:	bf5c      	itt	pl
 802661a:	6013      	strpl	r3, [r2, #0]
 802661c:	2002      	movpl	r0, #2
 802661e:	4770      	bx	lr
 8026620:	b299      	uxth	r1, r3
 8026622:	b909      	cbnz	r1, 8026628 <__lo0bits+0x2a>
 8026624:	0c1b      	lsrs	r3, r3, #16
 8026626:	2010      	movs	r0, #16
 8026628:	b2d9      	uxtb	r1, r3
 802662a:	b909      	cbnz	r1, 8026630 <__lo0bits+0x32>
 802662c:	3008      	adds	r0, #8
 802662e:	0a1b      	lsrs	r3, r3, #8
 8026630:	0719      	lsls	r1, r3, #28
 8026632:	bf04      	itt	eq
 8026634:	091b      	lsreq	r3, r3, #4
 8026636:	3004      	addeq	r0, #4
 8026638:	0799      	lsls	r1, r3, #30
 802663a:	bf04      	itt	eq
 802663c:	089b      	lsreq	r3, r3, #2
 802663e:	3002      	addeq	r0, #2
 8026640:	07d9      	lsls	r1, r3, #31
 8026642:	d403      	bmi.n	802664c <__lo0bits+0x4e>
 8026644:	085b      	lsrs	r3, r3, #1
 8026646:	f100 0001 	add.w	r0, r0, #1
 802664a:	d003      	beq.n	8026654 <__lo0bits+0x56>
 802664c:	6013      	str	r3, [r2, #0]
 802664e:	4770      	bx	lr
 8026650:	2000      	movs	r0, #0
 8026652:	4770      	bx	lr
 8026654:	2020      	movs	r0, #32
 8026656:	4770      	bx	lr

08026658 <__i2b>:
 8026658:	b510      	push	{r4, lr}
 802665a:	460c      	mov	r4, r1
 802665c:	2101      	movs	r1, #1
 802665e:	f7ff febd 	bl	80263dc <_Balloc>
 8026662:	4602      	mov	r2, r0
 8026664:	b928      	cbnz	r0, 8026672 <__i2b+0x1a>
 8026666:	4b05      	ldr	r3, [pc, #20]	@ (802667c <__i2b+0x24>)
 8026668:	4805      	ldr	r0, [pc, #20]	@ (8026680 <__i2b+0x28>)
 802666a:	f240 1145 	movw	r1, #325	@ 0x145
 802666e:	f001 fef3 	bl	8028458 <__assert_func>
 8026672:	2301      	movs	r3, #1
 8026674:	6144      	str	r4, [r0, #20]
 8026676:	6103      	str	r3, [r0, #16]
 8026678:	bd10      	pop	{r4, pc}
 802667a:	bf00      	nop
 802667c:	0802c2ac 	.word	0x0802c2ac
 8026680:	0802c2bd 	.word	0x0802c2bd

08026684 <__multiply>:
 8026684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026688:	4617      	mov	r7, r2
 802668a:	690a      	ldr	r2, [r1, #16]
 802668c:	693b      	ldr	r3, [r7, #16]
 802668e:	429a      	cmp	r2, r3
 8026690:	bfa8      	it	ge
 8026692:	463b      	movge	r3, r7
 8026694:	4689      	mov	r9, r1
 8026696:	bfa4      	itt	ge
 8026698:	460f      	movge	r7, r1
 802669a:	4699      	movge	r9, r3
 802669c:	693d      	ldr	r5, [r7, #16]
 802669e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80266a2:	68bb      	ldr	r3, [r7, #8]
 80266a4:	6879      	ldr	r1, [r7, #4]
 80266a6:	eb05 060a 	add.w	r6, r5, sl
 80266aa:	42b3      	cmp	r3, r6
 80266ac:	b085      	sub	sp, #20
 80266ae:	bfb8      	it	lt
 80266b0:	3101      	addlt	r1, #1
 80266b2:	f7ff fe93 	bl	80263dc <_Balloc>
 80266b6:	b930      	cbnz	r0, 80266c6 <__multiply+0x42>
 80266b8:	4602      	mov	r2, r0
 80266ba:	4b41      	ldr	r3, [pc, #260]	@ (80267c0 <__multiply+0x13c>)
 80266bc:	4841      	ldr	r0, [pc, #260]	@ (80267c4 <__multiply+0x140>)
 80266be:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80266c2:	f001 fec9 	bl	8028458 <__assert_func>
 80266c6:	f100 0414 	add.w	r4, r0, #20
 80266ca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80266ce:	4623      	mov	r3, r4
 80266d0:	2200      	movs	r2, #0
 80266d2:	4573      	cmp	r3, lr
 80266d4:	d320      	bcc.n	8026718 <__multiply+0x94>
 80266d6:	f107 0814 	add.w	r8, r7, #20
 80266da:	f109 0114 	add.w	r1, r9, #20
 80266de:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80266e2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80266e6:	9302      	str	r3, [sp, #8]
 80266e8:	1beb      	subs	r3, r5, r7
 80266ea:	3b15      	subs	r3, #21
 80266ec:	f023 0303 	bic.w	r3, r3, #3
 80266f0:	3304      	adds	r3, #4
 80266f2:	3715      	adds	r7, #21
 80266f4:	42bd      	cmp	r5, r7
 80266f6:	bf38      	it	cc
 80266f8:	2304      	movcc	r3, #4
 80266fa:	9301      	str	r3, [sp, #4]
 80266fc:	9b02      	ldr	r3, [sp, #8]
 80266fe:	9103      	str	r1, [sp, #12]
 8026700:	428b      	cmp	r3, r1
 8026702:	d80c      	bhi.n	802671e <__multiply+0x9a>
 8026704:	2e00      	cmp	r6, #0
 8026706:	dd03      	ble.n	8026710 <__multiply+0x8c>
 8026708:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 802670c:	2b00      	cmp	r3, #0
 802670e:	d055      	beq.n	80267bc <__multiply+0x138>
 8026710:	6106      	str	r6, [r0, #16]
 8026712:	b005      	add	sp, #20
 8026714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026718:	f843 2b04 	str.w	r2, [r3], #4
 802671c:	e7d9      	b.n	80266d2 <__multiply+0x4e>
 802671e:	f8b1 a000 	ldrh.w	sl, [r1]
 8026722:	f1ba 0f00 	cmp.w	sl, #0
 8026726:	d01f      	beq.n	8026768 <__multiply+0xe4>
 8026728:	46c4      	mov	ip, r8
 802672a:	46a1      	mov	r9, r4
 802672c:	2700      	movs	r7, #0
 802672e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8026732:	f8d9 3000 	ldr.w	r3, [r9]
 8026736:	fa1f fb82 	uxth.w	fp, r2
 802673a:	b29b      	uxth	r3, r3
 802673c:	fb0a 330b 	mla	r3, sl, fp, r3
 8026740:	443b      	add	r3, r7
 8026742:	f8d9 7000 	ldr.w	r7, [r9]
 8026746:	0c12      	lsrs	r2, r2, #16
 8026748:	0c3f      	lsrs	r7, r7, #16
 802674a:	fb0a 7202 	mla	r2, sl, r2, r7
 802674e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8026752:	b29b      	uxth	r3, r3
 8026754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026758:	4565      	cmp	r5, ip
 802675a:	f849 3b04 	str.w	r3, [r9], #4
 802675e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8026762:	d8e4      	bhi.n	802672e <__multiply+0xaa>
 8026764:	9b01      	ldr	r3, [sp, #4]
 8026766:	50e7      	str	r7, [r4, r3]
 8026768:	9b03      	ldr	r3, [sp, #12]
 802676a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802676e:	3104      	adds	r1, #4
 8026770:	f1b9 0f00 	cmp.w	r9, #0
 8026774:	d020      	beq.n	80267b8 <__multiply+0x134>
 8026776:	6823      	ldr	r3, [r4, #0]
 8026778:	4647      	mov	r7, r8
 802677a:	46a4      	mov	ip, r4
 802677c:	f04f 0a00 	mov.w	sl, #0
 8026780:	f8b7 b000 	ldrh.w	fp, [r7]
 8026784:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8026788:	fb09 220b 	mla	r2, r9, fp, r2
 802678c:	4452      	add	r2, sl
 802678e:	b29b      	uxth	r3, r3
 8026790:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026794:	f84c 3b04 	str.w	r3, [ip], #4
 8026798:	f857 3b04 	ldr.w	r3, [r7], #4
 802679c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80267a0:	f8bc 3000 	ldrh.w	r3, [ip]
 80267a4:	fb09 330a 	mla	r3, r9, sl, r3
 80267a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80267ac:	42bd      	cmp	r5, r7
 80267ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80267b2:	d8e5      	bhi.n	8026780 <__multiply+0xfc>
 80267b4:	9a01      	ldr	r2, [sp, #4]
 80267b6:	50a3      	str	r3, [r4, r2]
 80267b8:	3404      	adds	r4, #4
 80267ba:	e79f      	b.n	80266fc <__multiply+0x78>
 80267bc:	3e01      	subs	r6, #1
 80267be:	e7a1      	b.n	8026704 <__multiply+0x80>
 80267c0:	0802c2ac 	.word	0x0802c2ac
 80267c4:	0802c2bd 	.word	0x0802c2bd

080267c8 <__pow5mult>:
 80267c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80267cc:	4615      	mov	r5, r2
 80267ce:	f012 0203 	ands.w	r2, r2, #3
 80267d2:	4607      	mov	r7, r0
 80267d4:	460e      	mov	r6, r1
 80267d6:	d007      	beq.n	80267e8 <__pow5mult+0x20>
 80267d8:	4c25      	ldr	r4, [pc, #148]	@ (8026870 <__pow5mult+0xa8>)
 80267da:	3a01      	subs	r2, #1
 80267dc:	2300      	movs	r3, #0
 80267de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80267e2:	f7ff fe5d 	bl	80264a0 <__multadd>
 80267e6:	4606      	mov	r6, r0
 80267e8:	10ad      	asrs	r5, r5, #2
 80267ea:	d03d      	beq.n	8026868 <__pow5mult+0xa0>
 80267ec:	69fc      	ldr	r4, [r7, #28]
 80267ee:	b97c      	cbnz	r4, 8026810 <__pow5mult+0x48>
 80267f0:	2010      	movs	r0, #16
 80267f2:	f7ff fd3d 	bl	8026270 <malloc>
 80267f6:	4602      	mov	r2, r0
 80267f8:	61f8      	str	r0, [r7, #28]
 80267fa:	b928      	cbnz	r0, 8026808 <__pow5mult+0x40>
 80267fc:	4b1d      	ldr	r3, [pc, #116]	@ (8026874 <__pow5mult+0xac>)
 80267fe:	481e      	ldr	r0, [pc, #120]	@ (8026878 <__pow5mult+0xb0>)
 8026800:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8026804:	f001 fe28 	bl	8028458 <__assert_func>
 8026808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802680c:	6004      	str	r4, [r0, #0]
 802680e:	60c4      	str	r4, [r0, #12]
 8026810:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8026814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026818:	b94c      	cbnz	r4, 802682e <__pow5mult+0x66>
 802681a:	f240 2171 	movw	r1, #625	@ 0x271
 802681e:	4638      	mov	r0, r7
 8026820:	f7ff ff1a 	bl	8026658 <__i2b>
 8026824:	2300      	movs	r3, #0
 8026826:	f8c8 0008 	str.w	r0, [r8, #8]
 802682a:	4604      	mov	r4, r0
 802682c:	6003      	str	r3, [r0, #0]
 802682e:	f04f 0900 	mov.w	r9, #0
 8026832:	07eb      	lsls	r3, r5, #31
 8026834:	d50a      	bpl.n	802684c <__pow5mult+0x84>
 8026836:	4631      	mov	r1, r6
 8026838:	4622      	mov	r2, r4
 802683a:	4638      	mov	r0, r7
 802683c:	f7ff ff22 	bl	8026684 <__multiply>
 8026840:	4631      	mov	r1, r6
 8026842:	4680      	mov	r8, r0
 8026844:	4638      	mov	r0, r7
 8026846:	f7ff fe09 	bl	802645c <_Bfree>
 802684a:	4646      	mov	r6, r8
 802684c:	106d      	asrs	r5, r5, #1
 802684e:	d00b      	beq.n	8026868 <__pow5mult+0xa0>
 8026850:	6820      	ldr	r0, [r4, #0]
 8026852:	b938      	cbnz	r0, 8026864 <__pow5mult+0x9c>
 8026854:	4622      	mov	r2, r4
 8026856:	4621      	mov	r1, r4
 8026858:	4638      	mov	r0, r7
 802685a:	f7ff ff13 	bl	8026684 <__multiply>
 802685e:	6020      	str	r0, [r4, #0]
 8026860:	f8c0 9000 	str.w	r9, [r0]
 8026864:	4604      	mov	r4, r0
 8026866:	e7e4      	b.n	8026832 <__pow5mult+0x6a>
 8026868:	4630      	mov	r0, r6
 802686a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802686e:	bf00      	nop
 8026870:	0802c3e8 	.word	0x0802c3e8
 8026874:	0802c23d 	.word	0x0802c23d
 8026878:	0802c2bd 	.word	0x0802c2bd

0802687c <__lshift>:
 802687c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026880:	460c      	mov	r4, r1
 8026882:	6849      	ldr	r1, [r1, #4]
 8026884:	6923      	ldr	r3, [r4, #16]
 8026886:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802688a:	68a3      	ldr	r3, [r4, #8]
 802688c:	4607      	mov	r7, r0
 802688e:	4691      	mov	r9, r2
 8026890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026894:	f108 0601 	add.w	r6, r8, #1
 8026898:	42b3      	cmp	r3, r6
 802689a:	db0b      	blt.n	80268b4 <__lshift+0x38>
 802689c:	4638      	mov	r0, r7
 802689e:	f7ff fd9d 	bl	80263dc <_Balloc>
 80268a2:	4605      	mov	r5, r0
 80268a4:	b948      	cbnz	r0, 80268ba <__lshift+0x3e>
 80268a6:	4602      	mov	r2, r0
 80268a8:	4b28      	ldr	r3, [pc, #160]	@ (802694c <__lshift+0xd0>)
 80268aa:	4829      	ldr	r0, [pc, #164]	@ (8026950 <__lshift+0xd4>)
 80268ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80268b0:	f001 fdd2 	bl	8028458 <__assert_func>
 80268b4:	3101      	adds	r1, #1
 80268b6:	005b      	lsls	r3, r3, #1
 80268b8:	e7ee      	b.n	8026898 <__lshift+0x1c>
 80268ba:	2300      	movs	r3, #0
 80268bc:	f100 0114 	add.w	r1, r0, #20
 80268c0:	f100 0210 	add.w	r2, r0, #16
 80268c4:	4618      	mov	r0, r3
 80268c6:	4553      	cmp	r3, sl
 80268c8:	db33      	blt.n	8026932 <__lshift+0xb6>
 80268ca:	6920      	ldr	r0, [r4, #16]
 80268cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80268d0:	f104 0314 	add.w	r3, r4, #20
 80268d4:	f019 091f 	ands.w	r9, r9, #31
 80268d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80268dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80268e0:	d02b      	beq.n	802693a <__lshift+0xbe>
 80268e2:	f1c9 0e20 	rsb	lr, r9, #32
 80268e6:	468a      	mov	sl, r1
 80268e8:	2200      	movs	r2, #0
 80268ea:	6818      	ldr	r0, [r3, #0]
 80268ec:	fa00 f009 	lsl.w	r0, r0, r9
 80268f0:	4310      	orrs	r0, r2
 80268f2:	f84a 0b04 	str.w	r0, [sl], #4
 80268f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80268fa:	459c      	cmp	ip, r3
 80268fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8026900:	d8f3      	bhi.n	80268ea <__lshift+0x6e>
 8026902:	ebac 0304 	sub.w	r3, ip, r4
 8026906:	3b15      	subs	r3, #21
 8026908:	f023 0303 	bic.w	r3, r3, #3
 802690c:	3304      	adds	r3, #4
 802690e:	f104 0015 	add.w	r0, r4, #21
 8026912:	4560      	cmp	r0, ip
 8026914:	bf88      	it	hi
 8026916:	2304      	movhi	r3, #4
 8026918:	50ca      	str	r2, [r1, r3]
 802691a:	b10a      	cbz	r2, 8026920 <__lshift+0xa4>
 802691c:	f108 0602 	add.w	r6, r8, #2
 8026920:	3e01      	subs	r6, #1
 8026922:	4638      	mov	r0, r7
 8026924:	612e      	str	r6, [r5, #16]
 8026926:	4621      	mov	r1, r4
 8026928:	f7ff fd98 	bl	802645c <_Bfree>
 802692c:	4628      	mov	r0, r5
 802692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026932:	f842 0f04 	str.w	r0, [r2, #4]!
 8026936:	3301      	adds	r3, #1
 8026938:	e7c5      	b.n	80268c6 <__lshift+0x4a>
 802693a:	3904      	subs	r1, #4
 802693c:	f853 2b04 	ldr.w	r2, [r3], #4
 8026940:	f841 2f04 	str.w	r2, [r1, #4]!
 8026944:	459c      	cmp	ip, r3
 8026946:	d8f9      	bhi.n	802693c <__lshift+0xc0>
 8026948:	e7ea      	b.n	8026920 <__lshift+0xa4>
 802694a:	bf00      	nop
 802694c:	0802c2ac 	.word	0x0802c2ac
 8026950:	0802c2bd 	.word	0x0802c2bd

08026954 <__mcmp>:
 8026954:	690a      	ldr	r2, [r1, #16]
 8026956:	4603      	mov	r3, r0
 8026958:	6900      	ldr	r0, [r0, #16]
 802695a:	1a80      	subs	r0, r0, r2
 802695c:	b530      	push	{r4, r5, lr}
 802695e:	d10e      	bne.n	802697e <__mcmp+0x2a>
 8026960:	3314      	adds	r3, #20
 8026962:	3114      	adds	r1, #20
 8026964:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8026968:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802696c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8026970:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8026974:	4295      	cmp	r5, r2
 8026976:	d003      	beq.n	8026980 <__mcmp+0x2c>
 8026978:	d205      	bcs.n	8026986 <__mcmp+0x32>
 802697a:	f04f 30ff 	mov.w	r0, #4294967295
 802697e:	bd30      	pop	{r4, r5, pc}
 8026980:	42a3      	cmp	r3, r4
 8026982:	d3f3      	bcc.n	802696c <__mcmp+0x18>
 8026984:	e7fb      	b.n	802697e <__mcmp+0x2a>
 8026986:	2001      	movs	r0, #1
 8026988:	e7f9      	b.n	802697e <__mcmp+0x2a>
	...

0802698c <__mdiff>:
 802698c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026990:	4689      	mov	r9, r1
 8026992:	4606      	mov	r6, r0
 8026994:	4611      	mov	r1, r2
 8026996:	4648      	mov	r0, r9
 8026998:	4614      	mov	r4, r2
 802699a:	f7ff ffdb 	bl	8026954 <__mcmp>
 802699e:	1e05      	subs	r5, r0, #0
 80269a0:	d112      	bne.n	80269c8 <__mdiff+0x3c>
 80269a2:	4629      	mov	r1, r5
 80269a4:	4630      	mov	r0, r6
 80269a6:	f7ff fd19 	bl	80263dc <_Balloc>
 80269aa:	4602      	mov	r2, r0
 80269ac:	b928      	cbnz	r0, 80269ba <__mdiff+0x2e>
 80269ae:	4b3f      	ldr	r3, [pc, #252]	@ (8026aac <__mdiff+0x120>)
 80269b0:	f240 2137 	movw	r1, #567	@ 0x237
 80269b4:	483e      	ldr	r0, [pc, #248]	@ (8026ab0 <__mdiff+0x124>)
 80269b6:	f001 fd4f 	bl	8028458 <__assert_func>
 80269ba:	2301      	movs	r3, #1
 80269bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80269c0:	4610      	mov	r0, r2
 80269c2:	b003      	add	sp, #12
 80269c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80269c8:	bfbc      	itt	lt
 80269ca:	464b      	movlt	r3, r9
 80269cc:	46a1      	movlt	r9, r4
 80269ce:	4630      	mov	r0, r6
 80269d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80269d4:	bfba      	itte	lt
 80269d6:	461c      	movlt	r4, r3
 80269d8:	2501      	movlt	r5, #1
 80269da:	2500      	movge	r5, #0
 80269dc:	f7ff fcfe 	bl	80263dc <_Balloc>
 80269e0:	4602      	mov	r2, r0
 80269e2:	b918      	cbnz	r0, 80269ec <__mdiff+0x60>
 80269e4:	4b31      	ldr	r3, [pc, #196]	@ (8026aac <__mdiff+0x120>)
 80269e6:	f240 2145 	movw	r1, #581	@ 0x245
 80269ea:	e7e3      	b.n	80269b4 <__mdiff+0x28>
 80269ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80269f0:	6926      	ldr	r6, [r4, #16]
 80269f2:	60c5      	str	r5, [r0, #12]
 80269f4:	f109 0310 	add.w	r3, r9, #16
 80269f8:	f109 0514 	add.w	r5, r9, #20
 80269fc:	f104 0e14 	add.w	lr, r4, #20
 8026a00:	f100 0b14 	add.w	fp, r0, #20
 8026a04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8026a08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8026a0c:	9301      	str	r3, [sp, #4]
 8026a0e:	46d9      	mov	r9, fp
 8026a10:	f04f 0c00 	mov.w	ip, #0
 8026a14:	9b01      	ldr	r3, [sp, #4]
 8026a16:	f85e 0b04 	ldr.w	r0, [lr], #4
 8026a1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8026a1e:	9301      	str	r3, [sp, #4]
 8026a20:	fa1f f38a 	uxth.w	r3, sl
 8026a24:	4619      	mov	r1, r3
 8026a26:	b283      	uxth	r3, r0
 8026a28:	1acb      	subs	r3, r1, r3
 8026a2a:	0c00      	lsrs	r0, r0, #16
 8026a2c:	4463      	add	r3, ip
 8026a2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8026a32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8026a36:	b29b      	uxth	r3, r3
 8026a38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8026a3c:	4576      	cmp	r6, lr
 8026a3e:	f849 3b04 	str.w	r3, [r9], #4
 8026a42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026a46:	d8e5      	bhi.n	8026a14 <__mdiff+0x88>
 8026a48:	1b33      	subs	r3, r6, r4
 8026a4a:	3b15      	subs	r3, #21
 8026a4c:	f023 0303 	bic.w	r3, r3, #3
 8026a50:	3415      	adds	r4, #21
 8026a52:	3304      	adds	r3, #4
 8026a54:	42a6      	cmp	r6, r4
 8026a56:	bf38      	it	cc
 8026a58:	2304      	movcc	r3, #4
 8026a5a:	441d      	add	r5, r3
 8026a5c:	445b      	add	r3, fp
 8026a5e:	461e      	mov	r6, r3
 8026a60:	462c      	mov	r4, r5
 8026a62:	4544      	cmp	r4, r8
 8026a64:	d30e      	bcc.n	8026a84 <__mdiff+0xf8>
 8026a66:	f108 0103 	add.w	r1, r8, #3
 8026a6a:	1b49      	subs	r1, r1, r5
 8026a6c:	f021 0103 	bic.w	r1, r1, #3
 8026a70:	3d03      	subs	r5, #3
 8026a72:	45a8      	cmp	r8, r5
 8026a74:	bf38      	it	cc
 8026a76:	2100      	movcc	r1, #0
 8026a78:	440b      	add	r3, r1
 8026a7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026a7e:	b191      	cbz	r1, 8026aa6 <__mdiff+0x11a>
 8026a80:	6117      	str	r7, [r2, #16]
 8026a82:	e79d      	b.n	80269c0 <__mdiff+0x34>
 8026a84:	f854 1b04 	ldr.w	r1, [r4], #4
 8026a88:	46e6      	mov	lr, ip
 8026a8a:	0c08      	lsrs	r0, r1, #16
 8026a8c:	fa1c fc81 	uxtah	ip, ip, r1
 8026a90:	4471      	add	r1, lr
 8026a92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8026a96:	b289      	uxth	r1, r1
 8026a98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8026a9c:	f846 1b04 	str.w	r1, [r6], #4
 8026aa0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026aa4:	e7dd      	b.n	8026a62 <__mdiff+0xd6>
 8026aa6:	3f01      	subs	r7, #1
 8026aa8:	e7e7      	b.n	8026a7a <__mdiff+0xee>
 8026aaa:	bf00      	nop
 8026aac:	0802c2ac 	.word	0x0802c2ac
 8026ab0:	0802c2bd 	.word	0x0802c2bd

08026ab4 <__ulp>:
 8026ab4:	b082      	sub	sp, #8
 8026ab6:	ed8d 0b00 	vstr	d0, [sp]
 8026aba:	9a01      	ldr	r2, [sp, #4]
 8026abc:	4b0f      	ldr	r3, [pc, #60]	@ (8026afc <__ulp+0x48>)
 8026abe:	4013      	ands	r3, r2
 8026ac0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8026ac4:	2b00      	cmp	r3, #0
 8026ac6:	dc08      	bgt.n	8026ada <__ulp+0x26>
 8026ac8:	425b      	negs	r3, r3
 8026aca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8026ace:	ea4f 5223 	mov.w	r2, r3, asr #20
 8026ad2:	da04      	bge.n	8026ade <__ulp+0x2a>
 8026ad4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8026ad8:	4113      	asrs	r3, r2
 8026ada:	2200      	movs	r2, #0
 8026adc:	e008      	b.n	8026af0 <__ulp+0x3c>
 8026ade:	f1a2 0314 	sub.w	r3, r2, #20
 8026ae2:	2b1e      	cmp	r3, #30
 8026ae4:	bfda      	itte	le
 8026ae6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8026aea:	40da      	lsrle	r2, r3
 8026aec:	2201      	movgt	r2, #1
 8026aee:	2300      	movs	r3, #0
 8026af0:	4619      	mov	r1, r3
 8026af2:	4610      	mov	r0, r2
 8026af4:	ec41 0b10 	vmov	d0, r0, r1
 8026af8:	b002      	add	sp, #8
 8026afa:	4770      	bx	lr
 8026afc:	7ff00000 	.word	0x7ff00000

08026b00 <__b2d>:
 8026b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b04:	6906      	ldr	r6, [r0, #16]
 8026b06:	f100 0814 	add.w	r8, r0, #20
 8026b0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8026b0e:	1f37      	subs	r7, r6, #4
 8026b10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026b14:	4610      	mov	r0, r2
 8026b16:	f7ff fd53 	bl	80265c0 <__hi0bits>
 8026b1a:	f1c0 0320 	rsb	r3, r0, #32
 8026b1e:	280a      	cmp	r0, #10
 8026b20:	600b      	str	r3, [r1, #0]
 8026b22:	491b      	ldr	r1, [pc, #108]	@ (8026b90 <__b2d+0x90>)
 8026b24:	dc15      	bgt.n	8026b52 <__b2d+0x52>
 8026b26:	f1c0 0c0b 	rsb	ip, r0, #11
 8026b2a:	fa22 f30c 	lsr.w	r3, r2, ip
 8026b2e:	45b8      	cmp	r8, r7
 8026b30:	ea43 0501 	orr.w	r5, r3, r1
 8026b34:	bf34      	ite	cc
 8026b36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026b3a:	2300      	movcs	r3, #0
 8026b3c:	3015      	adds	r0, #21
 8026b3e:	fa02 f000 	lsl.w	r0, r2, r0
 8026b42:	fa23 f30c 	lsr.w	r3, r3, ip
 8026b46:	4303      	orrs	r3, r0
 8026b48:	461c      	mov	r4, r3
 8026b4a:	ec45 4b10 	vmov	d0, r4, r5
 8026b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026b52:	45b8      	cmp	r8, r7
 8026b54:	bf3a      	itte	cc
 8026b56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026b5a:	f1a6 0708 	subcc.w	r7, r6, #8
 8026b5e:	2300      	movcs	r3, #0
 8026b60:	380b      	subs	r0, #11
 8026b62:	d012      	beq.n	8026b8a <__b2d+0x8a>
 8026b64:	f1c0 0120 	rsb	r1, r0, #32
 8026b68:	fa23 f401 	lsr.w	r4, r3, r1
 8026b6c:	4082      	lsls	r2, r0
 8026b6e:	4322      	orrs	r2, r4
 8026b70:	4547      	cmp	r7, r8
 8026b72:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8026b76:	bf8c      	ite	hi
 8026b78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8026b7c:	2200      	movls	r2, #0
 8026b7e:	4083      	lsls	r3, r0
 8026b80:	40ca      	lsrs	r2, r1
 8026b82:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8026b86:	4313      	orrs	r3, r2
 8026b88:	e7de      	b.n	8026b48 <__b2d+0x48>
 8026b8a:	ea42 0501 	orr.w	r5, r2, r1
 8026b8e:	e7db      	b.n	8026b48 <__b2d+0x48>
 8026b90:	3ff00000 	.word	0x3ff00000

08026b94 <__d2b>:
 8026b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026b98:	460f      	mov	r7, r1
 8026b9a:	2101      	movs	r1, #1
 8026b9c:	ec59 8b10 	vmov	r8, r9, d0
 8026ba0:	4616      	mov	r6, r2
 8026ba2:	f7ff fc1b 	bl	80263dc <_Balloc>
 8026ba6:	4604      	mov	r4, r0
 8026ba8:	b930      	cbnz	r0, 8026bb8 <__d2b+0x24>
 8026baa:	4602      	mov	r2, r0
 8026bac:	4b23      	ldr	r3, [pc, #140]	@ (8026c3c <__d2b+0xa8>)
 8026bae:	4824      	ldr	r0, [pc, #144]	@ (8026c40 <__d2b+0xac>)
 8026bb0:	f240 310f 	movw	r1, #783	@ 0x30f
 8026bb4:	f001 fc50 	bl	8028458 <__assert_func>
 8026bb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026bbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026bc0:	b10d      	cbz	r5, 8026bc6 <__d2b+0x32>
 8026bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8026bc6:	9301      	str	r3, [sp, #4]
 8026bc8:	f1b8 0300 	subs.w	r3, r8, #0
 8026bcc:	d023      	beq.n	8026c16 <__d2b+0x82>
 8026bce:	4668      	mov	r0, sp
 8026bd0:	9300      	str	r3, [sp, #0]
 8026bd2:	f7ff fd14 	bl	80265fe <__lo0bits>
 8026bd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026bda:	b1d0      	cbz	r0, 8026c12 <__d2b+0x7e>
 8026bdc:	f1c0 0320 	rsb	r3, r0, #32
 8026be0:	fa02 f303 	lsl.w	r3, r2, r3
 8026be4:	430b      	orrs	r3, r1
 8026be6:	40c2      	lsrs	r2, r0
 8026be8:	6163      	str	r3, [r4, #20]
 8026bea:	9201      	str	r2, [sp, #4]
 8026bec:	9b01      	ldr	r3, [sp, #4]
 8026bee:	61a3      	str	r3, [r4, #24]
 8026bf0:	2b00      	cmp	r3, #0
 8026bf2:	bf0c      	ite	eq
 8026bf4:	2201      	moveq	r2, #1
 8026bf6:	2202      	movne	r2, #2
 8026bf8:	6122      	str	r2, [r4, #16]
 8026bfa:	b1a5      	cbz	r5, 8026c26 <__d2b+0x92>
 8026bfc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8026c00:	4405      	add	r5, r0
 8026c02:	603d      	str	r5, [r7, #0]
 8026c04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8026c08:	6030      	str	r0, [r6, #0]
 8026c0a:	4620      	mov	r0, r4
 8026c0c:	b003      	add	sp, #12
 8026c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026c12:	6161      	str	r1, [r4, #20]
 8026c14:	e7ea      	b.n	8026bec <__d2b+0x58>
 8026c16:	a801      	add	r0, sp, #4
 8026c18:	f7ff fcf1 	bl	80265fe <__lo0bits>
 8026c1c:	9b01      	ldr	r3, [sp, #4]
 8026c1e:	6163      	str	r3, [r4, #20]
 8026c20:	3020      	adds	r0, #32
 8026c22:	2201      	movs	r2, #1
 8026c24:	e7e8      	b.n	8026bf8 <__d2b+0x64>
 8026c26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026c2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8026c2e:	6038      	str	r0, [r7, #0]
 8026c30:	6918      	ldr	r0, [r3, #16]
 8026c32:	f7ff fcc5 	bl	80265c0 <__hi0bits>
 8026c36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026c3a:	e7e5      	b.n	8026c08 <__d2b+0x74>
 8026c3c:	0802c2ac 	.word	0x0802c2ac
 8026c40:	0802c2bd 	.word	0x0802c2bd

08026c44 <__ratio>:
 8026c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c48:	4688      	mov	r8, r1
 8026c4a:	4669      	mov	r1, sp
 8026c4c:	4681      	mov	r9, r0
 8026c4e:	f7ff ff57 	bl	8026b00 <__b2d>
 8026c52:	a901      	add	r1, sp, #4
 8026c54:	4640      	mov	r0, r8
 8026c56:	ec55 4b10 	vmov	r4, r5, d0
 8026c5a:	f7ff ff51 	bl	8026b00 <__b2d>
 8026c5e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8026c62:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8026c66:	1ad2      	subs	r2, r2, r3
 8026c68:	e9dd 3100 	ldrd	r3, r1, [sp]
 8026c6c:	1a5b      	subs	r3, r3, r1
 8026c6e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8026c72:	ec57 6b10 	vmov	r6, r7, d0
 8026c76:	2b00      	cmp	r3, #0
 8026c78:	bfd6      	itet	le
 8026c7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026c7e:	462a      	movgt	r2, r5
 8026c80:	463a      	movle	r2, r7
 8026c82:	46ab      	mov	fp, r5
 8026c84:	46a2      	mov	sl, r4
 8026c86:	bfce      	itee	gt
 8026c88:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8026c8c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8026c90:	ee00 3a90 	vmovle	s1, r3
 8026c94:	ec4b ab17 	vmov	d7, sl, fp
 8026c98:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8026c9c:	b003      	add	sp, #12
 8026c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026ca2 <__copybits>:
 8026ca2:	3901      	subs	r1, #1
 8026ca4:	b570      	push	{r4, r5, r6, lr}
 8026ca6:	1149      	asrs	r1, r1, #5
 8026ca8:	6914      	ldr	r4, [r2, #16]
 8026caa:	3101      	adds	r1, #1
 8026cac:	f102 0314 	add.w	r3, r2, #20
 8026cb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8026cb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8026cb8:	1f05      	subs	r5, r0, #4
 8026cba:	42a3      	cmp	r3, r4
 8026cbc:	d30c      	bcc.n	8026cd8 <__copybits+0x36>
 8026cbe:	1aa3      	subs	r3, r4, r2
 8026cc0:	3b11      	subs	r3, #17
 8026cc2:	f023 0303 	bic.w	r3, r3, #3
 8026cc6:	3211      	adds	r2, #17
 8026cc8:	42a2      	cmp	r2, r4
 8026cca:	bf88      	it	hi
 8026ccc:	2300      	movhi	r3, #0
 8026cce:	4418      	add	r0, r3
 8026cd0:	2300      	movs	r3, #0
 8026cd2:	4288      	cmp	r0, r1
 8026cd4:	d305      	bcc.n	8026ce2 <__copybits+0x40>
 8026cd6:	bd70      	pop	{r4, r5, r6, pc}
 8026cd8:	f853 6b04 	ldr.w	r6, [r3], #4
 8026cdc:	f845 6f04 	str.w	r6, [r5, #4]!
 8026ce0:	e7eb      	b.n	8026cba <__copybits+0x18>
 8026ce2:	f840 3b04 	str.w	r3, [r0], #4
 8026ce6:	e7f4      	b.n	8026cd2 <__copybits+0x30>

08026ce8 <__any_on>:
 8026ce8:	f100 0214 	add.w	r2, r0, #20
 8026cec:	6900      	ldr	r0, [r0, #16]
 8026cee:	114b      	asrs	r3, r1, #5
 8026cf0:	4298      	cmp	r0, r3
 8026cf2:	b510      	push	{r4, lr}
 8026cf4:	db11      	blt.n	8026d1a <__any_on+0x32>
 8026cf6:	dd0a      	ble.n	8026d0e <__any_on+0x26>
 8026cf8:	f011 011f 	ands.w	r1, r1, #31
 8026cfc:	d007      	beq.n	8026d0e <__any_on+0x26>
 8026cfe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8026d02:	fa24 f001 	lsr.w	r0, r4, r1
 8026d06:	fa00 f101 	lsl.w	r1, r0, r1
 8026d0a:	428c      	cmp	r4, r1
 8026d0c:	d10b      	bne.n	8026d26 <__any_on+0x3e>
 8026d0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026d12:	4293      	cmp	r3, r2
 8026d14:	d803      	bhi.n	8026d1e <__any_on+0x36>
 8026d16:	2000      	movs	r0, #0
 8026d18:	bd10      	pop	{r4, pc}
 8026d1a:	4603      	mov	r3, r0
 8026d1c:	e7f7      	b.n	8026d0e <__any_on+0x26>
 8026d1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026d22:	2900      	cmp	r1, #0
 8026d24:	d0f5      	beq.n	8026d12 <__any_on+0x2a>
 8026d26:	2001      	movs	r0, #1
 8026d28:	e7f6      	b.n	8026d18 <__any_on+0x30>

08026d2a <sulp>:
 8026d2a:	b570      	push	{r4, r5, r6, lr}
 8026d2c:	4604      	mov	r4, r0
 8026d2e:	460d      	mov	r5, r1
 8026d30:	4616      	mov	r6, r2
 8026d32:	ec45 4b10 	vmov	d0, r4, r5
 8026d36:	f7ff febd 	bl	8026ab4 <__ulp>
 8026d3a:	b17e      	cbz	r6, 8026d5c <sulp+0x32>
 8026d3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8026d40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8026d44:	2b00      	cmp	r3, #0
 8026d46:	dd09      	ble.n	8026d5c <sulp+0x32>
 8026d48:	051b      	lsls	r3, r3, #20
 8026d4a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8026d4e:	2000      	movs	r0, #0
 8026d50:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8026d54:	ec41 0b17 	vmov	d7, r0, r1
 8026d58:	ee20 0b07 	vmul.f64	d0, d0, d7
 8026d5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08026d60 <_strtod_l>:
 8026d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d64:	ed2d 8b0a 	vpush	{d8-d12}
 8026d68:	b097      	sub	sp, #92	@ 0x5c
 8026d6a:	4688      	mov	r8, r1
 8026d6c:	920e      	str	r2, [sp, #56]	@ 0x38
 8026d6e:	2200      	movs	r2, #0
 8026d70:	9212      	str	r2, [sp, #72]	@ 0x48
 8026d72:	9005      	str	r0, [sp, #20]
 8026d74:	f04f 0a00 	mov.w	sl, #0
 8026d78:	f04f 0b00 	mov.w	fp, #0
 8026d7c:	460a      	mov	r2, r1
 8026d7e:	9211      	str	r2, [sp, #68]	@ 0x44
 8026d80:	7811      	ldrb	r1, [r2, #0]
 8026d82:	292b      	cmp	r1, #43	@ 0x2b
 8026d84:	d04c      	beq.n	8026e20 <_strtod_l+0xc0>
 8026d86:	d839      	bhi.n	8026dfc <_strtod_l+0x9c>
 8026d88:	290d      	cmp	r1, #13
 8026d8a:	d833      	bhi.n	8026df4 <_strtod_l+0x94>
 8026d8c:	2908      	cmp	r1, #8
 8026d8e:	d833      	bhi.n	8026df8 <_strtod_l+0x98>
 8026d90:	2900      	cmp	r1, #0
 8026d92:	d03c      	beq.n	8026e0e <_strtod_l+0xae>
 8026d94:	2200      	movs	r2, #0
 8026d96:	9208      	str	r2, [sp, #32]
 8026d98:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026d9a:	782a      	ldrb	r2, [r5, #0]
 8026d9c:	2a30      	cmp	r2, #48	@ 0x30
 8026d9e:	f040 80b7 	bne.w	8026f10 <_strtod_l+0x1b0>
 8026da2:	786a      	ldrb	r2, [r5, #1]
 8026da4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8026da8:	2a58      	cmp	r2, #88	@ 0x58
 8026daa:	d170      	bne.n	8026e8e <_strtod_l+0x12e>
 8026dac:	9302      	str	r3, [sp, #8]
 8026dae:	9b08      	ldr	r3, [sp, #32]
 8026db0:	9301      	str	r3, [sp, #4]
 8026db2:	ab12      	add	r3, sp, #72	@ 0x48
 8026db4:	9300      	str	r3, [sp, #0]
 8026db6:	4a90      	ldr	r2, [pc, #576]	@ (8026ff8 <_strtod_l+0x298>)
 8026db8:	9805      	ldr	r0, [sp, #20]
 8026dba:	ab13      	add	r3, sp, #76	@ 0x4c
 8026dbc:	a911      	add	r1, sp, #68	@ 0x44
 8026dbe:	f001 fbe5 	bl	802858c <__gethex>
 8026dc2:	f010 060f 	ands.w	r6, r0, #15
 8026dc6:	4604      	mov	r4, r0
 8026dc8:	d005      	beq.n	8026dd6 <_strtod_l+0x76>
 8026dca:	2e06      	cmp	r6, #6
 8026dcc:	d12a      	bne.n	8026e24 <_strtod_l+0xc4>
 8026dce:	3501      	adds	r5, #1
 8026dd0:	2300      	movs	r3, #0
 8026dd2:	9511      	str	r5, [sp, #68]	@ 0x44
 8026dd4:	9308      	str	r3, [sp, #32]
 8026dd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026dd8:	2b00      	cmp	r3, #0
 8026dda:	f040 8537 	bne.w	802784c <_strtod_l+0xaec>
 8026dde:	9b08      	ldr	r3, [sp, #32]
 8026de0:	ec4b ab10 	vmov	d0, sl, fp
 8026de4:	b1cb      	cbz	r3, 8026e1a <_strtod_l+0xba>
 8026de6:	eeb1 0b40 	vneg.f64	d0, d0
 8026dea:	b017      	add	sp, #92	@ 0x5c
 8026dec:	ecbd 8b0a 	vpop	{d8-d12}
 8026df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026df4:	2920      	cmp	r1, #32
 8026df6:	d1cd      	bne.n	8026d94 <_strtod_l+0x34>
 8026df8:	3201      	adds	r2, #1
 8026dfa:	e7c0      	b.n	8026d7e <_strtod_l+0x1e>
 8026dfc:	292d      	cmp	r1, #45	@ 0x2d
 8026dfe:	d1c9      	bne.n	8026d94 <_strtod_l+0x34>
 8026e00:	2101      	movs	r1, #1
 8026e02:	9108      	str	r1, [sp, #32]
 8026e04:	1c51      	adds	r1, r2, #1
 8026e06:	9111      	str	r1, [sp, #68]	@ 0x44
 8026e08:	7852      	ldrb	r2, [r2, #1]
 8026e0a:	2a00      	cmp	r2, #0
 8026e0c:	d1c4      	bne.n	8026d98 <_strtod_l+0x38>
 8026e0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026e10:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8026e14:	2b00      	cmp	r3, #0
 8026e16:	f040 8517 	bne.w	8027848 <_strtod_l+0xae8>
 8026e1a:	ec4b ab10 	vmov	d0, sl, fp
 8026e1e:	e7e4      	b.n	8026dea <_strtod_l+0x8a>
 8026e20:	2100      	movs	r1, #0
 8026e22:	e7ee      	b.n	8026e02 <_strtod_l+0xa2>
 8026e24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026e26:	b13a      	cbz	r2, 8026e38 <_strtod_l+0xd8>
 8026e28:	2135      	movs	r1, #53	@ 0x35
 8026e2a:	a814      	add	r0, sp, #80	@ 0x50
 8026e2c:	f7ff ff39 	bl	8026ca2 <__copybits>
 8026e30:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026e32:	9805      	ldr	r0, [sp, #20]
 8026e34:	f7ff fb12 	bl	802645c <_Bfree>
 8026e38:	1e73      	subs	r3, r6, #1
 8026e3a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026e3c:	2b04      	cmp	r3, #4
 8026e3e:	d806      	bhi.n	8026e4e <_strtod_l+0xee>
 8026e40:	e8df f003 	tbb	[pc, r3]
 8026e44:	201d0314 	.word	0x201d0314
 8026e48:	14          	.byte	0x14
 8026e49:	00          	.byte	0x00
 8026e4a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8026e4e:	05e3      	lsls	r3, r4, #23
 8026e50:	bf48      	it	mi
 8026e52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8026e56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8026e5a:	0d1b      	lsrs	r3, r3, #20
 8026e5c:	051b      	lsls	r3, r3, #20
 8026e5e:	2b00      	cmp	r3, #0
 8026e60:	d1b9      	bne.n	8026dd6 <_strtod_l+0x76>
 8026e62:	f7fe fb91 	bl	8025588 <__errno>
 8026e66:	2322      	movs	r3, #34	@ 0x22
 8026e68:	6003      	str	r3, [r0, #0]
 8026e6a:	e7b4      	b.n	8026dd6 <_strtod_l+0x76>
 8026e6c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8026e70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8026e74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8026e78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8026e7c:	e7e7      	b.n	8026e4e <_strtod_l+0xee>
 8026e7e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8027000 <_strtod_l+0x2a0>
 8026e82:	e7e4      	b.n	8026e4e <_strtod_l+0xee>
 8026e84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8026e88:	f04f 3aff 	mov.w	sl, #4294967295
 8026e8c:	e7df      	b.n	8026e4e <_strtod_l+0xee>
 8026e8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026e90:	1c5a      	adds	r2, r3, #1
 8026e92:	9211      	str	r2, [sp, #68]	@ 0x44
 8026e94:	785b      	ldrb	r3, [r3, #1]
 8026e96:	2b30      	cmp	r3, #48	@ 0x30
 8026e98:	d0f9      	beq.n	8026e8e <_strtod_l+0x12e>
 8026e9a:	2b00      	cmp	r3, #0
 8026e9c:	d09b      	beq.n	8026dd6 <_strtod_l+0x76>
 8026e9e:	2301      	movs	r3, #1
 8026ea0:	9307      	str	r3, [sp, #28]
 8026ea2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026ea4:	930a      	str	r3, [sp, #40]	@ 0x28
 8026ea6:	2300      	movs	r3, #0
 8026ea8:	9306      	str	r3, [sp, #24]
 8026eaa:	4699      	mov	r9, r3
 8026eac:	461d      	mov	r5, r3
 8026eae:	220a      	movs	r2, #10
 8026eb0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8026eb2:	7804      	ldrb	r4, [r0, #0]
 8026eb4:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8026eb8:	b2d9      	uxtb	r1, r3
 8026eba:	2909      	cmp	r1, #9
 8026ebc:	d92a      	bls.n	8026f14 <_strtod_l+0x1b4>
 8026ebe:	494f      	ldr	r1, [pc, #316]	@ (8026ffc <_strtod_l+0x29c>)
 8026ec0:	2201      	movs	r2, #1
 8026ec2:	f001 fa9c 	bl	80283fe <strncmp>
 8026ec6:	b398      	cbz	r0, 8026f30 <_strtod_l+0x1d0>
 8026ec8:	2000      	movs	r0, #0
 8026eca:	4622      	mov	r2, r4
 8026ecc:	462b      	mov	r3, r5
 8026ece:	4607      	mov	r7, r0
 8026ed0:	4601      	mov	r1, r0
 8026ed2:	2a65      	cmp	r2, #101	@ 0x65
 8026ed4:	d001      	beq.n	8026eda <_strtod_l+0x17a>
 8026ed6:	2a45      	cmp	r2, #69	@ 0x45
 8026ed8:	d118      	bne.n	8026f0c <_strtod_l+0x1ac>
 8026eda:	b91b      	cbnz	r3, 8026ee4 <_strtod_l+0x184>
 8026edc:	9b07      	ldr	r3, [sp, #28]
 8026ede:	4303      	orrs	r3, r0
 8026ee0:	d095      	beq.n	8026e0e <_strtod_l+0xae>
 8026ee2:	2300      	movs	r3, #0
 8026ee4:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8026ee8:	f108 0201 	add.w	r2, r8, #1
 8026eec:	9211      	str	r2, [sp, #68]	@ 0x44
 8026eee:	f898 2001 	ldrb.w	r2, [r8, #1]
 8026ef2:	2a2b      	cmp	r2, #43	@ 0x2b
 8026ef4:	d074      	beq.n	8026fe0 <_strtod_l+0x280>
 8026ef6:	2a2d      	cmp	r2, #45	@ 0x2d
 8026ef8:	d07a      	beq.n	8026ff0 <_strtod_l+0x290>
 8026efa:	f04f 0e00 	mov.w	lr, #0
 8026efe:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8026f02:	2c09      	cmp	r4, #9
 8026f04:	f240 8082 	bls.w	802700c <_strtod_l+0x2ac>
 8026f08:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8026f0c:	2400      	movs	r4, #0
 8026f0e:	e09d      	b.n	802704c <_strtod_l+0x2ec>
 8026f10:	2300      	movs	r3, #0
 8026f12:	e7c5      	b.n	8026ea0 <_strtod_l+0x140>
 8026f14:	2d08      	cmp	r5, #8
 8026f16:	bfc8      	it	gt
 8026f18:	9906      	ldrgt	r1, [sp, #24]
 8026f1a:	f100 0001 	add.w	r0, r0, #1
 8026f1e:	bfca      	itet	gt
 8026f20:	fb02 3301 	mlagt	r3, r2, r1, r3
 8026f24:	fb02 3909 	mlale	r9, r2, r9, r3
 8026f28:	9306      	strgt	r3, [sp, #24]
 8026f2a:	3501      	adds	r5, #1
 8026f2c:	9011      	str	r0, [sp, #68]	@ 0x44
 8026f2e:	e7bf      	b.n	8026eb0 <_strtod_l+0x150>
 8026f30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f32:	1c5a      	adds	r2, r3, #1
 8026f34:	9211      	str	r2, [sp, #68]	@ 0x44
 8026f36:	785a      	ldrb	r2, [r3, #1]
 8026f38:	b3bd      	cbz	r5, 8026faa <_strtod_l+0x24a>
 8026f3a:	4607      	mov	r7, r0
 8026f3c:	462b      	mov	r3, r5
 8026f3e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8026f42:	2909      	cmp	r1, #9
 8026f44:	d912      	bls.n	8026f6c <_strtod_l+0x20c>
 8026f46:	2101      	movs	r1, #1
 8026f48:	e7c3      	b.n	8026ed2 <_strtod_l+0x172>
 8026f4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f4c:	1c5a      	adds	r2, r3, #1
 8026f4e:	9211      	str	r2, [sp, #68]	@ 0x44
 8026f50:	785a      	ldrb	r2, [r3, #1]
 8026f52:	3001      	adds	r0, #1
 8026f54:	2a30      	cmp	r2, #48	@ 0x30
 8026f56:	d0f8      	beq.n	8026f4a <_strtod_l+0x1ea>
 8026f58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8026f5c:	2b08      	cmp	r3, #8
 8026f5e:	f200 847a 	bhi.w	8027856 <_strtod_l+0xaf6>
 8026f62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f64:	930a      	str	r3, [sp, #40]	@ 0x28
 8026f66:	4607      	mov	r7, r0
 8026f68:	2000      	movs	r0, #0
 8026f6a:	4603      	mov	r3, r0
 8026f6c:	3a30      	subs	r2, #48	@ 0x30
 8026f6e:	f100 0101 	add.w	r1, r0, #1
 8026f72:	d014      	beq.n	8026f9e <_strtod_l+0x23e>
 8026f74:	440f      	add	r7, r1
 8026f76:	469c      	mov	ip, r3
 8026f78:	f04f 0e0a 	mov.w	lr, #10
 8026f7c:	f10c 0401 	add.w	r4, ip, #1
 8026f80:	1ae6      	subs	r6, r4, r3
 8026f82:	42b1      	cmp	r1, r6
 8026f84:	dc13      	bgt.n	8026fae <_strtod_l+0x24e>
 8026f86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8026f8a:	1819      	adds	r1, r3, r0
 8026f8c:	2908      	cmp	r1, #8
 8026f8e:	f103 0301 	add.w	r3, r3, #1
 8026f92:	4403      	add	r3, r0
 8026f94:	dc19      	bgt.n	8026fca <_strtod_l+0x26a>
 8026f96:	210a      	movs	r1, #10
 8026f98:	fb01 2909 	mla	r9, r1, r9, r2
 8026f9c:	2100      	movs	r1, #0
 8026f9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026fa0:	1c50      	adds	r0, r2, #1
 8026fa2:	9011      	str	r0, [sp, #68]	@ 0x44
 8026fa4:	7852      	ldrb	r2, [r2, #1]
 8026fa6:	4608      	mov	r0, r1
 8026fa8:	e7c9      	b.n	8026f3e <_strtod_l+0x1de>
 8026faa:	4628      	mov	r0, r5
 8026fac:	e7d2      	b.n	8026f54 <_strtod_l+0x1f4>
 8026fae:	f1bc 0f08 	cmp.w	ip, #8
 8026fb2:	dc03      	bgt.n	8026fbc <_strtod_l+0x25c>
 8026fb4:	fb0e f909 	mul.w	r9, lr, r9
 8026fb8:	46a4      	mov	ip, r4
 8026fba:	e7df      	b.n	8026f7c <_strtod_l+0x21c>
 8026fbc:	2c10      	cmp	r4, #16
 8026fbe:	bfde      	ittt	le
 8026fc0:	9e06      	ldrle	r6, [sp, #24]
 8026fc2:	fb0e f606 	mulle.w	r6, lr, r6
 8026fc6:	9606      	strle	r6, [sp, #24]
 8026fc8:	e7f6      	b.n	8026fb8 <_strtod_l+0x258>
 8026fca:	290f      	cmp	r1, #15
 8026fcc:	bfdf      	itttt	le
 8026fce:	9806      	ldrle	r0, [sp, #24]
 8026fd0:	210a      	movle	r1, #10
 8026fd2:	fb01 2200 	mlale	r2, r1, r0, r2
 8026fd6:	9206      	strle	r2, [sp, #24]
 8026fd8:	e7e0      	b.n	8026f9c <_strtod_l+0x23c>
 8026fda:	2700      	movs	r7, #0
 8026fdc:	2101      	movs	r1, #1
 8026fde:	e77d      	b.n	8026edc <_strtod_l+0x17c>
 8026fe0:	f04f 0e00 	mov.w	lr, #0
 8026fe4:	f108 0202 	add.w	r2, r8, #2
 8026fe8:	9211      	str	r2, [sp, #68]	@ 0x44
 8026fea:	f898 2002 	ldrb.w	r2, [r8, #2]
 8026fee:	e786      	b.n	8026efe <_strtod_l+0x19e>
 8026ff0:	f04f 0e01 	mov.w	lr, #1
 8026ff4:	e7f6      	b.n	8026fe4 <_strtod_l+0x284>
 8026ff6:	bf00      	nop
 8026ff8:	0802c4fc 	.word	0x0802c4fc
 8026ffc:	0802c316 	.word	0x0802c316
 8027000:	7ff00000 	.word	0x7ff00000
 8027004:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027006:	1c54      	adds	r4, r2, #1
 8027008:	9411      	str	r4, [sp, #68]	@ 0x44
 802700a:	7852      	ldrb	r2, [r2, #1]
 802700c:	2a30      	cmp	r2, #48	@ 0x30
 802700e:	d0f9      	beq.n	8027004 <_strtod_l+0x2a4>
 8027010:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8027014:	2c08      	cmp	r4, #8
 8027016:	f63f af79 	bhi.w	8026f0c <_strtod_l+0x1ac>
 802701a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 802701e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027020:	9209      	str	r2, [sp, #36]	@ 0x24
 8027022:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027024:	1c54      	adds	r4, r2, #1
 8027026:	9411      	str	r4, [sp, #68]	@ 0x44
 8027028:	7852      	ldrb	r2, [r2, #1]
 802702a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 802702e:	2e09      	cmp	r6, #9
 8027030:	d937      	bls.n	80270a2 <_strtod_l+0x342>
 8027032:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8027034:	1ba4      	subs	r4, r4, r6
 8027036:	2c08      	cmp	r4, #8
 8027038:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 802703c:	dc02      	bgt.n	8027044 <_strtod_l+0x2e4>
 802703e:	4564      	cmp	r4, ip
 8027040:	bfa8      	it	ge
 8027042:	4664      	movge	r4, ip
 8027044:	f1be 0f00 	cmp.w	lr, #0
 8027048:	d000      	beq.n	802704c <_strtod_l+0x2ec>
 802704a:	4264      	negs	r4, r4
 802704c:	2b00      	cmp	r3, #0
 802704e:	d14d      	bne.n	80270ec <_strtod_l+0x38c>
 8027050:	9b07      	ldr	r3, [sp, #28]
 8027052:	4318      	orrs	r0, r3
 8027054:	f47f aebf 	bne.w	8026dd6 <_strtod_l+0x76>
 8027058:	2900      	cmp	r1, #0
 802705a:	f47f aed8 	bne.w	8026e0e <_strtod_l+0xae>
 802705e:	2a69      	cmp	r2, #105	@ 0x69
 8027060:	d027      	beq.n	80270b2 <_strtod_l+0x352>
 8027062:	dc24      	bgt.n	80270ae <_strtod_l+0x34e>
 8027064:	2a49      	cmp	r2, #73	@ 0x49
 8027066:	d024      	beq.n	80270b2 <_strtod_l+0x352>
 8027068:	2a4e      	cmp	r2, #78	@ 0x4e
 802706a:	f47f aed0 	bne.w	8026e0e <_strtod_l+0xae>
 802706e:	4997      	ldr	r1, [pc, #604]	@ (80272cc <_strtod_l+0x56c>)
 8027070:	a811      	add	r0, sp, #68	@ 0x44
 8027072:	f001 fcad 	bl	80289d0 <__match>
 8027076:	2800      	cmp	r0, #0
 8027078:	f43f aec9 	beq.w	8026e0e <_strtod_l+0xae>
 802707c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802707e:	781b      	ldrb	r3, [r3, #0]
 8027080:	2b28      	cmp	r3, #40	@ 0x28
 8027082:	d12d      	bne.n	80270e0 <_strtod_l+0x380>
 8027084:	4992      	ldr	r1, [pc, #584]	@ (80272d0 <_strtod_l+0x570>)
 8027086:	aa14      	add	r2, sp, #80	@ 0x50
 8027088:	a811      	add	r0, sp, #68	@ 0x44
 802708a:	f001 fcb5 	bl	80289f8 <__hexnan>
 802708e:	2805      	cmp	r0, #5
 8027090:	d126      	bne.n	80270e0 <_strtod_l+0x380>
 8027092:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027094:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8027098:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 802709c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80270a0:	e699      	b.n	8026dd6 <_strtod_l+0x76>
 80270a2:	240a      	movs	r4, #10
 80270a4:	fb04 2c0c 	mla	ip, r4, ip, r2
 80270a8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80270ac:	e7b9      	b.n	8027022 <_strtod_l+0x2c2>
 80270ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80270b0:	e7db      	b.n	802706a <_strtod_l+0x30a>
 80270b2:	4988      	ldr	r1, [pc, #544]	@ (80272d4 <_strtod_l+0x574>)
 80270b4:	a811      	add	r0, sp, #68	@ 0x44
 80270b6:	f001 fc8b 	bl	80289d0 <__match>
 80270ba:	2800      	cmp	r0, #0
 80270bc:	f43f aea7 	beq.w	8026e0e <_strtod_l+0xae>
 80270c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80270c2:	4985      	ldr	r1, [pc, #532]	@ (80272d8 <_strtod_l+0x578>)
 80270c4:	3b01      	subs	r3, #1
 80270c6:	a811      	add	r0, sp, #68	@ 0x44
 80270c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80270ca:	f001 fc81 	bl	80289d0 <__match>
 80270ce:	b910      	cbnz	r0, 80270d6 <_strtod_l+0x376>
 80270d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80270d2:	3301      	adds	r3, #1
 80270d4:	9311      	str	r3, [sp, #68]	@ 0x44
 80270d6:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80272ec <_strtod_l+0x58c>
 80270da:	f04f 0a00 	mov.w	sl, #0
 80270de:	e67a      	b.n	8026dd6 <_strtod_l+0x76>
 80270e0:	487e      	ldr	r0, [pc, #504]	@ (80272dc <_strtod_l+0x57c>)
 80270e2:	f001 f9b1 	bl	8028448 <nan>
 80270e6:	ec5b ab10 	vmov	sl, fp, d0
 80270ea:	e674      	b.n	8026dd6 <_strtod_l+0x76>
 80270ec:	ee07 9a90 	vmov	s15, r9
 80270f0:	1be2      	subs	r2, r4, r7
 80270f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80270f6:	2d00      	cmp	r5, #0
 80270f8:	bf08      	it	eq
 80270fa:	461d      	moveq	r5, r3
 80270fc:	2b10      	cmp	r3, #16
 80270fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8027100:	461a      	mov	r2, r3
 8027102:	bfa8      	it	ge
 8027104:	2210      	movge	r2, #16
 8027106:	2b09      	cmp	r3, #9
 8027108:	ec5b ab17 	vmov	sl, fp, d7
 802710c:	dc15      	bgt.n	802713a <_strtod_l+0x3da>
 802710e:	1be1      	subs	r1, r4, r7
 8027110:	2900      	cmp	r1, #0
 8027112:	f43f ae60 	beq.w	8026dd6 <_strtod_l+0x76>
 8027116:	eba4 0107 	sub.w	r1, r4, r7
 802711a:	dd72      	ble.n	8027202 <_strtod_l+0x4a2>
 802711c:	2916      	cmp	r1, #22
 802711e:	dc59      	bgt.n	80271d4 <_strtod_l+0x474>
 8027120:	4b6f      	ldr	r3, [pc, #444]	@ (80272e0 <_strtod_l+0x580>)
 8027122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027128:	ed93 7b00 	vldr	d7, [r3]
 802712c:	ec4b ab16 	vmov	d6, sl, fp
 8027130:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027134:	ec5b ab17 	vmov	sl, fp, d7
 8027138:	e64d      	b.n	8026dd6 <_strtod_l+0x76>
 802713a:	4969      	ldr	r1, [pc, #420]	@ (80272e0 <_strtod_l+0x580>)
 802713c:	eddd 6a06 	vldr	s13, [sp, #24]
 8027140:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8027144:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8027148:	2b0f      	cmp	r3, #15
 802714a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 802714e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8027152:	ec5b ab16 	vmov	sl, fp, d6
 8027156:	ddda      	ble.n	802710e <_strtod_l+0x3ae>
 8027158:	1a9a      	subs	r2, r3, r2
 802715a:	1be1      	subs	r1, r4, r7
 802715c:	440a      	add	r2, r1
 802715e:	2a00      	cmp	r2, #0
 8027160:	f340 8094 	ble.w	802728c <_strtod_l+0x52c>
 8027164:	f012 000f 	ands.w	r0, r2, #15
 8027168:	d00a      	beq.n	8027180 <_strtod_l+0x420>
 802716a:	495d      	ldr	r1, [pc, #372]	@ (80272e0 <_strtod_l+0x580>)
 802716c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8027170:	ed91 7b00 	vldr	d7, [r1]
 8027174:	ec4b ab16 	vmov	d6, sl, fp
 8027178:	ee27 7b06 	vmul.f64	d7, d7, d6
 802717c:	ec5b ab17 	vmov	sl, fp, d7
 8027180:	f032 020f 	bics.w	r2, r2, #15
 8027184:	d073      	beq.n	802726e <_strtod_l+0x50e>
 8027186:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 802718a:	dd47      	ble.n	802721c <_strtod_l+0x4bc>
 802718c:	2400      	movs	r4, #0
 802718e:	4625      	mov	r5, r4
 8027190:	9407      	str	r4, [sp, #28]
 8027192:	4626      	mov	r6, r4
 8027194:	9a05      	ldr	r2, [sp, #20]
 8027196:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80272ec <_strtod_l+0x58c>
 802719a:	2322      	movs	r3, #34	@ 0x22
 802719c:	6013      	str	r3, [r2, #0]
 802719e:	f04f 0a00 	mov.w	sl, #0
 80271a2:	9b07      	ldr	r3, [sp, #28]
 80271a4:	2b00      	cmp	r3, #0
 80271a6:	f43f ae16 	beq.w	8026dd6 <_strtod_l+0x76>
 80271aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80271ac:	9805      	ldr	r0, [sp, #20]
 80271ae:	f7ff f955 	bl	802645c <_Bfree>
 80271b2:	9805      	ldr	r0, [sp, #20]
 80271b4:	4631      	mov	r1, r6
 80271b6:	f7ff f951 	bl	802645c <_Bfree>
 80271ba:	9805      	ldr	r0, [sp, #20]
 80271bc:	4629      	mov	r1, r5
 80271be:	f7ff f94d 	bl	802645c <_Bfree>
 80271c2:	9907      	ldr	r1, [sp, #28]
 80271c4:	9805      	ldr	r0, [sp, #20]
 80271c6:	f7ff f949 	bl	802645c <_Bfree>
 80271ca:	9805      	ldr	r0, [sp, #20]
 80271cc:	4621      	mov	r1, r4
 80271ce:	f7ff f945 	bl	802645c <_Bfree>
 80271d2:	e600      	b.n	8026dd6 <_strtod_l+0x76>
 80271d4:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80271d8:	1be0      	subs	r0, r4, r7
 80271da:	4281      	cmp	r1, r0
 80271dc:	dbbc      	blt.n	8027158 <_strtod_l+0x3f8>
 80271de:	4a40      	ldr	r2, [pc, #256]	@ (80272e0 <_strtod_l+0x580>)
 80271e0:	f1c3 030f 	rsb	r3, r3, #15
 80271e4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80271e8:	ed91 7b00 	vldr	d7, [r1]
 80271ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80271ee:	ec4b ab16 	vmov	d6, sl, fp
 80271f2:	1acb      	subs	r3, r1, r3
 80271f4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80271f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80271fc:	ed92 6b00 	vldr	d6, [r2]
 8027200:	e796      	b.n	8027130 <_strtod_l+0x3d0>
 8027202:	3116      	adds	r1, #22
 8027204:	dba8      	blt.n	8027158 <_strtod_l+0x3f8>
 8027206:	4b36      	ldr	r3, [pc, #216]	@ (80272e0 <_strtod_l+0x580>)
 8027208:	1b3c      	subs	r4, r7, r4
 802720a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802720e:	ed94 7b00 	vldr	d7, [r4]
 8027212:	ec4b ab16 	vmov	d6, sl, fp
 8027216:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802721a:	e78b      	b.n	8027134 <_strtod_l+0x3d4>
 802721c:	2000      	movs	r0, #0
 802721e:	ec4b ab17 	vmov	d7, sl, fp
 8027222:	4e30      	ldr	r6, [pc, #192]	@ (80272e4 <_strtod_l+0x584>)
 8027224:	1112      	asrs	r2, r2, #4
 8027226:	4601      	mov	r1, r0
 8027228:	2a01      	cmp	r2, #1
 802722a:	dc23      	bgt.n	8027274 <_strtod_l+0x514>
 802722c:	b108      	cbz	r0, 8027232 <_strtod_l+0x4d2>
 802722e:	ec5b ab17 	vmov	sl, fp, d7
 8027232:	4a2c      	ldr	r2, [pc, #176]	@ (80272e4 <_strtod_l+0x584>)
 8027234:	482c      	ldr	r0, [pc, #176]	@ (80272e8 <_strtod_l+0x588>)
 8027236:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802723a:	ed92 7b00 	vldr	d7, [r2]
 802723e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8027242:	ec4b ab16 	vmov	d6, sl, fp
 8027246:	4a29      	ldr	r2, [pc, #164]	@ (80272ec <_strtod_l+0x58c>)
 8027248:	ee27 7b06 	vmul.f64	d7, d7, d6
 802724c:	ee17 1a90 	vmov	r1, s15
 8027250:	400a      	ands	r2, r1
 8027252:	4282      	cmp	r2, r0
 8027254:	ec5b ab17 	vmov	sl, fp, d7
 8027258:	d898      	bhi.n	802718c <_strtod_l+0x42c>
 802725a:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 802725e:	4282      	cmp	r2, r0
 8027260:	bf86      	itte	hi
 8027262:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80272f0 <_strtod_l+0x590>
 8027266:	f04f 3aff 	movhi.w	sl, #4294967295
 802726a:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 802726e:	2200      	movs	r2, #0
 8027270:	9206      	str	r2, [sp, #24]
 8027272:	e076      	b.n	8027362 <_strtod_l+0x602>
 8027274:	f012 0f01 	tst.w	r2, #1
 8027278:	d004      	beq.n	8027284 <_strtod_l+0x524>
 802727a:	ed96 6b00 	vldr	d6, [r6]
 802727e:	2001      	movs	r0, #1
 8027280:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027284:	3101      	adds	r1, #1
 8027286:	1052      	asrs	r2, r2, #1
 8027288:	3608      	adds	r6, #8
 802728a:	e7cd      	b.n	8027228 <_strtod_l+0x4c8>
 802728c:	d0ef      	beq.n	802726e <_strtod_l+0x50e>
 802728e:	4252      	negs	r2, r2
 8027290:	f012 000f 	ands.w	r0, r2, #15
 8027294:	d00a      	beq.n	80272ac <_strtod_l+0x54c>
 8027296:	4912      	ldr	r1, [pc, #72]	@ (80272e0 <_strtod_l+0x580>)
 8027298:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802729c:	ed91 7b00 	vldr	d7, [r1]
 80272a0:	ec4b ab16 	vmov	d6, sl, fp
 80272a4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80272a8:	ec5b ab17 	vmov	sl, fp, d7
 80272ac:	1112      	asrs	r2, r2, #4
 80272ae:	d0de      	beq.n	802726e <_strtod_l+0x50e>
 80272b0:	2a1f      	cmp	r2, #31
 80272b2:	dd1f      	ble.n	80272f4 <_strtod_l+0x594>
 80272b4:	2400      	movs	r4, #0
 80272b6:	4625      	mov	r5, r4
 80272b8:	9407      	str	r4, [sp, #28]
 80272ba:	4626      	mov	r6, r4
 80272bc:	9a05      	ldr	r2, [sp, #20]
 80272be:	2322      	movs	r3, #34	@ 0x22
 80272c0:	f04f 0a00 	mov.w	sl, #0
 80272c4:	f04f 0b00 	mov.w	fp, #0
 80272c8:	6013      	str	r3, [r2, #0]
 80272ca:	e76a      	b.n	80271a2 <_strtod_l+0x442>
 80272cc:	0802c206 	.word	0x0802c206
 80272d0:	0802c4e8 	.word	0x0802c4e8
 80272d4:	0802c1fe 	.word	0x0802c1fe
 80272d8:	0802c233 	.word	0x0802c233
 80272dc:	0802c387 	.word	0x0802c387
 80272e0:	0802c420 	.word	0x0802c420
 80272e4:	0802c3f8 	.word	0x0802c3f8
 80272e8:	7ca00000 	.word	0x7ca00000
 80272ec:	7ff00000 	.word	0x7ff00000
 80272f0:	7fefffff 	.word	0x7fefffff
 80272f4:	f012 0110 	ands.w	r1, r2, #16
 80272f8:	bf18      	it	ne
 80272fa:	216a      	movne	r1, #106	@ 0x6a
 80272fc:	9106      	str	r1, [sp, #24]
 80272fe:	ec4b ab17 	vmov	d7, sl, fp
 8027302:	49af      	ldr	r1, [pc, #700]	@ (80275c0 <_strtod_l+0x860>)
 8027304:	2000      	movs	r0, #0
 8027306:	07d6      	lsls	r6, r2, #31
 8027308:	d504      	bpl.n	8027314 <_strtod_l+0x5b4>
 802730a:	ed91 6b00 	vldr	d6, [r1]
 802730e:	2001      	movs	r0, #1
 8027310:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027314:	1052      	asrs	r2, r2, #1
 8027316:	f101 0108 	add.w	r1, r1, #8
 802731a:	d1f4      	bne.n	8027306 <_strtod_l+0x5a6>
 802731c:	b108      	cbz	r0, 8027322 <_strtod_l+0x5c2>
 802731e:	ec5b ab17 	vmov	sl, fp, d7
 8027322:	9a06      	ldr	r2, [sp, #24]
 8027324:	b1b2      	cbz	r2, 8027354 <_strtod_l+0x5f4>
 8027326:	f3cb 510a 	ubfx	r1, fp, #20, #11
 802732a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 802732e:	2a00      	cmp	r2, #0
 8027330:	4658      	mov	r0, fp
 8027332:	dd0f      	ble.n	8027354 <_strtod_l+0x5f4>
 8027334:	2a1f      	cmp	r2, #31
 8027336:	dd55      	ble.n	80273e4 <_strtod_l+0x684>
 8027338:	2a34      	cmp	r2, #52	@ 0x34
 802733a:	bfde      	ittt	le
 802733c:	f04f 32ff 	movle.w	r2, #4294967295
 8027340:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8027344:	408a      	lslle	r2, r1
 8027346:	f04f 0a00 	mov.w	sl, #0
 802734a:	bfcc      	ite	gt
 802734c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8027350:	ea02 0b00 	andle.w	fp, r2, r0
 8027354:	ec4b ab17 	vmov	d7, sl, fp
 8027358:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802735c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027360:	d0a8      	beq.n	80272b4 <_strtod_l+0x554>
 8027362:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8027364:	9805      	ldr	r0, [sp, #20]
 8027366:	f8cd 9000 	str.w	r9, [sp]
 802736a:	462a      	mov	r2, r5
 802736c:	f7ff f8de 	bl	802652c <__s2b>
 8027370:	9007      	str	r0, [sp, #28]
 8027372:	2800      	cmp	r0, #0
 8027374:	f43f af0a 	beq.w	802718c <_strtod_l+0x42c>
 8027378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802737a:	1b3f      	subs	r7, r7, r4
 802737c:	2b00      	cmp	r3, #0
 802737e:	bfb4      	ite	lt
 8027380:	463b      	movlt	r3, r7
 8027382:	2300      	movge	r3, #0
 8027384:	930a      	str	r3, [sp, #40]	@ 0x28
 8027386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027388:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80275b0 <_strtod_l+0x850>
 802738c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027390:	2400      	movs	r4, #0
 8027392:	930d      	str	r3, [sp, #52]	@ 0x34
 8027394:	4625      	mov	r5, r4
 8027396:	9b07      	ldr	r3, [sp, #28]
 8027398:	9805      	ldr	r0, [sp, #20]
 802739a:	6859      	ldr	r1, [r3, #4]
 802739c:	f7ff f81e 	bl	80263dc <_Balloc>
 80273a0:	4606      	mov	r6, r0
 80273a2:	2800      	cmp	r0, #0
 80273a4:	f43f aef6 	beq.w	8027194 <_strtod_l+0x434>
 80273a8:	9b07      	ldr	r3, [sp, #28]
 80273aa:	691a      	ldr	r2, [r3, #16]
 80273ac:	ec4b ab19 	vmov	d9, sl, fp
 80273b0:	3202      	adds	r2, #2
 80273b2:	f103 010c 	add.w	r1, r3, #12
 80273b6:	0092      	lsls	r2, r2, #2
 80273b8:	300c      	adds	r0, #12
 80273ba:	f7fe f912 	bl	80255e2 <memcpy>
 80273be:	eeb0 0b49 	vmov.f64	d0, d9
 80273c2:	9805      	ldr	r0, [sp, #20]
 80273c4:	aa14      	add	r2, sp, #80	@ 0x50
 80273c6:	a913      	add	r1, sp, #76	@ 0x4c
 80273c8:	f7ff fbe4 	bl	8026b94 <__d2b>
 80273cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80273ce:	2800      	cmp	r0, #0
 80273d0:	f43f aee0 	beq.w	8027194 <_strtod_l+0x434>
 80273d4:	9805      	ldr	r0, [sp, #20]
 80273d6:	2101      	movs	r1, #1
 80273d8:	f7ff f93e 	bl	8026658 <__i2b>
 80273dc:	4605      	mov	r5, r0
 80273de:	b940      	cbnz	r0, 80273f2 <_strtod_l+0x692>
 80273e0:	2500      	movs	r5, #0
 80273e2:	e6d7      	b.n	8027194 <_strtod_l+0x434>
 80273e4:	f04f 31ff 	mov.w	r1, #4294967295
 80273e8:	fa01 f202 	lsl.w	r2, r1, r2
 80273ec:	ea02 0a0a 	and.w	sl, r2, sl
 80273f0:	e7b0      	b.n	8027354 <_strtod_l+0x5f4>
 80273f2:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80273f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80273f6:	2f00      	cmp	r7, #0
 80273f8:	bfab      	itete	ge
 80273fa:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80273fc:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80273fe:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8027402:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8027406:	bfac      	ite	ge
 8027408:	eb07 0903 	addge.w	r9, r7, r3
 802740c:	eba3 0807 	sublt.w	r8, r3, r7
 8027410:	9b06      	ldr	r3, [sp, #24]
 8027412:	1aff      	subs	r7, r7, r3
 8027414:	4417      	add	r7, r2
 8027416:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 802741a:	4a6a      	ldr	r2, [pc, #424]	@ (80275c4 <_strtod_l+0x864>)
 802741c:	3f01      	subs	r7, #1
 802741e:	4297      	cmp	r7, r2
 8027420:	da51      	bge.n	80274c6 <_strtod_l+0x766>
 8027422:	1bd1      	subs	r1, r2, r7
 8027424:	291f      	cmp	r1, #31
 8027426:	eba3 0301 	sub.w	r3, r3, r1
 802742a:	f04f 0201 	mov.w	r2, #1
 802742e:	dc3e      	bgt.n	80274ae <_strtod_l+0x74e>
 8027430:	408a      	lsls	r2, r1
 8027432:	920c      	str	r2, [sp, #48]	@ 0x30
 8027434:	2200      	movs	r2, #0
 8027436:	920b      	str	r2, [sp, #44]	@ 0x2c
 8027438:	eb09 0703 	add.w	r7, r9, r3
 802743c:	4498      	add	r8, r3
 802743e:	9b06      	ldr	r3, [sp, #24]
 8027440:	45b9      	cmp	r9, r7
 8027442:	4498      	add	r8, r3
 8027444:	464b      	mov	r3, r9
 8027446:	bfa8      	it	ge
 8027448:	463b      	movge	r3, r7
 802744a:	4543      	cmp	r3, r8
 802744c:	bfa8      	it	ge
 802744e:	4643      	movge	r3, r8
 8027450:	2b00      	cmp	r3, #0
 8027452:	bfc2      	ittt	gt
 8027454:	1aff      	subgt	r7, r7, r3
 8027456:	eba8 0803 	subgt.w	r8, r8, r3
 802745a:	eba9 0903 	subgt.w	r9, r9, r3
 802745e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027460:	2b00      	cmp	r3, #0
 8027462:	dd16      	ble.n	8027492 <_strtod_l+0x732>
 8027464:	4629      	mov	r1, r5
 8027466:	9805      	ldr	r0, [sp, #20]
 8027468:	461a      	mov	r2, r3
 802746a:	f7ff f9ad 	bl	80267c8 <__pow5mult>
 802746e:	4605      	mov	r5, r0
 8027470:	2800      	cmp	r0, #0
 8027472:	d0b5      	beq.n	80273e0 <_strtod_l+0x680>
 8027474:	4601      	mov	r1, r0
 8027476:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8027478:	9805      	ldr	r0, [sp, #20]
 802747a:	f7ff f903 	bl	8026684 <__multiply>
 802747e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8027480:	2800      	cmp	r0, #0
 8027482:	f43f ae87 	beq.w	8027194 <_strtod_l+0x434>
 8027486:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027488:	9805      	ldr	r0, [sp, #20]
 802748a:	f7fe ffe7 	bl	802645c <_Bfree>
 802748e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027490:	9312      	str	r3, [sp, #72]	@ 0x48
 8027492:	2f00      	cmp	r7, #0
 8027494:	dc1b      	bgt.n	80274ce <_strtod_l+0x76e>
 8027496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027498:	2b00      	cmp	r3, #0
 802749a:	dd21      	ble.n	80274e0 <_strtod_l+0x780>
 802749c:	4631      	mov	r1, r6
 802749e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80274a0:	9805      	ldr	r0, [sp, #20]
 80274a2:	f7ff f991 	bl	80267c8 <__pow5mult>
 80274a6:	4606      	mov	r6, r0
 80274a8:	b9d0      	cbnz	r0, 80274e0 <_strtod_l+0x780>
 80274aa:	2600      	movs	r6, #0
 80274ac:	e672      	b.n	8027194 <_strtod_l+0x434>
 80274ae:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80274b2:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80274b6:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80274ba:	37e2      	adds	r7, #226	@ 0xe2
 80274bc:	fa02 f107 	lsl.w	r1, r2, r7
 80274c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80274c2:	920c      	str	r2, [sp, #48]	@ 0x30
 80274c4:	e7b8      	b.n	8027438 <_strtod_l+0x6d8>
 80274c6:	2200      	movs	r2, #0
 80274c8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80274ca:	2201      	movs	r2, #1
 80274cc:	e7f9      	b.n	80274c2 <_strtod_l+0x762>
 80274ce:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80274d0:	9805      	ldr	r0, [sp, #20]
 80274d2:	463a      	mov	r2, r7
 80274d4:	f7ff f9d2 	bl	802687c <__lshift>
 80274d8:	9012      	str	r0, [sp, #72]	@ 0x48
 80274da:	2800      	cmp	r0, #0
 80274dc:	d1db      	bne.n	8027496 <_strtod_l+0x736>
 80274de:	e659      	b.n	8027194 <_strtod_l+0x434>
 80274e0:	f1b8 0f00 	cmp.w	r8, #0
 80274e4:	dd07      	ble.n	80274f6 <_strtod_l+0x796>
 80274e6:	4631      	mov	r1, r6
 80274e8:	9805      	ldr	r0, [sp, #20]
 80274ea:	4642      	mov	r2, r8
 80274ec:	f7ff f9c6 	bl	802687c <__lshift>
 80274f0:	4606      	mov	r6, r0
 80274f2:	2800      	cmp	r0, #0
 80274f4:	d0d9      	beq.n	80274aa <_strtod_l+0x74a>
 80274f6:	f1b9 0f00 	cmp.w	r9, #0
 80274fa:	dd08      	ble.n	802750e <_strtod_l+0x7ae>
 80274fc:	4629      	mov	r1, r5
 80274fe:	9805      	ldr	r0, [sp, #20]
 8027500:	464a      	mov	r2, r9
 8027502:	f7ff f9bb 	bl	802687c <__lshift>
 8027506:	4605      	mov	r5, r0
 8027508:	2800      	cmp	r0, #0
 802750a:	f43f ae43 	beq.w	8027194 <_strtod_l+0x434>
 802750e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027510:	9805      	ldr	r0, [sp, #20]
 8027512:	4632      	mov	r2, r6
 8027514:	f7ff fa3a 	bl	802698c <__mdiff>
 8027518:	4604      	mov	r4, r0
 802751a:	2800      	cmp	r0, #0
 802751c:	f43f ae3a 	beq.w	8027194 <_strtod_l+0x434>
 8027520:	2300      	movs	r3, #0
 8027522:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8027526:	60c3      	str	r3, [r0, #12]
 8027528:	4629      	mov	r1, r5
 802752a:	f7ff fa13 	bl	8026954 <__mcmp>
 802752e:	2800      	cmp	r0, #0
 8027530:	da4c      	bge.n	80275cc <_strtod_l+0x86c>
 8027532:	ea58 080a 	orrs.w	r8, r8, sl
 8027536:	d172      	bne.n	802761e <_strtod_l+0x8be>
 8027538:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802753c:	2b00      	cmp	r3, #0
 802753e:	d16e      	bne.n	802761e <_strtod_l+0x8be>
 8027540:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8027544:	0d1b      	lsrs	r3, r3, #20
 8027546:	051b      	lsls	r3, r3, #20
 8027548:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802754c:	d967      	bls.n	802761e <_strtod_l+0x8be>
 802754e:	6963      	ldr	r3, [r4, #20]
 8027550:	b913      	cbnz	r3, 8027558 <_strtod_l+0x7f8>
 8027552:	6923      	ldr	r3, [r4, #16]
 8027554:	2b01      	cmp	r3, #1
 8027556:	dd62      	ble.n	802761e <_strtod_l+0x8be>
 8027558:	4621      	mov	r1, r4
 802755a:	2201      	movs	r2, #1
 802755c:	9805      	ldr	r0, [sp, #20]
 802755e:	f7ff f98d 	bl	802687c <__lshift>
 8027562:	4629      	mov	r1, r5
 8027564:	4604      	mov	r4, r0
 8027566:	f7ff f9f5 	bl	8026954 <__mcmp>
 802756a:	2800      	cmp	r0, #0
 802756c:	dd57      	ble.n	802761e <_strtod_l+0x8be>
 802756e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8027572:	9a06      	ldr	r2, [sp, #24]
 8027574:	0d1b      	lsrs	r3, r3, #20
 8027576:	051b      	lsls	r3, r3, #20
 8027578:	2a00      	cmp	r2, #0
 802757a:	d06e      	beq.n	802765a <_strtod_l+0x8fa>
 802757c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8027580:	d86b      	bhi.n	802765a <_strtod_l+0x8fa>
 8027582:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8027586:	f67f ae99 	bls.w	80272bc <_strtod_l+0x55c>
 802758a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80275b8 <_strtod_l+0x858>
 802758e:	ec4b ab16 	vmov	d6, sl, fp
 8027592:	4b0d      	ldr	r3, [pc, #52]	@ (80275c8 <_strtod_l+0x868>)
 8027594:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027598:	ee17 2a90 	vmov	r2, s15
 802759c:	4013      	ands	r3, r2
 802759e:	ec5b ab17 	vmov	sl, fp, d7
 80275a2:	2b00      	cmp	r3, #0
 80275a4:	f47f ae01 	bne.w	80271aa <_strtod_l+0x44a>
 80275a8:	9a05      	ldr	r2, [sp, #20]
 80275aa:	2322      	movs	r3, #34	@ 0x22
 80275ac:	6013      	str	r3, [r2, #0]
 80275ae:	e5fc      	b.n	80271aa <_strtod_l+0x44a>
 80275b0:	ffc00000 	.word	0xffc00000
 80275b4:	41dfffff 	.word	0x41dfffff
 80275b8:	00000000 	.word	0x00000000
 80275bc:	39500000 	.word	0x39500000
 80275c0:	0802c510 	.word	0x0802c510
 80275c4:	fffffc02 	.word	0xfffffc02
 80275c8:	7ff00000 	.word	0x7ff00000
 80275cc:	46d9      	mov	r9, fp
 80275ce:	d15d      	bne.n	802768c <_strtod_l+0x92c>
 80275d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80275d4:	f1b8 0f00 	cmp.w	r8, #0
 80275d8:	d02a      	beq.n	8027630 <_strtod_l+0x8d0>
 80275da:	4aa9      	ldr	r2, [pc, #676]	@ (8027880 <_strtod_l+0xb20>)
 80275dc:	4293      	cmp	r3, r2
 80275de:	d12a      	bne.n	8027636 <_strtod_l+0x8d6>
 80275e0:	9b06      	ldr	r3, [sp, #24]
 80275e2:	4652      	mov	r2, sl
 80275e4:	b1fb      	cbz	r3, 8027626 <_strtod_l+0x8c6>
 80275e6:	4ba7      	ldr	r3, [pc, #668]	@ (8027884 <_strtod_l+0xb24>)
 80275e8:	ea0b 0303 	and.w	r3, fp, r3
 80275ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80275f0:	f04f 31ff 	mov.w	r1, #4294967295
 80275f4:	d81a      	bhi.n	802762c <_strtod_l+0x8cc>
 80275f6:	0d1b      	lsrs	r3, r3, #20
 80275f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80275fc:	fa01 f303 	lsl.w	r3, r1, r3
 8027600:	429a      	cmp	r2, r3
 8027602:	d118      	bne.n	8027636 <_strtod_l+0x8d6>
 8027604:	4ba0      	ldr	r3, [pc, #640]	@ (8027888 <_strtod_l+0xb28>)
 8027606:	4599      	cmp	r9, r3
 8027608:	d102      	bne.n	8027610 <_strtod_l+0x8b0>
 802760a:	3201      	adds	r2, #1
 802760c:	f43f adc2 	beq.w	8027194 <_strtod_l+0x434>
 8027610:	4b9c      	ldr	r3, [pc, #624]	@ (8027884 <_strtod_l+0xb24>)
 8027612:	ea09 0303 	and.w	r3, r9, r3
 8027616:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 802761a:	f04f 0a00 	mov.w	sl, #0
 802761e:	9b06      	ldr	r3, [sp, #24]
 8027620:	2b00      	cmp	r3, #0
 8027622:	d1b2      	bne.n	802758a <_strtod_l+0x82a>
 8027624:	e5c1      	b.n	80271aa <_strtod_l+0x44a>
 8027626:	f04f 33ff 	mov.w	r3, #4294967295
 802762a:	e7e9      	b.n	8027600 <_strtod_l+0x8a0>
 802762c:	460b      	mov	r3, r1
 802762e:	e7e7      	b.n	8027600 <_strtod_l+0x8a0>
 8027630:	ea53 030a 	orrs.w	r3, r3, sl
 8027634:	d09b      	beq.n	802756e <_strtod_l+0x80e>
 8027636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027638:	b1c3      	cbz	r3, 802766c <_strtod_l+0x90c>
 802763a:	ea13 0f09 	tst.w	r3, r9
 802763e:	d0ee      	beq.n	802761e <_strtod_l+0x8be>
 8027640:	9a06      	ldr	r2, [sp, #24]
 8027642:	4650      	mov	r0, sl
 8027644:	4659      	mov	r1, fp
 8027646:	f1b8 0f00 	cmp.w	r8, #0
 802764a:	d013      	beq.n	8027674 <_strtod_l+0x914>
 802764c:	f7ff fb6d 	bl	8026d2a <sulp>
 8027650:	ee39 7b00 	vadd.f64	d7, d9, d0
 8027654:	ec5b ab17 	vmov	sl, fp, d7
 8027658:	e7e1      	b.n	802761e <_strtod_l+0x8be>
 802765a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802765e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8027662:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8027666:	f04f 3aff 	mov.w	sl, #4294967295
 802766a:	e7d8      	b.n	802761e <_strtod_l+0x8be>
 802766c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802766e:	ea13 0f0a 	tst.w	r3, sl
 8027672:	e7e4      	b.n	802763e <_strtod_l+0x8de>
 8027674:	f7ff fb59 	bl	8026d2a <sulp>
 8027678:	ee39 0b40 	vsub.f64	d0, d9, d0
 802767c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8027680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027684:	ec5b ab10 	vmov	sl, fp, d0
 8027688:	d1c9      	bne.n	802761e <_strtod_l+0x8be>
 802768a:	e617      	b.n	80272bc <_strtod_l+0x55c>
 802768c:	4629      	mov	r1, r5
 802768e:	4620      	mov	r0, r4
 8027690:	f7ff fad8 	bl	8026c44 <__ratio>
 8027694:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8027698:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802769c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80276a0:	d85d      	bhi.n	802775e <_strtod_l+0x9fe>
 80276a2:	f1b8 0f00 	cmp.w	r8, #0
 80276a6:	d164      	bne.n	8027772 <_strtod_l+0xa12>
 80276a8:	f1ba 0f00 	cmp.w	sl, #0
 80276ac:	d14b      	bne.n	8027746 <_strtod_l+0x9e6>
 80276ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80276b2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80276b6:	2b00      	cmp	r3, #0
 80276b8:	d160      	bne.n	802777c <_strtod_l+0xa1c>
 80276ba:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80276be:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80276c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80276c6:	d401      	bmi.n	80276cc <_strtod_l+0x96c>
 80276c8:	ee20 8b08 	vmul.f64	d8, d0, d8
 80276cc:	eeb1 ab48 	vneg.f64	d10, d8
 80276d0:	486c      	ldr	r0, [pc, #432]	@ (8027884 <_strtod_l+0xb24>)
 80276d2:	496e      	ldr	r1, [pc, #440]	@ (802788c <_strtod_l+0xb2c>)
 80276d4:	ea09 0700 	and.w	r7, r9, r0
 80276d8:	428f      	cmp	r7, r1
 80276da:	ec53 2b1a 	vmov	r2, r3, d10
 80276de:	d17d      	bne.n	80277dc <_strtod_l+0xa7c>
 80276e0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80276e4:	ec4b ab1c 	vmov	d12, sl, fp
 80276e8:	eeb0 0b4c 	vmov.f64	d0, d12
 80276ec:	f7ff f9e2 	bl	8026ab4 <__ulp>
 80276f0:	4864      	ldr	r0, [pc, #400]	@ (8027884 <_strtod_l+0xb24>)
 80276f2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80276f6:	ee1c 3a90 	vmov	r3, s25
 80276fa:	4a65      	ldr	r2, [pc, #404]	@ (8027890 <_strtod_l+0xb30>)
 80276fc:	ea03 0100 	and.w	r1, r3, r0
 8027700:	4291      	cmp	r1, r2
 8027702:	ec5b ab1c 	vmov	sl, fp, d12
 8027706:	d93c      	bls.n	8027782 <_strtod_l+0xa22>
 8027708:	ee19 2a90 	vmov	r2, s19
 802770c:	4b5e      	ldr	r3, [pc, #376]	@ (8027888 <_strtod_l+0xb28>)
 802770e:	429a      	cmp	r2, r3
 8027710:	d104      	bne.n	802771c <_strtod_l+0x9bc>
 8027712:	ee19 3a10 	vmov	r3, s18
 8027716:	3301      	adds	r3, #1
 8027718:	f43f ad3c 	beq.w	8027194 <_strtod_l+0x434>
 802771c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8027888 <_strtod_l+0xb28>
 8027720:	f04f 3aff 	mov.w	sl, #4294967295
 8027724:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027726:	9805      	ldr	r0, [sp, #20]
 8027728:	f7fe fe98 	bl	802645c <_Bfree>
 802772c:	9805      	ldr	r0, [sp, #20]
 802772e:	4631      	mov	r1, r6
 8027730:	f7fe fe94 	bl	802645c <_Bfree>
 8027734:	9805      	ldr	r0, [sp, #20]
 8027736:	4629      	mov	r1, r5
 8027738:	f7fe fe90 	bl	802645c <_Bfree>
 802773c:	9805      	ldr	r0, [sp, #20]
 802773e:	4621      	mov	r1, r4
 8027740:	f7fe fe8c 	bl	802645c <_Bfree>
 8027744:	e627      	b.n	8027396 <_strtod_l+0x636>
 8027746:	f1ba 0f01 	cmp.w	sl, #1
 802774a:	d103      	bne.n	8027754 <_strtod_l+0x9f4>
 802774c:	f1bb 0f00 	cmp.w	fp, #0
 8027750:	f43f adb4 	beq.w	80272bc <_strtod_l+0x55c>
 8027754:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8027758:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 802775c:	e7b8      	b.n	80276d0 <_strtod_l+0x970>
 802775e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8027762:	ee20 8b08 	vmul.f64	d8, d0, d8
 8027766:	f1b8 0f00 	cmp.w	r8, #0
 802776a:	d0af      	beq.n	80276cc <_strtod_l+0x96c>
 802776c:	eeb0 ab48 	vmov.f64	d10, d8
 8027770:	e7ae      	b.n	80276d0 <_strtod_l+0x970>
 8027772:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8027776:	eeb0 8b4a 	vmov.f64	d8, d10
 802777a:	e7a9      	b.n	80276d0 <_strtod_l+0x970>
 802777c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8027780:	e7a6      	b.n	80276d0 <_strtod_l+0x970>
 8027782:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8027786:	9b06      	ldr	r3, [sp, #24]
 8027788:	46d9      	mov	r9, fp
 802778a:	2b00      	cmp	r3, #0
 802778c:	d1ca      	bne.n	8027724 <_strtod_l+0x9c4>
 802778e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8027792:	0d1b      	lsrs	r3, r3, #20
 8027794:	051b      	lsls	r3, r3, #20
 8027796:	429f      	cmp	r7, r3
 8027798:	d1c4      	bne.n	8027724 <_strtod_l+0x9c4>
 802779a:	ec51 0b18 	vmov	r0, r1, d8
 802779e:	f7d8 ffe3 	bl	8000768 <__aeabi_d2lz>
 80277a2:	f7d8 ff9b 	bl	80006dc <__aeabi_l2d>
 80277a6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80277aa:	ec41 0b17 	vmov	d7, r0, r1
 80277ae:	ea49 090a 	orr.w	r9, r9, sl
 80277b2:	ea59 0908 	orrs.w	r9, r9, r8
 80277b6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80277ba:	d03c      	beq.n	8027836 <_strtod_l+0xad6>
 80277bc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8027868 <_strtod_l+0xb08>
 80277c0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80277c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80277c8:	f53f acef 	bmi.w	80271aa <_strtod_l+0x44a>
 80277cc:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8027870 <_strtod_l+0xb10>
 80277d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80277d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80277d8:	dda4      	ble.n	8027724 <_strtod_l+0x9c4>
 80277da:	e4e6      	b.n	80271aa <_strtod_l+0x44a>
 80277dc:	9906      	ldr	r1, [sp, #24]
 80277de:	b1e1      	cbz	r1, 802781a <_strtod_l+0xaba>
 80277e0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80277e4:	d819      	bhi.n	802781a <_strtod_l+0xaba>
 80277e6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80277ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80277ee:	d811      	bhi.n	8027814 <_strtod_l+0xab4>
 80277f0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80277f4:	ee18 3a10 	vmov	r3, s16
 80277f8:	2b01      	cmp	r3, #1
 80277fa:	bf38      	it	cc
 80277fc:	2301      	movcc	r3, #1
 80277fe:	ee08 3a10 	vmov	s16, r3
 8027802:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8027806:	f1b8 0f00 	cmp.w	r8, #0
 802780a:	d111      	bne.n	8027830 <_strtod_l+0xad0>
 802780c:	eeb1 7b48 	vneg.f64	d7, d8
 8027810:	ec53 2b17 	vmov	r2, r3, d7
 8027814:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8027818:	1bcb      	subs	r3, r1, r7
 802781a:	eeb0 0b49 	vmov.f64	d0, d9
 802781e:	ec43 2b1a 	vmov	d10, r2, r3
 8027822:	f7ff f947 	bl	8026ab4 <__ulp>
 8027826:	eeaa 9b00 	vfma.f64	d9, d10, d0
 802782a:	ec5b ab19 	vmov	sl, fp, d9
 802782e:	e7aa      	b.n	8027786 <_strtod_l+0xa26>
 8027830:	eeb0 7b48 	vmov.f64	d7, d8
 8027834:	e7ec      	b.n	8027810 <_strtod_l+0xab0>
 8027836:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8027878 <_strtod_l+0xb18>
 802783a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802783e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027842:	f57f af6f 	bpl.w	8027724 <_strtod_l+0x9c4>
 8027846:	e4b0      	b.n	80271aa <_strtod_l+0x44a>
 8027848:	2300      	movs	r3, #0
 802784a:	9308      	str	r3, [sp, #32]
 802784c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802784e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027850:	6013      	str	r3, [r2, #0]
 8027852:	f7ff bac4 	b.w	8026dde <_strtod_l+0x7e>
 8027856:	2a65      	cmp	r2, #101	@ 0x65
 8027858:	f43f abbf 	beq.w	8026fda <_strtod_l+0x27a>
 802785c:	2a45      	cmp	r2, #69	@ 0x45
 802785e:	f43f abbc 	beq.w	8026fda <_strtod_l+0x27a>
 8027862:	2101      	movs	r1, #1
 8027864:	f7ff bbf4 	b.w	8027050 <_strtod_l+0x2f0>
 8027868:	94a03595 	.word	0x94a03595
 802786c:	3fdfffff 	.word	0x3fdfffff
 8027870:	35afe535 	.word	0x35afe535
 8027874:	3fe00000 	.word	0x3fe00000
 8027878:	94a03595 	.word	0x94a03595
 802787c:	3fcfffff 	.word	0x3fcfffff
 8027880:	000fffff 	.word	0x000fffff
 8027884:	7ff00000 	.word	0x7ff00000
 8027888:	7fefffff 	.word	0x7fefffff
 802788c:	7fe00000 	.word	0x7fe00000
 8027890:	7c9fffff 	.word	0x7c9fffff

08027894 <_strtod_r>:
 8027894:	4b01      	ldr	r3, [pc, #4]	@ (802789c <_strtod_r+0x8>)
 8027896:	f7ff ba63 	b.w	8026d60 <_strtod_l>
 802789a:	bf00      	nop
 802789c:	240003f4 	.word	0x240003f4

080278a0 <__ssputs_r>:
 80278a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80278a4:	688e      	ldr	r6, [r1, #8]
 80278a6:	461f      	mov	r7, r3
 80278a8:	42be      	cmp	r6, r7
 80278aa:	680b      	ldr	r3, [r1, #0]
 80278ac:	4682      	mov	sl, r0
 80278ae:	460c      	mov	r4, r1
 80278b0:	4690      	mov	r8, r2
 80278b2:	d82d      	bhi.n	8027910 <__ssputs_r+0x70>
 80278b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80278b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80278bc:	d026      	beq.n	802790c <__ssputs_r+0x6c>
 80278be:	6965      	ldr	r5, [r4, #20]
 80278c0:	6909      	ldr	r1, [r1, #16]
 80278c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80278c6:	eba3 0901 	sub.w	r9, r3, r1
 80278ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80278ce:	1c7b      	adds	r3, r7, #1
 80278d0:	444b      	add	r3, r9
 80278d2:	106d      	asrs	r5, r5, #1
 80278d4:	429d      	cmp	r5, r3
 80278d6:	bf38      	it	cc
 80278d8:	461d      	movcc	r5, r3
 80278da:	0553      	lsls	r3, r2, #21
 80278dc:	d527      	bpl.n	802792e <__ssputs_r+0x8e>
 80278de:	4629      	mov	r1, r5
 80278e0:	f7fe fcf0 	bl	80262c4 <_malloc_r>
 80278e4:	4606      	mov	r6, r0
 80278e6:	b360      	cbz	r0, 8027942 <__ssputs_r+0xa2>
 80278e8:	6921      	ldr	r1, [r4, #16]
 80278ea:	464a      	mov	r2, r9
 80278ec:	f7fd fe79 	bl	80255e2 <memcpy>
 80278f0:	89a3      	ldrh	r3, [r4, #12]
 80278f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80278f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80278fa:	81a3      	strh	r3, [r4, #12]
 80278fc:	6126      	str	r6, [r4, #16]
 80278fe:	6165      	str	r5, [r4, #20]
 8027900:	444e      	add	r6, r9
 8027902:	eba5 0509 	sub.w	r5, r5, r9
 8027906:	6026      	str	r6, [r4, #0]
 8027908:	60a5      	str	r5, [r4, #8]
 802790a:	463e      	mov	r6, r7
 802790c:	42be      	cmp	r6, r7
 802790e:	d900      	bls.n	8027912 <__ssputs_r+0x72>
 8027910:	463e      	mov	r6, r7
 8027912:	6820      	ldr	r0, [r4, #0]
 8027914:	4632      	mov	r2, r6
 8027916:	4641      	mov	r1, r8
 8027918:	f000 fd57 	bl	80283ca <memmove>
 802791c:	68a3      	ldr	r3, [r4, #8]
 802791e:	1b9b      	subs	r3, r3, r6
 8027920:	60a3      	str	r3, [r4, #8]
 8027922:	6823      	ldr	r3, [r4, #0]
 8027924:	4433      	add	r3, r6
 8027926:	6023      	str	r3, [r4, #0]
 8027928:	2000      	movs	r0, #0
 802792a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802792e:	462a      	mov	r2, r5
 8027930:	f001 f90f 	bl	8028b52 <_realloc_r>
 8027934:	4606      	mov	r6, r0
 8027936:	2800      	cmp	r0, #0
 8027938:	d1e0      	bne.n	80278fc <__ssputs_r+0x5c>
 802793a:	6921      	ldr	r1, [r4, #16]
 802793c:	4650      	mov	r0, sl
 802793e:	f7fe fc4d 	bl	80261dc <_free_r>
 8027942:	230c      	movs	r3, #12
 8027944:	f8ca 3000 	str.w	r3, [sl]
 8027948:	89a3      	ldrh	r3, [r4, #12]
 802794a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802794e:	81a3      	strh	r3, [r4, #12]
 8027950:	f04f 30ff 	mov.w	r0, #4294967295
 8027954:	e7e9      	b.n	802792a <__ssputs_r+0x8a>
	...

08027958 <_svfiprintf_r>:
 8027958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802795c:	4698      	mov	r8, r3
 802795e:	898b      	ldrh	r3, [r1, #12]
 8027960:	061b      	lsls	r3, r3, #24
 8027962:	b09d      	sub	sp, #116	@ 0x74
 8027964:	4607      	mov	r7, r0
 8027966:	460d      	mov	r5, r1
 8027968:	4614      	mov	r4, r2
 802796a:	d510      	bpl.n	802798e <_svfiprintf_r+0x36>
 802796c:	690b      	ldr	r3, [r1, #16]
 802796e:	b973      	cbnz	r3, 802798e <_svfiprintf_r+0x36>
 8027970:	2140      	movs	r1, #64	@ 0x40
 8027972:	f7fe fca7 	bl	80262c4 <_malloc_r>
 8027976:	6028      	str	r0, [r5, #0]
 8027978:	6128      	str	r0, [r5, #16]
 802797a:	b930      	cbnz	r0, 802798a <_svfiprintf_r+0x32>
 802797c:	230c      	movs	r3, #12
 802797e:	603b      	str	r3, [r7, #0]
 8027980:	f04f 30ff 	mov.w	r0, #4294967295
 8027984:	b01d      	add	sp, #116	@ 0x74
 8027986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802798a:	2340      	movs	r3, #64	@ 0x40
 802798c:	616b      	str	r3, [r5, #20]
 802798e:	2300      	movs	r3, #0
 8027990:	9309      	str	r3, [sp, #36]	@ 0x24
 8027992:	2320      	movs	r3, #32
 8027994:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8027998:	f8cd 800c 	str.w	r8, [sp, #12]
 802799c:	2330      	movs	r3, #48	@ 0x30
 802799e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8027b3c <_svfiprintf_r+0x1e4>
 80279a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80279a6:	f04f 0901 	mov.w	r9, #1
 80279aa:	4623      	mov	r3, r4
 80279ac:	469a      	mov	sl, r3
 80279ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80279b2:	b10a      	cbz	r2, 80279b8 <_svfiprintf_r+0x60>
 80279b4:	2a25      	cmp	r2, #37	@ 0x25
 80279b6:	d1f9      	bne.n	80279ac <_svfiprintf_r+0x54>
 80279b8:	ebba 0b04 	subs.w	fp, sl, r4
 80279bc:	d00b      	beq.n	80279d6 <_svfiprintf_r+0x7e>
 80279be:	465b      	mov	r3, fp
 80279c0:	4622      	mov	r2, r4
 80279c2:	4629      	mov	r1, r5
 80279c4:	4638      	mov	r0, r7
 80279c6:	f7ff ff6b 	bl	80278a0 <__ssputs_r>
 80279ca:	3001      	adds	r0, #1
 80279cc:	f000 80a7 	beq.w	8027b1e <_svfiprintf_r+0x1c6>
 80279d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80279d2:	445a      	add	r2, fp
 80279d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80279d6:	f89a 3000 	ldrb.w	r3, [sl]
 80279da:	2b00      	cmp	r3, #0
 80279dc:	f000 809f 	beq.w	8027b1e <_svfiprintf_r+0x1c6>
 80279e0:	2300      	movs	r3, #0
 80279e2:	f04f 32ff 	mov.w	r2, #4294967295
 80279e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80279ea:	f10a 0a01 	add.w	sl, sl, #1
 80279ee:	9304      	str	r3, [sp, #16]
 80279f0:	9307      	str	r3, [sp, #28]
 80279f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80279f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80279f8:	4654      	mov	r4, sl
 80279fa:	2205      	movs	r2, #5
 80279fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027a00:	484e      	ldr	r0, [pc, #312]	@ (8027b3c <_svfiprintf_r+0x1e4>)
 8027a02:	f7d8 fc85 	bl	8000310 <memchr>
 8027a06:	9a04      	ldr	r2, [sp, #16]
 8027a08:	b9d8      	cbnz	r0, 8027a42 <_svfiprintf_r+0xea>
 8027a0a:	06d0      	lsls	r0, r2, #27
 8027a0c:	bf44      	itt	mi
 8027a0e:	2320      	movmi	r3, #32
 8027a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027a14:	0711      	lsls	r1, r2, #28
 8027a16:	bf44      	itt	mi
 8027a18:	232b      	movmi	r3, #43	@ 0x2b
 8027a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8027a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8027a24:	d015      	beq.n	8027a52 <_svfiprintf_r+0xfa>
 8027a26:	9a07      	ldr	r2, [sp, #28]
 8027a28:	4654      	mov	r4, sl
 8027a2a:	2000      	movs	r0, #0
 8027a2c:	f04f 0c0a 	mov.w	ip, #10
 8027a30:	4621      	mov	r1, r4
 8027a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027a36:	3b30      	subs	r3, #48	@ 0x30
 8027a38:	2b09      	cmp	r3, #9
 8027a3a:	d94b      	bls.n	8027ad4 <_svfiprintf_r+0x17c>
 8027a3c:	b1b0      	cbz	r0, 8027a6c <_svfiprintf_r+0x114>
 8027a3e:	9207      	str	r2, [sp, #28]
 8027a40:	e014      	b.n	8027a6c <_svfiprintf_r+0x114>
 8027a42:	eba0 0308 	sub.w	r3, r0, r8
 8027a46:	fa09 f303 	lsl.w	r3, r9, r3
 8027a4a:	4313      	orrs	r3, r2
 8027a4c:	9304      	str	r3, [sp, #16]
 8027a4e:	46a2      	mov	sl, r4
 8027a50:	e7d2      	b.n	80279f8 <_svfiprintf_r+0xa0>
 8027a52:	9b03      	ldr	r3, [sp, #12]
 8027a54:	1d19      	adds	r1, r3, #4
 8027a56:	681b      	ldr	r3, [r3, #0]
 8027a58:	9103      	str	r1, [sp, #12]
 8027a5a:	2b00      	cmp	r3, #0
 8027a5c:	bfbb      	ittet	lt
 8027a5e:	425b      	neglt	r3, r3
 8027a60:	f042 0202 	orrlt.w	r2, r2, #2
 8027a64:	9307      	strge	r3, [sp, #28]
 8027a66:	9307      	strlt	r3, [sp, #28]
 8027a68:	bfb8      	it	lt
 8027a6a:	9204      	strlt	r2, [sp, #16]
 8027a6c:	7823      	ldrb	r3, [r4, #0]
 8027a6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8027a70:	d10a      	bne.n	8027a88 <_svfiprintf_r+0x130>
 8027a72:	7863      	ldrb	r3, [r4, #1]
 8027a74:	2b2a      	cmp	r3, #42	@ 0x2a
 8027a76:	d132      	bne.n	8027ade <_svfiprintf_r+0x186>
 8027a78:	9b03      	ldr	r3, [sp, #12]
 8027a7a:	1d1a      	adds	r2, r3, #4
 8027a7c:	681b      	ldr	r3, [r3, #0]
 8027a7e:	9203      	str	r2, [sp, #12]
 8027a80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8027a84:	3402      	adds	r4, #2
 8027a86:	9305      	str	r3, [sp, #20]
 8027a88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8027b4c <_svfiprintf_r+0x1f4>
 8027a8c:	7821      	ldrb	r1, [r4, #0]
 8027a8e:	2203      	movs	r2, #3
 8027a90:	4650      	mov	r0, sl
 8027a92:	f7d8 fc3d 	bl	8000310 <memchr>
 8027a96:	b138      	cbz	r0, 8027aa8 <_svfiprintf_r+0x150>
 8027a98:	9b04      	ldr	r3, [sp, #16]
 8027a9a:	eba0 000a 	sub.w	r0, r0, sl
 8027a9e:	2240      	movs	r2, #64	@ 0x40
 8027aa0:	4082      	lsls	r2, r0
 8027aa2:	4313      	orrs	r3, r2
 8027aa4:	3401      	adds	r4, #1
 8027aa6:	9304      	str	r3, [sp, #16]
 8027aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027aac:	4824      	ldr	r0, [pc, #144]	@ (8027b40 <_svfiprintf_r+0x1e8>)
 8027aae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8027ab2:	2206      	movs	r2, #6
 8027ab4:	f7d8 fc2c 	bl	8000310 <memchr>
 8027ab8:	2800      	cmp	r0, #0
 8027aba:	d036      	beq.n	8027b2a <_svfiprintf_r+0x1d2>
 8027abc:	4b21      	ldr	r3, [pc, #132]	@ (8027b44 <_svfiprintf_r+0x1ec>)
 8027abe:	bb1b      	cbnz	r3, 8027b08 <_svfiprintf_r+0x1b0>
 8027ac0:	9b03      	ldr	r3, [sp, #12]
 8027ac2:	3307      	adds	r3, #7
 8027ac4:	f023 0307 	bic.w	r3, r3, #7
 8027ac8:	3308      	adds	r3, #8
 8027aca:	9303      	str	r3, [sp, #12]
 8027acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ace:	4433      	add	r3, r6
 8027ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8027ad2:	e76a      	b.n	80279aa <_svfiprintf_r+0x52>
 8027ad4:	fb0c 3202 	mla	r2, ip, r2, r3
 8027ad8:	460c      	mov	r4, r1
 8027ada:	2001      	movs	r0, #1
 8027adc:	e7a8      	b.n	8027a30 <_svfiprintf_r+0xd8>
 8027ade:	2300      	movs	r3, #0
 8027ae0:	3401      	adds	r4, #1
 8027ae2:	9305      	str	r3, [sp, #20]
 8027ae4:	4619      	mov	r1, r3
 8027ae6:	f04f 0c0a 	mov.w	ip, #10
 8027aea:	4620      	mov	r0, r4
 8027aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027af0:	3a30      	subs	r2, #48	@ 0x30
 8027af2:	2a09      	cmp	r2, #9
 8027af4:	d903      	bls.n	8027afe <_svfiprintf_r+0x1a6>
 8027af6:	2b00      	cmp	r3, #0
 8027af8:	d0c6      	beq.n	8027a88 <_svfiprintf_r+0x130>
 8027afa:	9105      	str	r1, [sp, #20]
 8027afc:	e7c4      	b.n	8027a88 <_svfiprintf_r+0x130>
 8027afe:	fb0c 2101 	mla	r1, ip, r1, r2
 8027b02:	4604      	mov	r4, r0
 8027b04:	2301      	movs	r3, #1
 8027b06:	e7f0      	b.n	8027aea <_svfiprintf_r+0x192>
 8027b08:	ab03      	add	r3, sp, #12
 8027b0a:	9300      	str	r3, [sp, #0]
 8027b0c:	462a      	mov	r2, r5
 8027b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8027b48 <_svfiprintf_r+0x1f0>)
 8027b10:	a904      	add	r1, sp, #16
 8027b12:	4638      	mov	r0, r7
 8027b14:	f7fc fd64 	bl	80245e0 <_printf_float>
 8027b18:	1c42      	adds	r2, r0, #1
 8027b1a:	4606      	mov	r6, r0
 8027b1c:	d1d6      	bne.n	8027acc <_svfiprintf_r+0x174>
 8027b1e:	89ab      	ldrh	r3, [r5, #12]
 8027b20:	065b      	lsls	r3, r3, #25
 8027b22:	f53f af2d 	bmi.w	8027980 <_svfiprintf_r+0x28>
 8027b26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027b28:	e72c      	b.n	8027984 <_svfiprintf_r+0x2c>
 8027b2a:	ab03      	add	r3, sp, #12
 8027b2c:	9300      	str	r3, [sp, #0]
 8027b2e:	462a      	mov	r2, r5
 8027b30:	4b05      	ldr	r3, [pc, #20]	@ (8027b48 <_svfiprintf_r+0x1f0>)
 8027b32:	a904      	add	r1, sp, #16
 8027b34:	4638      	mov	r0, r7
 8027b36:	f7fc ffdb 	bl	8024af0 <_printf_i>
 8027b3a:	e7ed      	b.n	8027b18 <_svfiprintf_r+0x1c0>
 8027b3c:	0802c318 	.word	0x0802c318
 8027b40:	0802c322 	.word	0x0802c322
 8027b44:	080245e1 	.word	0x080245e1
 8027b48:	080278a1 	.word	0x080278a1
 8027b4c:	0802c31e 	.word	0x0802c31e

08027b50 <_sungetc_r>:
 8027b50:	b538      	push	{r3, r4, r5, lr}
 8027b52:	1c4b      	adds	r3, r1, #1
 8027b54:	4614      	mov	r4, r2
 8027b56:	d103      	bne.n	8027b60 <_sungetc_r+0x10>
 8027b58:	f04f 35ff 	mov.w	r5, #4294967295
 8027b5c:	4628      	mov	r0, r5
 8027b5e:	bd38      	pop	{r3, r4, r5, pc}
 8027b60:	8993      	ldrh	r3, [r2, #12]
 8027b62:	f023 0320 	bic.w	r3, r3, #32
 8027b66:	8193      	strh	r3, [r2, #12]
 8027b68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8027b6a:	6852      	ldr	r2, [r2, #4]
 8027b6c:	b2cd      	uxtb	r5, r1
 8027b6e:	b18b      	cbz	r3, 8027b94 <_sungetc_r+0x44>
 8027b70:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8027b72:	4293      	cmp	r3, r2
 8027b74:	dd08      	ble.n	8027b88 <_sungetc_r+0x38>
 8027b76:	6823      	ldr	r3, [r4, #0]
 8027b78:	1e5a      	subs	r2, r3, #1
 8027b7a:	6022      	str	r2, [r4, #0]
 8027b7c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8027b80:	6863      	ldr	r3, [r4, #4]
 8027b82:	3301      	adds	r3, #1
 8027b84:	6063      	str	r3, [r4, #4]
 8027b86:	e7e9      	b.n	8027b5c <_sungetc_r+0xc>
 8027b88:	4621      	mov	r1, r4
 8027b8a:	f000 fbe4 	bl	8028356 <__submore>
 8027b8e:	2800      	cmp	r0, #0
 8027b90:	d0f1      	beq.n	8027b76 <_sungetc_r+0x26>
 8027b92:	e7e1      	b.n	8027b58 <_sungetc_r+0x8>
 8027b94:	6921      	ldr	r1, [r4, #16]
 8027b96:	6823      	ldr	r3, [r4, #0]
 8027b98:	b151      	cbz	r1, 8027bb0 <_sungetc_r+0x60>
 8027b9a:	4299      	cmp	r1, r3
 8027b9c:	d208      	bcs.n	8027bb0 <_sungetc_r+0x60>
 8027b9e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8027ba2:	42a9      	cmp	r1, r5
 8027ba4:	d104      	bne.n	8027bb0 <_sungetc_r+0x60>
 8027ba6:	3b01      	subs	r3, #1
 8027ba8:	3201      	adds	r2, #1
 8027baa:	6023      	str	r3, [r4, #0]
 8027bac:	6062      	str	r2, [r4, #4]
 8027bae:	e7d5      	b.n	8027b5c <_sungetc_r+0xc>
 8027bb0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8027bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8027bba:	2303      	movs	r3, #3
 8027bbc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8027bbe:	4623      	mov	r3, r4
 8027bc0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8027bc4:	6023      	str	r3, [r4, #0]
 8027bc6:	2301      	movs	r3, #1
 8027bc8:	e7dc      	b.n	8027b84 <_sungetc_r+0x34>

08027bca <__ssrefill_r>:
 8027bca:	b510      	push	{r4, lr}
 8027bcc:	460c      	mov	r4, r1
 8027bce:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8027bd0:	b169      	cbz	r1, 8027bee <__ssrefill_r+0x24>
 8027bd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027bd6:	4299      	cmp	r1, r3
 8027bd8:	d001      	beq.n	8027bde <__ssrefill_r+0x14>
 8027bda:	f7fe faff 	bl	80261dc <_free_r>
 8027bde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027be0:	6063      	str	r3, [r4, #4]
 8027be2:	2000      	movs	r0, #0
 8027be4:	6360      	str	r0, [r4, #52]	@ 0x34
 8027be6:	b113      	cbz	r3, 8027bee <__ssrefill_r+0x24>
 8027be8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8027bea:	6023      	str	r3, [r4, #0]
 8027bec:	bd10      	pop	{r4, pc}
 8027bee:	6923      	ldr	r3, [r4, #16]
 8027bf0:	6023      	str	r3, [r4, #0]
 8027bf2:	2300      	movs	r3, #0
 8027bf4:	6063      	str	r3, [r4, #4]
 8027bf6:	89a3      	ldrh	r3, [r4, #12]
 8027bf8:	f043 0320 	orr.w	r3, r3, #32
 8027bfc:	81a3      	strh	r3, [r4, #12]
 8027bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8027c02:	e7f3      	b.n	8027bec <__ssrefill_r+0x22>

08027c04 <__ssvfiscanf_r>:
 8027c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c08:	460c      	mov	r4, r1
 8027c0a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8027c0e:	2100      	movs	r1, #0
 8027c10:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8027c14:	49a6      	ldr	r1, [pc, #664]	@ (8027eb0 <__ssvfiscanf_r+0x2ac>)
 8027c16:	91a0      	str	r1, [sp, #640]	@ 0x280
 8027c18:	f10d 0804 	add.w	r8, sp, #4
 8027c1c:	49a5      	ldr	r1, [pc, #660]	@ (8027eb4 <__ssvfiscanf_r+0x2b0>)
 8027c1e:	4fa6      	ldr	r7, [pc, #664]	@ (8027eb8 <__ssvfiscanf_r+0x2b4>)
 8027c20:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8027c24:	4606      	mov	r6, r0
 8027c26:	91a1      	str	r1, [sp, #644]	@ 0x284
 8027c28:	9300      	str	r3, [sp, #0]
 8027c2a:	f892 9000 	ldrb.w	r9, [r2]
 8027c2e:	f1b9 0f00 	cmp.w	r9, #0
 8027c32:	f000 8158 	beq.w	8027ee6 <__ssvfiscanf_r+0x2e2>
 8027c36:	f817 3009 	ldrb.w	r3, [r7, r9]
 8027c3a:	f013 0308 	ands.w	r3, r3, #8
 8027c3e:	f102 0501 	add.w	r5, r2, #1
 8027c42:	d019      	beq.n	8027c78 <__ssvfiscanf_r+0x74>
 8027c44:	6863      	ldr	r3, [r4, #4]
 8027c46:	2b00      	cmp	r3, #0
 8027c48:	dd0f      	ble.n	8027c6a <__ssvfiscanf_r+0x66>
 8027c4a:	6823      	ldr	r3, [r4, #0]
 8027c4c:	781a      	ldrb	r2, [r3, #0]
 8027c4e:	5cba      	ldrb	r2, [r7, r2]
 8027c50:	0712      	lsls	r2, r2, #28
 8027c52:	d401      	bmi.n	8027c58 <__ssvfiscanf_r+0x54>
 8027c54:	462a      	mov	r2, r5
 8027c56:	e7e8      	b.n	8027c2a <__ssvfiscanf_r+0x26>
 8027c58:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027c5a:	3201      	adds	r2, #1
 8027c5c:	9245      	str	r2, [sp, #276]	@ 0x114
 8027c5e:	6862      	ldr	r2, [r4, #4]
 8027c60:	3301      	adds	r3, #1
 8027c62:	3a01      	subs	r2, #1
 8027c64:	6062      	str	r2, [r4, #4]
 8027c66:	6023      	str	r3, [r4, #0]
 8027c68:	e7ec      	b.n	8027c44 <__ssvfiscanf_r+0x40>
 8027c6a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027c6c:	4621      	mov	r1, r4
 8027c6e:	4630      	mov	r0, r6
 8027c70:	4798      	blx	r3
 8027c72:	2800      	cmp	r0, #0
 8027c74:	d0e9      	beq.n	8027c4a <__ssvfiscanf_r+0x46>
 8027c76:	e7ed      	b.n	8027c54 <__ssvfiscanf_r+0x50>
 8027c78:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8027c7c:	f040 8085 	bne.w	8027d8a <__ssvfiscanf_r+0x186>
 8027c80:	9341      	str	r3, [sp, #260]	@ 0x104
 8027c82:	9343      	str	r3, [sp, #268]	@ 0x10c
 8027c84:	7853      	ldrb	r3, [r2, #1]
 8027c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8027c88:	bf02      	ittt	eq
 8027c8a:	2310      	moveq	r3, #16
 8027c8c:	1c95      	addeq	r5, r2, #2
 8027c8e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8027c90:	220a      	movs	r2, #10
 8027c92:	46aa      	mov	sl, r5
 8027c94:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8027c98:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8027c9c:	2b09      	cmp	r3, #9
 8027c9e:	d91e      	bls.n	8027cde <__ssvfiscanf_r+0xda>
 8027ca0:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8027ebc <__ssvfiscanf_r+0x2b8>
 8027ca4:	2203      	movs	r2, #3
 8027ca6:	4658      	mov	r0, fp
 8027ca8:	f7d8 fb32 	bl	8000310 <memchr>
 8027cac:	b138      	cbz	r0, 8027cbe <__ssvfiscanf_r+0xba>
 8027cae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027cb0:	eba0 000b 	sub.w	r0, r0, fp
 8027cb4:	2301      	movs	r3, #1
 8027cb6:	4083      	lsls	r3, r0
 8027cb8:	4313      	orrs	r3, r2
 8027cba:	9341      	str	r3, [sp, #260]	@ 0x104
 8027cbc:	4655      	mov	r5, sl
 8027cbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8027cc2:	2b78      	cmp	r3, #120	@ 0x78
 8027cc4:	d806      	bhi.n	8027cd4 <__ssvfiscanf_r+0xd0>
 8027cc6:	2b57      	cmp	r3, #87	@ 0x57
 8027cc8:	d810      	bhi.n	8027cec <__ssvfiscanf_r+0xe8>
 8027cca:	2b25      	cmp	r3, #37	@ 0x25
 8027ccc:	d05d      	beq.n	8027d8a <__ssvfiscanf_r+0x186>
 8027cce:	d857      	bhi.n	8027d80 <__ssvfiscanf_r+0x17c>
 8027cd0:	2b00      	cmp	r3, #0
 8027cd2:	d075      	beq.n	8027dc0 <__ssvfiscanf_r+0x1bc>
 8027cd4:	2303      	movs	r3, #3
 8027cd6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8027cd8:	230a      	movs	r3, #10
 8027cda:	9342      	str	r3, [sp, #264]	@ 0x108
 8027cdc:	e088      	b.n	8027df0 <__ssvfiscanf_r+0x1ec>
 8027cde:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8027ce0:	fb02 1103 	mla	r1, r2, r3, r1
 8027ce4:	3930      	subs	r1, #48	@ 0x30
 8027ce6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8027ce8:	4655      	mov	r5, sl
 8027cea:	e7d2      	b.n	8027c92 <__ssvfiscanf_r+0x8e>
 8027cec:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8027cf0:	2a20      	cmp	r2, #32
 8027cf2:	d8ef      	bhi.n	8027cd4 <__ssvfiscanf_r+0xd0>
 8027cf4:	a101      	add	r1, pc, #4	@ (adr r1, 8027cfc <__ssvfiscanf_r+0xf8>)
 8027cf6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8027cfa:	bf00      	nop
 8027cfc:	08027dcf 	.word	0x08027dcf
 8027d00:	08027cd5 	.word	0x08027cd5
 8027d04:	08027cd5 	.word	0x08027cd5
 8027d08:	08027e29 	.word	0x08027e29
 8027d0c:	08027cd5 	.word	0x08027cd5
 8027d10:	08027cd5 	.word	0x08027cd5
 8027d14:	08027cd5 	.word	0x08027cd5
 8027d18:	08027cd5 	.word	0x08027cd5
 8027d1c:	08027cd5 	.word	0x08027cd5
 8027d20:	08027cd5 	.word	0x08027cd5
 8027d24:	08027cd5 	.word	0x08027cd5
 8027d28:	08027e3f 	.word	0x08027e3f
 8027d2c:	08027e25 	.word	0x08027e25
 8027d30:	08027d87 	.word	0x08027d87
 8027d34:	08027d87 	.word	0x08027d87
 8027d38:	08027d87 	.word	0x08027d87
 8027d3c:	08027cd5 	.word	0x08027cd5
 8027d40:	08027de1 	.word	0x08027de1
 8027d44:	08027cd5 	.word	0x08027cd5
 8027d48:	08027cd5 	.word	0x08027cd5
 8027d4c:	08027cd5 	.word	0x08027cd5
 8027d50:	08027cd5 	.word	0x08027cd5
 8027d54:	08027e4f 	.word	0x08027e4f
 8027d58:	08027de9 	.word	0x08027de9
 8027d5c:	08027dc7 	.word	0x08027dc7
 8027d60:	08027cd5 	.word	0x08027cd5
 8027d64:	08027cd5 	.word	0x08027cd5
 8027d68:	08027e4b 	.word	0x08027e4b
 8027d6c:	08027cd5 	.word	0x08027cd5
 8027d70:	08027e25 	.word	0x08027e25
 8027d74:	08027cd5 	.word	0x08027cd5
 8027d78:	08027cd5 	.word	0x08027cd5
 8027d7c:	08027dcf 	.word	0x08027dcf
 8027d80:	3b45      	subs	r3, #69	@ 0x45
 8027d82:	2b02      	cmp	r3, #2
 8027d84:	d8a6      	bhi.n	8027cd4 <__ssvfiscanf_r+0xd0>
 8027d86:	2305      	movs	r3, #5
 8027d88:	e031      	b.n	8027dee <__ssvfiscanf_r+0x1ea>
 8027d8a:	6863      	ldr	r3, [r4, #4]
 8027d8c:	2b00      	cmp	r3, #0
 8027d8e:	dd0d      	ble.n	8027dac <__ssvfiscanf_r+0x1a8>
 8027d90:	6823      	ldr	r3, [r4, #0]
 8027d92:	781a      	ldrb	r2, [r3, #0]
 8027d94:	454a      	cmp	r2, r9
 8027d96:	f040 80a6 	bne.w	8027ee6 <__ssvfiscanf_r+0x2e2>
 8027d9a:	3301      	adds	r3, #1
 8027d9c:	6862      	ldr	r2, [r4, #4]
 8027d9e:	6023      	str	r3, [r4, #0]
 8027da0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8027da2:	3a01      	subs	r2, #1
 8027da4:	3301      	adds	r3, #1
 8027da6:	6062      	str	r2, [r4, #4]
 8027da8:	9345      	str	r3, [sp, #276]	@ 0x114
 8027daa:	e753      	b.n	8027c54 <__ssvfiscanf_r+0x50>
 8027dac:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027dae:	4621      	mov	r1, r4
 8027db0:	4630      	mov	r0, r6
 8027db2:	4798      	blx	r3
 8027db4:	2800      	cmp	r0, #0
 8027db6:	d0eb      	beq.n	8027d90 <__ssvfiscanf_r+0x18c>
 8027db8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8027dba:	2800      	cmp	r0, #0
 8027dbc:	f040 808b 	bne.w	8027ed6 <__ssvfiscanf_r+0x2d2>
 8027dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8027dc4:	e08b      	b.n	8027ede <__ssvfiscanf_r+0x2da>
 8027dc6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027dc8:	f042 0220 	orr.w	r2, r2, #32
 8027dcc:	9241      	str	r2, [sp, #260]	@ 0x104
 8027dce:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8027dd4:	9241      	str	r2, [sp, #260]	@ 0x104
 8027dd6:	2210      	movs	r2, #16
 8027dd8:	2b6e      	cmp	r3, #110	@ 0x6e
 8027dda:	9242      	str	r2, [sp, #264]	@ 0x108
 8027ddc:	d902      	bls.n	8027de4 <__ssvfiscanf_r+0x1e0>
 8027dde:	e005      	b.n	8027dec <__ssvfiscanf_r+0x1e8>
 8027de0:	2300      	movs	r3, #0
 8027de2:	9342      	str	r3, [sp, #264]	@ 0x108
 8027de4:	2303      	movs	r3, #3
 8027de6:	e002      	b.n	8027dee <__ssvfiscanf_r+0x1ea>
 8027de8:	2308      	movs	r3, #8
 8027dea:	9342      	str	r3, [sp, #264]	@ 0x108
 8027dec:	2304      	movs	r3, #4
 8027dee:	9347      	str	r3, [sp, #284]	@ 0x11c
 8027df0:	6863      	ldr	r3, [r4, #4]
 8027df2:	2b00      	cmp	r3, #0
 8027df4:	dd39      	ble.n	8027e6a <__ssvfiscanf_r+0x266>
 8027df6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027df8:	0659      	lsls	r1, r3, #25
 8027dfa:	d404      	bmi.n	8027e06 <__ssvfiscanf_r+0x202>
 8027dfc:	6823      	ldr	r3, [r4, #0]
 8027dfe:	781a      	ldrb	r2, [r3, #0]
 8027e00:	5cba      	ldrb	r2, [r7, r2]
 8027e02:	0712      	lsls	r2, r2, #28
 8027e04:	d438      	bmi.n	8027e78 <__ssvfiscanf_r+0x274>
 8027e06:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8027e08:	2b02      	cmp	r3, #2
 8027e0a:	dc47      	bgt.n	8027e9c <__ssvfiscanf_r+0x298>
 8027e0c:	466b      	mov	r3, sp
 8027e0e:	4622      	mov	r2, r4
 8027e10:	a941      	add	r1, sp, #260	@ 0x104
 8027e12:	4630      	mov	r0, r6
 8027e14:	f000 f86c 	bl	8027ef0 <_scanf_chars>
 8027e18:	2801      	cmp	r0, #1
 8027e1a:	d064      	beq.n	8027ee6 <__ssvfiscanf_r+0x2e2>
 8027e1c:	2802      	cmp	r0, #2
 8027e1e:	f47f af19 	bne.w	8027c54 <__ssvfiscanf_r+0x50>
 8027e22:	e7c9      	b.n	8027db8 <__ssvfiscanf_r+0x1b4>
 8027e24:	220a      	movs	r2, #10
 8027e26:	e7d7      	b.n	8027dd8 <__ssvfiscanf_r+0x1d4>
 8027e28:	4629      	mov	r1, r5
 8027e2a:	4640      	mov	r0, r8
 8027e2c:	f000 fa5a 	bl	80282e4 <__sccl>
 8027e30:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027e36:	9341      	str	r3, [sp, #260]	@ 0x104
 8027e38:	4605      	mov	r5, r0
 8027e3a:	2301      	movs	r3, #1
 8027e3c:	e7d7      	b.n	8027dee <__ssvfiscanf_r+0x1ea>
 8027e3e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027e44:	9341      	str	r3, [sp, #260]	@ 0x104
 8027e46:	2300      	movs	r3, #0
 8027e48:	e7d1      	b.n	8027dee <__ssvfiscanf_r+0x1ea>
 8027e4a:	2302      	movs	r3, #2
 8027e4c:	e7cf      	b.n	8027dee <__ssvfiscanf_r+0x1ea>
 8027e4e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8027e50:	06c3      	lsls	r3, r0, #27
 8027e52:	f53f aeff 	bmi.w	8027c54 <__ssvfiscanf_r+0x50>
 8027e56:	9b00      	ldr	r3, [sp, #0]
 8027e58:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027e5a:	1d19      	adds	r1, r3, #4
 8027e5c:	9100      	str	r1, [sp, #0]
 8027e5e:	681b      	ldr	r3, [r3, #0]
 8027e60:	07c0      	lsls	r0, r0, #31
 8027e62:	bf4c      	ite	mi
 8027e64:	801a      	strhmi	r2, [r3, #0]
 8027e66:	601a      	strpl	r2, [r3, #0]
 8027e68:	e6f4      	b.n	8027c54 <__ssvfiscanf_r+0x50>
 8027e6a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027e6c:	4621      	mov	r1, r4
 8027e6e:	4630      	mov	r0, r6
 8027e70:	4798      	blx	r3
 8027e72:	2800      	cmp	r0, #0
 8027e74:	d0bf      	beq.n	8027df6 <__ssvfiscanf_r+0x1f2>
 8027e76:	e79f      	b.n	8027db8 <__ssvfiscanf_r+0x1b4>
 8027e78:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027e7a:	3201      	adds	r2, #1
 8027e7c:	9245      	str	r2, [sp, #276]	@ 0x114
 8027e7e:	6862      	ldr	r2, [r4, #4]
 8027e80:	3a01      	subs	r2, #1
 8027e82:	2a00      	cmp	r2, #0
 8027e84:	6062      	str	r2, [r4, #4]
 8027e86:	dd02      	ble.n	8027e8e <__ssvfiscanf_r+0x28a>
 8027e88:	3301      	adds	r3, #1
 8027e8a:	6023      	str	r3, [r4, #0]
 8027e8c:	e7b6      	b.n	8027dfc <__ssvfiscanf_r+0x1f8>
 8027e8e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027e90:	4621      	mov	r1, r4
 8027e92:	4630      	mov	r0, r6
 8027e94:	4798      	blx	r3
 8027e96:	2800      	cmp	r0, #0
 8027e98:	d0b0      	beq.n	8027dfc <__ssvfiscanf_r+0x1f8>
 8027e9a:	e78d      	b.n	8027db8 <__ssvfiscanf_r+0x1b4>
 8027e9c:	2b04      	cmp	r3, #4
 8027e9e:	dc0f      	bgt.n	8027ec0 <__ssvfiscanf_r+0x2bc>
 8027ea0:	466b      	mov	r3, sp
 8027ea2:	4622      	mov	r2, r4
 8027ea4:	a941      	add	r1, sp, #260	@ 0x104
 8027ea6:	4630      	mov	r0, r6
 8027ea8:	f000 f87c 	bl	8027fa4 <_scanf_i>
 8027eac:	e7b4      	b.n	8027e18 <__ssvfiscanf_r+0x214>
 8027eae:	bf00      	nop
 8027eb0:	08027b51 	.word	0x08027b51
 8027eb4:	08027bcb 	.word	0x08027bcb
 8027eb8:	0802c0f9 	.word	0x0802c0f9
 8027ebc:	0802c31e 	.word	0x0802c31e
 8027ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8027eec <__ssvfiscanf_r+0x2e8>)
 8027ec2:	2b00      	cmp	r3, #0
 8027ec4:	f43f aec6 	beq.w	8027c54 <__ssvfiscanf_r+0x50>
 8027ec8:	466b      	mov	r3, sp
 8027eca:	4622      	mov	r2, r4
 8027ecc:	a941      	add	r1, sp, #260	@ 0x104
 8027ece:	4630      	mov	r0, r6
 8027ed0:	f7fc ff2c 	bl	8024d2c <_scanf_float>
 8027ed4:	e7a0      	b.n	8027e18 <__ssvfiscanf_r+0x214>
 8027ed6:	89a3      	ldrh	r3, [r4, #12]
 8027ed8:	065b      	lsls	r3, r3, #25
 8027eda:	f53f af71 	bmi.w	8027dc0 <__ssvfiscanf_r+0x1bc>
 8027ede:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8027ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ee6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8027ee8:	e7f9      	b.n	8027ede <__ssvfiscanf_r+0x2da>
 8027eea:	bf00      	nop
 8027eec:	08024d2d 	.word	0x08024d2d

08027ef0 <_scanf_chars>:
 8027ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027ef4:	4615      	mov	r5, r2
 8027ef6:	688a      	ldr	r2, [r1, #8]
 8027ef8:	4680      	mov	r8, r0
 8027efa:	460c      	mov	r4, r1
 8027efc:	b932      	cbnz	r2, 8027f0c <_scanf_chars+0x1c>
 8027efe:	698a      	ldr	r2, [r1, #24]
 8027f00:	2a00      	cmp	r2, #0
 8027f02:	bf14      	ite	ne
 8027f04:	f04f 32ff 	movne.w	r2, #4294967295
 8027f08:	2201      	moveq	r2, #1
 8027f0a:	608a      	str	r2, [r1, #8]
 8027f0c:	6822      	ldr	r2, [r4, #0]
 8027f0e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8027fa0 <_scanf_chars+0xb0>
 8027f12:	06d1      	lsls	r1, r2, #27
 8027f14:	bf5f      	itttt	pl
 8027f16:	681a      	ldrpl	r2, [r3, #0]
 8027f18:	1d11      	addpl	r1, r2, #4
 8027f1a:	6019      	strpl	r1, [r3, #0]
 8027f1c:	6816      	ldrpl	r6, [r2, #0]
 8027f1e:	2700      	movs	r7, #0
 8027f20:	69a0      	ldr	r0, [r4, #24]
 8027f22:	b188      	cbz	r0, 8027f48 <_scanf_chars+0x58>
 8027f24:	2801      	cmp	r0, #1
 8027f26:	d107      	bne.n	8027f38 <_scanf_chars+0x48>
 8027f28:	682b      	ldr	r3, [r5, #0]
 8027f2a:	781a      	ldrb	r2, [r3, #0]
 8027f2c:	6963      	ldr	r3, [r4, #20]
 8027f2e:	5c9b      	ldrb	r3, [r3, r2]
 8027f30:	b953      	cbnz	r3, 8027f48 <_scanf_chars+0x58>
 8027f32:	2f00      	cmp	r7, #0
 8027f34:	d031      	beq.n	8027f9a <_scanf_chars+0xaa>
 8027f36:	e022      	b.n	8027f7e <_scanf_chars+0x8e>
 8027f38:	2802      	cmp	r0, #2
 8027f3a:	d120      	bne.n	8027f7e <_scanf_chars+0x8e>
 8027f3c:	682b      	ldr	r3, [r5, #0]
 8027f3e:	781b      	ldrb	r3, [r3, #0]
 8027f40:	f819 3003 	ldrb.w	r3, [r9, r3]
 8027f44:	071b      	lsls	r3, r3, #28
 8027f46:	d41a      	bmi.n	8027f7e <_scanf_chars+0x8e>
 8027f48:	6823      	ldr	r3, [r4, #0]
 8027f4a:	06da      	lsls	r2, r3, #27
 8027f4c:	bf5e      	ittt	pl
 8027f4e:	682b      	ldrpl	r3, [r5, #0]
 8027f50:	781b      	ldrbpl	r3, [r3, #0]
 8027f52:	f806 3b01 	strbpl.w	r3, [r6], #1
 8027f56:	682a      	ldr	r2, [r5, #0]
 8027f58:	686b      	ldr	r3, [r5, #4]
 8027f5a:	3201      	adds	r2, #1
 8027f5c:	602a      	str	r2, [r5, #0]
 8027f5e:	68a2      	ldr	r2, [r4, #8]
 8027f60:	3b01      	subs	r3, #1
 8027f62:	3a01      	subs	r2, #1
 8027f64:	606b      	str	r3, [r5, #4]
 8027f66:	3701      	adds	r7, #1
 8027f68:	60a2      	str	r2, [r4, #8]
 8027f6a:	b142      	cbz	r2, 8027f7e <_scanf_chars+0x8e>
 8027f6c:	2b00      	cmp	r3, #0
 8027f6e:	dcd7      	bgt.n	8027f20 <_scanf_chars+0x30>
 8027f70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8027f74:	4629      	mov	r1, r5
 8027f76:	4640      	mov	r0, r8
 8027f78:	4798      	blx	r3
 8027f7a:	2800      	cmp	r0, #0
 8027f7c:	d0d0      	beq.n	8027f20 <_scanf_chars+0x30>
 8027f7e:	6823      	ldr	r3, [r4, #0]
 8027f80:	f013 0310 	ands.w	r3, r3, #16
 8027f84:	d105      	bne.n	8027f92 <_scanf_chars+0xa2>
 8027f86:	68e2      	ldr	r2, [r4, #12]
 8027f88:	3201      	adds	r2, #1
 8027f8a:	60e2      	str	r2, [r4, #12]
 8027f8c:	69a2      	ldr	r2, [r4, #24]
 8027f8e:	b102      	cbz	r2, 8027f92 <_scanf_chars+0xa2>
 8027f90:	7033      	strb	r3, [r6, #0]
 8027f92:	6923      	ldr	r3, [r4, #16]
 8027f94:	443b      	add	r3, r7
 8027f96:	6123      	str	r3, [r4, #16]
 8027f98:	2000      	movs	r0, #0
 8027f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027f9e:	bf00      	nop
 8027fa0:	0802c0f9 	.word	0x0802c0f9

08027fa4 <_scanf_i>:
 8027fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fa8:	4698      	mov	r8, r3
 8027faa:	4b74      	ldr	r3, [pc, #464]	@ (802817c <_scanf_i+0x1d8>)
 8027fac:	460c      	mov	r4, r1
 8027fae:	4682      	mov	sl, r0
 8027fb0:	4616      	mov	r6, r2
 8027fb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8027fb6:	b087      	sub	sp, #28
 8027fb8:	ab03      	add	r3, sp, #12
 8027fba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8027fbe:	4b70      	ldr	r3, [pc, #448]	@ (8028180 <_scanf_i+0x1dc>)
 8027fc0:	69a1      	ldr	r1, [r4, #24]
 8027fc2:	4a70      	ldr	r2, [pc, #448]	@ (8028184 <_scanf_i+0x1e0>)
 8027fc4:	2903      	cmp	r1, #3
 8027fc6:	bf08      	it	eq
 8027fc8:	461a      	moveq	r2, r3
 8027fca:	68a3      	ldr	r3, [r4, #8]
 8027fcc:	9201      	str	r2, [sp, #4]
 8027fce:	1e5a      	subs	r2, r3, #1
 8027fd0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8027fd4:	bf88      	it	hi
 8027fd6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8027fda:	4627      	mov	r7, r4
 8027fdc:	bf82      	ittt	hi
 8027fde:	eb03 0905 	addhi.w	r9, r3, r5
 8027fe2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8027fe6:	60a3      	strhi	r3, [r4, #8]
 8027fe8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8027fec:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8027ff0:	bf98      	it	ls
 8027ff2:	f04f 0900 	movls.w	r9, #0
 8027ff6:	6023      	str	r3, [r4, #0]
 8027ff8:	463d      	mov	r5, r7
 8027ffa:	f04f 0b00 	mov.w	fp, #0
 8027ffe:	6831      	ldr	r1, [r6, #0]
 8028000:	ab03      	add	r3, sp, #12
 8028002:	7809      	ldrb	r1, [r1, #0]
 8028004:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8028008:	2202      	movs	r2, #2
 802800a:	f7d8 f981 	bl	8000310 <memchr>
 802800e:	b328      	cbz	r0, 802805c <_scanf_i+0xb8>
 8028010:	f1bb 0f01 	cmp.w	fp, #1
 8028014:	d159      	bne.n	80280ca <_scanf_i+0x126>
 8028016:	6862      	ldr	r2, [r4, #4]
 8028018:	b92a      	cbnz	r2, 8028026 <_scanf_i+0x82>
 802801a:	6822      	ldr	r2, [r4, #0]
 802801c:	2108      	movs	r1, #8
 802801e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8028022:	6061      	str	r1, [r4, #4]
 8028024:	6022      	str	r2, [r4, #0]
 8028026:	6822      	ldr	r2, [r4, #0]
 8028028:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 802802c:	6022      	str	r2, [r4, #0]
 802802e:	68a2      	ldr	r2, [r4, #8]
 8028030:	1e51      	subs	r1, r2, #1
 8028032:	60a1      	str	r1, [r4, #8]
 8028034:	b192      	cbz	r2, 802805c <_scanf_i+0xb8>
 8028036:	6832      	ldr	r2, [r6, #0]
 8028038:	1c51      	adds	r1, r2, #1
 802803a:	6031      	str	r1, [r6, #0]
 802803c:	7812      	ldrb	r2, [r2, #0]
 802803e:	f805 2b01 	strb.w	r2, [r5], #1
 8028042:	6872      	ldr	r2, [r6, #4]
 8028044:	3a01      	subs	r2, #1
 8028046:	2a00      	cmp	r2, #0
 8028048:	6072      	str	r2, [r6, #4]
 802804a:	dc07      	bgt.n	802805c <_scanf_i+0xb8>
 802804c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8028050:	4631      	mov	r1, r6
 8028052:	4650      	mov	r0, sl
 8028054:	4790      	blx	r2
 8028056:	2800      	cmp	r0, #0
 8028058:	f040 8085 	bne.w	8028166 <_scanf_i+0x1c2>
 802805c:	f10b 0b01 	add.w	fp, fp, #1
 8028060:	f1bb 0f03 	cmp.w	fp, #3
 8028064:	d1cb      	bne.n	8027ffe <_scanf_i+0x5a>
 8028066:	6863      	ldr	r3, [r4, #4]
 8028068:	b90b      	cbnz	r3, 802806e <_scanf_i+0xca>
 802806a:	230a      	movs	r3, #10
 802806c:	6063      	str	r3, [r4, #4]
 802806e:	6863      	ldr	r3, [r4, #4]
 8028070:	4945      	ldr	r1, [pc, #276]	@ (8028188 <_scanf_i+0x1e4>)
 8028072:	6960      	ldr	r0, [r4, #20]
 8028074:	1ac9      	subs	r1, r1, r3
 8028076:	f000 f935 	bl	80282e4 <__sccl>
 802807a:	f04f 0b00 	mov.w	fp, #0
 802807e:	68a3      	ldr	r3, [r4, #8]
 8028080:	6822      	ldr	r2, [r4, #0]
 8028082:	2b00      	cmp	r3, #0
 8028084:	d03d      	beq.n	8028102 <_scanf_i+0x15e>
 8028086:	6831      	ldr	r1, [r6, #0]
 8028088:	6960      	ldr	r0, [r4, #20]
 802808a:	f891 c000 	ldrb.w	ip, [r1]
 802808e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028092:	2800      	cmp	r0, #0
 8028094:	d035      	beq.n	8028102 <_scanf_i+0x15e>
 8028096:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 802809a:	d124      	bne.n	80280e6 <_scanf_i+0x142>
 802809c:	0510      	lsls	r0, r2, #20
 802809e:	d522      	bpl.n	80280e6 <_scanf_i+0x142>
 80280a0:	f10b 0b01 	add.w	fp, fp, #1
 80280a4:	f1b9 0f00 	cmp.w	r9, #0
 80280a8:	d003      	beq.n	80280b2 <_scanf_i+0x10e>
 80280aa:	3301      	adds	r3, #1
 80280ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80280b0:	60a3      	str	r3, [r4, #8]
 80280b2:	6873      	ldr	r3, [r6, #4]
 80280b4:	3b01      	subs	r3, #1
 80280b6:	2b00      	cmp	r3, #0
 80280b8:	6073      	str	r3, [r6, #4]
 80280ba:	dd1b      	ble.n	80280f4 <_scanf_i+0x150>
 80280bc:	6833      	ldr	r3, [r6, #0]
 80280be:	3301      	adds	r3, #1
 80280c0:	6033      	str	r3, [r6, #0]
 80280c2:	68a3      	ldr	r3, [r4, #8]
 80280c4:	3b01      	subs	r3, #1
 80280c6:	60a3      	str	r3, [r4, #8]
 80280c8:	e7d9      	b.n	802807e <_scanf_i+0xda>
 80280ca:	f1bb 0f02 	cmp.w	fp, #2
 80280ce:	d1ae      	bne.n	802802e <_scanf_i+0x8a>
 80280d0:	6822      	ldr	r2, [r4, #0]
 80280d2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80280d6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80280da:	d1c4      	bne.n	8028066 <_scanf_i+0xc2>
 80280dc:	2110      	movs	r1, #16
 80280de:	6061      	str	r1, [r4, #4]
 80280e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80280e4:	e7a2      	b.n	802802c <_scanf_i+0x88>
 80280e6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80280ea:	6022      	str	r2, [r4, #0]
 80280ec:	780b      	ldrb	r3, [r1, #0]
 80280ee:	f805 3b01 	strb.w	r3, [r5], #1
 80280f2:	e7de      	b.n	80280b2 <_scanf_i+0x10e>
 80280f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80280f8:	4631      	mov	r1, r6
 80280fa:	4650      	mov	r0, sl
 80280fc:	4798      	blx	r3
 80280fe:	2800      	cmp	r0, #0
 8028100:	d0df      	beq.n	80280c2 <_scanf_i+0x11e>
 8028102:	6823      	ldr	r3, [r4, #0]
 8028104:	05d9      	lsls	r1, r3, #23
 8028106:	d50d      	bpl.n	8028124 <_scanf_i+0x180>
 8028108:	42bd      	cmp	r5, r7
 802810a:	d909      	bls.n	8028120 <_scanf_i+0x17c>
 802810c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8028110:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8028114:	4632      	mov	r2, r6
 8028116:	4650      	mov	r0, sl
 8028118:	4798      	blx	r3
 802811a:	f105 39ff 	add.w	r9, r5, #4294967295
 802811e:	464d      	mov	r5, r9
 8028120:	42bd      	cmp	r5, r7
 8028122:	d028      	beq.n	8028176 <_scanf_i+0x1d2>
 8028124:	6822      	ldr	r2, [r4, #0]
 8028126:	f012 0210 	ands.w	r2, r2, #16
 802812a:	d113      	bne.n	8028154 <_scanf_i+0x1b0>
 802812c:	702a      	strb	r2, [r5, #0]
 802812e:	6863      	ldr	r3, [r4, #4]
 8028130:	9e01      	ldr	r6, [sp, #4]
 8028132:	4639      	mov	r1, r7
 8028134:	4650      	mov	r0, sl
 8028136:	47b0      	blx	r6
 8028138:	f8d8 3000 	ldr.w	r3, [r8]
 802813c:	6821      	ldr	r1, [r4, #0]
 802813e:	1d1a      	adds	r2, r3, #4
 8028140:	f8c8 2000 	str.w	r2, [r8]
 8028144:	f011 0f20 	tst.w	r1, #32
 8028148:	681b      	ldr	r3, [r3, #0]
 802814a:	d00f      	beq.n	802816c <_scanf_i+0x1c8>
 802814c:	6018      	str	r0, [r3, #0]
 802814e:	68e3      	ldr	r3, [r4, #12]
 8028150:	3301      	adds	r3, #1
 8028152:	60e3      	str	r3, [r4, #12]
 8028154:	6923      	ldr	r3, [r4, #16]
 8028156:	1bed      	subs	r5, r5, r7
 8028158:	445d      	add	r5, fp
 802815a:	442b      	add	r3, r5
 802815c:	6123      	str	r3, [r4, #16]
 802815e:	2000      	movs	r0, #0
 8028160:	b007      	add	sp, #28
 8028162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028166:	f04f 0b00 	mov.w	fp, #0
 802816a:	e7ca      	b.n	8028102 <_scanf_i+0x15e>
 802816c:	07ca      	lsls	r2, r1, #31
 802816e:	bf4c      	ite	mi
 8028170:	8018      	strhmi	r0, [r3, #0]
 8028172:	6018      	strpl	r0, [r3, #0]
 8028174:	e7eb      	b.n	802814e <_scanf_i+0x1aa>
 8028176:	2001      	movs	r0, #1
 8028178:	e7f2      	b.n	8028160 <_scanf_i+0x1bc>
 802817a:	bf00      	nop
 802817c:	0802ae48 	.word	0x0802ae48
 8028180:	080243b5 	.word	0x080243b5
 8028184:	080244a9 	.word	0x080244a9
 8028188:	0802c339 	.word	0x0802c339

0802818c <__sflush_r>:
 802818c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8028190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028194:	0716      	lsls	r6, r2, #28
 8028196:	4605      	mov	r5, r0
 8028198:	460c      	mov	r4, r1
 802819a:	d454      	bmi.n	8028246 <__sflush_r+0xba>
 802819c:	684b      	ldr	r3, [r1, #4]
 802819e:	2b00      	cmp	r3, #0
 80281a0:	dc02      	bgt.n	80281a8 <__sflush_r+0x1c>
 80281a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80281a4:	2b00      	cmp	r3, #0
 80281a6:	dd48      	ble.n	802823a <__sflush_r+0xae>
 80281a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80281aa:	2e00      	cmp	r6, #0
 80281ac:	d045      	beq.n	802823a <__sflush_r+0xae>
 80281ae:	2300      	movs	r3, #0
 80281b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80281b4:	682f      	ldr	r7, [r5, #0]
 80281b6:	6a21      	ldr	r1, [r4, #32]
 80281b8:	602b      	str	r3, [r5, #0]
 80281ba:	d030      	beq.n	802821e <__sflush_r+0x92>
 80281bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80281be:	89a3      	ldrh	r3, [r4, #12]
 80281c0:	0759      	lsls	r1, r3, #29
 80281c2:	d505      	bpl.n	80281d0 <__sflush_r+0x44>
 80281c4:	6863      	ldr	r3, [r4, #4]
 80281c6:	1ad2      	subs	r2, r2, r3
 80281c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80281ca:	b10b      	cbz	r3, 80281d0 <__sflush_r+0x44>
 80281cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80281ce:	1ad2      	subs	r2, r2, r3
 80281d0:	2300      	movs	r3, #0
 80281d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80281d4:	6a21      	ldr	r1, [r4, #32]
 80281d6:	4628      	mov	r0, r5
 80281d8:	47b0      	blx	r6
 80281da:	1c43      	adds	r3, r0, #1
 80281dc:	89a3      	ldrh	r3, [r4, #12]
 80281de:	d106      	bne.n	80281ee <__sflush_r+0x62>
 80281e0:	6829      	ldr	r1, [r5, #0]
 80281e2:	291d      	cmp	r1, #29
 80281e4:	d82b      	bhi.n	802823e <__sflush_r+0xb2>
 80281e6:	4a2a      	ldr	r2, [pc, #168]	@ (8028290 <__sflush_r+0x104>)
 80281e8:	40ca      	lsrs	r2, r1
 80281ea:	07d6      	lsls	r6, r2, #31
 80281ec:	d527      	bpl.n	802823e <__sflush_r+0xb2>
 80281ee:	2200      	movs	r2, #0
 80281f0:	6062      	str	r2, [r4, #4]
 80281f2:	04d9      	lsls	r1, r3, #19
 80281f4:	6922      	ldr	r2, [r4, #16]
 80281f6:	6022      	str	r2, [r4, #0]
 80281f8:	d504      	bpl.n	8028204 <__sflush_r+0x78>
 80281fa:	1c42      	adds	r2, r0, #1
 80281fc:	d101      	bne.n	8028202 <__sflush_r+0x76>
 80281fe:	682b      	ldr	r3, [r5, #0]
 8028200:	b903      	cbnz	r3, 8028204 <__sflush_r+0x78>
 8028202:	6560      	str	r0, [r4, #84]	@ 0x54
 8028204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028206:	602f      	str	r7, [r5, #0]
 8028208:	b1b9      	cbz	r1, 802823a <__sflush_r+0xae>
 802820a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802820e:	4299      	cmp	r1, r3
 8028210:	d002      	beq.n	8028218 <__sflush_r+0x8c>
 8028212:	4628      	mov	r0, r5
 8028214:	f7fd ffe2 	bl	80261dc <_free_r>
 8028218:	2300      	movs	r3, #0
 802821a:	6363      	str	r3, [r4, #52]	@ 0x34
 802821c:	e00d      	b.n	802823a <__sflush_r+0xae>
 802821e:	2301      	movs	r3, #1
 8028220:	4628      	mov	r0, r5
 8028222:	47b0      	blx	r6
 8028224:	4602      	mov	r2, r0
 8028226:	1c50      	adds	r0, r2, #1
 8028228:	d1c9      	bne.n	80281be <__sflush_r+0x32>
 802822a:	682b      	ldr	r3, [r5, #0]
 802822c:	2b00      	cmp	r3, #0
 802822e:	d0c6      	beq.n	80281be <__sflush_r+0x32>
 8028230:	2b1d      	cmp	r3, #29
 8028232:	d001      	beq.n	8028238 <__sflush_r+0xac>
 8028234:	2b16      	cmp	r3, #22
 8028236:	d11e      	bne.n	8028276 <__sflush_r+0xea>
 8028238:	602f      	str	r7, [r5, #0]
 802823a:	2000      	movs	r0, #0
 802823c:	e022      	b.n	8028284 <__sflush_r+0xf8>
 802823e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028242:	b21b      	sxth	r3, r3
 8028244:	e01b      	b.n	802827e <__sflush_r+0xf2>
 8028246:	690f      	ldr	r7, [r1, #16]
 8028248:	2f00      	cmp	r7, #0
 802824a:	d0f6      	beq.n	802823a <__sflush_r+0xae>
 802824c:	0793      	lsls	r3, r2, #30
 802824e:	680e      	ldr	r6, [r1, #0]
 8028250:	bf08      	it	eq
 8028252:	694b      	ldreq	r3, [r1, #20]
 8028254:	600f      	str	r7, [r1, #0]
 8028256:	bf18      	it	ne
 8028258:	2300      	movne	r3, #0
 802825a:	eba6 0807 	sub.w	r8, r6, r7
 802825e:	608b      	str	r3, [r1, #8]
 8028260:	f1b8 0f00 	cmp.w	r8, #0
 8028264:	dde9      	ble.n	802823a <__sflush_r+0xae>
 8028266:	6a21      	ldr	r1, [r4, #32]
 8028268:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802826a:	4643      	mov	r3, r8
 802826c:	463a      	mov	r2, r7
 802826e:	4628      	mov	r0, r5
 8028270:	47b0      	blx	r6
 8028272:	2800      	cmp	r0, #0
 8028274:	dc08      	bgt.n	8028288 <__sflush_r+0xfc>
 8028276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802827a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802827e:	81a3      	strh	r3, [r4, #12]
 8028280:	f04f 30ff 	mov.w	r0, #4294967295
 8028284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028288:	4407      	add	r7, r0
 802828a:	eba8 0800 	sub.w	r8, r8, r0
 802828e:	e7e7      	b.n	8028260 <__sflush_r+0xd4>
 8028290:	20400001 	.word	0x20400001

08028294 <_fflush_r>:
 8028294:	b538      	push	{r3, r4, r5, lr}
 8028296:	690b      	ldr	r3, [r1, #16]
 8028298:	4605      	mov	r5, r0
 802829a:	460c      	mov	r4, r1
 802829c:	b913      	cbnz	r3, 80282a4 <_fflush_r+0x10>
 802829e:	2500      	movs	r5, #0
 80282a0:	4628      	mov	r0, r5
 80282a2:	bd38      	pop	{r3, r4, r5, pc}
 80282a4:	b118      	cbz	r0, 80282ae <_fflush_r+0x1a>
 80282a6:	6a03      	ldr	r3, [r0, #32]
 80282a8:	b90b      	cbnz	r3, 80282ae <_fflush_r+0x1a>
 80282aa:	f7fc ffd1 	bl	8025250 <__sinit>
 80282ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80282b2:	2b00      	cmp	r3, #0
 80282b4:	d0f3      	beq.n	802829e <_fflush_r+0xa>
 80282b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80282b8:	07d0      	lsls	r0, r2, #31
 80282ba:	d404      	bmi.n	80282c6 <_fflush_r+0x32>
 80282bc:	0599      	lsls	r1, r3, #22
 80282be:	d402      	bmi.n	80282c6 <_fflush_r+0x32>
 80282c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80282c2:	f7fd f98c 	bl	80255de <__retarget_lock_acquire_recursive>
 80282c6:	4628      	mov	r0, r5
 80282c8:	4621      	mov	r1, r4
 80282ca:	f7ff ff5f 	bl	802818c <__sflush_r>
 80282ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80282d0:	07da      	lsls	r2, r3, #31
 80282d2:	4605      	mov	r5, r0
 80282d4:	d4e4      	bmi.n	80282a0 <_fflush_r+0xc>
 80282d6:	89a3      	ldrh	r3, [r4, #12]
 80282d8:	059b      	lsls	r3, r3, #22
 80282da:	d4e1      	bmi.n	80282a0 <_fflush_r+0xc>
 80282dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80282de:	f7fd f97f 	bl	80255e0 <__retarget_lock_release_recursive>
 80282e2:	e7dd      	b.n	80282a0 <_fflush_r+0xc>

080282e4 <__sccl>:
 80282e4:	b570      	push	{r4, r5, r6, lr}
 80282e6:	780b      	ldrb	r3, [r1, #0]
 80282e8:	4604      	mov	r4, r0
 80282ea:	2b5e      	cmp	r3, #94	@ 0x5e
 80282ec:	bf0b      	itete	eq
 80282ee:	784b      	ldrbeq	r3, [r1, #1]
 80282f0:	1c4a      	addne	r2, r1, #1
 80282f2:	1c8a      	addeq	r2, r1, #2
 80282f4:	2100      	movne	r1, #0
 80282f6:	bf08      	it	eq
 80282f8:	2101      	moveq	r1, #1
 80282fa:	3801      	subs	r0, #1
 80282fc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8028300:	f800 1f01 	strb.w	r1, [r0, #1]!
 8028304:	42a8      	cmp	r0, r5
 8028306:	d1fb      	bne.n	8028300 <__sccl+0x1c>
 8028308:	b90b      	cbnz	r3, 802830e <__sccl+0x2a>
 802830a:	1e50      	subs	r0, r2, #1
 802830c:	bd70      	pop	{r4, r5, r6, pc}
 802830e:	f081 0101 	eor.w	r1, r1, #1
 8028312:	54e1      	strb	r1, [r4, r3]
 8028314:	4610      	mov	r0, r2
 8028316:	4602      	mov	r2, r0
 8028318:	f812 5b01 	ldrb.w	r5, [r2], #1
 802831c:	2d2d      	cmp	r5, #45	@ 0x2d
 802831e:	d005      	beq.n	802832c <__sccl+0x48>
 8028320:	2d5d      	cmp	r5, #93	@ 0x5d
 8028322:	d016      	beq.n	8028352 <__sccl+0x6e>
 8028324:	2d00      	cmp	r5, #0
 8028326:	d0f1      	beq.n	802830c <__sccl+0x28>
 8028328:	462b      	mov	r3, r5
 802832a:	e7f2      	b.n	8028312 <__sccl+0x2e>
 802832c:	7846      	ldrb	r6, [r0, #1]
 802832e:	2e5d      	cmp	r6, #93	@ 0x5d
 8028330:	d0fa      	beq.n	8028328 <__sccl+0x44>
 8028332:	42b3      	cmp	r3, r6
 8028334:	dcf8      	bgt.n	8028328 <__sccl+0x44>
 8028336:	3002      	adds	r0, #2
 8028338:	461a      	mov	r2, r3
 802833a:	3201      	adds	r2, #1
 802833c:	4296      	cmp	r6, r2
 802833e:	54a1      	strb	r1, [r4, r2]
 8028340:	dcfb      	bgt.n	802833a <__sccl+0x56>
 8028342:	1af2      	subs	r2, r6, r3
 8028344:	3a01      	subs	r2, #1
 8028346:	1c5d      	adds	r5, r3, #1
 8028348:	42b3      	cmp	r3, r6
 802834a:	bfa8      	it	ge
 802834c:	2200      	movge	r2, #0
 802834e:	18ab      	adds	r3, r5, r2
 8028350:	e7e1      	b.n	8028316 <__sccl+0x32>
 8028352:	4610      	mov	r0, r2
 8028354:	e7da      	b.n	802830c <__sccl+0x28>

08028356 <__submore>:
 8028356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802835a:	460c      	mov	r4, r1
 802835c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 802835e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028362:	4299      	cmp	r1, r3
 8028364:	d11d      	bne.n	80283a2 <__submore+0x4c>
 8028366:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 802836a:	f7fd ffab 	bl	80262c4 <_malloc_r>
 802836e:	b918      	cbnz	r0, 8028378 <__submore+0x22>
 8028370:	f04f 30ff 	mov.w	r0, #4294967295
 8028374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802837c:	63a3      	str	r3, [r4, #56]	@ 0x38
 802837e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8028382:	6360      	str	r0, [r4, #52]	@ 0x34
 8028384:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8028388:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 802838c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8028390:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8028394:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8028398:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 802839c:	6020      	str	r0, [r4, #0]
 802839e:	2000      	movs	r0, #0
 80283a0:	e7e8      	b.n	8028374 <__submore+0x1e>
 80283a2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80283a4:	0077      	lsls	r7, r6, #1
 80283a6:	463a      	mov	r2, r7
 80283a8:	f000 fbd3 	bl	8028b52 <_realloc_r>
 80283ac:	4605      	mov	r5, r0
 80283ae:	2800      	cmp	r0, #0
 80283b0:	d0de      	beq.n	8028370 <__submore+0x1a>
 80283b2:	eb00 0806 	add.w	r8, r0, r6
 80283b6:	4601      	mov	r1, r0
 80283b8:	4632      	mov	r2, r6
 80283ba:	4640      	mov	r0, r8
 80283bc:	f7fd f911 	bl	80255e2 <memcpy>
 80283c0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80283c4:	f8c4 8000 	str.w	r8, [r4]
 80283c8:	e7e9      	b.n	802839e <__submore+0x48>

080283ca <memmove>:
 80283ca:	4288      	cmp	r0, r1
 80283cc:	b510      	push	{r4, lr}
 80283ce:	eb01 0402 	add.w	r4, r1, r2
 80283d2:	d902      	bls.n	80283da <memmove+0x10>
 80283d4:	4284      	cmp	r4, r0
 80283d6:	4623      	mov	r3, r4
 80283d8:	d807      	bhi.n	80283ea <memmove+0x20>
 80283da:	1e43      	subs	r3, r0, #1
 80283dc:	42a1      	cmp	r1, r4
 80283de:	d008      	beq.n	80283f2 <memmove+0x28>
 80283e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80283e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80283e8:	e7f8      	b.n	80283dc <memmove+0x12>
 80283ea:	4402      	add	r2, r0
 80283ec:	4601      	mov	r1, r0
 80283ee:	428a      	cmp	r2, r1
 80283f0:	d100      	bne.n	80283f4 <memmove+0x2a>
 80283f2:	bd10      	pop	{r4, pc}
 80283f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80283f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80283fc:	e7f7      	b.n	80283ee <memmove+0x24>

080283fe <strncmp>:
 80283fe:	b510      	push	{r4, lr}
 8028400:	b16a      	cbz	r2, 802841e <strncmp+0x20>
 8028402:	3901      	subs	r1, #1
 8028404:	1884      	adds	r4, r0, r2
 8028406:	f810 2b01 	ldrb.w	r2, [r0], #1
 802840a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802840e:	429a      	cmp	r2, r3
 8028410:	d103      	bne.n	802841a <strncmp+0x1c>
 8028412:	42a0      	cmp	r0, r4
 8028414:	d001      	beq.n	802841a <strncmp+0x1c>
 8028416:	2a00      	cmp	r2, #0
 8028418:	d1f5      	bne.n	8028406 <strncmp+0x8>
 802841a:	1ad0      	subs	r0, r2, r3
 802841c:	bd10      	pop	{r4, pc}
 802841e:	4610      	mov	r0, r2
 8028420:	e7fc      	b.n	802841c <strncmp+0x1e>
	...

08028424 <_sbrk_r>:
 8028424:	b538      	push	{r3, r4, r5, lr}
 8028426:	4d06      	ldr	r5, [pc, #24]	@ (8028440 <_sbrk_r+0x1c>)
 8028428:	2300      	movs	r3, #0
 802842a:	4604      	mov	r4, r0
 802842c:	4608      	mov	r0, r1
 802842e:	602b      	str	r3, [r5, #0]
 8028430:	f7e2 ff5a 	bl	800b2e8 <_sbrk>
 8028434:	1c43      	adds	r3, r0, #1
 8028436:	d102      	bne.n	802843e <_sbrk_r+0x1a>
 8028438:	682b      	ldr	r3, [r5, #0]
 802843a:	b103      	cbz	r3, 802843e <_sbrk_r+0x1a>
 802843c:	6023      	str	r3, [r4, #0]
 802843e:	bd38      	pop	{r3, r4, r5, pc}
 8028440:	2402aca4 	.word	0x2402aca4
 8028444:	00000000 	.word	0x00000000

08028448 <nan>:
 8028448:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8028450 <nan+0x8>
 802844c:	4770      	bx	lr
 802844e:	bf00      	nop
 8028450:	00000000 	.word	0x00000000
 8028454:	7ff80000 	.word	0x7ff80000

08028458 <__assert_func>:
 8028458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802845a:	4614      	mov	r4, r2
 802845c:	461a      	mov	r2, r3
 802845e:	4b09      	ldr	r3, [pc, #36]	@ (8028484 <__assert_func+0x2c>)
 8028460:	681b      	ldr	r3, [r3, #0]
 8028462:	4605      	mov	r5, r0
 8028464:	68d8      	ldr	r0, [r3, #12]
 8028466:	b14c      	cbz	r4, 802847c <__assert_func+0x24>
 8028468:	4b07      	ldr	r3, [pc, #28]	@ (8028488 <__assert_func+0x30>)
 802846a:	9100      	str	r1, [sp, #0]
 802846c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028470:	4906      	ldr	r1, [pc, #24]	@ (802848c <__assert_func+0x34>)
 8028472:	462b      	mov	r3, r5
 8028474:	f000 fba8 	bl	8028bc8 <fiprintf>
 8028478:	f000 fbb8 	bl	8028bec <abort>
 802847c:	4b04      	ldr	r3, [pc, #16]	@ (8028490 <__assert_func+0x38>)
 802847e:	461c      	mov	r4, r3
 8028480:	e7f3      	b.n	802846a <__assert_func+0x12>
 8028482:	bf00      	nop
 8028484:	240003a4 	.word	0x240003a4
 8028488:	0802c34c 	.word	0x0802c34c
 802848c:	0802c359 	.word	0x0802c359
 8028490:	0802c387 	.word	0x0802c387

08028494 <_calloc_r>:
 8028494:	b570      	push	{r4, r5, r6, lr}
 8028496:	fba1 5402 	umull	r5, r4, r1, r2
 802849a:	b934      	cbnz	r4, 80284aa <_calloc_r+0x16>
 802849c:	4629      	mov	r1, r5
 802849e:	f7fd ff11 	bl	80262c4 <_malloc_r>
 80284a2:	4606      	mov	r6, r0
 80284a4:	b928      	cbnz	r0, 80284b2 <_calloc_r+0x1e>
 80284a6:	4630      	mov	r0, r6
 80284a8:	bd70      	pop	{r4, r5, r6, pc}
 80284aa:	220c      	movs	r2, #12
 80284ac:	6002      	str	r2, [r0, #0]
 80284ae:	2600      	movs	r6, #0
 80284b0:	e7f9      	b.n	80284a6 <_calloc_r+0x12>
 80284b2:	462a      	mov	r2, r5
 80284b4:	4621      	mov	r1, r4
 80284b6:	f7fc ffa4 	bl	8025402 <memset>
 80284ba:	e7f4      	b.n	80284a6 <_calloc_r+0x12>

080284bc <rshift>:
 80284bc:	6903      	ldr	r3, [r0, #16]
 80284be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80284c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80284c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80284ca:	f100 0414 	add.w	r4, r0, #20
 80284ce:	dd45      	ble.n	802855c <rshift+0xa0>
 80284d0:	f011 011f 	ands.w	r1, r1, #31
 80284d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80284d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80284dc:	d10c      	bne.n	80284f8 <rshift+0x3c>
 80284de:	f100 0710 	add.w	r7, r0, #16
 80284e2:	4629      	mov	r1, r5
 80284e4:	42b1      	cmp	r1, r6
 80284e6:	d334      	bcc.n	8028552 <rshift+0x96>
 80284e8:	1a9b      	subs	r3, r3, r2
 80284ea:	009b      	lsls	r3, r3, #2
 80284ec:	1eea      	subs	r2, r5, #3
 80284ee:	4296      	cmp	r6, r2
 80284f0:	bf38      	it	cc
 80284f2:	2300      	movcc	r3, #0
 80284f4:	4423      	add	r3, r4
 80284f6:	e015      	b.n	8028524 <rshift+0x68>
 80284f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80284fc:	f1c1 0820 	rsb	r8, r1, #32
 8028500:	40cf      	lsrs	r7, r1
 8028502:	f105 0e04 	add.w	lr, r5, #4
 8028506:	46a1      	mov	r9, r4
 8028508:	4576      	cmp	r6, lr
 802850a:	46f4      	mov	ip, lr
 802850c:	d815      	bhi.n	802853a <rshift+0x7e>
 802850e:	1a9a      	subs	r2, r3, r2
 8028510:	0092      	lsls	r2, r2, #2
 8028512:	3a04      	subs	r2, #4
 8028514:	3501      	adds	r5, #1
 8028516:	42ae      	cmp	r6, r5
 8028518:	bf38      	it	cc
 802851a:	2200      	movcc	r2, #0
 802851c:	18a3      	adds	r3, r4, r2
 802851e:	50a7      	str	r7, [r4, r2]
 8028520:	b107      	cbz	r7, 8028524 <rshift+0x68>
 8028522:	3304      	adds	r3, #4
 8028524:	1b1a      	subs	r2, r3, r4
 8028526:	42a3      	cmp	r3, r4
 8028528:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802852c:	bf08      	it	eq
 802852e:	2300      	moveq	r3, #0
 8028530:	6102      	str	r2, [r0, #16]
 8028532:	bf08      	it	eq
 8028534:	6143      	streq	r3, [r0, #20]
 8028536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802853a:	f8dc c000 	ldr.w	ip, [ip]
 802853e:	fa0c fc08 	lsl.w	ip, ip, r8
 8028542:	ea4c 0707 	orr.w	r7, ip, r7
 8028546:	f849 7b04 	str.w	r7, [r9], #4
 802854a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802854e:	40cf      	lsrs	r7, r1
 8028550:	e7da      	b.n	8028508 <rshift+0x4c>
 8028552:	f851 cb04 	ldr.w	ip, [r1], #4
 8028556:	f847 cf04 	str.w	ip, [r7, #4]!
 802855a:	e7c3      	b.n	80284e4 <rshift+0x28>
 802855c:	4623      	mov	r3, r4
 802855e:	e7e1      	b.n	8028524 <rshift+0x68>

08028560 <__hexdig_fun>:
 8028560:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8028564:	2b09      	cmp	r3, #9
 8028566:	d802      	bhi.n	802856e <__hexdig_fun+0xe>
 8028568:	3820      	subs	r0, #32
 802856a:	b2c0      	uxtb	r0, r0
 802856c:	4770      	bx	lr
 802856e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8028572:	2b05      	cmp	r3, #5
 8028574:	d801      	bhi.n	802857a <__hexdig_fun+0x1a>
 8028576:	3847      	subs	r0, #71	@ 0x47
 8028578:	e7f7      	b.n	802856a <__hexdig_fun+0xa>
 802857a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802857e:	2b05      	cmp	r3, #5
 8028580:	d801      	bhi.n	8028586 <__hexdig_fun+0x26>
 8028582:	3827      	subs	r0, #39	@ 0x27
 8028584:	e7f1      	b.n	802856a <__hexdig_fun+0xa>
 8028586:	2000      	movs	r0, #0
 8028588:	4770      	bx	lr
	...

0802858c <__gethex>:
 802858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028590:	b085      	sub	sp, #20
 8028592:	468a      	mov	sl, r1
 8028594:	9302      	str	r3, [sp, #8]
 8028596:	680b      	ldr	r3, [r1, #0]
 8028598:	9001      	str	r0, [sp, #4]
 802859a:	4690      	mov	r8, r2
 802859c:	1c9c      	adds	r4, r3, #2
 802859e:	46a1      	mov	r9, r4
 80285a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80285a4:	2830      	cmp	r0, #48	@ 0x30
 80285a6:	d0fa      	beq.n	802859e <__gethex+0x12>
 80285a8:	eba9 0303 	sub.w	r3, r9, r3
 80285ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80285b0:	f7ff ffd6 	bl	8028560 <__hexdig_fun>
 80285b4:	4605      	mov	r5, r0
 80285b6:	2800      	cmp	r0, #0
 80285b8:	d168      	bne.n	802868c <__gethex+0x100>
 80285ba:	49a0      	ldr	r1, [pc, #640]	@ (802883c <__gethex+0x2b0>)
 80285bc:	2201      	movs	r2, #1
 80285be:	4648      	mov	r0, r9
 80285c0:	f7ff ff1d 	bl	80283fe <strncmp>
 80285c4:	4607      	mov	r7, r0
 80285c6:	2800      	cmp	r0, #0
 80285c8:	d167      	bne.n	802869a <__gethex+0x10e>
 80285ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80285ce:	4626      	mov	r6, r4
 80285d0:	f7ff ffc6 	bl	8028560 <__hexdig_fun>
 80285d4:	2800      	cmp	r0, #0
 80285d6:	d062      	beq.n	802869e <__gethex+0x112>
 80285d8:	4623      	mov	r3, r4
 80285da:	7818      	ldrb	r0, [r3, #0]
 80285dc:	2830      	cmp	r0, #48	@ 0x30
 80285de:	4699      	mov	r9, r3
 80285e0:	f103 0301 	add.w	r3, r3, #1
 80285e4:	d0f9      	beq.n	80285da <__gethex+0x4e>
 80285e6:	f7ff ffbb 	bl	8028560 <__hexdig_fun>
 80285ea:	fab0 f580 	clz	r5, r0
 80285ee:	096d      	lsrs	r5, r5, #5
 80285f0:	f04f 0b01 	mov.w	fp, #1
 80285f4:	464a      	mov	r2, r9
 80285f6:	4616      	mov	r6, r2
 80285f8:	3201      	adds	r2, #1
 80285fa:	7830      	ldrb	r0, [r6, #0]
 80285fc:	f7ff ffb0 	bl	8028560 <__hexdig_fun>
 8028600:	2800      	cmp	r0, #0
 8028602:	d1f8      	bne.n	80285f6 <__gethex+0x6a>
 8028604:	498d      	ldr	r1, [pc, #564]	@ (802883c <__gethex+0x2b0>)
 8028606:	2201      	movs	r2, #1
 8028608:	4630      	mov	r0, r6
 802860a:	f7ff fef8 	bl	80283fe <strncmp>
 802860e:	2800      	cmp	r0, #0
 8028610:	d13f      	bne.n	8028692 <__gethex+0x106>
 8028612:	b944      	cbnz	r4, 8028626 <__gethex+0x9a>
 8028614:	1c74      	adds	r4, r6, #1
 8028616:	4622      	mov	r2, r4
 8028618:	4616      	mov	r6, r2
 802861a:	3201      	adds	r2, #1
 802861c:	7830      	ldrb	r0, [r6, #0]
 802861e:	f7ff ff9f 	bl	8028560 <__hexdig_fun>
 8028622:	2800      	cmp	r0, #0
 8028624:	d1f8      	bne.n	8028618 <__gethex+0x8c>
 8028626:	1ba4      	subs	r4, r4, r6
 8028628:	00a7      	lsls	r7, r4, #2
 802862a:	7833      	ldrb	r3, [r6, #0]
 802862c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8028630:	2b50      	cmp	r3, #80	@ 0x50
 8028632:	d13e      	bne.n	80286b2 <__gethex+0x126>
 8028634:	7873      	ldrb	r3, [r6, #1]
 8028636:	2b2b      	cmp	r3, #43	@ 0x2b
 8028638:	d033      	beq.n	80286a2 <__gethex+0x116>
 802863a:	2b2d      	cmp	r3, #45	@ 0x2d
 802863c:	d034      	beq.n	80286a8 <__gethex+0x11c>
 802863e:	1c71      	adds	r1, r6, #1
 8028640:	2400      	movs	r4, #0
 8028642:	7808      	ldrb	r0, [r1, #0]
 8028644:	f7ff ff8c 	bl	8028560 <__hexdig_fun>
 8028648:	1e43      	subs	r3, r0, #1
 802864a:	b2db      	uxtb	r3, r3
 802864c:	2b18      	cmp	r3, #24
 802864e:	d830      	bhi.n	80286b2 <__gethex+0x126>
 8028650:	f1a0 0210 	sub.w	r2, r0, #16
 8028654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8028658:	f7ff ff82 	bl	8028560 <__hexdig_fun>
 802865c:	f100 3cff 	add.w	ip, r0, #4294967295
 8028660:	fa5f fc8c 	uxtb.w	ip, ip
 8028664:	f1bc 0f18 	cmp.w	ip, #24
 8028668:	f04f 030a 	mov.w	r3, #10
 802866c:	d91e      	bls.n	80286ac <__gethex+0x120>
 802866e:	b104      	cbz	r4, 8028672 <__gethex+0xe6>
 8028670:	4252      	negs	r2, r2
 8028672:	4417      	add	r7, r2
 8028674:	f8ca 1000 	str.w	r1, [sl]
 8028678:	b1ed      	cbz	r5, 80286b6 <__gethex+0x12a>
 802867a:	f1bb 0f00 	cmp.w	fp, #0
 802867e:	bf0c      	ite	eq
 8028680:	2506      	moveq	r5, #6
 8028682:	2500      	movne	r5, #0
 8028684:	4628      	mov	r0, r5
 8028686:	b005      	add	sp, #20
 8028688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802868c:	2500      	movs	r5, #0
 802868e:	462c      	mov	r4, r5
 8028690:	e7b0      	b.n	80285f4 <__gethex+0x68>
 8028692:	2c00      	cmp	r4, #0
 8028694:	d1c7      	bne.n	8028626 <__gethex+0x9a>
 8028696:	4627      	mov	r7, r4
 8028698:	e7c7      	b.n	802862a <__gethex+0x9e>
 802869a:	464e      	mov	r6, r9
 802869c:	462f      	mov	r7, r5
 802869e:	2501      	movs	r5, #1
 80286a0:	e7c3      	b.n	802862a <__gethex+0x9e>
 80286a2:	2400      	movs	r4, #0
 80286a4:	1cb1      	adds	r1, r6, #2
 80286a6:	e7cc      	b.n	8028642 <__gethex+0xb6>
 80286a8:	2401      	movs	r4, #1
 80286aa:	e7fb      	b.n	80286a4 <__gethex+0x118>
 80286ac:	fb03 0002 	mla	r0, r3, r2, r0
 80286b0:	e7ce      	b.n	8028650 <__gethex+0xc4>
 80286b2:	4631      	mov	r1, r6
 80286b4:	e7de      	b.n	8028674 <__gethex+0xe8>
 80286b6:	eba6 0309 	sub.w	r3, r6, r9
 80286ba:	3b01      	subs	r3, #1
 80286bc:	4629      	mov	r1, r5
 80286be:	2b07      	cmp	r3, #7
 80286c0:	dc0a      	bgt.n	80286d8 <__gethex+0x14c>
 80286c2:	9801      	ldr	r0, [sp, #4]
 80286c4:	f7fd fe8a 	bl	80263dc <_Balloc>
 80286c8:	4604      	mov	r4, r0
 80286ca:	b940      	cbnz	r0, 80286de <__gethex+0x152>
 80286cc:	4b5c      	ldr	r3, [pc, #368]	@ (8028840 <__gethex+0x2b4>)
 80286ce:	4602      	mov	r2, r0
 80286d0:	21e4      	movs	r1, #228	@ 0xe4
 80286d2:	485c      	ldr	r0, [pc, #368]	@ (8028844 <__gethex+0x2b8>)
 80286d4:	f7ff fec0 	bl	8028458 <__assert_func>
 80286d8:	3101      	adds	r1, #1
 80286da:	105b      	asrs	r3, r3, #1
 80286dc:	e7ef      	b.n	80286be <__gethex+0x132>
 80286de:	f100 0a14 	add.w	sl, r0, #20
 80286e2:	2300      	movs	r3, #0
 80286e4:	4655      	mov	r5, sl
 80286e6:	469b      	mov	fp, r3
 80286e8:	45b1      	cmp	r9, r6
 80286ea:	d337      	bcc.n	802875c <__gethex+0x1d0>
 80286ec:	f845 bb04 	str.w	fp, [r5], #4
 80286f0:	eba5 050a 	sub.w	r5, r5, sl
 80286f4:	10ad      	asrs	r5, r5, #2
 80286f6:	6125      	str	r5, [r4, #16]
 80286f8:	4658      	mov	r0, fp
 80286fa:	f7fd ff61 	bl	80265c0 <__hi0bits>
 80286fe:	016d      	lsls	r5, r5, #5
 8028700:	f8d8 6000 	ldr.w	r6, [r8]
 8028704:	1a2d      	subs	r5, r5, r0
 8028706:	42b5      	cmp	r5, r6
 8028708:	dd54      	ble.n	80287b4 <__gethex+0x228>
 802870a:	1bad      	subs	r5, r5, r6
 802870c:	4629      	mov	r1, r5
 802870e:	4620      	mov	r0, r4
 8028710:	f7fe faea 	bl	8026ce8 <__any_on>
 8028714:	4681      	mov	r9, r0
 8028716:	b178      	cbz	r0, 8028738 <__gethex+0x1ac>
 8028718:	1e6b      	subs	r3, r5, #1
 802871a:	1159      	asrs	r1, r3, #5
 802871c:	f003 021f 	and.w	r2, r3, #31
 8028720:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8028724:	f04f 0901 	mov.w	r9, #1
 8028728:	fa09 f202 	lsl.w	r2, r9, r2
 802872c:	420a      	tst	r2, r1
 802872e:	d003      	beq.n	8028738 <__gethex+0x1ac>
 8028730:	454b      	cmp	r3, r9
 8028732:	dc36      	bgt.n	80287a2 <__gethex+0x216>
 8028734:	f04f 0902 	mov.w	r9, #2
 8028738:	4629      	mov	r1, r5
 802873a:	4620      	mov	r0, r4
 802873c:	f7ff febe 	bl	80284bc <rshift>
 8028740:	442f      	add	r7, r5
 8028742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028746:	42bb      	cmp	r3, r7
 8028748:	da42      	bge.n	80287d0 <__gethex+0x244>
 802874a:	9801      	ldr	r0, [sp, #4]
 802874c:	4621      	mov	r1, r4
 802874e:	f7fd fe85 	bl	802645c <_Bfree>
 8028752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028754:	2300      	movs	r3, #0
 8028756:	6013      	str	r3, [r2, #0]
 8028758:	25a3      	movs	r5, #163	@ 0xa3
 802875a:	e793      	b.n	8028684 <__gethex+0xf8>
 802875c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8028760:	2a2e      	cmp	r2, #46	@ 0x2e
 8028762:	d012      	beq.n	802878a <__gethex+0x1fe>
 8028764:	2b20      	cmp	r3, #32
 8028766:	d104      	bne.n	8028772 <__gethex+0x1e6>
 8028768:	f845 bb04 	str.w	fp, [r5], #4
 802876c:	f04f 0b00 	mov.w	fp, #0
 8028770:	465b      	mov	r3, fp
 8028772:	7830      	ldrb	r0, [r6, #0]
 8028774:	9303      	str	r3, [sp, #12]
 8028776:	f7ff fef3 	bl	8028560 <__hexdig_fun>
 802877a:	9b03      	ldr	r3, [sp, #12]
 802877c:	f000 000f 	and.w	r0, r0, #15
 8028780:	4098      	lsls	r0, r3
 8028782:	ea4b 0b00 	orr.w	fp, fp, r0
 8028786:	3304      	adds	r3, #4
 8028788:	e7ae      	b.n	80286e8 <__gethex+0x15c>
 802878a:	45b1      	cmp	r9, r6
 802878c:	d8ea      	bhi.n	8028764 <__gethex+0x1d8>
 802878e:	492b      	ldr	r1, [pc, #172]	@ (802883c <__gethex+0x2b0>)
 8028790:	9303      	str	r3, [sp, #12]
 8028792:	2201      	movs	r2, #1
 8028794:	4630      	mov	r0, r6
 8028796:	f7ff fe32 	bl	80283fe <strncmp>
 802879a:	9b03      	ldr	r3, [sp, #12]
 802879c:	2800      	cmp	r0, #0
 802879e:	d1e1      	bne.n	8028764 <__gethex+0x1d8>
 80287a0:	e7a2      	b.n	80286e8 <__gethex+0x15c>
 80287a2:	1ea9      	subs	r1, r5, #2
 80287a4:	4620      	mov	r0, r4
 80287a6:	f7fe fa9f 	bl	8026ce8 <__any_on>
 80287aa:	2800      	cmp	r0, #0
 80287ac:	d0c2      	beq.n	8028734 <__gethex+0x1a8>
 80287ae:	f04f 0903 	mov.w	r9, #3
 80287b2:	e7c1      	b.n	8028738 <__gethex+0x1ac>
 80287b4:	da09      	bge.n	80287ca <__gethex+0x23e>
 80287b6:	1b75      	subs	r5, r6, r5
 80287b8:	4621      	mov	r1, r4
 80287ba:	9801      	ldr	r0, [sp, #4]
 80287bc:	462a      	mov	r2, r5
 80287be:	f7fe f85d 	bl	802687c <__lshift>
 80287c2:	1b7f      	subs	r7, r7, r5
 80287c4:	4604      	mov	r4, r0
 80287c6:	f100 0a14 	add.w	sl, r0, #20
 80287ca:	f04f 0900 	mov.w	r9, #0
 80287ce:	e7b8      	b.n	8028742 <__gethex+0x1b6>
 80287d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80287d4:	42bd      	cmp	r5, r7
 80287d6:	dd6f      	ble.n	80288b8 <__gethex+0x32c>
 80287d8:	1bed      	subs	r5, r5, r7
 80287da:	42ae      	cmp	r6, r5
 80287dc:	dc34      	bgt.n	8028848 <__gethex+0x2bc>
 80287de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80287e2:	2b02      	cmp	r3, #2
 80287e4:	d022      	beq.n	802882c <__gethex+0x2a0>
 80287e6:	2b03      	cmp	r3, #3
 80287e8:	d024      	beq.n	8028834 <__gethex+0x2a8>
 80287ea:	2b01      	cmp	r3, #1
 80287ec:	d115      	bne.n	802881a <__gethex+0x28e>
 80287ee:	42ae      	cmp	r6, r5
 80287f0:	d113      	bne.n	802881a <__gethex+0x28e>
 80287f2:	2e01      	cmp	r6, #1
 80287f4:	d10b      	bne.n	802880e <__gethex+0x282>
 80287f6:	9a02      	ldr	r2, [sp, #8]
 80287f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80287fc:	6013      	str	r3, [r2, #0]
 80287fe:	2301      	movs	r3, #1
 8028800:	6123      	str	r3, [r4, #16]
 8028802:	f8ca 3000 	str.w	r3, [sl]
 8028806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028808:	2562      	movs	r5, #98	@ 0x62
 802880a:	601c      	str	r4, [r3, #0]
 802880c:	e73a      	b.n	8028684 <__gethex+0xf8>
 802880e:	1e71      	subs	r1, r6, #1
 8028810:	4620      	mov	r0, r4
 8028812:	f7fe fa69 	bl	8026ce8 <__any_on>
 8028816:	2800      	cmp	r0, #0
 8028818:	d1ed      	bne.n	80287f6 <__gethex+0x26a>
 802881a:	9801      	ldr	r0, [sp, #4]
 802881c:	4621      	mov	r1, r4
 802881e:	f7fd fe1d 	bl	802645c <_Bfree>
 8028822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028824:	2300      	movs	r3, #0
 8028826:	6013      	str	r3, [r2, #0]
 8028828:	2550      	movs	r5, #80	@ 0x50
 802882a:	e72b      	b.n	8028684 <__gethex+0xf8>
 802882c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802882e:	2b00      	cmp	r3, #0
 8028830:	d1f3      	bne.n	802881a <__gethex+0x28e>
 8028832:	e7e0      	b.n	80287f6 <__gethex+0x26a>
 8028834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028836:	2b00      	cmp	r3, #0
 8028838:	d1dd      	bne.n	80287f6 <__gethex+0x26a>
 802883a:	e7ee      	b.n	802881a <__gethex+0x28e>
 802883c:	0802c316 	.word	0x0802c316
 8028840:	0802c2ac 	.word	0x0802c2ac
 8028844:	0802c388 	.word	0x0802c388
 8028848:	1e6f      	subs	r7, r5, #1
 802884a:	f1b9 0f00 	cmp.w	r9, #0
 802884e:	d130      	bne.n	80288b2 <__gethex+0x326>
 8028850:	b127      	cbz	r7, 802885c <__gethex+0x2d0>
 8028852:	4639      	mov	r1, r7
 8028854:	4620      	mov	r0, r4
 8028856:	f7fe fa47 	bl	8026ce8 <__any_on>
 802885a:	4681      	mov	r9, r0
 802885c:	117a      	asrs	r2, r7, #5
 802885e:	2301      	movs	r3, #1
 8028860:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8028864:	f007 071f 	and.w	r7, r7, #31
 8028868:	40bb      	lsls	r3, r7
 802886a:	4213      	tst	r3, r2
 802886c:	4629      	mov	r1, r5
 802886e:	4620      	mov	r0, r4
 8028870:	bf18      	it	ne
 8028872:	f049 0902 	orrne.w	r9, r9, #2
 8028876:	f7ff fe21 	bl	80284bc <rshift>
 802887a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802887e:	1b76      	subs	r6, r6, r5
 8028880:	2502      	movs	r5, #2
 8028882:	f1b9 0f00 	cmp.w	r9, #0
 8028886:	d047      	beq.n	8028918 <__gethex+0x38c>
 8028888:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802888c:	2b02      	cmp	r3, #2
 802888e:	d015      	beq.n	80288bc <__gethex+0x330>
 8028890:	2b03      	cmp	r3, #3
 8028892:	d017      	beq.n	80288c4 <__gethex+0x338>
 8028894:	2b01      	cmp	r3, #1
 8028896:	d109      	bne.n	80288ac <__gethex+0x320>
 8028898:	f019 0f02 	tst.w	r9, #2
 802889c:	d006      	beq.n	80288ac <__gethex+0x320>
 802889e:	f8da 3000 	ldr.w	r3, [sl]
 80288a2:	ea49 0903 	orr.w	r9, r9, r3
 80288a6:	f019 0f01 	tst.w	r9, #1
 80288aa:	d10e      	bne.n	80288ca <__gethex+0x33e>
 80288ac:	f045 0510 	orr.w	r5, r5, #16
 80288b0:	e032      	b.n	8028918 <__gethex+0x38c>
 80288b2:	f04f 0901 	mov.w	r9, #1
 80288b6:	e7d1      	b.n	802885c <__gethex+0x2d0>
 80288b8:	2501      	movs	r5, #1
 80288ba:	e7e2      	b.n	8028882 <__gethex+0x2f6>
 80288bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80288be:	f1c3 0301 	rsb	r3, r3, #1
 80288c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80288c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80288c6:	2b00      	cmp	r3, #0
 80288c8:	d0f0      	beq.n	80288ac <__gethex+0x320>
 80288ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80288ce:	f104 0314 	add.w	r3, r4, #20
 80288d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80288d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80288da:	f04f 0c00 	mov.w	ip, #0
 80288de:	4618      	mov	r0, r3
 80288e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80288e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80288e8:	d01b      	beq.n	8028922 <__gethex+0x396>
 80288ea:	3201      	adds	r2, #1
 80288ec:	6002      	str	r2, [r0, #0]
 80288ee:	2d02      	cmp	r5, #2
 80288f0:	f104 0314 	add.w	r3, r4, #20
 80288f4:	d13c      	bne.n	8028970 <__gethex+0x3e4>
 80288f6:	f8d8 2000 	ldr.w	r2, [r8]
 80288fa:	3a01      	subs	r2, #1
 80288fc:	42b2      	cmp	r2, r6
 80288fe:	d109      	bne.n	8028914 <__gethex+0x388>
 8028900:	1171      	asrs	r1, r6, #5
 8028902:	2201      	movs	r2, #1
 8028904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8028908:	f006 061f 	and.w	r6, r6, #31
 802890c:	fa02 f606 	lsl.w	r6, r2, r6
 8028910:	421e      	tst	r6, r3
 8028912:	d13a      	bne.n	802898a <__gethex+0x3fe>
 8028914:	f045 0520 	orr.w	r5, r5, #32
 8028918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802891a:	601c      	str	r4, [r3, #0]
 802891c:	9b02      	ldr	r3, [sp, #8]
 802891e:	601f      	str	r7, [r3, #0]
 8028920:	e6b0      	b.n	8028684 <__gethex+0xf8>
 8028922:	4299      	cmp	r1, r3
 8028924:	f843 cc04 	str.w	ip, [r3, #-4]
 8028928:	d8d9      	bhi.n	80288de <__gethex+0x352>
 802892a:	68a3      	ldr	r3, [r4, #8]
 802892c:	459b      	cmp	fp, r3
 802892e:	db17      	blt.n	8028960 <__gethex+0x3d4>
 8028930:	6861      	ldr	r1, [r4, #4]
 8028932:	9801      	ldr	r0, [sp, #4]
 8028934:	3101      	adds	r1, #1
 8028936:	f7fd fd51 	bl	80263dc <_Balloc>
 802893a:	4681      	mov	r9, r0
 802893c:	b918      	cbnz	r0, 8028946 <__gethex+0x3ba>
 802893e:	4b1a      	ldr	r3, [pc, #104]	@ (80289a8 <__gethex+0x41c>)
 8028940:	4602      	mov	r2, r0
 8028942:	2184      	movs	r1, #132	@ 0x84
 8028944:	e6c5      	b.n	80286d2 <__gethex+0x146>
 8028946:	6922      	ldr	r2, [r4, #16]
 8028948:	3202      	adds	r2, #2
 802894a:	f104 010c 	add.w	r1, r4, #12
 802894e:	0092      	lsls	r2, r2, #2
 8028950:	300c      	adds	r0, #12
 8028952:	f7fc fe46 	bl	80255e2 <memcpy>
 8028956:	4621      	mov	r1, r4
 8028958:	9801      	ldr	r0, [sp, #4]
 802895a:	f7fd fd7f 	bl	802645c <_Bfree>
 802895e:	464c      	mov	r4, r9
 8028960:	6923      	ldr	r3, [r4, #16]
 8028962:	1c5a      	adds	r2, r3, #1
 8028964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8028968:	6122      	str	r2, [r4, #16]
 802896a:	2201      	movs	r2, #1
 802896c:	615a      	str	r2, [r3, #20]
 802896e:	e7be      	b.n	80288ee <__gethex+0x362>
 8028970:	6922      	ldr	r2, [r4, #16]
 8028972:	455a      	cmp	r2, fp
 8028974:	dd0b      	ble.n	802898e <__gethex+0x402>
 8028976:	2101      	movs	r1, #1
 8028978:	4620      	mov	r0, r4
 802897a:	f7ff fd9f 	bl	80284bc <rshift>
 802897e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028982:	3701      	adds	r7, #1
 8028984:	42bb      	cmp	r3, r7
 8028986:	f6ff aee0 	blt.w	802874a <__gethex+0x1be>
 802898a:	2501      	movs	r5, #1
 802898c:	e7c2      	b.n	8028914 <__gethex+0x388>
 802898e:	f016 061f 	ands.w	r6, r6, #31
 8028992:	d0fa      	beq.n	802898a <__gethex+0x3fe>
 8028994:	4453      	add	r3, sl
 8028996:	f1c6 0620 	rsb	r6, r6, #32
 802899a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802899e:	f7fd fe0f 	bl	80265c0 <__hi0bits>
 80289a2:	42b0      	cmp	r0, r6
 80289a4:	dbe7      	blt.n	8028976 <__gethex+0x3ea>
 80289a6:	e7f0      	b.n	802898a <__gethex+0x3fe>
 80289a8:	0802c2ac 	.word	0x0802c2ac

080289ac <L_shift>:
 80289ac:	f1c2 0208 	rsb	r2, r2, #8
 80289b0:	0092      	lsls	r2, r2, #2
 80289b2:	b570      	push	{r4, r5, r6, lr}
 80289b4:	f1c2 0620 	rsb	r6, r2, #32
 80289b8:	6843      	ldr	r3, [r0, #4]
 80289ba:	6804      	ldr	r4, [r0, #0]
 80289bc:	fa03 f506 	lsl.w	r5, r3, r6
 80289c0:	432c      	orrs	r4, r5
 80289c2:	40d3      	lsrs	r3, r2
 80289c4:	6004      	str	r4, [r0, #0]
 80289c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80289ca:	4288      	cmp	r0, r1
 80289cc:	d3f4      	bcc.n	80289b8 <L_shift+0xc>
 80289ce:	bd70      	pop	{r4, r5, r6, pc}

080289d0 <__match>:
 80289d0:	b530      	push	{r4, r5, lr}
 80289d2:	6803      	ldr	r3, [r0, #0]
 80289d4:	3301      	adds	r3, #1
 80289d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80289da:	b914      	cbnz	r4, 80289e2 <__match+0x12>
 80289dc:	6003      	str	r3, [r0, #0]
 80289de:	2001      	movs	r0, #1
 80289e0:	bd30      	pop	{r4, r5, pc}
 80289e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80289e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80289ea:	2d19      	cmp	r5, #25
 80289ec:	bf98      	it	ls
 80289ee:	3220      	addls	r2, #32
 80289f0:	42a2      	cmp	r2, r4
 80289f2:	d0f0      	beq.n	80289d6 <__match+0x6>
 80289f4:	2000      	movs	r0, #0
 80289f6:	e7f3      	b.n	80289e0 <__match+0x10>

080289f8 <__hexnan>:
 80289f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80289fc:	680b      	ldr	r3, [r1, #0]
 80289fe:	6801      	ldr	r1, [r0, #0]
 8028a00:	115e      	asrs	r6, r3, #5
 8028a02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8028a06:	f013 031f 	ands.w	r3, r3, #31
 8028a0a:	b087      	sub	sp, #28
 8028a0c:	bf18      	it	ne
 8028a0e:	3604      	addne	r6, #4
 8028a10:	2500      	movs	r5, #0
 8028a12:	1f37      	subs	r7, r6, #4
 8028a14:	4682      	mov	sl, r0
 8028a16:	4690      	mov	r8, r2
 8028a18:	9301      	str	r3, [sp, #4]
 8028a1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8028a1e:	46b9      	mov	r9, r7
 8028a20:	463c      	mov	r4, r7
 8028a22:	9502      	str	r5, [sp, #8]
 8028a24:	46ab      	mov	fp, r5
 8028a26:	784a      	ldrb	r2, [r1, #1]
 8028a28:	1c4b      	adds	r3, r1, #1
 8028a2a:	9303      	str	r3, [sp, #12]
 8028a2c:	b342      	cbz	r2, 8028a80 <__hexnan+0x88>
 8028a2e:	4610      	mov	r0, r2
 8028a30:	9105      	str	r1, [sp, #20]
 8028a32:	9204      	str	r2, [sp, #16]
 8028a34:	f7ff fd94 	bl	8028560 <__hexdig_fun>
 8028a38:	2800      	cmp	r0, #0
 8028a3a:	d151      	bne.n	8028ae0 <__hexnan+0xe8>
 8028a3c:	9a04      	ldr	r2, [sp, #16]
 8028a3e:	9905      	ldr	r1, [sp, #20]
 8028a40:	2a20      	cmp	r2, #32
 8028a42:	d818      	bhi.n	8028a76 <__hexnan+0x7e>
 8028a44:	9b02      	ldr	r3, [sp, #8]
 8028a46:	459b      	cmp	fp, r3
 8028a48:	dd13      	ble.n	8028a72 <__hexnan+0x7a>
 8028a4a:	454c      	cmp	r4, r9
 8028a4c:	d206      	bcs.n	8028a5c <__hexnan+0x64>
 8028a4e:	2d07      	cmp	r5, #7
 8028a50:	dc04      	bgt.n	8028a5c <__hexnan+0x64>
 8028a52:	462a      	mov	r2, r5
 8028a54:	4649      	mov	r1, r9
 8028a56:	4620      	mov	r0, r4
 8028a58:	f7ff ffa8 	bl	80289ac <L_shift>
 8028a5c:	4544      	cmp	r4, r8
 8028a5e:	d952      	bls.n	8028b06 <__hexnan+0x10e>
 8028a60:	2300      	movs	r3, #0
 8028a62:	f1a4 0904 	sub.w	r9, r4, #4
 8028a66:	f844 3c04 	str.w	r3, [r4, #-4]
 8028a6a:	f8cd b008 	str.w	fp, [sp, #8]
 8028a6e:	464c      	mov	r4, r9
 8028a70:	461d      	mov	r5, r3
 8028a72:	9903      	ldr	r1, [sp, #12]
 8028a74:	e7d7      	b.n	8028a26 <__hexnan+0x2e>
 8028a76:	2a29      	cmp	r2, #41	@ 0x29
 8028a78:	d157      	bne.n	8028b2a <__hexnan+0x132>
 8028a7a:	3102      	adds	r1, #2
 8028a7c:	f8ca 1000 	str.w	r1, [sl]
 8028a80:	f1bb 0f00 	cmp.w	fp, #0
 8028a84:	d051      	beq.n	8028b2a <__hexnan+0x132>
 8028a86:	454c      	cmp	r4, r9
 8028a88:	d206      	bcs.n	8028a98 <__hexnan+0xa0>
 8028a8a:	2d07      	cmp	r5, #7
 8028a8c:	dc04      	bgt.n	8028a98 <__hexnan+0xa0>
 8028a8e:	462a      	mov	r2, r5
 8028a90:	4649      	mov	r1, r9
 8028a92:	4620      	mov	r0, r4
 8028a94:	f7ff ff8a 	bl	80289ac <L_shift>
 8028a98:	4544      	cmp	r4, r8
 8028a9a:	d936      	bls.n	8028b0a <__hexnan+0x112>
 8028a9c:	f1a8 0204 	sub.w	r2, r8, #4
 8028aa0:	4623      	mov	r3, r4
 8028aa2:	f853 1b04 	ldr.w	r1, [r3], #4
 8028aa6:	f842 1f04 	str.w	r1, [r2, #4]!
 8028aaa:	429f      	cmp	r7, r3
 8028aac:	d2f9      	bcs.n	8028aa2 <__hexnan+0xaa>
 8028aae:	1b3b      	subs	r3, r7, r4
 8028ab0:	f023 0303 	bic.w	r3, r3, #3
 8028ab4:	3304      	adds	r3, #4
 8028ab6:	3401      	adds	r4, #1
 8028ab8:	3e03      	subs	r6, #3
 8028aba:	42b4      	cmp	r4, r6
 8028abc:	bf88      	it	hi
 8028abe:	2304      	movhi	r3, #4
 8028ac0:	4443      	add	r3, r8
 8028ac2:	2200      	movs	r2, #0
 8028ac4:	f843 2b04 	str.w	r2, [r3], #4
 8028ac8:	429f      	cmp	r7, r3
 8028aca:	d2fb      	bcs.n	8028ac4 <__hexnan+0xcc>
 8028acc:	683b      	ldr	r3, [r7, #0]
 8028ace:	b91b      	cbnz	r3, 8028ad8 <__hexnan+0xe0>
 8028ad0:	4547      	cmp	r7, r8
 8028ad2:	d128      	bne.n	8028b26 <__hexnan+0x12e>
 8028ad4:	2301      	movs	r3, #1
 8028ad6:	603b      	str	r3, [r7, #0]
 8028ad8:	2005      	movs	r0, #5
 8028ada:	b007      	add	sp, #28
 8028adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ae0:	3501      	adds	r5, #1
 8028ae2:	2d08      	cmp	r5, #8
 8028ae4:	f10b 0b01 	add.w	fp, fp, #1
 8028ae8:	dd06      	ble.n	8028af8 <__hexnan+0x100>
 8028aea:	4544      	cmp	r4, r8
 8028aec:	d9c1      	bls.n	8028a72 <__hexnan+0x7a>
 8028aee:	2300      	movs	r3, #0
 8028af0:	f844 3c04 	str.w	r3, [r4, #-4]
 8028af4:	2501      	movs	r5, #1
 8028af6:	3c04      	subs	r4, #4
 8028af8:	6822      	ldr	r2, [r4, #0]
 8028afa:	f000 000f 	and.w	r0, r0, #15
 8028afe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8028b02:	6020      	str	r0, [r4, #0]
 8028b04:	e7b5      	b.n	8028a72 <__hexnan+0x7a>
 8028b06:	2508      	movs	r5, #8
 8028b08:	e7b3      	b.n	8028a72 <__hexnan+0x7a>
 8028b0a:	9b01      	ldr	r3, [sp, #4]
 8028b0c:	2b00      	cmp	r3, #0
 8028b0e:	d0dd      	beq.n	8028acc <__hexnan+0xd4>
 8028b10:	f1c3 0320 	rsb	r3, r3, #32
 8028b14:	f04f 32ff 	mov.w	r2, #4294967295
 8028b18:	40da      	lsrs	r2, r3
 8028b1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8028b1e:	4013      	ands	r3, r2
 8028b20:	f846 3c04 	str.w	r3, [r6, #-4]
 8028b24:	e7d2      	b.n	8028acc <__hexnan+0xd4>
 8028b26:	3f04      	subs	r7, #4
 8028b28:	e7d0      	b.n	8028acc <__hexnan+0xd4>
 8028b2a:	2004      	movs	r0, #4
 8028b2c:	e7d5      	b.n	8028ada <__hexnan+0xe2>

08028b2e <__ascii_mbtowc>:
 8028b2e:	b082      	sub	sp, #8
 8028b30:	b901      	cbnz	r1, 8028b34 <__ascii_mbtowc+0x6>
 8028b32:	a901      	add	r1, sp, #4
 8028b34:	b142      	cbz	r2, 8028b48 <__ascii_mbtowc+0x1a>
 8028b36:	b14b      	cbz	r3, 8028b4c <__ascii_mbtowc+0x1e>
 8028b38:	7813      	ldrb	r3, [r2, #0]
 8028b3a:	600b      	str	r3, [r1, #0]
 8028b3c:	7812      	ldrb	r2, [r2, #0]
 8028b3e:	1e10      	subs	r0, r2, #0
 8028b40:	bf18      	it	ne
 8028b42:	2001      	movne	r0, #1
 8028b44:	b002      	add	sp, #8
 8028b46:	4770      	bx	lr
 8028b48:	4610      	mov	r0, r2
 8028b4a:	e7fb      	b.n	8028b44 <__ascii_mbtowc+0x16>
 8028b4c:	f06f 0001 	mvn.w	r0, #1
 8028b50:	e7f8      	b.n	8028b44 <__ascii_mbtowc+0x16>

08028b52 <_realloc_r>:
 8028b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028b56:	4607      	mov	r7, r0
 8028b58:	4614      	mov	r4, r2
 8028b5a:	460d      	mov	r5, r1
 8028b5c:	b921      	cbnz	r1, 8028b68 <_realloc_r+0x16>
 8028b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028b62:	4611      	mov	r1, r2
 8028b64:	f7fd bbae 	b.w	80262c4 <_malloc_r>
 8028b68:	b92a      	cbnz	r2, 8028b76 <_realloc_r+0x24>
 8028b6a:	f7fd fb37 	bl	80261dc <_free_r>
 8028b6e:	4625      	mov	r5, r4
 8028b70:	4628      	mov	r0, r5
 8028b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028b76:	f000 f840 	bl	8028bfa <_malloc_usable_size_r>
 8028b7a:	4284      	cmp	r4, r0
 8028b7c:	4606      	mov	r6, r0
 8028b7e:	d802      	bhi.n	8028b86 <_realloc_r+0x34>
 8028b80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8028b84:	d8f4      	bhi.n	8028b70 <_realloc_r+0x1e>
 8028b86:	4621      	mov	r1, r4
 8028b88:	4638      	mov	r0, r7
 8028b8a:	f7fd fb9b 	bl	80262c4 <_malloc_r>
 8028b8e:	4680      	mov	r8, r0
 8028b90:	b908      	cbnz	r0, 8028b96 <_realloc_r+0x44>
 8028b92:	4645      	mov	r5, r8
 8028b94:	e7ec      	b.n	8028b70 <_realloc_r+0x1e>
 8028b96:	42b4      	cmp	r4, r6
 8028b98:	4622      	mov	r2, r4
 8028b9a:	4629      	mov	r1, r5
 8028b9c:	bf28      	it	cs
 8028b9e:	4632      	movcs	r2, r6
 8028ba0:	f7fc fd1f 	bl	80255e2 <memcpy>
 8028ba4:	4629      	mov	r1, r5
 8028ba6:	4638      	mov	r0, r7
 8028ba8:	f7fd fb18 	bl	80261dc <_free_r>
 8028bac:	e7f1      	b.n	8028b92 <_realloc_r+0x40>

08028bae <__ascii_wctomb>:
 8028bae:	4603      	mov	r3, r0
 8028bb0:	4608      	mov	r0, r1
 8028bb2:	b141      	cbz	r1, 8028bc6 <__ascii_wctomb+0x18>
 8028bb4:	2aff      	cmp	r2, #255	@ 0xff
 8028bb6:	d904      	bls.n	8028bc2 <__ascii_wctomb+0x14>
 8028bb8:	228a      	movs	r2, #138	@ 0x8a
 8028bba:	601a      	str	r2, [r3, #0]
 8028bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8028bc0:	4770      	bx	lr
 8028bc2:	700a      	strb	r2, [r1, #0]
 8028bc4:	2001      	movs	r0, #1
 8028bc6:	4770      	bx	lr

08028bc8 <fiprintf>:
 8028bc8:	b40e      	push	{r1, r2, r3}
 8028bca:	b503      	push	{r0, r1, lr}
 8028bcc:	4601      	mov	r1, r0
 8028bce:	ab03      	add	r3, sp, #12
 8028bd0:	4805      	ldr	r0, [pc, #20]	@ (8028be8 <fiprintf+0x20>)
 8028bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8028bd6:	6800      	ldr	r0, [r0, #0]
 8028bd8:	9301      	str	r3, [sp, #4]
 8028bda:	f000 f83f 	bl	8028c5c <_vfiprintf_r>
 8028bde:	b002      	add	sp, #8
 8028be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8028be4:	b003      	add	sp, #12
 8028be6:	4770      	bx	lr
 8028be8:	240003a4 	.word	0x240003a4

08028bec <abort>:
 8028bec:	b508      	push	{r3, lr}
 8028bee:	2006      	movs	r0, #6
 8028bf0:	f000 fa08 	bl	8029004 <raise>
 8028bf4:	2001      	movs	r0, #1
 8028bf6:	f7e2 faff 	bl	800b1f8 <_exit>

08028bfa <_malloc_usable_size_r>:
 8028bfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028bfe:	1f18      	subs	r0, r3, #4
 8028c00:	2b00      	cmp	r3, #0
 8028c02:	bfbc      	itt	lt
 8028c04:	580b      	ldrlt	r3, [r1, r0]
 8028c06:	18c0      	addlt	r0, r0, r3
 8028c08:	4770      	bx	lr

08028c0a <__sfputc_r>:
 8028c0a:	6893      	ldr	r3, [r2, #8]
 8028c0c:	3b01      	subs	r3, #1
 8028c0e:	2b00      	cmp	r3, #0
 8028c10:	b410      	push	{r4}
 8028c12:	6093      	str	r3, [r2, #8]
 8028c14:	da08      	bge.n	8028c28 <__sfputc_r+0x1e>
 8028c16:	6994      	ldr	r4, [r2, #24]
 8028c18:	42a3      	cmp	r3, r4
 8028c1a:	db01      	blt.n	8028c20 <__sfputc_r+0x16>
 8028c1c:	290a      	cmp	r1, #10
 8028c1e:	d103      	bne.n	8028c28 <__sfputc_r+0x1e>
 8028c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028c24:	f000 b932 	b.w	8028e8c <__swbuf_r>
 8028c28:	6813      	ldr	r3, [r2, #0]
 8028c2a:	1c58      	adds	r0, r3, #1
 8028c2c:	6010      	str	r0, [r2, #0]
 8028c2e:	7019      	strb	r1, [r3, #0]
 8028c30:	4608      	mov	r0, r1
 8028c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028c36:	4770      	bx	lr

08028c38 <__sfputs_r>:
 8028c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028c3a:	4606      	mov	r6, r0
 8028c3c:	460f      	mov	r7, r1
 8028c3e:	4614      	mov	r4, r2
 8028c40:	18d5      	adds	r5, r2, r3
 8028c42:	42ac      	cmp	r4, r5
 8028c44:	d101      	bne.n	8028c4a <__sfputs_r+0x12>
 8028c46:	2000      	movs	r0, #0
 8028c48:	e007      	b.n	8028c5a <__sfputs_r+0x22>
 8028c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028c4e:	463a      	mov	r2, r7
 8028c50:	4630      	mov	r0, r6
 8028c52:	f7ff ffda 	bl	8028c0a <__sfputc_r>
 8028c56:	1c43      	adds	r3, r0, #1
 8028c58:	d1f3      	bne.n	8028c42 <__sfputs_r+0xa>
 8028c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08028c5c <_vfiprintf_r>:
 8028c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c60:	460d      	mov	r5, r1
 8028c62:	b09d      	sub	sp, #116	@ 0x74
 8028c64:	4614      	mov	r4, r2
 8028c66:	4698      	mov	r8, r3
 8028c68:	4606      	mov	r6, r0
 8028c6a:	b118      	cbz	r0, 8028c74 <_vfiprintf_r+0x18>
 8028c6c:	6a03      	ldr	r3, [r0, #32]
 8028c6e:	b90b      	cbnz	r3, 8028c74 <_vfiprintf_r+0x18>
 8028c70:	f7fc faee 	bl	8025250 <__sinit>
 8028c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028c76:	07d9      	lsls	r1, r3, #31
 8028c78:	d405      	bmi.n	8028c86 <_vfiprintf_r+0x2a>
 8028c7a:	89ab      	ldrh	r3, [r5, #12]
 8028c7c:	059a      	lsls	r2, r3, #22
 8028c7e:	d402      	bmi.n	8028c86 <_vfiprintf_r+0x2a>
 8028c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8028c82:	f7fc fcac 	bl	80255de <__retarget_lock_acquire_recursive>
 8028c86:	89ab      	ldrh	r3, [r5, #12]
 8028c88:	071b      	lsls	r3, r3, #28
 8028c8a:	d501      	bpl.n	8028c90 <_vfiprintf_r+0x34>
 8028c8c:	692b      	ldr	r3, [r5, #16]
 8028c8e:	b99b      	cbnz	r3, 8028cb8 <_vfiprintf_r+0x5c>
 8028c90:	4629      	mov	r1, r5
 8028c92:	4630      	mov	r0, r6
 8028c94:	f000 f938 	bl	8028f08 <__swsetup_r>
 8028c98:	b170      	cbz	r0, 8028cb8 <_vfiprintf_r+0x5c>
 8028c9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028c9c:	07dc      	lsls	r4, r3, #31
 8028c9e:	d504      	bpl.n	8028caa <_vfiprintf_r+0x4e>
 8028ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8028ca4:	b01d      	add	sp, #116	@ 0x74
 8028ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028caa:	89ab      	ldrh	r3, [r5, #12]
 8028cac:	0598      	lsls	r0, r3, #22
 8028cae:	d4f7      	bmi.n	8028ca0 <_vfiprintf_r+0x44>
 8028cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8028cb2:	f7fc fc95 	bl	80255e0 <__retarget_lock_release_recursive>
 8028cb6:	e7f3      	b.n	8028ca0 <_vfiprintf_r+0x44>
 8028cb8:	2300      	movs	r3, #0
 8028cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8028cbc:	2320      	movs	r3, #32
 8028cbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8028cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8028cc6:	2330      	movs	r3, #48	@ 0x30
 8028cc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8028e78 <_vfiprintf_r+0x21c>
 8028ccc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8028cd0:	f04f 0901 	mov.w	r9, #1
 8028cd4:	4623      	mov	r3, r4
 8028cd6:	469a      	mov	sl, r3
 8028cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028cdc:	b10a      	cbz	r2, 8028ce2 <_vfiprintf_r+0x86>
 8028cde:	2a25      	cmp	r2, #37	@ 0x25
 8028ce0:	d1f9      	bne.n	8028cd6 <_vfiprintf_r+0x7a>
 8028ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8028ce6:	d00b      	beq.n	8028d00 <_vfiprintf_r+0xa4>
 8028ce8:	465b      	mov	r3, fp
 8028cea:	4622      	mov	r2, r4
 8028cec:	4629      	mov	r1, r5
 8028cee:	4630      	mov	r0, r6
 8028cf0:	f7ff ffa2 	bl	8028c38 <__sfputs_r>
 8028cf4:	3001      	adds	r0, #1
 8028cf6:	f000 80a7 	beq.w	8028e48 <_vfiprintf_r+0x1ec>
 8028cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028cfc:	445a      	add	r2, fp
 8028cfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8028d00:	f89a 3000 	ldrb.w	r3, [sl]
 8028d04:	2b00      	cmp	r3, #0
 8028d06:	f000 809f 	beq.w	8028e48 <_vfiprintf_r+0x1ec>
 8028d0a:	2300      	movs	r3, #0
 8028d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8028d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028d14:	f10a 0a01 	add.w	sl, sl, #1
 8028d18:	9304      	str	r3, [sp, #16]
 8028d1a:	9307      	str	r3, [sp, #28]
 8028d1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8028d20:	931a      	str	r3, [sp, #104]	@ 0x68
 8028d22:	4654      	mov	r4, sl
 8028d24:	2205      	movs	r2, #5
 8028d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028d2a:	4853      	ldr	r0, [pc, #332]	@ (8028e78 <_vfiprintf_r+0x21c>)
 8028d2c:	f7d7 faf0 	bl	8000310 <memchr>
 8028d30:	9a04      	ldr	r2, [sp, #16]
 8028d32:	b9d8      	cbnz	r0, 8028d6c <_vfiprintf_r+0x110>
 8028d34:	06d1      	lsls	r1, r2, #27
 8028d36:	bf44      	itt	mi
 8028d38:	2320      	movmi	r3, #32
 8028d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028d3e:	0713      	lsls	r3, r2, #28
 8028d40:	bf44      	itt	mi
 8028d42:	232b      	movmi	r3, #43	@ 0x2b
 8028d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028d48:	f89a 3000 	ldrb.w	r3, [sl]
 8028d4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8028d4e:	d015      	beq.n	8028d7c <_vfiprintf_r+0x120>
 8028d50:	9a07      	ldr	r2, [sp, #28]
 8028d52:	4654      	mov	r4, sl
 8028d54:	2000      	movs	r0, #0
 8028d56:	f04f 0c0a 	mov.w	ip, #10
 8028d5a:	4621      	mov	r1, r4
 8028d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028d60:	3b30      	subs	r3, #48	@ 0x30
 8028d62:	2b09      	cmp	r3, #9
 8028d64:	d94b      	bls.n	8028dfe <_vfiprintf_r+0x1a2>
 8028d66:	b1b0      	cbz	r0, 8028d96 <_vfiprintf_r+0x13a>
 8028d68:	9207      	str	r2, [sp, #28]
 8028d6a:	e014      	b.n	8028d96 <_vfiprintf_r+0x13a>
 8028d6c:	eba0 0308 	sub.w	r3, r0, r8
 8028d70:	fa09 f303 	lsl.w	r3, r9, r3
 8028d74:	4313      	orrs	r3, r2
 8028d76:	9304      	str	r3, [sp, #16]
 8028d78:	46a2      	mov	sl, r4
 8028d7a:	e7d2      	b.n	8028d22 <_vfiprintf_r+0xc6>
 8028d7c:	9b03      	ldr	r3, [sp, #12]
 8028d7e:	1d19      	adds	r1, r3, #4
 8028d80:	681b      	ldr	r3, [r3, #0]
 8028d82:	9103      	str	r1, [sp, #12]
 8028d84:	2b00      	cmp	r3, #0
 8028d86:	bfbb      	ittet	lt
 8028d88:	425b      	neglt	r3, r3
 8028d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8028d8e:	9307      	strge	r3, [sp, #28]
 8028d90:	9307      	strlt	r3, [sp, #28]
 8028d92:	bfb8      	it	lt
 8028d94:	9204      	strlt	r2, [sp, #16]
 8028d96:	7823      	ldrb	r3, [r4, #0]
 8028d98:	2b2e      	cmp	r3, #46	@ 0x2e
 8028d9a:	d10a      	bne.n	8028db2 <_vfiprintf_r+0x156>
 8028d9c:	7863      	ldrb	r3, [r4, #1]
 8028d9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8028da0:	d132      	bne.n	8028e08 <_vfiprintf_r+0x1ac>
 8028da2:	9b03      	ldr	r3, [sp, #12]
 8028da4:	1d1a      	adds	r2, r3, #4
 8028da6:	681b      	ldr	r3, [r3, #0]
 8028da8:	9203      	str	r2, [sp, #12]
 8028daa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028dae:	3402      	adds	r4, #2
 8028db0:	9305      	str	r3, [sp, #20]
 8028db2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8028e88 <_vfiprintf_r+0x22c>
 8028db6:	7821      	ldrb	r1, [r4, #0]
 8028db8:	2203      	movs	r2, #3
 8028dba:	4650      	mov	r0, sl
 8028dbc:	f7d7 faa8 	bl	8000310 <memchr>
 8028dc0:	b138      	cbz	r0, 8028dd2 <_vfiprintf_r+0x176>
 8028dc2:	9b04      	ldr	r3, [sp, #16]
 8028dc4:	eba0 000a 	sub.w	r0, r0, sl
 8028dc8:	2240      	movs	r2, #64	@ 0x40
 8028dca:	4082      	lsls	r2, r0
 8028dcc:	4313      	orrs	r3, r2
 8028dce:	3401      	adds	r4, #1
 8028dd0:	9304      	str	r3, [sp, #16]
 8028dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028dd6:	4829      	ldr	r0, [pc, #164]	@ (8028e7c <_vfiprintf_r+0x220>)
 8028dd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8028ddc:	2206      	movs	r2, #6
 8028dde:	f7d7 fa97 	bl	8000310 <memchr>
 8028de2:	2800      	cmp	r0, #0
 8028de4:	d03f      	beq.n	8028e66 <_vfiprintf_r+0x20a>
 8028de6:	4b26      	ldr	r3, [pc, #152]	@ (8028e80 <_vfiprintf_r+0x224>)
 8028de8:	bb1b      	cbnz	r3, 8028e32 <_vfiprintf_r+0x1d6>
 8028dea:	9b03      	ldr	r3, [sp, #12]
 8028dec:	3307      	adds	r3, #7
 8028dee:	f023 0307 	bic.w	r3, r3, #7
 8028df2:	3308      	adds	r3, #8
 8028df4:	9303      	str	r3, [sp, #12]
 8028df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028df8:	443b      	add	r3, r7
 8028dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8028dfc:	e76a      	b.n	8028cd4 <_vfiprintf_r+0x78>
 8028dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8028e02:	460c      	mov	r4, r1
 8028e04:	2001      	movs	r0, #1
 8028e06:	e7a8      	b.n	8028d5a <_vfiprintf_r+0xfe>
 8028e08:	2300      	movs	r3, #0
 8028e0a:	3401      	adds	r4, #1
 8028e0c:	9305      	str	r3, [sp, #20]
 8028e0e:	4619      	mov	r1, r3
 8028e10:	f04f 0c0a 	mov.w	ip, #10
 8028e14:	4620      	mov	r0, r4
 8028e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028e1a:	3a30      	subs	r2, #48	@ 0x30
 8028e1c:	2a09      	cmp	r2, #9
 8028e1e:	d903      	bls.n	8028e28 <_vfiprintf_r+0x1cc>
 8028e20:	2b00      	cmp	r3, #0
 8028e22:	d0c6      	beq.n	8028db2 <_vfiprintf_r+0x156>
 8028e24:	9105      	str	r1, [sp, #20]
 8028e26:	e7c4      	b.n	8028db2 <_vfiprintf_r+0x156>
 8028e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8028e2c:	4604      	mov	r4, r0
 8028e2e:	2301      	movs	r3, #1
 8028e30:	e7f0      	b.n	8028e14 <_vfiprintf_r+0x1b8>
 8028e32:	ab03      	add	r3, sp, #12
 8028e34:	9300      	str	r3, [sp, #0]
 8028e36:	462a      	mov	r2, r5
 8028e38:	4b12      	ldr	r3, [pc, #72]	@ (8028e84 <_vfiprintf_r+0x228>)
 8028e3a:	a904      	add	r1, sp, #16
 8028e3c:	4630      	mov	r0, r6
 8028e3e:	f7fb fbcf 	bl	80245e0 <_printf_float>
 8028e42:	4607      	mov	r7, r0
 8028e44:	1c78      	adds	r0, r7, #1
 8028e46:	d1d6      	bne.n	8028df6 <_vfiprintf_r+0x19a>
 8028e48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028e4a:	07d9      	lsls	r1, r3, #31
 8028e4c:	d405      	bmi.n	8028e5a <_vfiprintf_r+0x1fe>
 8028e4e:	89ab      	ldrh	r3, [r5, #12]
 8028e50:	059a      	lsls	r2, r3, #22
 8028e52:	d402      	bmi.n	8028e5a <_vfiprintf_r+0x1fe>
 8028e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8028e56:	f7fc fbc3 	bl	80255e0 <__retarget_lock_release_recursive>
 8028e5a:	89ab      	ldrh	r3, [r5, #12]
 8028e5c:	065b      	lsls	r3, r3, #25
 8028e5e:	f53f af1f 	bmi.w	8028ca0 <_vfiprintf_r+0x44>
 8028e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8028e64:	e71e      	b.n	8028ca4 <_vfiprintf_r+0x48>
 8028e66:	ab03      	add	r3, sp, #12
 8028e68:	9300      	str	r3, [sp, #0]
 8028e6a:	462a      	mov	r2, r5
 8028e6c:	4b05      	ldr	r3, [pc, #20]	@ (8028e84 <_vfiprintf_r+0x228>)
 8028e6e:	a904      	add	r1, sp, #16
 8028e70:	4630      	mov	r0, r6
 8028e72:	f7fb fe3d 	bl	8024af0 <_printf_i>
 8028e76:	e7e4      	b.n	8028e42 <_vfiprintf_r+0x1e6>
 8028e78:	0802c318 	.word	0x0802c318
 8028e7c:	0802c322 	.word	0x0802c322
 8028e80:	080245e1 	.word	0x080245e1
 8028e84:	08028c39 	.word	0x08028c39
 8028e88:	0802c31e 	.word	0x0802c31e

08028e8c <__swbuf_r>:
 8028e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028e8e:	460e      	mov	r6, r1
 8028e90:	4614      	mov	r4, r2
 8028e92:	4605      	mov	r5, r0
 8028e94:	b118      	cbz	r0, 8028e9e <__swbuf_r+0x12>
 8028e96:	6a03      	ldr	r3, [r0, #32]
 8028e98:	b90b      	cbnz	r3, 8028e9e <__swbuf_r+0x12>
 8028e9a:	f7fc f9d9 	bl	8025250 <__sinit>
 8028e9e:	69a3      	ldr	r3, [r4, #24]
 8028ea0:	60a3      	str	r3, [r4, #8]
 8028ea2:	89a3      	ldrh	r3, [r4, #12]
 8028ea4:	071a      	lsls	r2, r3, #28
 8028ea6:	d501      	bpl.n	8028eac <__swbuf_r+0x20>
 8028ea8:	6923      	ldr	r3, [r4, #16]
 8028eaa:	b943      	cbnz	r3, 8028ebe <__swbuf_r+0x32>
 8028eac:	4621      	mov	r1, r4
 8028eae:	4628      	mov	r0, r5
 8028eb0:	f000 f82a 	bl	8028f08 <__swsetup_r>
 8028eb4:	b118      	cbz	r0, 8028ebe <__swbuf_r+0x32>
 8028eb6:	f04f 37ff 	mov.w	r7, #4294967295
 8028eba:	4638      	mov	r0, r7
 8028ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028ebe:	6823      	ldr	r3, [r4, #0]
 8028ec0:	6922      	ldr	r2, [r4, #16]
 8028ec2:	1a98      	subs	r0, r3, r2
 8028ec4:	6963      	ldr	r3, [r4, #20]
 8028ec6:	b2f6      	uxtb	r6, r6
 8028ec8:	4283      	cmp	r3, r0
 8028eca:	4637      	mov	r7, r6
 8028ecc:	dc05      	bgt.n	8028eda <__swbuf_r+0x4e>
 8028ece:	4621      	mov	r1, r4
 8028ed0:	4628      	mov	r0, r5
 8028ed2:	f7ff f9df 	bl	8028294 <_fflush_r>
 8028ed6:	2800      	cmp	r0, #0
 8028ed8:	d1ed      	bne.n	8028eb6 <__swbuf_r+0x2a>
 8028eda:	68a3      	ldr	r3, [r4, #8]
 8028edc:	3b01      	subs	r3, #1
 8028ede:	60a3      	str	r3, [r4, #8]
 8028ee0:	6823      	ldr	r3, [r4, #0]
 8028ee2:	1c5a      	adds	r2, r3, #1
 8028ee4:	6022      	str	r2, [r4, #0]
 8028ee6:	701e      	strb	r6, [r3, #0]
 8028ee8:	6962      	ldr	r2, [r4, #20]
 8028eea:	1c43      	adds	r3, r0, #1
 8028eec:	429a      	cmp	r2, r3
 8028eee:	d004      	beq.n	8028efa <__swbuf_r+0x6e>
 8028ef0:	89a3      	ldrh	r3, [r4, #12]
 8028ef2:	07db      	lsls	r3, r3, #31
 8028ef4:	d5e1      	bpl.n	8028eba <__swbuf_r+0x2e>
 8028ef6:	2e0a      	cmp	r6, #10
 8028ef8:	d1df      	bne.n	8028eba <__swbuf_r+0x2e>
 8028efa:	4621      	mov	r1, r4
 8028efc:	4628      	mov	r0, r5
 8028efe:	f7ff f9c9 	bl	8028294 <_fflush_r>
 8028f02:	2800      	cmp	r0, #0
 8028f04:	d0d9      	beq.n	8028eba <__swbuf_r+0x2e>
 8028f06:	e7d6      	b.n	8028eb6 <__swbuf_r+0x2a>

08028f08 <__swsetup_r>:
 8028f08:	b538      	push	{r3, r4, r5, lr}
 8028f0a:	4b29      	ldr	r3, [pc, #164]	@ (8028fb0 <__swsetup_r+0xa8>)
 8028f0c:	4605      	mov	r5, r0
 8028f0e:	6818      	ldr	r0, [r3, #0]
 8028f10:	460c      	mov	r4, r1
 8028f12:	b118      	cbz	r0, 8028f1c <__swsetup_r+0x14>
 8028f14:	6a03      	ldr	r3, [r0, #32]
 8028f16:	b90b      	cbnz	r3, 8028f1c <__swsetup_r+0x14>
 8028f18:	f7fc f99a 	bl	8025250 <__sinit>
 8028f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028f20:	0719      	lsls	r1, r3, #28
 8028f22:	d422      	bmi.n	8028f6a <__swsetup_r+0x62>
 8028f24:	06da      	lsls	r2, r3, #27
 8028f26:	d407      	bmi.n	8028f38 <__swsetup_r+0x30>
 8028f28:	2209      	movs	r2, #9
 8028f2a:	602a      	str	r2, [r5, #0]
 8028f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028f30:	81a3      	strh	r3, [r4, #12]
 8028f32:	f04f 30ff 	mov.w	r0, #4294967295
 8028f36:	e033      	b.n	8028fa0 <__swsetup_r+0x98>
 8028f38:	0758      	lsls	r0, r3, #29
 8028f3a:	d512      	bpl.n	8028f62 <__swsetup_r+0x5a>
 8028f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028f3e:	b141      	cbz	r1, 8028f52 <__swsetup_r+0x4a>
 8028f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028f44:	4299      	cmp	r1, r3
 8028f46:	d002      	beq.n	8028f4e <__swsetup_r+0x46>
 8028f48:	4628      	mov	r0, r5
 8028f4a:	f7fd f947 	bl	80261dc <_free_r>
 8028f4e:	2300      	movs	r3, #0
 8028f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8028f52:	89a3      	ldrh	r3, [r4, #12]
 8028f54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8028f58:	81a3      	strh	r3, [r4, #12]
 8028f5a:	2300      	movs	r3, #0
 8028f5c:	6063      	str	r3, [r4, #4]
 8028f5e:	6923      	ldr	r3, [r4, #16]
 8028f60:	6023      	str	r3, [r4, #0]
 8028f62:	89a3      	ldrh	r3, [r4, #12]
 8028f64:	f043 0308 	orr.w	r3, r3, #8
 8028f68:	81a3      	strh	r3, [r4, #12]
 8028f6a:	6923      	ldr	r3, [r4, #16]
 8028f6c:	b94b      	cbnz	r3, 8028f82 <__swsetup_r+0x7a>
 8028f6e:	89a3      	ldrh	r3, [r4, #12]
 8028f70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8028f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8028f78:	d003      	beq.n	8028f82 <__swsetup_r+0x7a>
 8028f7a:	4621      	mov	r1, r4
 8028f7c:	4628      	mov	r0, r5
 8028f7e:	f000 f883 	bl	8029088 <__smakebuf_r>
 8028f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028f86:	f013 0201 	ands.w	r2, r3, #1
 8028f8a:	d00a      	beq.n	8028fa2 <__swsetup_r+0x9a>
 8028f8c:	2200      	movs	r2, #0
 8028f8e:	60a2      	str	r2, [r4, #8]
 8028f90:	6962      	ldr	r2, [r4, #20]
 8028f92:	4252      	negs	r2, r2
 8028f94:	61a2      	str	r2, [r4, #24]
 8028f96:	6922      	ldr	r2, [r4, #16]
 8028f98:	b942      	cbnz	r2, 8028fac <__swsetup_r+0xa4>
 8028f9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8028f9e:	d1c5      	bne.n	8028f2c <__swsetup_r+0x24>
 8028fa0:	bd38      	pop	{r3, r4, r5, pc}
 8028fa2:	0799      	lsls	r1, r3, #30
 8028fa4:	bf58      	it	pl
 8028fa6:	6962      	ldrpl	r2, [r4, #20]
 8028fa8:	60a2      	str	r2, [r4, #8]
 8028faa:	e7f4      	b.n	8028f96 <__swsetup_r+0x8e>
 8028fac:	2000      	movs	r0, #0
 8028fae:	e7f7      	b.n	8028fa0 <__swsetup_r+0x98>
 8028fb0:	240003a4 	.word	0x240003a4

08028fb4 <_raise_r>:
 8028fb4:	291f      	cmp	r1, #31
 8028fb6:	b538      	push	{r3, r4, r5, lr}
 8028fb8:	4605      	mov	r5, r0
 8028fba:	460c      	mov	r4, r1
 8028fbc:	d904      	bls.n	8028fc8 <_raise_r+0x14>
 8028fbe:	2316      	movs	r3, #22
 8028fc0:	6003      	str	r3, [r0, #0]
 8028fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8028fc6:	bd38      	pop	{r3, r4, r5, pc}
 8028fc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8028fca:	b112      	cbz	r2, 8028fd2 <_raise_r+0x1e>
 8028fcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028fd0:	b94b      	cbnz	r3, 8028fe6 <_raise_r+0x32>
 8028fd2:	4628      	mov	r0, r5
 8028fd4:	f000 f830 	bl	8029038 <_getpid_r>
 8028fd8:	4622      	mov	r2, r4
 8028fda:	4601      	mov	r1, r0
 8028fdc:	4628      	mov	r0, r5
 8028fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028fe2:	f000 b817 	b.w	8029014 <_kill_r>
 8028fe6:	2b01      	cmp	r3, #1
 8028fe8:	d00a      	beq.n	8029000 <_raise_r+0x4c>
 8028fea:	1c59      	adds	r1, r3, #1
 8028fec:	d103      	bne.n	8028ff6 <_raise_r+0x42>
 8028fee:	2316      	movs	r3, #22
 8028ff0:	6003      	str	r3, [r0, #0]
 8028ff2:	2001      	movs	r0, #1
 8028ff4:	e7e7      	b.n	8028fc6 <_raise_r+0x12>
 8028ff6:	2100      	movs	r1, #0
 8028ff8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8028ffc:	4620      	mov	r0, r4
 8028ffe:	4798      	blx	r3
 8029000:	2000      	movs	r0, #0
 8029002:	e7e0      	b.n	8028fc6 <_raise_r+0x12>

08029004 <raise>:
 8029004:	4b02      	ldr	r3, [pc, #8]	@ (8029010 <raise+0xc>)
 8029006:	4601      	mov	r1, r0
 8029008:	6818      	ldr	r0, [r3, #0]
 802900a:	f7ff bfd3 	b.w	8028fb4 <_raise_r>
 802900e:	bf00      	nop
 8029010:	240003a4 	.word	0x240003a4

08029014 <_kill_r>:
 8029014:	b538      	push	{r3, r4, r5, lr}
 8029016:	4d07      	ldr	r5, [pc, #28]	@ (8029034 <_kill_r+0x20>)
 8029018:	2300      	movs	r3, #0
 802901a:	4604      	mov	r4, r0
 802901c:	4608      	mov	r0, r1
 802901e:	4611      	mov	r1, r2
 8029020:	602b      	str	r3, [r5, #0]
 8029022:	f7e2 f8d9 	bl	800b1d8 <_kill>
 8029026:	1c43      	adds	r3, r0, #1
 8029028:	d102      	bne.n	8029030 <_kill_r+0x1c>
 802902a:	682b      	ldr	r3, [r5, #0]
 802902c:	b103      	cbz	r3, 8029030 <_kill_r+0x1c>
 802902e:	6023      	str	r3, [r4, #0]
 8029030:	bd38      	pop	{r3, r4, r5, pc}
 8029032:	bf00      	nop
 8029034:	2402aca4 	.word	0x2402aca4

08029038 <_getpid_r>:
 8029038:	f7e2 b8c6 	b.w	800b1c8 <_getpid>

0802903c <__swhatbuf_r>:
 802903c:	b570      	push	{r4, r5, r6, lr}
 802903e:	460c      	mov	r4, r1
 8029040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029044:	2900      	cmp	r1, #0
 8029046:	b096      	sub	sp, #88	@ 0x58
 8029048:	4615      	mov	r5, r2
 802904a:	461e      	mov	r6, r3
 802904c:	da0d      	bge.n	802906a <__swhatbuf_r+0x2e>
 802904e:	89a3      	ldrh	r3, [r4, #12]
 8029050:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8029054:	f04f 0100 	mov.w	r1, #0
 8029058:	bf14      	ite	ne
 802905a:	2340      	movne	r3, #64	@ 0x40
 802905c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8029060:	2000      	movs	r0, #0
 8029062:	6031      	str	r1, [r6, #0]
 8029064:	602b      	str	r3, [r5, #0]
 8029066:	b016      	add	sp, #88	@ 0x58
 8029068:	bd70      	pop	{r4, r5, r6, pc}
 802906a:	466a      	mov	r2, sp
 802906c:	f000 f848 	bl	8029100 <_fstat_r>
 8029070:	2800      	cmp	r0, #0
 8029072:	dbec      	blt.n	802904e <__swhatbuf_r+0x12>
 8029074:	9901      	ldr	r1, [sp, #4]
 8029076:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802907a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802907e:	4259      	negs	r1, r3
 8029080:	4159      	adcs	r1, r3
 8029082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8029086:	e7eb      	b.n	8029060 <__swhatbuf_r+0x24>

08029088 <__smakebuf_r>:
 8029088:	898b      	ldrh	r3, [r1, #12]
 802908a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802908c:	079d      	lsls	r5, r3, #30
 802908e:	4606      	mov	r6, r0
 8029090:	460c      	mov	r4, r1
 8029092:	d507      	bpl.n	80290a4 <__smakebuf_r+0x1c>
 8029094:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8029098:	6023      	str	r3, [r4, #0]
 802909a:	6123      	str	r3, [r4, #16]
 802909c:	2301      	movs	r3, #1
 802909e:	6163      	str	r3, [r4, #20]
 80290a0:	b003      	add	sp, #12
 80290a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80290a4:	ab01      	add	r3, sp, #4
 80290a6:	466a      	mov	r2, sp
 80290a8:	f7ff ffc8 	bl	802903c <__swhatbuf_r>
 80290ac:	9f00      	ldr	r7, [sp, #0]
 80290ae:	4605      	mov	r5, r0
 80290b0:	4639      	mov	r1, r7
 80290b2:	4630      	mov	r0, r6
 80290b4:	f7fd f906 	bl	80262c4 <_malloc_r>
 80290b8:	b948      	cbnz	r0, 80290ce <__smakebuf_r+0x46>
 80290ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80290be:	059a      	lsls	r2, r3, #22
 80290c0:	d4ee      	bmi.n	80290a0 <__smakebuf_r+0x18>
 80290c2:	f023 0303 	bic.w	r3, r3, #3
 80290c6:	f043 0302 	orr.w	r3, r3, #2
 80290ca:	81a3      	strh	r3, [r4, #12]
 80290cc:	e7e2      	b.n	8029094 <__smakebuf_r+0xc>
 80290ce:	89a3      	ldrh	r3, [r4, #12]
 80290d0:	6020      	str	r0, [r4, #0]
 80290d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80290d6:	81a3      	strh	r3, [r4, #12]
 80290d8:	9b01      	ldr	r3, [sp, #4]
 80290da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80290de:	b15b      	cbz	r3, 80290f8 <__smakebuf_r+0x70>
 80290e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80290e4:	4630      	mov	r0, r6
 80290e6:	f000 f81d 	bl	8029124 <_isatty_r>
 80290ea:	b128      	cbz	r0, 80290f8 <__smakebuf_r+0x70>
 80290ec:	89a3      	ldrh	r3, [r4, #12]
 80290ee:	f023 0303 	bic.w	r3, r3, #3
 80290f2:	f043 0301 	orr.w	r3, r3, #1
 80290f6:	81a3      	strh	r3, [r4, #12]
 80290f8:	89a3      	ldrh	r3, [r4, #12]
 80290fa:	431d      	orrs	r5, r3
 80290fc:	81a5      	strh	r5, [r4, #12]
 80290fe:	e7cf      	b.n	80290a0 <__smakebuf_r+0x18>

08029100 <_fstat_r>:
 8029100:	b538      	push	{r3, r4, r5, lr}
 8029102:	4d07      	ldr	r5, [pc, #28]	@ (8029120 <_fstat_r+0x20>)
 8029104:	2300      	movs	r3, #0
 8029106:	4604      	mov	r4, r0
 8029108:	4608      	mov	r0, r1
 802910a:	4611      	mov	r1, r2
 802910c:	602b      	str	r3, [r5, #0]
 802910e:	f7e2 f8c3 	bl	800b298 <_fstat>
 8029112:	1c43      	adds	r3, r0, #1
 8029114:	d102      	bne.n	802911c <_fstat_r+0x1c>
 8029116:	682b      	ldr	r3, [r5, #0]
 8029118:	b103      	cbz	r3, 802911c <_fstat_r+0x1c>
 802911a:	6023      	str	r3, [r4, #0]
 802911c:	bd38      	pop	{r3, r4, r5, pc}
 802911e:	bf00      	nop
 8029120:	2402aca4 	.word	0x2402aca4

08029124 <_isatty_r>:
 8029124:	b538      	push	{r3, r4, r5, lr}
 8029126:	4d06      	ldr	r5, [pc, #24]	@ (8029140 <_isatty_r+0x1c>)
 8029128:	2300      	movs	r3, #0
 802912a:	4604      	mov	r4, r0
 802912c:	4608      	mov	r0, r1
 802912e:	602b      	str	r3, [r5, #0]
 8029130:	f7e2 f8c2 	bl	800b2b8 <_isatty>
 8029134:	1c43      	adds	r3, r0, #1
 8029136:	d102      	bne.n	802913e <_isatty_r+0x1a>
 8029138:	682b      	ldr	r3, [r5, #0]
 802913a:	b103      	cbz	r3, 802913e <_isatty_r+0x1a>
 802913c:	6023      	str	r3, [r4, #0]
 802913e:	bd38      	pop	{r3, r4, r5, pc}
 8029140:	2402aca4 	.word	0x2402aca4

08029144 <sqrtf>:
 8029144:	b508      	push	{r3, lr}
 8029146:	ed2d 8b02 	vpush	{d8}
 802914a:	eeb0 8a40 	vmov.f32	s16, s0
 802914e:	f000 f9c4 	bl	80294da <__ieee754_sqrtf>
 8029152:	eeb4 8a48 	vcmp.f32	s16, s16
 8029156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802915a:	d60c      	bvs.n	8029176 <sqrtf+0x32>
 802915c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802917c <sqrtf+0x38>
 8029160:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8029164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029168:	d505      	bpl.n	8029176 <sqrtf+0x32>
 802916a:	f7fc fa0d 	bl	8025588 <__errno>
 802916e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8029172:	2321      	movs	r3, #33	@ 0x21
 8029174:	6003      	str	r3, [r0, #0]
 8029176:	ecbd 8b02 	vpop	{d8}
 802917a:	bd08      	pop	{r3, pc}
 802917c:	00000000 	.word	0x00000000

08029180 <sinf_poly>:
 8029180:	07cb      	lsls	r3, r1, #31
 8029182:	d412      	bmi.n	80291aa <sinf_poly+0x2a>
 8029184:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029188:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802918c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029190:	eea6 7b01 	vfma.f64	d7, d6, d1
 8029194:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029198:	ee21 1b05 	vmul.f64	d1, d1, d5
 802919c:	eea6 0b05 	vfma.f64	d0, d6, d5
 80291a0:	eea7 0b01 	vfma.f64	d0, d7, d1
 80291a4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80291a8:	4770      	bx	lr
 80291aa:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80291ae:	ee21 5b01 	vmul.f64	d5, d1, d1
 80291b2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80291b6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80291ba:	eea1 7b06 	vfma.f64	d7, d1, d6
 80291be:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80291c2:	eea1 0b06 	vfma.f64	d0, d1, d6
 80291c6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80291ca:	ee21 1b05 	vmul.f64	d1, d1, d5
 80291ce:	eea5 0b06 	vfma.f64	d0, d5, d6
 80291d2:	e7e5      	b.n	80291a0 <sinf_poly+0x20>
 80291d4:	0000      	movs	r0, r0
	...

080291d8 <sinf>:
 80291d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80291da:	ee10 4a10 	vmov	r4, s0
 80291de:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80291e2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80291e6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80291ea:	eef0 7a40 	vmov.f32	s15, s0
 80291ee:	d218      	bcs.n	8029222 <sinf+0x4a>
 80291f0:	ee26 1b06 	vmul.f64	d1, d6, d6
 80291f4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80291f8:	d20a      	bcs.n	8029210 <sinf+0x38>
 80291fa:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80291fe:	d103      	bne.n	8029208 <sinf+0x30>
 8029200:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8029204:	ed8d 1a01 	vstr	s2, [sp, #4]
 8029208:	eeb0 0a67 	vmov.f32	s0, s15
 802920c:	b003      	add	sp, #12
 802920e:	bd30      	pop	{r4, r5, pc}
 8029210:	483b      	ldr	r0, [pc, #236]	@ (8029300 <sinf+0x128>)
 8029212:	eeb0 0b46 	vmov.f64	d0, d6
 8029216:	2100      	movs	r1, #0
 8029218:	b003      	add	sp, #12
 802921a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802921e:	f7ff bfaf 	b.w	8029180 <sinf_poly>
 8029222:	f240 422e 	movw	r2, #1070	@ 0x42e
 8029226:	4293      	cmp	r3, r2
 8029228:	d824      	bhi.n	8029274 <sinf+0x9c>
 802922a:	4b35      	ldr	r3, [pc, #212]	@ (8029300 <sinf+0x128>)
 802922c:	ed93 7b08 	vldr	d7, [r3, #32]
 8029230:	ee26 7b07 	vmul.f64	d7, d6, d7
 8029234:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8029238:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802923c:	ee17 1a90 	vmov	r1, s15
 8029240:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8029244:	1609      	asrs	r1, r1, #24
 8029246:	ee07 1a90 	vmov	s15, r1
 802924a:	f001 0203 	and.w	r2, r1, #3
 802924e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029252:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8029256:	ed92 0b00 	vldr	d0, [r2]
 802925a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802925e:	f011 0f02 	tst.w	r1, #2
 8029262:	eea5 6b47 	vfms.f64	d6, d5, d7
 8029266:	bf08      	it	eq
 8029268:	4618      	moveq	r0, r3
 802926a:	ee26 1b06 	vmul.f64	d1, d6, d6
 802926e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8029272:	e7d1      	b.n	8029218 <sinf+0x40>
 8029274:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8029278:	d237      	bcs.n	80292ea <sinf+0x112>
 802927a:	4922      	ldr	r1, [pc, #136]	@ (8029304 <sinf+0x12c>)
 802927c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8029280:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029284:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8029288:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802928c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8029290:	6a10      	ldr	r0, [r2, #32]
 8029292:	6912      	ldr	r2, [r2, #16]
 8029294:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8029298:	40ab      	lsls	r3, r5
 802929a:	fba0 5003 	umull	r5, r0, r0, r3
 802929e:	4359      	muls	r1, r3
 80292a0:	fbe3 0102 	umlal	r0, r1, r3, r2
 80292a4:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80292a8:	0f9d      	lsrs	r5, r3, #30
 80292aa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80292ae:	1ac9      	subs	r1, r1, r3
 80292b0:	f7d7 fa14 	bl	80006dc <__aeabi_l2d>
 80292b4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80292b8:	4b11      	ldr	r3, [pc, #68]	@ (8029300 <sinf+0x128>)
 80292ba:	f004 0203 	and.w	r2, r4, #3
 80292be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80292c2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80292f8 <sinf+0x120>
 80292c6:	ed92 0b00 	vldr	d0, [r2]
 80292ca:	ec41 0b17 	vmov	d7, r0, r1
 80292ce:	f014 0f02 	tst.w	r4, #2
 80292d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80292d6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80292da:	4629      	mov	r1, r5
 80292dc:	bf08      	it	eq
 80292de:	4618      	moveq	r0, r3
 80292e0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80292e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80292e8:	e796      	b.n	8029218 <sinf+0x40>
 80292ea:	b003      	add	sp, #12
 80292ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80292f0:	f000 b8e4 	b.w	80294bc <__math_invalidf>
 80292f4:	f3af 8000 	nop.w
 80292f8:	54442d18 	.word	0x54442d18
 80292fc:	3c1921fb 	.word	0x3c1921fb
 8029300:	0802c598 	.word	0x0802c598
 8029304:	0802c538 	.word	0x0802c538

08029308 <sinf_poly>:
 8029308:	07cb      	lsls	r3, r1, #31
 802930a:	d412      	bmi.n	8029332 <sinf_poly+0x2a>
 802930c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029310:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8029314:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029318:	eea6 7b01 	vfma.f64	d7, d6, d1
 802931c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029320:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029324:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029328:	eea7 0b01 	vfma.f64	d0, d7, d1
 802932c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029330:	4770      	bx	lr
 8029332:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8029336:	ee21 5b01 	vmul.f64	d5, d1, d1
 802933a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802933e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8029342:	eea1 7b06 	vfma.f64	d7, d1, d6
 8029346:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802934a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802934e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8029352:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029356:	eea5 0b06 	vfma.f64	d0, d5, d6
 802935a:	e7e5      	b.n	8029328 <sinf_poly+0x20>
 802935c:	0000      	movs	r0, r0
	...

08029360 <cosf>:
 8029360:	b538      	push	{r3, r4, r5, lr}
 8029362:	ee10 4a10 	vmov	r4, s0
 8029366:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802936a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802936e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8029372:	d21f      	bcs.n	80293b4 <cosf+0x54>
 8029374:	ee27 7b07 	vmul.f64	d7, d7, d7
 8029378:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802937c:	f0c0 8082 	bcc.w	8029484 <cosf+0x124>
 8029380:	ee27 4b07 	vmul.f64	d4, d7, d7
 8029384:	4b44      	ldr	r3, [pc, #272]	@ (8029498 <cosf+0x138>)
 8029386:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 802938a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 802938e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8029392:	eea7 6b05 	vfma.f64	d6, d7, d5
 8029396:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 802939a:	eea7 0b05 	vfma.f64	d0, d7, d5
 802939e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80293a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80293a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80293aa:	eea6 0b07 	vfma.f64	d0, d6, d7
 80293ae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80293b2:	bd38      	pop	{r3, r4, r5, pc}
 80293b4:	f240 422e 	movw	r2, #1070	@ 0x42e
 80293b8:	4293      	cmp	r3, r2
 80293ba:	d829      	bhi.n	8029410 <cosf+0xb0>
 80293bc:	4b36      	ldr	r3, [pc, #216]	@ (8029498 <cosf+0x138>)
 80293be:	ed93 6b08 	vldr	d6, [r3, #32]
 80293c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80293c6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80293ca:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80293ce:	ee16 1a90 	vmov	r1, s13
 80293d2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80293d6:	1609      	asrs	r1, r1, #24
 80293d8:	ee06 1a90 	vmov	s13, r1
 80293dc:	f001 0203 	and.w	r2, r1, #3
 80293e0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80293e4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80293e8:	ed92 0b00 	vldr	d0, [r2]
 80293ec:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80293f0:	f011 0f02 	tst.w	r1, #2
 80293f4:	f081 0101 	eor.w	r1, r1, #1
 80293f8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80293fc:	bf08      	it	eq
 80293fe:	4618      	moveq	r0, r3
 8029400:	ee27 1b07 	vmul.f64	d1, d7, d7
 8029404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029408:	ee20 0b07 	vmul.f64	d0, d0, d7
 802940c:	f7ff bf7c 	b.w	8029308 <sinf_poly>
 8029410:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8029414:	d232      	bcs.n	802947c <cosf+0x11c>
 8029416:	4921      	ldr	r1, [pc, #132]	@ (802949c <cosf+0x13c>)
 8029418:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802941c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029420:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8029424:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029428:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802942c:	6a10      	ldr	r0, [r2, #32]
 802942e:	6912      	ldr	r2, [r2, #16]
 8029430:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8029434:	40ab      	lsls	r3, r5
 8029436:	fba0 5003 	umull	r5, r0, r0, r3
 802943a:	4359      	muls	r1, r3
 802943c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029440:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8029444:	0f9d      	lsrs	r5, r3, #30
 8029446:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802944a:	1ac9      	subs	r1, r1, r3
 802944c:	f7d7 f946 	bl	80006dc <__aeabi_l2d>
 8029450:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8029454:	4b10      	ldr	r3, [pc, #64]	@ (8029498 <cosf+0x138>)
 8029456:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8029490 <cosf+0x130>
 802945a:	ec41 0b17 	vmov	d7, r0, r1
 802945e:	f004 0203 	and.w	r2, r4, #3
 8029462:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029466:	ed92 0b00 	vldr	d0, [r2]
 802946a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802946e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029472:	f014 0f02 	tst.w	r4, #2
 8029476:	f085 0101 	eor.w	r1, r5, #1
 802947a:	e7bf      	b.n	80293fc <cosf+0x9c>
 802947c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029480:	f000 b81c 	b.w	80294bc <__math_invalidf>
 8029484:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8029488:	e793      	b.n	80293b2 <cosf+0x52>
 802948a:	bf00      	nop
 802948c:	f3af 8000 	nop.w
 8029490:	54442d18 	.word	0x54442d18
 8029494:	3c1921fb 	.word	0x3c1921fb
 8029498:	0802c598 	.word	0x0802c598
 802949c:	0802c538 	.word	0x0802c538

080294a0 <with_errnof>:
 80294a0:	b510      	push	{r4, lr}
 80294a2:	ed2d 8b02 	vpush	{d8}
 80294a6:	eeb0 8a40 	vmov.f32	s16, s0
 80294aa:	4604      	mov	r4, r0
 80294ac:	f7fc f86c 	bl	8025588 <__errno>
 80294b0:	eeb0 0a48 	vmov.f32	s0, s16
 80294b4:	ecbd 8b02 	vpop	{d8}
 80294b8:	6004      	str	r4, [r0, #0]
 80294ba:	bd10      	pop	{r4, pc}

080294bc <__math_invalidf>:
 80294bc:	eef0 7a40 	vmov.f32	s15, s0
 80294c0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80294c4:	eef4 7a67 	vcmp.f32	s15, s15
 80294c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80294cc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80294d0:	d602      	bvs.n	80294d8 <__math_invalidf+0x1c>
 80294d2:	2021      	movs	r0, #33	@ 0x21
 80294d4:	f7ff bfe4 	b.w	80294a0 <with_errnof>
 80294d8:	4770      	bx	lr

080294da <__ieee754_sqrtf>:
 80294da:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80294de:	4770      	bx	lr

080294e0 <roundf>:
 80294e0:	ee10 0a10 	vmov	r0, s0
 80294e4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80294e8:	3a7f      	subs	r2, #127	@ 0x7f
 80294ea:	2a16      	cmp	r2, #22
 80294ec:	dc15      	bgt.n	802951a <roundf+0x3a>
 80294ee:	2a00      	cmp	r2, #0
 80294f0:	da08      	bge.n	8029504 <roundf+0x24>
 80294f2:	3201      	adds	r2, #1
 80294f4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80294f8:	d101      	bne.n	80294fe <roundf+0x1e>
 80294fa:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 80294fe:	ee00 3a10 	vmov	s0, r3
 8029502:	4770      	bx	lr
 8029504:	4907      	ldr	r1, [pc, #28]	@ (8029524 <roundf+0x44>)
 8029506:	4111      	asrs	r1, r2
 8029508:	4201      	tst	r1, r0
 802950a:	d0fa      	beq.n	8029502 <roundf+0x22>
 802950c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8029510:	4113      	asrs	r3, r2
 8029512:	4403      	add	r3, r0
 8029514:	ea23 0301 	bic.w	r3, r3, r1
 8029518:	e7f1      	b.n	80294fe <roundf+0x1e>
 802951a:	2a80      	cmp	r2, #128	@ 0x80
 802951c:	d1f1      	bne.n	8029502 <roundf+0x22>
 802951e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8029522:	4770      	bx	lr
 8029524:	007fffff 	.word	0x007fffff

08029528 <_init>:
 8029528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802952a:	bf00      	nop
 802952c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802952e:	bc08      	pop	{r3}
 8029530:	469e      	mov	lr, r3
 8029532:	4770      	bx	lr

08029534 <_fini>:
 8029534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029536:	bf00      	nop
 8029538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802953a:	bc08      	pop	{r3}
 802953c:	469e      	mov	lr, r3
 802953e:	4770      	bx	lr
